{"version":3,"file":"js/602.babylonBundle.js","mappings":"+QAmBO,MAAMA,EAAb,cACI,KAAAC,YAAcC,MACVC,EACAC,KAGA,MAAMC,EAAQ,IAAI,IAAMF,GAEnBG,QAAQC,IAAI,CACb,8BACA,kHACDC,MAAMC,IACLC,QAAQC,IAAIF,GACZJ,EAAMO,WAAWC,KAAK,CAClBC,cAAc,EACdC,SAAS,EACTC,WAAYC,SAASC,eAAe,eAAYC,GAClD,IAIN,MAAMC,EAAS,IAAI,IACf,kBACA,EACAC,KAAKC,GAAK,EACV,GACA,IAAI,IAAQ,EAAG,EAAG,GAClBjB,GAIJe,EAAOG,UAAU,YAGjBH,EAAOI,cAAcpB,GAAQ,GAa7B,MAAMqB,GAAS,QACX,SACA,CAAEC,SAAU,EAAGC,SAAU,IACzBtB,GAIJoB,EAAOG,SAASC,EAAI,EAGpB,MAAMC,GAAS,QACX,SACA,CAAEC,MAAO,EAAGC,OAAQ,GACpB3B,GAIE4B,EAAiB,IAAI,IAAiB,kBAAmB5B,GAC/D4B,EAAeC,eAAiB,IAAI,IAAQ,IAAiB7B,GAE7DyB,EAAOK,SAAWF,EAClBH,EAAOM,gBAAiB,EAExB,MAAMC,EAAQ,IAAI,IACd,QACA,IAAI,IAAQ,GAAI,EAAG,GACnBhC,GAEJgC,EAAMC,UAAY,GAClBD,EAAMT,SAASC,EAAI,GAEnB,MAAMU,EAAkB,IAAI,IAAgB,IAAKF,GAOjD,OANAE,EAAgBC,6BAA8B,EAC9CD,EAAgBE,UAAY,EAC5BF,EAAgBG,YAAY,IAE5BH,EAAgBI,eAAgBC,WAAYC,KAAKpB,GAE1CpB,CAAK,CAEpB,EAEA,YAAmBL,C,kCC5GnB,QAAe,IAA0B,sC","sources":["webpack://pro-racer/./src/scenes/defaultWithTexture.ts","webpack://pro-racer/./assets/grass.jpg"],"sourcesContent":["import { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { CreateSphere } from \"@babylonjs/core/Meshes/Builders/sphereBuilder\";\nimport { CreateGround } from \"@babylonjs/core/Meshes/Builders/groundBuilder\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { CreateSceneClass } from \"../createScene\";\n\n// If you don't need the standard material you will still need to import it since the scene requires it.\n// import \"@babylonjs/core/Materials/standardMaterial\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\n\nimport grassTextureUrl from \"../../assets/grass.jpg\";\nimport { DirectionalLight } from \"@babylonjs/core/Lights/directionalLight\";\nimport { ShadowGenerator } from \"@babylonjs/core/Lights/Shadows/shadowGenerator\";\n\nimport \"@babylonjs/core/Lights/Shadows/shadowGeneratorSceneComponent\";\n\nexport class DefaultSceneWithTexture implements CreateSceneClass {\n    createScene = async (\n        engine: Engine,\n        canvas: HTMLCanvasElement\n    ): Promise<Scene> => {\n        // This creates a basic Babylon Scene object (non-mesh)\n        const scene = new Scene(engine);\n\n        void Promise.all([\n            import(\"@babylonjs/core/Debug/debugLayer\"),\n            import(\"@babylonjs/inspector\"),\n        ]).then((_values) => {\n            console.log(_values);\n            scene.debugLayer.show({\n                handleResize: true,\n                overlay: true,\n                globalRoot: document.getElementById(\"#root\") || undefined,\n            });\n        });\n\n        // This creates and positions a free camera (non-mesh)\n        const camera = new ArcRotateCamera(\n            \"my first camera\",\n            0,\n            Math.PI / 3,\n            10,\n            new Vector3(0, 0, 0),\n            scene\n        );\n\n        // This targets the camera to scene origin\n        camera.setTarget(Vector3.Zero());\n\n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, true);\n\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        // const light = new HemisphericLight(\n        //     \"light\",\n        //     new Vector3(0, 1, 0),\n        //     scene\n        // );\n\n        // // Default intensity is 1. Let's dim the light a small amount\n        // light.intensity = 0.7;\n\n        // Our built-in 'sphere' shape.\n        const sphere = CreateSphere(\n            \"sphere\",\n            { diameter: 2, segments: 32 },\n            scene\n        );\n\n        // Move the sphere upward 1/2 its height\n        sphere.position.y = 1;\n\n        // Our built-in 'ground' shape.\n        const ground = CreateGround(\n            \"ground\",\n            { width: 6, height: 6 },\n            scene\n        );\n\n        // Load a texture to be used as the ground material\n        const groundMaterial = new StandardMaterial(\"ground material\", scene);\n        groundMaterial.diffuseTexture = new Texture(grassTextureUrl, scene);\n\n        ground.material = groundMaterial;\n        ground.receiveShadows = true;\n\n        const light = new DirectionalLight(\n            \"light\",\n            new Vector3(0, -1, 1),\n            scene\n        );\n        light.intensity = 0.5;\n        light.position.y = 10;\n\n        const shadowGenerator = new ShadowGenerator(512, light)\n        shadowGenerator.useBlurExponentialShadowMap = true;\n        shadowGenerator.blurScale = 2;\n        shadowGenerator.setDarkness(0.2);\n\n        shadowGenerator.getShadowMap()!.renderList!.push(sphere);\n\n        return scene;\n    };\n}\n\nexport default new DefaultSceneWithTexture();\n","export default __webpack_public_path__ + \"9b31293ea96c8dfa518b45622da82a13.jpg\";"],"names":["DefaultSceneWithTexture","createScene","async","engine","canvas","scene","Promise","all","then","_values","console","log","debugLayer","show","handleResize","overlay","globalRoot","document","getElementById","undefined","camera","Math","PI","setTarget","attachControl","sphere","diameter","segments","position","y","ground","width","height","groundMaterial","diffuseTexture","material","receiveShadows","light","intensity","shadowGenerator","useBlurExponentialShadowMap","blurScale","setDarkness","getShadowMap","renderList","push"],"sourceRoot":""}