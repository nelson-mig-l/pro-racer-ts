"use strict";(self.webpackChunkpro_racer=self.webpackChunkpro_racer||[]).push([[403],{8403:(e,r,t)=>{t.r(r),t.d(r,{Controls:()=>s});var i=t(7417);const c=new Map([["acceleration",!1],["braking",!1],["right",!1],["left",!1]]),a=new Map([["KeyW","acceleration"],["KeyS","braking"],["KeyA","left"],["KeyD","right"]]);class s{constructor(e){this.car=e,window.addEventListener("keydown",this.keydown),window.addEventListener("keyup",this.keyup)}update(){if(this.car.vehicleReady){const e=this.car.vehicle.getCurrentSpeedKmHour();let r,t,a,s;this.car.breakingForce=0,this.car.engineForce=0,c.get("acceleration")?e<-1?this.car.breakingForce=this.car.maxBreakingForce:this.car.engineForce=this.car.maxEngineForce:c.get("braking")&&(e>1?this.car.breakingForce=this.car.maxBreakingForce:this.car.engineForce=-this.car.maxEngineForce),c.get("right")?this.car.vehicleSteering<this.car.steeringClamp&&(this.car.vehicleSteering+=this.car.steeringIncrement):c.get("left")?this.car.vehicleSteering>-this.car.steeringClamp&&(this.car.vehicleSteering-=this.car.steeringIncrement):this.car.vehicleSteering=0,this.car.vehicle.applyEngineForce(this.car.engineForce,this.car.FRONT_LEFT),this.car.vehicle.applyEngineForce(this.car.engineForce,this.car.FRONT_RIGHT),this.car.vehicle.setBrake(this.car.breakingForce/2,this.car.FRONT_LEFT),this.car.vehicle.setBrake(this.car.breakingForce/2,this.car.FRONT_RIGHT),this.car.vehicle.setBrake(this.car.breakingForce,this.car.BACK_LEFT),this.car.vehicle.setBrake(this.car.breakingForce,this.car.BACK_RIGHT),this.car.vehicle.setSteeringValue(this.car.vehicleSteering,this.car.FRONT_LEFT),this.car.vehicle.setSteeringValue(this.car.vehicleSteering,this.car.FRONT_RIGHT);const h=this.car.vehicle.getNumWheels();for(s=0;s<h;s++)this.car.vehicle.updateWheelTransform(s,!0),r=this.car.vehicle.getWheelTransformWS(s),t=r.getOrigin(),a=r.getRotation(),this.car.wheelMeshes[s].position.set(t.x(),t.y(),t.z()),this.car.wheelMeshes[s].rotationQuaternion?.set(a.x(),a.y(),a.z(),a.w()),this.car.wheelMeshes[s].rotate(i.RD.Z,Math.PI/2);r=this.car.vehicle.getChassisWorldTransform(),t=r.getOrigin(),a=r.getRotation(),this.car.chassisMesh.position.set(t.x(),t.y(),t.z()),this.car.chassisMesh.rotationQuaternion?.set(a.x(),a.y(),a.z(),a.w()),this.car.chassisMesh.rotate(i.RD.X,Math.PI)}}keyup(e){a.get(e.code)&&c.set(a.get(e.code)??"",!1)}keydown(e){a.get(e.code)&&c.set(a.get(e.code)??"",!0)}}}}]);
//# sourceMappingURL=403.babylonBundle.js.map