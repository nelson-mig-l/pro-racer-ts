{"version":3,"file":"js/568.babylonBundle.js","mappings":"8JAiKYA,E,gDAdZC,OAAOC,eAAe,cAAiB,aAAc,CACjDC,IAAK,WAID,OAHKC,KAAKC,cACND,KAAKC,YAAc,IAAIC,EAAWF,OAE/BA,KAAKC,WAChB,EACAE,YAAY,EACZC,cAAc,IAMlB,SAAYR,GAIR,+BAIA,qBAIA,+BAIA,qBAIA,0BACH,CArBD,CAAYA,IAAAA,EAAa,KA4BlB,MAAMM,EAoDTG,YAAYC,GAzCJ,KAAAC,aAAeP,KAAKQ,sBA0CxBR,KAAKS,OAASH,GAAgB,qBACzBN,KAAKS,QAGVT,KAAKS,OAAOC,oBAAoBC,KAAI,KAE5BX,KAAKS,OAAOR,aACZD,KAAKS,OAAOR,YAAYW,M,GAGpC,CA9CWC,kCACP,OAAIb,KAAKO,cAAgBP,KAAKO,aAAaO,UAChCd,KAAKO,aAAaO,UAAUC,6BAGlCf,KAAKgB,+BACNhB,KAAKgB,6BAA+B,IAAI,MAGrChB,KAAKgB,6BAChB,CAMWC,mCACP,OAAIjB,KAAKO,cAAgBP,KAAKO,aAAaO,UAChCd,KAAKO,aAAaO,UAAUI,6BAGlClB,KAAKmB,gCACNnB,KAAKmB,8BAAgC,IAAI,MAGtCnB,KAAKmB,8BAChB,CA0BQC,iBAAiBC,GACrB,GAAIrB,KAAKsB,YACL,OAGJ,GAAItB,KAAKgB,6BAA8B,CACnC,IAAK,MAAMO,KAAYvB,KAAKgB,6BAA8BQ,UACtDxB,KAAKO,aAAaO,UAAUC,4BAA4BJ,IAAIY,GAEhEvB,KAAKgB,6BAA6BS,QAClCzB,KAAKgB,kCAA+BU,C,CAGxC,GAAI1B,KAAKmB,8BAA+B,CACpC,IAAK,MAAMI,KAAYvB,KAAKmB,8BAA+BK,UACvDxB,KAAKO,aAAaO,UAAUa,6BAA6BhB,IAAIY,GAEjEvB,KAAKmB,8BAA8BM,QACnCzB,KAAKmB,mCAAgCO,C,CAGzC,MAAME,EAAiC,CACnCC,SAAS,EACTC,cAAc,EACdC,eAAe,EACfC,WAAW,EACXC,cAAc,EACdC,aAAa,KACVb,GAGPrB,KAAKO,aAAeP,KAAKO,cAAgBP,KAAKQ,sBAE9CR,KAAKO,aAAaO,UAAUqB,KAAKnC,KAAKS,OAAQmB,EAClD,CAOOQ,OAAOC,EAAaC,GACnBtC,KAAKO,eACD+B,IAC2D,mBAAvDzC,OAAO0C,UAAUC,SAASC,KAAKH,GAC/BtC,KAAKO,aAAaO,UAAU4B,sCAAsCJ,GAElEtC,KAAKO,aAAaO,UAAU6B,+CAA+CL,IAGnFtC,KAAKO,aAAaO,UAAUI,4BAA4B0B,gBAAgBP,GAEhF,CAGQ7B,sBAEJ,MAAyB,oBAAdqC,UACAA,UAIY,oBAAZC,cAAwD,IAAtBA,QAAQhC,UAC1CgC,aADX,CAKJ,CAMOxB,YACH,OAAOtB,KAAKO,cAAgBP,KAAKO,aAAaO,UAAUiC,SAC5D,CAKOnC,OACCZ,KAAKO,cACLP,KAAKO,aAAaO,UAAUkC,MAEpC,CAKOC,mBACCjD,KAAKO,cACLP,KAAKO,aAAaO,UAAUoC,aAAalD,KAAKS,OAEtD,CAOO0C,KAAK9B,GACR,OAAO,IAAI+B,SAASC,IAChB,QAAgC,IAArBrD,KAAKO,aAA6B,CACzC,MAAM+C,EAAejC,GAAUA,EAAOkC,aAAelC,EAAOkC,aAAerD,EAAWsD,aAGtF,gBAAiBF,GAAc,KAC3BtD,KAAKoB,iBAAiBC,GACtBgC,EAAQrD,KAAK,G,MAIjBA,KAAKoB,iBAAiBC,GACtBgC,EAAQrD,K,GAGpB,EAnLc,EAAAwD,aAAe,yCAAyC,yC","sources":["webpack://pro-racer/../lts/core/generated/Debug/debugLayer.ts"],"sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { IInspectable } from \"../Misc/iInspectable\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\n\r\n// declare INSPECTOR namespace for compilation issue\r\ndeclare let INSPECTOR: any;\r\ndeclare let BABYLON: any;\r\n// load the inspector using require, if not present in the global namespace.\r\n\r\n/**\r\n * Interface used to define scene explorer extensibility option\r\n */\r\nexport interface IExplorerExtensibilityOption {\r\n    /**\r\n     * Define the option label\r\n     */\r\n    label: string;\r\n    /**\r\n     * Defines the action to execute on click\r\n     */\r\n    action: (entity: any) => void;\r\n}\r\n\r\n/**\r\n * Defines a group of actions associated with a predicate to use when extending the Inspector scene explorer\r\n */\r\nexport interface IExplorerExtensibilityGroup {\r\n    /**\r\n     * Defines a predicate to test if a given type mut be extended\r\n     */\r\n    predicate: (entity: any) => boolean;\r\n    /**\r\n     * Gets the list of options added to a type\r\n     */\r\n    entries: IExplorerExtensibilityOption[];\r\n}\r\n\r\n/**\r\n * Defines a new node that will be displayed as top level node in the explorer\r\n */\r\nexport interface IExplorerAdditionalChild {\r\n    /**\r\n     * Gets the name of the additional node\r\n     */\r\n    name: string;\r\n    /**\r\n     * Function used to return the class name of the child node\r\n     */\r\n    getClassName(): string;\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/how_to/debug_layer#extensibility\r\n     */\r\n    inspectableCustomProperties: IInspectable[];\r\n}\r\n\r\n/**\r\n * Defines a new node that will be displayed as top level node in the explorer\r\n */\r\nexport interface IExplorerAdditionalNode {\r\n    /**\r\n     * Gets the name of the additional node\r\n     */\r\n    name: string;\r\n    /**\r\n     * Function used to return the list of child entries\r\n     */\r\n    getContent(): IExplorerAdditionalChild[];\r\n}\r\n\r\n/**\r\n * Interface used to define the options to use to create the Inspector\r\n */\r\nexport interface IInspectorOptions {\r\n    /**\r\n     * Display in overlay mode (default: false)\r\n     */\r\n    overlay?: boolean;\r\n    /**\r\n     * HTML element to use as root (the parent of the rendering canvas will be used as default value)\r\n     */\r\n    globalRoot?: HTMLElement;\r\n    /**\r\n     * Display the Scene explorer\r\n     */\r\n    showExplorer?: boolean;\r\n    /**\r\n     * Display the property inspector\r\n     */\r\n    showInspector?: boolean;\r\n    /**\r\n     * Display in embed mode (both panes on the right)\r\n     */\r\n    embedMode?: boolean;\r\n    /**\r\n     * let the Inspector handles resize of the canvas when panes are resized (default to true)\r\n     */\r\n    handleResize?: boolean;\r\n    /**\r\n     * Allow the panes to popup (default: true)\r\n     */\r\n    enablePopup?: boolean;\r\n    /**\r\n     * Allow the panes to be closed by users (default: true)\r\n     */\r\n    enableClose?: boolean;\r\n    /**\r\n     * Optional list of extensibility entries\r\n     */\r\n    explorerExtensibility?: IExplorerExtensibilityGroup[];\r\n    /**\r\n     * Optional list of additional top level nodes\r\n     */\r\n    additionalNodes?: IExplorerAdditionalNode[];\r\n    /**\r\n     * Optional URL to get the inspector script from (by default it uses the babylonjs CDN).\r\n     */\r\n    inspectorURL?: string;\r\n    /**\r\n     * Optional initial tab (default to DebugLayerTab.Properties)\r\n     */\r\n    initialTab?: DebugLayerTab;\r\n    /**\r\n     * Optional camera to use to render the gizmos from the inspector (default to the scene.activeCamera or the latest from scene.activeCameras)\r\n     */\r\n    gizmoCamera?: Camera;\r\n}\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * @internal\r\n         * Backing field\r\n         */\r\n        _debugLayer: DebugLayer;\r\n\r\n        /**\r\n         * Gets the debug layer (aka Inspector) associated with the scene\r\n         * @see https://doc.babylonjs.com/toolsAndResources/inspector\r\n         */\r\n        debugLayer: DebugLayer;\r\n    }\r\n}\r\nObject.defineProperty(Scene.prototype, \"debugLayer\", {\r\n    get: function (this: Scene) {\r\n        if (!this._debugLayer) {\r\n            this._debugLayer = new DebugLayer(this);\r\n        }\r\n        return this._debugLayer;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Enum of inspector action tab\r\n */\r\nexport enum DebugLayerTab {\r\n    /**\r\n     * Properties tag (default)\r\n     */\r\n    Properties = 0,\r\n    /**\r\n     * Debug tab\r\n     */\r\n    Debug = 1,\r\n    /**\r\n     * Statistics tab\r\n     */\r\n    Statistics = 2,\r\n    /**\r\n     * Tools tab\r\n     */\r\n    Tools = 3,\r\n    /**\r\n     * Settings tab\r\n     */\r\n    Settings = 4,\r\n}\r\n\r\n/**\r\n * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n * what is happening in your scene\r\n * @see https://doc.babylonjs.com/toolsAndResources/inspector\r\n */\r\nexport class DebugLayer {\r\n    /**\r\n     * Define the url to get the inspector script from.\r\n     * By default it uses the babylonjs CDN.\r\n     * @ignoreNaming\r\n     */\r\n    public static InspectorURL = `https://unpkg.com/babylonjs-inspector@${Engine.Version}/babylon.inspector.bundle.js`;\r\n\r\n    private _scene: Scene;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private BJSINSPECTOR = this._getGlobalInspector();\r\n\r\n    private _onPropertyChangedObservable?: Observable<{ object: any; property: string; value: any; initialValue: any }>;\r\n    /**\r\n     * Observable triggered when a property is changed through the inspector.\r\n     */\r\n    public get onPropertyChangedObservable() {\r\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\r\n            return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;\r\n        }\r\n\r\n        if (!this._onPropertyChangedObservable) {\r\n            this._onPropertyChangedObservable = new Observable<{ object: any; property: string; value: any; initialValue: any }>();\r\n        }\r\n\r\n        return this._onPropertyChangedObservable;\r\n    }\r\n\r\n    private _onSelectionChangedObservable?: Observable<any>;\r\n    /**\r\n     * Observable triggered when the selection is changed through the inspector.\r\n     */\r\n    public get onSelectionChangedObservable() {\r\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\r\n            return this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable;\r\n        }\r\n\r\n        if (!this._onSelectionChangedObservable) {\r\n            this._onSelectionChangedObservable = new Observable<any>();\r\n        }\r\n\r\n        return this._onSelectionChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new debug layer.\r\n     * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n     * what is happening in your scene\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector\r\n     * @param scene Defines the scene to inspect\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n        this._scene.onDisposeObservable.add(() => {\r\n            // Debug layer\r\n            if (this._scene._debugLayer) {\r\n                this._scene._debugLayer.hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates the inspector window.\r\n     * @param config\r\n     */\r\n    private _createInspector(config?: Partial<IInspectorOptions>) {\r\n        if (this.isVisible()) {\r\n            return;\r\n        }\r\n\r\n        if (this._onPropertyChangedObservable) {\r\n            for (const observer of this._onPropertyChangedObservable!.observers) {\r\n                this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);\r\n            }\r\n            this._onPropertyChangedObservable.clear();\r\n            this._onPropertyChangedObservable = undefined;\r\n        }\r\n\r\n        if (this._onSelectionChangedObservable) {\r\n            for (const observer of this._onSelectionChangedObservable!.observers) {\r\n                this.BJSINSPECTOR.Inspector.OnSelectionChangedObservable.add(observer);\r\n            }\r\n            this._onSelectionChangedObservable.clear();\r\n            this._onSelectionChangedObservable = undefined;\r\n        }\r\n\r\n        const userOptions: IInspectorOptions = {\r\n            overlay: false,\r\n            showExplorer: true,\r\n            showInspector: true,\r\n            embedMode: false,\r\n            handleResize: true,\r\n            enablePopup: true,\r\n            ...config,\r\n        };\r\n\r\n        this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();\r\n\r\n        this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);\r\n    }\r\n\r\n    /**\r\n     * Select a specific entity in the scene explorer and highlight a specific block in that entity property grid\r\n     * @param entity defines the entity to select\r\n     * @param lineContainerTitles defines the specific blocks to highlight (could be a string or an array of strings)\r\n     */\r\n    public select(entity: any, lineContainerTitles?: string | string[]) {\r\n        if (this.BJSINSPECTOR) {\r\n            if (lineContainerTitles) {\r\n                if (Object.prototype.toString.call(lineContainerTitles) == \"[object String]\") {\r\n                    this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);\r\n                } else {\r\n                    this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);\r\n                }\r\n            }\r\n            this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);\r\n        }\r\n    }\r\n\r\n    /** Get the inspector from bundle or global */\r\n    private _getGlobalInspector(): any {\r\n        // UMD Global name detection from Webpack Bundle UMD Name.\r\n        if (typeof INSPECTOR !== \"undefined\") {\r\n            return INSPECTOR;\r\n        }\r\n\r\n        // In case of module let s check the global emitted from the Inspector entry point.\r\n        if (typeof BABYLON !== \"undefined\" && typeof BABYLON.Inspector !== \"undefined\") {\r\n            return BABYLON;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get if the inspector is visible or not.\r\n     * @returns true if visible otherwise, false\r\n     */\r\n    public isVisible(): boolean {\r\n        return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;\r\n    }\r\n\r\n    /**\r\n     * Hide the inspector and close its window.\r\n     */\r\n    public hide() {\r\n        if (this.BJSINSPECTOR) {\r\n            this.BJSINSPECTOR.Inspector.Hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the scene in the inspector\r\n     */\r\n    public setAsActiveScene() {\r\n        if (this.BJSINSPECTOR) {\r\n            this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Launch the debugLayer.\r\n     * @param config Define the configuration of the inspector\r\n     * @returns a promise fulfilled when the debug layer is visible\r\n     */\r\n    public show(config?: IInspectorOptions): Promise<DebugLayer> {\r\n        return new Promise((resolve) => {\r\n            if (typeof this.BJSINSPECTOR == \"undefined\") {\r\n                const inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer.InspectorURL;\r\n\r\n                // Load inspector and add it to the DOM\r\n                Tools.LoadScript(inspectorUrl, () => {\r\n                    this._createInspector(config);\r\n                    resolve(this);\r\n                });\r\n            } else {\r\n                // Otherwise creates the inspector\r\n                this._createInspector(config);\r\n                resolve(this);\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"names":["DebugLayerTab","Object","defineProperty","get","this","_debugLayer","DebugLayer","enumerable","configurable","constructor","scene","BJSINSPECTOR","_getGlobalInspector","_scene","onDisposeObservable","add","hide","onPropertyChangedObservable","Inspector","OnPropertyChangedObservable","_onPropertyChangedObservable","onSelectionChangedObservable","OnSelectionChangeObservable","_onSelectionChangedObservable","_createInspector","config","isVisible","observer","observers","clear","undefined","OnSelectionChangedObservable","userOptions","overlay","showExplorer","showInspector","embedMode","handleResize","enablePopup","Show","select","entity","lineContainerTitles","prototype","toString","call","MarkLineContainerTitleForHighlighting","MarkMultipleLineContainerTitlesForHighlighting","notifyObservers","INSPECTOR","BABYLON","IsVisible","Hide","setAsActiveScene","_SetNewScene","show","Promise","resolve","inspectorUrl","inspectorURL","InspectorURL"],"sourceRoot":""}