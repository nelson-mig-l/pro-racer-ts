{"version":3,"file":"js/403.babylonBundle.js","mappings":"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","sources":["webpack://pro-racer/./src/scenes/controls.ts"],"sourcesContent":["import { Axis } from \"@babylonjs/core/Maths/math\";\r\nimport { Car } from \"./car\";\r\n\r\nconst actions = new Map<string, boolean>([\r\n    [\"acceleration\", false],\r\n    [\"braking\", false],\r\n    [\"right\", false],\r\n    [\"left\", false]\r\n]);\r\n\r\n// const keysActions = {\r\n//     \"KeyW\":'acceleration',\r\n//     \"KeyS\":'braking',\r\n//     \"KeyA\":'left',\r\n//     \"KeyD\":'right'\r\n// };\r\nconst keysActions = new Map<string, string>([\r\n    [\"KeyW\",'acceleration'],\r\n    [\"KeyS\",'braking'],\r\n    [\"KeyA\",'left'],\r\n    [\"KeyD\",'right']\r\n]);\r\n\r\nexport class Controls {\r\n\r\n    car: Car;\r\n\r\n    constructor(car: Car) {\r\n        this.car = car;\r\n        window.addEventListener( 'keydown', this.keydown);\r\n        window.addEventListener( 'keyup', this.keyup);\r\n    }\r\n\r\n    update() {\r\n        if(this.car.vehicleReady){\r\n                  \r\n            const speed = this.car.vehicle.getCurrentSpeedKmHour();\r\n            const maxSteerVal = 0.2;\r\n            this.car.breakingForce = 0;\r\n            this.car.engineForce = 0;\r\n\r\n            \r\n            if(actions.get(\"acceleration\")){\r\n                if (speed < -1){\r\n                    this.car.breakingForce = this.car.maxBreakingForce;\r\n                }else {\r\n                    this.car.engineForce = this.car.maxEngineForce;\r\n                }\r\n                    \r\n            } else if(actions.get(\"braking\")){\r\n                if (speed > 1){\r\n                    this.car.breakingForce = this.car.maxBreakingForce;\r\n                }else {\r\n                    this.car.engineForce = -this.car.maxEngineForce ;\r\n                }\r\n            } \r\n                    \r\n            if(actions.get(\"right\")){\r\n                if (this.car.vehicleSteering < this.car.steeringClamp){\r\n                    this.car.vehicleSteering += this.car.steeringIncrement;\r\n                }\r\n                    \r\n            } else if(actions.get(\"left\")){\r\n                if (this.car.vehicleSteering > -this.car.steeringClamp){\r\n                    this.car.vehicleSteering -= this.car.steeringIncrement;\r\n                }\r\n                    \r\n            } else {\r\n                this.car.vehicleSteering = 0;\r\n            }\r\n                    \r\n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_LEFT);\r\n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_RIGHT);\r\n                    \r\n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_LEFT);\r\n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_RIGHT);\r\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_LEFT);\r\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_RIGHT);\r\n                    \r\n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_LEFT);\r\n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_RIGHT);\r\n                    \r\n                    \r\n            let tm, p, q, i;\r\n            const n = this.car.vehicle.getNumWheels();\r\n            for (i = 0; i < n; i++) {\r\n                this.car.vehicle.updateWheelTransform(i, true);\r\n                tm = this.car.vehicle.getWheelTransformWS(i);\r\n                p = tm.getOrigin();\r\n                q = tm.getRotation();\r\n                this.car.wheelMeshes[i].position.set(p.x(), p.y(), p.z());\r\n                this.car.wheelMeshes[i].rotationQuaternion?.set(q.x(), q.y(), q.z(), q.w());\r\n                this.car.wheelMeshes[i].rotate(Axis.Z, Math.PI/2);\r\n            }\r\n\r\n            tm = this.car.vehicle.getChassisWorldTransform();\r\n            p = tm.getOrigin();\r\n            q = tm.getRotation();\r\n            this.car.chassisMesh.position.set(p.x(), p.y(), p.z());\r\n            this.car.chassisMesh.rotationQuaternion?.set(q.x(), q.y(), q.z(), q.w());\r\n            this.car.chassisMesh.rotate(Axis.X, Math.PI);\r\n                 \r\n        }\r\n    }\r\n\r\n    private keyup(e: KeyboardEvent) {\r\n        if(keysActions.get(e.code)) {\r\n            actions.set(keysActions.get(e.code)??\"\", false);\r\n            //e.preventDefault();\r\n            //e.stopPropagation();\r\n\r\n            //return false;\r\n        }\r\n    }\r\n\r\n    private keydown(e: KeyboardEvent) {\r\n        if(keysActions.get(e.code)) {\r\n            actions.set(keysActions.get(e.code)??\"\", true);\r\n            //e.preventDefault();\r\n            //e.stopPropagation();\r\n\r\n            //return false;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n"],"names":["actions","Map","keysActions","Controls","constructor","car","this","window","addEventListener","keydown","keyup","update","vehicleReady","speed","vehicle","getCurrentSpeedKmHour","tm","p","q","i","breakingForce","engineForce","get","maxBreakingForce","maxEngineForce","vehicleSteering","steeringClamp","steeringIncrement","applyEngineForce","FRONT_LEFT","FRONT_RIGHT","setBrake","BACK_LEFT","BACK_RIGHT","setSteeringValue","n","getNumWheels","updateWheelTransform","getWheelTransformWS","getOrigin","getRotation","wheelMeshes","position","set","x","y","z","rotationQuaternion","w","rotate","Math","PI","getChassisWorldTransform","chassisMesh","e","code"],"sourceRoot":""}