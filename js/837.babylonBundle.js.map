{"version":3,"file":"js/837.babylonBundle.js","mappings":"8RA+BO,MAAMA,EAAb,cACI,KAAAC,YAAcC,MACVC,EACAC,KAGA,MAAMC,EAAQ,IAAI,IAAMF,GAEnBG,QAAQC,IAAI,CACb,8BACA,yGACDC,MAAMC,IACLC,QAAQC,IAAIF,GACZJ,EAAMO,WAAWC,KAAK,CAClBC,cAAc,EACdC,SAAS,EACTC,WAAYC,SAASC,eAAe,eAAYC,GAClD,IAIN,MAAMC,EAAS,IAAI,IACf,kBACA,EACAC,KAAKC,GAAK,EACV,GACA,IAAI,IAAQ,EAAG,EAAG,GAClBjB,GAIJe,EAAOG,UAAU,YAGjBH,EAAOI,cAAcpB,GAAQ,GAa7B,MAAMqB,GAAS,QACX,SACA,CAAEC,SAAU,EAAGC,SAAU,IACzBtB,GAIJoB,EAAOG,SAASC,EAAI,EAGpB,qCCxFR,wjBDyFQ,uCEzFR,6gBF4FQ,MAAMC,EAAiB,IAAI,IACvB,UACAzB,EACA,CACI0B,OAAQ,UACRC,SAAU,WAEd,CACIC,WAAY,CAAC,WAAY,UACzBC,QAAS,GACTC,SAAU,GACVC,SAAU,CAAC,iBAAkB,QAAS,yBAI9CX,EAAOY,SAAWP,EAGlB,MAAMQ,GAAS,QAAa,SAAU,CAAEC,MAAO,EAAGC,OAAQ,GAAKnC,GAGzDoC,EAAiB,IAAI,IAAiB,kBAAmBpC,GAC/DoC,EAAeC,eAAiB,IAAI,IAAQC,EAAA,EAAiBtC,GAE7DiC,EAAOD,SAAWI,EAClBH,EAAOM,gBAAiB,EAExB,MAAMC,EAAQ,IAAI,IACd,QACA,IAAI,IAAQ,GAAI,EAAG,GACnBxC,GAEJwC,EAAMC,UAAY,GAClBD,EAAMjB,SAASC,EAAI,GAEnB,MAAMkB,EAAkB,IAAI,IAAgB,IAAKF,GAOjD,OANAE,EAAgBC,6BAA8B,EAC9CD,EAAgBE,UAAY,EAC5BF,EAAgBG,YAAY,IAE5BH,EAAgBI,eAAgBC,WAAYC,KAAK5B,GAE1CpB,CAAK,CAEpB,EAEA,YAAmBL,C,kCG1InB,QAAe,IAA0B,sC","sources":["webpack://pro-racer/./src/scenes/fresnelShader.ts","webpack://pro-racer/./src/glsl/fresnel/vertex.glsl","webpack://pro-racer/./src/glsl/fresnel/fragment.glsl","webpack://pro-racer/./assets/grass.jpg"],"sourcesContent":["/**\n * This file demonstrates how to create a simple scene with GLSL shaders\n * loaded from separate files.\n *\n * There are other ways to load shaders, see https://doc.babylonjs.com/advanced_topics/shaders/shaderCodeInBjs\n */\n\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { CreateSphere } from \"@babylonjs/core/Meshes/Builders/sphereBuilder\";\nimport { CreateGround } from \"@babylonjs/core/Meshes/Builders/groundBuilder\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { CreateSceneClass } from \"../createScene\";\n\n// If you don't need the standard material you will still need to import it since the scene requires it.\n// import \"@babylonjs/core/Materials/standardMaterial\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { Effect } from \"@babylonjs/core/Materials/effect\";\nimport { ShaderMaterial } from \"@babylonjs/core/Materials/shaderMaterial\";\n\nimport grassTextureUrl from \"../../assets/grass.jpg\";\nimport { DirectionalLight } from \"@babylonjs/core/Lights/directionalLight\";\nimport { ShadowGenerator } from \"@babylonjs/core/Lights/Shadows/shadowGenerator\";\n\nimport \"@babylonjs/core/Lights/Shadows/shadowGeneratorSceneComponent\";\n\nimport fresnelVertexShader from \"../glsl/fresnel/vertex.glsl\";\nimport fresnelFragmentShader from \"../glsl/fresnel/fragment.glsl\";\n\nexport class FresnelShaderScene implements CreateSceneClass {\n    createScene = async (\n        engine: Engine,\n        canvas: HTMLCanvasElement\n    ): Promise<Scene> => {\n        // This creates a basic Babylon Scene object (non-mesh)\n        const scene = new Scene(engine);\n\n        void Promise.all([\n            import(\"@babylonjs/core/Debug/debugLayer\"),\n            import(\"@babylonjs/inspector\"),\n        ]).then((_values) => {\n            console.log(_values);\n            scene.debugLayer.show({\n                handleResize: true,\n                overlay: true,\n                globalRoot: document.getElementById(\"#root\") || undefined,\n            });\n        });\n\n        // This creates and positions a free camera (non-mesh)\n        const camera = new ArcRotateCamera(\n            \"my first camera\",\n            0,\n            Math.PI / 3,\n            10,\n            new Vector3(0, 0, 0),\n            scene\n        );\n\n        // This targets the camera to scene origin\n        camera.setTarget(Vector3.Zero());\n\n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, true);\n\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        // const light = new HemisphericLight(\n        //     \"light\",\n        //     new Vector3(0, 1, 0),\n        //     scene\n        // );\n\n        // // Default intensity is 1. Let's dim the light a small amount\n        // light.intensity = 0.7;\n\n        // Our built-in 'sphere' shape.\n        const sphere = CreateSphere(\n            \"sphere\",\n            { diameter: 2, segments: 32 },\n            scene\n        );\n\n        // Move the sphere upward 1/2 its height\n        sphere.position.y = 1;\n\n        // Add shaders to the store\n        Effect.ShadersStore[\"fresnelVertexShader\"] = fresnelVertexShader;\n        Effect.ShadersStore[\"fresnelFragmentShader\"] = fresnelFragmentShader;\n\n        // Create shader material to use with the sphere\n        const shaderMaterial = new ShaderMaterial(\n            \"fresnel\",\n            scene,\n            {\n                vertex: \"fresnel\",\n                fragment: \"fresnel\",\n            },\n            {\n                attributes: [\"position\", \"normal\"],\n                defines: [],\n                samplers: [],\n                uniforms: [\"cameraPosition\", \"world\", \"worldViewProjection\"],\n            }\n        );\n\n        sphere.material = shaderMaterial;\n\n        // Our built-in 'ground' shape.\n        const ground = CreateGround(\"ground\", { width: 6, height: 6 }, scene);\n\n        // Load a texture to be used as the ground material\n        const groundMaterial = new StandardMaterial(\"ground material\", scene);\n        groundMaterial.diffuseTexture = new Texture(grassTextureUrl, scene);\n\n        ground.material = groundMaterial;\n        ground.receiveShadows = true;\n\n        const light = new DirectionalLight(\n            \"light\",\n            new Vector3(0, -1, 1),\n            scene\n        );\n        light.intensity = 0.5;\n        light.position.y = 10;\n\n        const shadowGenerator = new ShadowGenerator(512, light);\n        shadowGenerator.useBlurExponentialShadowMap = true;\n        shadowGenerator.blurScale = 2;\n        shadowGenerator.setDarkness(0.2);\n\n        shadowGenerator.getShadowMap()!.renderList!.push(sphere);\n\n        return scene;\n    };\n}\n\nexport default new FresnelShaderScene();\n","export default \"/**\\n * Shader sample code based on \\\"Fresnel\\\" template at https://cyos.babylonjs.com\\n */\\n\\nprecision highp float;\\n\\n// Attributes\\nattribute vec3 position;\\nattribute vec3 normal;\\n\\n// Uniforms\\nuniform mat4 world;\\nuniform mat4 worldViewProjection;\\n\\n// Varying\\nvarying vec3 vPositionW;\\nvarying vec3 vNormalW;\\n\\nvoid main(void) {\\n    vec4 outPosition = worldViewProjection * vec4(position, 1.0);\\n    gl_Position = outPosition;\\n    \\n    vPositionW = vec3(world * vec4(position, 1.0));\\n    vNormalW = normalize(vec3(world * vec4(normal, 0.0)));\\n}\\n    \"","export default \"/**\\n * Shader sample code based on \\\"Fresnel\\\" template at https://cyos.babylonjs.com\\n */\\n\\nprecision highp float;\\n\\n// Lights\\nvarying vec3 vPositionW;\\nvarying vec3 vNormalW;\\n\\n// Refs\\nuniform vec3 cameraPosition;\\n\\nvoid main(void) {\\n    vec3 color = vec3(1., 1., 1.);\\n    vec3 viewDirectionW = normalize(cameraPosition - vPositionW);\\n\\n    // Fresnel\\n\\tfloat fresnelTerm = dot(viewDirectionW, vNormalW);\\n\\tfresnelTerm = clamp(1.0 - fresnelTerm, 0., 1.);\\n\\n    gl_FragColor = vec4(color * fresnelTerm, 1.);\\n}\"","export default __webpack_public_path__ + \"9b31293ea96c8dfa518b45622da82a13.jpg\";"],"names":["FresnelShaderScene","createScene","async","engine","canvas","scene","Promise","all","then","_values","console","log","debugLayer","show","handleResize","overlay","globalRoot","document","getElementById","undefined","camera","Math","PI","setTarget","attachControl","sphere","diameter","segments","position","y","shaderMaterial","vertex","fragment","attributes","defines","samplers","uniforms","material","ground","width","height","groundMaterial","diffuseTexture","grass","receiveShadows","light","intensity","shadowGenerator","useBlurExponentialShadowMap","blurScale","setDarkness","getShadowMap","renderList","push"],"sourceRoot":""}