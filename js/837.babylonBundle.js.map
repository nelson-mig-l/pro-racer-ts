{"version":3,"file":"js/837.babylonBundle.js","mappings":"8RA+BO,MAAMA,EAAb,cACI,KAAAC,YAAcC,MACVC,EACAC,KAGA,MAAMC,EAAQ,IAAI,IAAMF,GAEnBG,QAAQC,IAAI,CACb,8BACA,yGACDC,MAAMC,IACLC,QAAQC,IAAIF,GACZJ,EAAMO,WAAWC,KAAK,CAClBC,cAAc,EACdC,SAAS,EACTC,WAAYC,SAASC,eAAe,eAAYC,GAClD,IAIN,MAAMC,EAAS,IAAI,IACf,kBACA,EACAC,KAAKC,GAAK,EACV,GACA,IAAI,IAAQ,EAAG,EAAG,GAClBjB,GAIJe,EAAOG,UAAU,YAGjBH,EAAOI,cAAcpB,GAAQ,GAa7B,MAAMqB,GAAS,QACX,SACA,CAAEC,SAAU,EAAGC,SAAU,IACzBtB,GAIJoB,EAAOG,SAASC,EAAI,EAGpB,qCCxFR,0mBDyFQ,uCEzFR,yjBF4FQ,MAAMC,EAAiB,IAAI,IACvB,UACAzB,EACA,CACI0B,OAAQ,UACRC,SAAU,WAEd,CACIC,WAAY,CAAC,WAAY,UACzBC,QAAS,GACTC,SAAU,GACVC,SAAU,CAAC,iBAAkB,QAAS,yBAI9CX,EAAOY,SAAWP,EAGlB,MAAMQ,GAAS,QAAa,SAAU,CAAEC,MAAO,EAAGC,OAAQ,GAAKnC,GAGzDoC,EAAiB,IAAI,IAAiB,kBAAmBpC,GAC/DoC,EAAeC,eAAiB,IAAI,IAAQC,EAAA,EAAiBtC,GAE7DiC,EAAOD,SAAWI,EAClBH,EAAOM,gBAAiB,EAExB,MAAMC,EAAQ,IAAI,IACd,QACA,IAAI,IAAQ,GAAI,EAAG,GACnBxC,GAEJwC,EAAMC,UAAY,GAClBD,EAAMjB,SAASC,EAAI,GAEnB,MAAMkB,EAAkB,IAAI,IAAgB,IAAKF,GAOjD,OANAE,EAAgBC,6BAA8B,EAC9CD,EAAgBE,UAAY,EAC5BF,EAAgBG,YAAY,IAE5BH,EAAgBI,eAAgBC,WAAYC,KAAK5B,GAE1CpB,CAAK,CAEpB,EAEA,YAAmBL,C,kCG1InB,QAAe,IAA0B,sC","sources":["webpack://pro-racer/./src/scenes/fresnelShader.ts","webpack://pro-racer/./src/glsl/fresnel/vertex.glsl","webpack://pro-racer/./src/glsl/fresnel/fragment.glsl","webpack://pro-racer/./assets/grass.jpg"],"sourcesContent":["/**\r\n * This file demonstrates how to create a simple scene with GLSL shaders\r\n * loaded from separate files.\r\n *\r\n * There are other ways to load shaders, see https://doc.babylonjs.com/advanced_topics/shaders/shaderCodeInBjs\r\n */\r\n\r\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { CreateSphere } from \"@babylonjs/core/Meshes/Builders/sphereBuilder\";\r\nimport { CreateGround } from \"@babylonjs/core/Meshes/Builders/groundBuilder\";\r\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { CreateSceneClass } from \"../createScene\";\r\n\r\n// If you don't need the standard material you will still need to import it since the scene requires it.\r\n// import \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { Effect } from \"@babylonjs/core/Materials/effect\";\r\nimport { ShaderMaterial } from \"@babylonjs/core/Materials/shaderMaterial\";\r\n\r\nimport grassTextureUrl from \"../../assets/grass.jpg\";\r\nimport { DirectionalLight } from \"@babylonjs/core/Lights/directionalLight\";\r\nimport { ShadowGenerator } from \"@babylonjs/core/Lights/Shadows/shadowGenerator\";\r\n\r\nimport \"@babylonjs/core/Lights/Shadows/shadowGeneratorSceneComponent\";\r\n\r\nimport fresnelVertexShader from \"../glsl/fresnel/vertex.glsl\";\r\nimport fresnelFragmentShader from \"../glsl/fresnel/fragment.glsl\";\r\n\r\nexport class FresnelShaderScene implements CreateSceneClass {\r\n    createScene = async (\r\n        engine: Engine,\r\n        canvas: HTMLCanvasElement\r\n    ): Promise<Scene> => {\r\n        // This creates a basic Babylon Scene object (non-mesh)\r\n        const scene = new Scene(engine);\r\n\r\n        void Promise.all([\r\n            import(\"@babylonjs/core/Debug/debugLayer\"),\r\n            import(\"@babylonjs/inspector\"),\r\n        ]).then((_values) => {\r\n            console.log(_values);\r\n            scene.debugLayer.show({\r\n                handleResize: true,\r\n                overlay: true,\r\n                globalRoot: document.getElementById(\"#root\") || undefined,\r\n            });\r\n        });\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        const camera = new ArcRotateCamera(\r\n            \"my first camera\",\r\n            0,\r\n            Math.PI / 3,\r\n            10,\r\n            new Vector3(0, 0, 0),\r\n            scene\r\n        );\r\n\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(Vector3.Zero());\r\n\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, true);\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        // const light = new HemisphericLight(\r\n        //     \"light\",\r\n        //     new Vector3(0, 1, 0),\r\n        //     scene\r\n        // );\r\n\r\n        // // Default intensity is 1. Let's dim the light a small amount\r\n        // light.intensity = 0.7;\r\n\r\n        // Our built-in 'sphere' shape.\r\n        const sphere = CreateSphere(\r\n            \"sphere\",\r\n            { diameter: 2, segments: 32 },\r\n            scene\r\n        );\r\n\r\n        // Move the sphere upward 1/2 its height\r\n        sphere.position.y = 1;\r\n\r\n        // Add shaders to the store\r\n        Effect.ShadersStore[\"fresnelVertexShader\"] = fresnelVertexShader;\r\n        Effect.ShadersStore[\"fresnelFragmentShader\"] = fresnelFragmentShader;\r\n\r\n        // Create shader material to use with the sphere\r\n        const shaderMaterial = new ShaderMaterial(\r\n            \"fresnel\",\r\n            scene,\r\n            {\r\n                vertex: \"fresnel\",\r\n                fragment: \"fresnel\",\r\n            },\r\n            {\r\n                attributes: [\"position\", \"normal\"],\r\n                defines: [],\r\n                samplers: [],\r\n                uniforms: [\"cameraPosition\", \"world\", \"worldViewProjection\"],\r\n            }\r\n        );\r\n\r\n        sphere.material = shaderMaterial;\r\n\r\n        // Our built-in 'ground' shape.\r\n        const ground = CreateGround(\"ground\", { width: 6, height: 6 }, scene);\r\n\r\n        // Load a texture to be used as the ground material\r\n        const groundMaterial = new StandardMaterial(\"ground material\", scene);\r\n        groundMaterial.diffuseTexture = new Texture(grassTextureUrl, scene);\r\n\r\n        ground.material = groundMaterial;\r\n        ground.receiveShadows = true;\r\n\r\n        const light = new DirectionalLight(\r\n            \"light\",\r\n            new Vector3(0, -1, 1),\r\n            scene\r\n        );\r\n        light.intensity = 0.5;\r\n        light.position.y = 10;\r\n\r\n        const shadowGenerator = new ShadowGenerator(512, light);\r\n        shadowGenerator.useBlurExponentialShadowMap = true;\r\n        shadowGenerator.blurScale = 2;\r\n        shadowGenerator.setDarkness(0.2);\r\n\r\n        shadowGenerator.getShadowMap()!.renderList!.push(sphere);\r\n\r\n        return scene;\r\n    };\r\n}\r\n\r\nexport default new FresnelShaderScene();\r\n","export default \"/**\\r\\n * Shader sample code based on \\\"Fresnel\\\" template at https://cyos.babylonjs.com\\r\\n */\\r\\n\\r\\nprecision highp float;\\r\\n\\r\\n// Attributes\\r\\nattribute vec3 position;\\r\\nattribute vec3 normal;\\r\\n\\r\\n// Uniforms\\r\\nuniform mat4 world;\\r\\nuniform mat4 worldViewProjection;\\r\\n\\r\\n// Varying\\r\\nvarying vec3 vPositionW;\\r\\nvarying vec3 vNormalW;\\r\\n\\r\\nvoid main(void) {\\r\\n    vec4 outPosition = worldViewProjection * vec4(position, 1.0);\\r\\n    gl_Position = outPosition;\\r\\n    \\r\\n    vPositionW = vec3(world * vec4(position, 1.0));\\r\\n    vNormalW = normalize(vec3(world * vec4(normal, 0.0)));\\r\\n}\\r\\n    \"","export default \"/**\\r\\n * Shader sample code based on \\\"Fresnel\\\" template at https://cyos.babylonjs.com\\r\\n */\\r\\n\\r\\nprecision highp float;\\r\\n\\r\\n// Lights\\r\\nvarying vec3 vPositionW;\\r\\nvarying vec3 vNormalW;\\r\\n\\r\\n// Refs\\r\\nuniform vec3 cameraPosition;\\r\\n\\r\\nvoid main(void) {\\r\\n    vec3 color = vec3(1., 1., 1.);\\r\\n    vec3 viewDirectionW = normalize(cameraPosition - vPositionW);\\r\\n\\r\\n    // Fresnel\\r\\n\\tfloat fresnelTerm = dot(viewDirectionW, vNormalW);\\r\\n\\tfresnelTerm = clamp(1.0 - fresnelTerm, 0., 1.);\\r\\n\\r\\n    gl_FragColor = vec4(color * fresnelTerm, 1.);\\r\\n}\"","export default __webpack_public_path__ + \"9b31293ea96c8dfa518b45622da82a13.jpg\";"],"names":["FresnelShaderScene","createScene","async","engine","canvas","scene","Promise","all","then","_values","console","log","debugLayer","show","handleResize","overlay","globalRoot","document","getElementById","undefined","camera","Math","PI","setTarget","attachControl","sphere","diameter","segments","position","y","shaderMaterial","vertex","fragment","attributes","defines","samplers","uniforms","material","ground","width","height","groundMaterial","diffuseTexture","grass","receiveShadows","light","intensity","shadowGenerator","useBlurExponentialShadowMap","blurScale","setDarkness","getShadowMap","renderList","push"],"sourceRoot":""}