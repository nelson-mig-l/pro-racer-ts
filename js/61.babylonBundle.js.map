{"version":3,"file":"js/61.babylonBundle.js","mappings":"qHAWO,MAAeA,EAAtB,cAKW,KAAAC,YAAsB,GAGtB,KAAAC,QAAU,IAAIC,MAKd,KAAAC,aAAc,CAgHzB,CAxCsBC,yBACd,IAAK,MAAMC,KAAKN,EAAsBO,SAClC,GAAIC,OAAOC,UAAUC,eAAeC,KAAKX,EAAsBO,SAAUD,GACrE,OAAO,EAGf,OAAO,CACX,CAKkBM,6BACd,IAAK,MAAMN,KAAKN,EAAsBO,SAClC,GAAIC,OAAOC,UAAUC,eAAeC,KAAKX,EAAsBO,SAAUD,GAAI,CACzE,MAAMO,EAASC,SAASR,GACxB,GAAIO,GAAU,MAAU,EACpB,OAAO,C,CAInB,OAAO,CACX,CAOOE,0BAA0BC,GAC7B,IAAK,MAAMV,KAAKN,EAAsBO,SAClC,GAAIC,OAAOC,UAAUC,eAAeC,KAAKX,EAAsBO,SAAUD,IACtDQ,SAASR,KACTU,EACX,OAAO,EAInB,OAAO,CACX,EA1Hc,EAAAT,SAAsC,CAAC,C,kCCclD,MAAMU,EAUTC,YAEWC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,GAVA,KAAAL,OAAAA,EAEA,KAAAC,SAAAA,EAEA,KAAAC,SAAAA,EAEA,KAAAC,iBAAAA,EAEA,KAAAC,YAAAA,EAEA,KAAAC,eAAAA,CACR,CASIT,iBAAiBI,EAAsBM,EAAWD,GACrD,MAAME,EAAQP,EAAOQ,WACrB,OAAO,IAAIV,EAAYE,EAAQO,EAAMN,SAAUM,EAAML,SAAUK,EAAMJ,kBAAoBH,EAAQM,EAAKD,EAC1G,CAUOT,2BAA2BI,EAAgBO,EAAcD,EAAWD,GACvE,OAAO,IAAIP,EAAYE,EAAQO,EAAMN,SAAUM,EAAML,SAAUK,EAAMJ,iBAAkBG,EAAKD,EAChG,CAQOT,0BAA0BW,EAAcD,GAC3C,OAAO,IAAIR,EAAY,KAAMS,EAAMN,SAAUM,EAAML,SAAUK,EAAMJ,iBAAkBG,EACzF,CAUOV,8BAA8Ba,EAAWC,EAAqBJ,EAAaD,GAC9E,OAAO,IAAIP,EAAYW,EAAMC,EAAWC,EAAGD,EAAWE,EAAG,KAAMN,EAAKD,EACxE,E,6JClEG,MAAMQ,UAAe,EAAAC,EAgZxBf,YAAYgB,EAAcC,EAAmBT,EAAeU,GAA+B,GACvFC,MAAMH,EAAMR,GA/TT,KAAAY,UAAY,WAcT,KAAAC,UAAY,SA2Cd,KAAAC,WAA+B,KAmB/B,KAAAC,YAAgC,KAmBhC,KAAAC,aAAiC,KAmBjC,KAAAC,UAA8B,KAmB/B,KAAAC,IAAM,GAQN,KAAAC,oBAAsB,EAQtB,KAAAC,KAAO,EAQP,KAAAC,KAAO,IAOP,KAAAC,QAAU,GAKT,KAAAC,MAAQjB,EAAOkB,mBAmBhB,KAAAC,gBAAiB,EAMjB,KAAAC,SAAW,IAAI,IAAS,EAAG,EAAG,EAAK,GAOnC,KAAAC,UAAoB,UAMpB,KAAAC,QAAkBtB,EAAOuB,uBAQzB,KAAAC,cAAgBxB,EAAOyB,cAqBvB,KAAAC,oBAAsB,IAAIvD,MAM1B,KAAAwD,mBAAoD,KAKpD,KAAAC,8BAAgC,IAAI,KAIpC,KAAAC,oCAAsC,IAAI,KAI1C,KAAAC,6BAA+B,IAAI,KAInC,KAAAC,yBAA2B,IAAI,KAK/B,KAAAC,aAAuB,EAgBvB,KAAAC,YAAc,IAAI9D,MAIf,KAAA+D,iBAAmB,gBAEtB,KAAAC,gBAAiB,EAGjB,KAAAC,kBAAoB,IAAI,KAGxB,KAAAC,eAAiB,IAAIlE,MAGrB,KAAAmE,cAAgB,IAAI,IAAyB,KAE1C,KAAAC,gBAAkB,WAGrB,KAAAC,oBAAsB,gBACrB,KAAAC,+BAAgC,EAChC,KAAAC,iBAAmB,YAEnB,KAAAC,uBAAwB,EAGxB,KAAAC,kBAAgC,gBAsExB,KAAAC,WAAY,EA+mBrB,KAAAC,eAAgB,EAShB,KAAAC,gBAAiB,EAhrBpBC,KAAKrD,WAAWsD,UAAUD,MAEtB5C,IAAiC4C,KAAKrD,WAAWuD,eACjDF,KAAKrD,WAAWuD,aAAeF,MAGnCA,KAAK7C,SAAWA,EAChB6C,KAAKG,aAAeH,KAAKrD,WAAWyD,YAAYC,mBAAmB,UAAUnD,IACjF,CApUWC,eACP,OAAO6C,KAAK1C,SAChB,CAEWH,aAASmD,GAChBN,KAAK1C,UAAYgD,CACrB,CASWC,aAASC,GAChBR,KAAKzC,UAAYiD,CACrB,CAEWD,eACP,OAAOP,KAAKzC,SAChB,CAKWkD,iB,YACP,IAAI3D,EAAI,EACJC,EAAI,EACR,GAAIiD,KAAKU,OAAS1D,EAAOkB,mBACjB8B,KAAK1B,UAAYtB,EAAOuB,wBACxBxB,EAAgB,EAAZiD,KAAKlC,KAAW6C,KAAKC,IAAIZ,KAAKpC,IAAM,GACxCd,EAAIkD,KAAKI,YAAYS,eAAeb,MAAQjD,IAE5CD,EAAgB,EAAZkD,KAAKlC,KAAW6C,KAAKC,IAAIZ,KAAKpC,IAAM,GACxCb,EAAID,EAAIkD,KAAKI,YAAYS,eAAeb,WAEzC,CACH,MAAMc,EAAYd,KAAKI,YAAYW,iBAAmB,EAChDC,EAAahB,KAAKI,YAAYa,kBAAoB,EAExDnE,GAAoB,QAAf,EAAAkD,KAAKkB,kBAAU,QAAIJ,IAA4B,QAAd,EAAAd,KAAKmB,iBAAS,SAAKL,GACzD/D,GAAkB,QAAb,EAAAiD,KAAKoB,gBAAQ,QAAIJ,IAA+B,QAAhB,EAAAhB,KAAKqB,mBAAW,SAAKL,E,CAG9D,OAAOlE,EAAIC,CACf,CAQWoE,cAAUG,GACjBtB,KAAKxC,WAAa8D,EAElB,IAAK,MAAMC,KAAavB,KAAKf,YACzBsC,EAAUJ,UAAYG,CAE9B,CAGWH,gBACP,OAAOnB,KAAKxC,UAChB,CAQW0D,eAAWI,GAClBtB,KAAKvC,YAAc6D,EAEnB,IAAK,MAAMC,KAAavB,KAAKf,YACzBsC,EAAUL,WAAaI,CAE/B,CAGWJ,iBACP,OAAOlB,KAAKvC,WAChB,CAQW4D,gBAAYC,GACnBtB,KAAKtC,aAAe4D,EAEpB,IAAK,MAAMC,KAAavB,KAAKf,YACzBsC,EAAUF,YAAcC,CAEhC,CAGWD,kBACP,OAAOrB,KAAKtC,YAChB,CAQW0D,aAASE,GAChBtB,KAAKrC,UAAY2D,EAEjB,IAAK,MAAMC,KAAavB,KAAKf,YACzBsC,EAAUH,SAAWE,CAE7B,CAGWF,eACP,OAAOpB,KAAKrC,SAChB,CA2CI+C,SAAKA,GACLV,KAAK/B,MAAQyC,EAGb,IAAK,MAAMa,KAAavB,KAAKf,YACzBsC,EAAUb,KAAOA,CAEzB,CAGIA,WACA,OAAOV,KAAK/B,KAChB,CAyJOuD,aAIH,OAHAxB,KAAKyB,cAAe,EACpBzB,KAAK0B,WAAa1B,KAAKpC,IAEhBoC,IACX,CAKU2B,sBACN,QAAK3B,KAAKyB,eAIVzB,KAAKpC,IAAMoC,KAAK0B,YAET,EACX,CAMOE,eACH,QAAI5B,KAAK2B,wBACL3B,KAAKjB,yBAAyB8C,gBAAgB7B,OACvC,EAIf,CAMO8B,eACH,MAAO,QACX,CAUOC,SAASC,GACZ,IAAIC,EAAM,SAAWjC,KAAK9C,KAE1B,GADA+E,GAAO,WAAajC,KAAK8B,eACrB9B,KAAKkC,WACL,IAAK,IAAIC,EAAI,EAAGA,EAAInC,KAAKkC,WAAWE,OAAQD,IACxCF,GAAO,mBAAqBjC,KAAKkC,WAAWC,GAAGJ,SAASC,GAGhE,OAAOC,CACX,CAKOI,0BACH,MAAMC,EAAMtC,KAAKuC,iBAAiBC,gBAElCxC,KAAKnC,oBAAsBmC,KAAKyC,OAAOC,sBAAwBJ,EAAIxF,EAAIwF,EAAIxF,CAC/E,CAKW6F,qBACP,OAAO3C,KAAKT,eAChB,CAMOqD,kBACH,OAAO5C,KAAKV,aAChB,CAOOuD,aAAaC,GAChB,OAA6C,IAAtC9C,KAAKV,cAAcyD,QAAQD,EACtC,CAOOE,QAAQC,GAAgB,GAC3B,GAAIA,EACA,IAAK,MAAMC,KAAMlD,KAAKX,eAClB,GAAI6D,IAAOA,EAAGF,UACV,OAAO,EAInB,OAAO3F,MAAM2F,QAAQC,EACzB,CAGOE,aACH9F,MAAM8F,aAENnD,KAAKoD,OAAOjG,SAAW,IAAI,IAAQkG,OAAOC,UAAWD,OAAOC,UAAWD,OAAOC,WAC9EtD,KAAKoD,OAAO7C,SAAW,IAAI,IAAQ8C,OAAOC,UAAWD,OAAOC,UAAWD,OAAOC,WAE9EtD,KAAKoD,OAAO1C,UAAO6C,EACnBvD,KAAKoD,OAAOtF,UAAOyF,EACnBvD,KAAKoD,OAAOrF,UAAOwF,EAEnBvD,KAAKoD,OAAOxF,SAAM2F,EAClBvD,KAAKoD,OAAO9E,aAAUiF,EACtBvD,KAAKoD,OAAOI,iBAAcD,EAE1BvD,KAAKoD,OAAOjC,eAAYoC,EACxBvD,KAAKoD,OAAOlC,gBAAaqC,EACzBvD,KAAKoD,OAAO/B,iBAAckC,EAC1BvD,KAAKoD,OAAOhC,cAAWmC,EACvBvD,KAAKoD,OAAOK,iBAAcF,EAC1BvD,KAAKoD,OAAOM,kBAAeH,CAC/B,CAKOI,aAAaC,GACXA,GACDvG,MAAMsG,eAGV3D,KAAKoD,OAAOjG,SAAS0G,SAAS7D,KAAK7C,UACnC6C,KAAKoD,OAAO7C,SAASsD,SAAS7D,KAAKO,SACvC,CAGOuD,kBACH,OAAO9D,KAAK+D,6BAA+B/D,KAAKgE,iCACpD,CAGOD,4BACH,QAAK1G,MAAMyG,mBAIJ9D,KAAKoD,OAAOjG,SAAS8G,OAAOjE,KAAK7C,WAAa6C,KAAKoD,OAAO7C,SAAS0D,OAAOjE,KAAKO,WAAaP,KAAKkE,0BAC5G,CAGOF,kCACH,IAAIG,EAAQnE,KAAKoD,OAAO1C,OAASV,KAAKU,MAAQV,KAAKoD,OAAOtF,OAASkC,KAAKlC,MAAQkC,KAAKoD,OAAOrF,OAASiC,KAAKjC,KAE1G,IAAKoG,EACD,OAAO,EAGX,MAAMC,EAASpE,KAAKI,YAkBpB,OAfI+D,EADAnE,KAAKU,OAAS1D,EAAOkB,mBAEjB8B,KAAKoD,OAAOxF,MAAQoC,KAAKpC,KACzBoC,KAAKoD,OAAO9E,UAAY0B,KAAK1B,SAC7B0B,KAAKoD,OAAOI,cAAgBY,EAAOvD,eAAeb,OAClDA,KAAKoD,OAAOvF,sBAAwBmC,KAAKnC,oBAGzCmC,KAAKoD,OAAOjC,YAAcnB,KAAKmB,WAC/BnB,KAAKoD,OAAOlC,aAAelB,KAAKkB,YAChClB,KAAKoD,OAAO/B,cAAgBrB,KAAKqB,aACjCrB,KAAKoD,OAAOhC,WAAapB,KAAKoB,UAC9BpB,KAAKoD,OAAOK,cAAgBW,EAAOrD,kBACnCf,KAAKoD,OAAOM,eAAiBU,EAAOnD,kBAGrCkD,CACX,CAoBOE,cAAcC,EAAgBC,GAAoC,CAgBlEC,cAAcF,GAAuB,CAKrCG,SACHzE,KAAK0E,eACD1E,KAAKxB,gBAAkBxB,EAAOyB,eAC9BuB,KAAK2E,mBAEb,CAGOD,eACH1E,KAAKlB,6BAA6B+C,gBAAgB7B,KACtD,CAGW4E,iBACP,OAAO5E,KAAKf,WAChB,CAKW4F,qBACP,OAAO7E,KAAK8E,eAChB,CAMOC,uBACH,IAAK,IAAIC,EAAU,EAAGA,EAAUhF,KAAKX,eAAe+C,OAAQ4C,IACxD,GAAqC,OAAjChF,KAAKX,eAAe2F,GACpB,OAAOhF,KAAKX,eAAe2F,GAGnC,OAAO,IACX,CAEQC,iCAEJ,MAAMC,EAAmBlF,KAAK+E,uBAC1BG,GACAA,EAAiBC,mBAIrB,IAAK,IAAIhD,EAAI,EAAGiD,EAAMpF,KAAKf,YAAYmD,OAAQD,EAAIiD,EAAKjD,IAAK,CACzD,MAAMkD,EAAMrF,KAAKf,YAAYkD,GACvB0C,EAAiBQ,EAAIP,gBAGvBD,GACkD,SAAnCA,EAAeS,kBAG1BD,EAAIlH,eAAgD,IAA/B6B,KAAKX,eAAe+C,QAE7CiD,EAAIhG,eAAiBW,KAAKX,eAAekG,MAAM,GAAGC,OAAOX,GACzDA,EAAeM,oBAEfE,EAAIhG,eAAiBW,KAAKX,eAAekG,MAAM,E,CAG3D,CASOE,kBAAkBC,EAA0BC,EAA6B,MAC5E,OAAKD,EAAYE,cAAgB5F,KAAKX,eAAe0D,QAAQ2C,IAAgB,GACzE,UAAa,kEACN,IAGK,MAAZC,GAAoBA,EAAW,EAC/B3F,KAAKX,eAAewG,KAAKH,GACgB,OAAlC1F,KAAKX,eAAesG,GAC3B3F,KAAKX,eAAesG,GAAYD,EAEhC1F,KAAKX,eAAeyG,OAAOH,EAAU,EAAGD,GAE5C1F,KAAKiF,iCAGDjF,KAAKyC,OAAOsD,iBACZ/F,KAAKyC,OAAOsD,gBAAgBC,cAGzBhG,KAAKX,eAAe0D,QAAQ2C,GACvC,CAOOO,kBAAkBP,GACrB,MAAMQ,EAAMlG,KAAKX,eAAe0D,QAAQ2C,IAC3B,IAATQ,IACAlG,KAAKX,eAAe6G,GAAO,MAI3BlG,KAAKyC,OAAOsD,iBACZ/F,KAAKyC,OAAOsD,gBAAgBC,cAGhChG,KAAKiF,gCACT,CAKOkB,iBACH,OAAInG,KAAK+D,6BAKT/D,KAAKoG,gBAJMpG,KAAKqG,YAOpB,CAGOC,iBACH,OAAO,eACX,CAOOF,cAAcG,GACjB,OAAKA,GAASvG,KAAK+D,8BAInB/D,KAAKwG,cACLxG,KAAKR,oBAAsBQ,KAAKsG,iBAChCtG,KAAKyG,iBAAmBzG,KAAKrD,WAAW+J,cACxC1G,KAAK2G,iBAEL3G,KAAKL,uBAAwB,EAEzBK,KAAK4G,kBAAoB5G,KAAK4G,iBAAiBC,iBAC/C7G,KAAKR,oBAAoBsH,cAAc9G,KAAK4G,iBAAiBC,gBAAiB7G,KAAKR,qBAInFQ,KAAK+G,QAAW/G,KAAK+G,OAAkBnI,+BACtCoB,KAAK+G,OAAkBnI,8BAA8BiD,gBAAgB7B,KAAK+G,QAG/E/G,KAAKpB,8BAA8BiD,gBAAgB7B,MAEnDA,KAAKR,oBAAoBwH,YAAYhH,KAAKqG,eArB/BrG,KAAKR,mBAwBpB,CAQOyH,uBAAuBC,GAC1BlH,KAAKP,+BAAgC,OAClB8D,IAAf2D,IACAlH,KAAKZ,kBAAoB8H,EAEjC,CAKOC,2BACHnH,KAAKP,+BAAgC,CACzC,CAOO2H,oBAAoBb,G,oBACvB,GAAIvG,KAAKP,gCAAmC8G,GAASvG,KAAKgE,kCACtD,OAAOhE,KAAKZ,kBAIhBY,KAAKoD,OAAO1C,KAAOV,KAAKU,KACxBV,KAAKoD,OAAOtF,KAAOkC,KAAKlC,KACxBkC,KAAKoD,OAAOrF,KAAOiC,KAAKjC,KAGxBiC,KAAKL,uBAAwB,EAE7B,MAAMyE,EAASpE,KAAKI,YACd1D,EAAQsD,KAAKrD,WACb0K,EAAejD,EAAOkD,sBAC5B,GAAItH,KAAKU,OAAS1D,EAAOkB,mBAAoB,CAUzC,IAAIkJ,EATJpH,KAAKoD,OAAOxF,IAAMoC,KAAKpC,IACvBoC,KAAKoD,OAAO9E,QAAU0B,KAAK1B,QAC3B0B,KAAKoD,OAAOI,YAAcY,EAAOvD,eAAeb,MAChDA,KAAKoD,OAAOvF,oBAAsBmC,KAAKnC,oBAEnCmC,KAAKlC,MAAQ,IACbkC,KAAKlC,KAAO,IAeZsJ,EADA1K,EAAMgG,qBACgB,2BAEA,2BAG1B0E,EACIpH,KAAKpC,IACLwG,EAAOvD,eAAeb,MACtBqH,EAAerH,KAAKjC,KAAOiC,KAAKlC,KAChCuJ,EAAerH,KAAKlC,KAAOkC,KAAKjC,KAChCiC,KAAKZ,kBACLY,KAAK1B,UAAYtB,EAAOuB,uBACxB6F,EAAOmD,gBACPvH,KAAKnC,oBACLwJ,E,KAED,CACH,MAAMvG,EAAYsD,EAAOrD,iBAAmB,EACtCC,EAAaoD,EAAOnD,kBAAoB,EAC1CvE,EAAMgG,qBACN,2BACkB,QAAd,EAAA1C,KAAKmB,iBAAS,SAAKL,EACJ,QAAf,EAAAd,KAAKkB,kBAAU,QAAIJ,EACH,QAAhB,EAAAd,KAAKqB,mBAAW,SAAKL,EACR,QAAb,EAAAhB,KAAKoB,gBAAQ,QAAIJ,EACjBqG,EAAerH,KAAKjC,KAAOiC,KAAKlC,KAChCuJ,EAAerH,KAAKlC,KAAOkC,KAAKjC,KAChCiC,KAAKZ,kBACLgF,EAAOmD,iBAGX,2BACkB,QAAd,EAAAvH,KAAKmB,iBAAS,SAAKL,EACJ,QAAf,EAAAd,KAAKkB,kBAAU,QAAIJ,EACH,QAAhB,EAAAd,KAAKqB,mBAAW,SAAKL,EACR,QAAb,EAAAhB,KAAKoB,gBAAQ,QAAIJ,EACjBqG,EAAerH,KAAKjC,KAAOiC,KAAKlC,KAChCuJ,EAAerH,KAAKlC,KAAOkC,KAAKjC,KAChCiC,KAAKZ,kBACLgF,EAAOmD,iBAIfvH,KAAKoD,OAAOjC,UAAYnB,KAAKmB,UAC7BnB,KAAKoD,OAAOlC,WAAalB,KAAKkB,WAC9BlB,KAAKoD,OAAO/B,YAAcrB,KAAKqB,YAC/BrB,KAAKoD,OAAOhC,SAAWpB,KAAKoB,SAC5BpB,KAAKoD,OAAOK,YAAcW,EAAOrD,iBACjCf,KAAKoD,OAAOM,aAAeU,EAAOnD,iB,CAKtC,OAFAjB,KAAKnB,oCAAoCgD,gBAAgB7B,MAElDA,KAAKZ,iBAChB,CAMOoI,0BAEH,OADAxH,KAAKR,oBAAoBsH,cAAc9G,KAAKZ,kBAAmBY,KAAKN,kBAC7DM,KAAKN,gBAChB,CAEQ+H,uBACCzH,KAAKL,wBAIVK,KAAKwH,0BAEAxH,KAAK0H,eAGN,mBAAuB1H,KAAKN,iBAAkBM,KAAK0H,gBAFnD1H,KAAK0H,eAAiB,cAAkB1H,KAAKN,kBAKjDM,KAAKL,uBAAwB,EACjC,CASOgI,YAAYC,EAAmBC,GAAkB,GAGpD,GAFA7H,KAAKyH,uBAEDI,GAAmB7H,KAAK4E,WAAWxC,OAAS,EAAG,CAC/C,IAAI0F,GAAS,EAKb,OAJA9H,KAAK4E,WAAWmD,SAAS1C,IACrBA,EAAIoC,uBACJK,EAASA,GAAUF,EAAOD,YAAYtC,EAAIqC,eAAe,IAEtDI,C,CAEP,OAAOF,EAAOD,YAAY3H,KAAK0H,eAEvC,CAQOM,sBAAsBJ,GAGzB,OAFA5H,KAAKyH,uBAEEG,EAAOI,sBAAsBhI,KAAK0H,eAC7C,CAUOO,cAAc7F,EAAS,IAAK8F,EAAoBC,GACnD,MAAM,OAAY,MACtB,CAWOC,mBAAmBC,EAAajG,EAAS,IAAK8F,EAAoBC,GACrE,MAAM,OAAY,MACtB,CAOOG,QAAQC,EAAwBC,GAA6B,GAiBhE,IAfAxI,KAAKpB,8BAA8B6J,QACnCzI,KAAKnB,oCAAoC4J,QACzCzI,KAAKlB,6BAA6B2J,QAClCzI,KAAKjB,yBAAyB0J,QAG1BzI,KAAK0I,QACL1I,KAAK0I,OAAOD,QAIhBzI,KAAKrD,WAAWgM,cAAc3I,MAG9BA,KAAKrD,WAAWiM,aAAa5I,MACtBA,KAAKf,YAAYmD,OAAS,GAAG,CAChC,MAAMyG,EAAS7I,KAAKf,YAAY6J,MAC5BD,GACAA,EAAOP,S,CAIf,GAAItI,KAAK+I,iBAAkB,CACvB,MAAMC,EAAQhJ,KAAK+I,iBAAiBE,QAAQlG,QAAQ/C,MAChDgJ,GAAS,GACThJ,KAAK+I,iBAAiBE,QAAQnD,OAAOkD,EAAO,GAEhDhJ,KAAK+I,iBAAmB,I,CAI5B,GAAI/I,KAAK8E,gBACL9E,KAAK8E,gBAAgBwD,QAAQtI,MAC7BA,KAAK8E,gBAAkB,KACvB9E,KAAKX,eAAe+C,OAAS,OAC1B,GAAIpC,KAAKxB,gBAAkBxB,EAAOyB,cACrCuB,KAAK8E,gBAAkB,KACvB9E,KAAKX,eAAe+C,OAAS,MAC1B,CACH,IAAID,EAAInC,KAAKX,eAAe+C,OAC5B,OAASD,GAAK,GAAG,CACb,MAAMuD,EAAc1F,KAAKX,eAAe8C,GACpCuD,GACAA,EAAY4C,QAAQtI,K,EAMhC,IAAImC,EAAInC,KAAKtB,oBAAoB0D,OACjC,OAASD,GAAK,GACVnC,KAAKtB,oBAAoByD,GAAGmG,UAEhCtI,KAAKtB,oBAAoB0D,OAAS,EAGlCpC,KAAKV,cAAcgJ,UAEnBtI,KAAKrD,WAAWyD,YAAY8I,oBAAoBlJ,KAAKG,cAErD9C,MAAMiL,QAAQC,EAAcC,EAChC,CAOWW,mBACP,OAAOnJ,KAAKF,aAChB,CAOWsJ,oBACP,OAAOpJ,KAAKD,cAChB,CAKWsJ,iBACP,OAAIrJ,KAAKf,YAAYmD,OAAS,EACnB,KAEQpC,KAAKf,YAAY,EACxC,CAKWqK,kBACP,OAAItJ,KAAKf,YAAYmD,OAAS,EACnB,KAEQpC,KAAKf,YAAY,EACxC,CAMOsK,gBACH,OAAIvJ,KAAKf,YAAYmD,OAAS,EACnB,KAEWpC,KAAKf,YAAY,GAAIuK,WAC/C,CAMOC,iBACH,OAAIzJ,KAAKf,YAAYmD,OAAS,EACnB,KAEWpC,KAAKf,YAAY,GAAIuK,WAC/C,CAKOE,iBAAiBhJ,EAAciJ,GAClC,GAAI3J,KAAKxB,gBAAkBkC,EAA3B,CAIA,KAAOV,KAAKf,YAAYmD,OAAS,GAAG,CAChC,MAAMyG,EAAS7I,KAAKf,YAAY6J,MAE5BD,GACAA,EAAOP,S,CAWf,GARAtI,KAAKxB,cAAgBkC,EACrBV,KAAK4G,iBAAmB,CAAC,EAGzB5G,KAAK4G,iBAAiBgD,mBAAqBD,EAAUC,oBAAsB,MAC3E5J,KAAK4G,iBAAiBiD,gBAAkB,eAAgB7J,KAAK4G,iBAAiBgD,mBAAqB,OAG/F5J,KAAKxB,gBAAkBxB,EAAOyB,cAAe,CAC7C,MAAM4K,EAAarJ,KAAK8J,gBAAgB9J,KAAK9C,KAAO,KAAM,GACtDmM,IACAA,EAAWvJ,eAAgB,GAE/B,MAAMwJ,EAActJ,KAAK8J,gBAAgB9J,KAAK9C,KAAO,KAAM,GACvDoM,IACAA,EAAYvJ,gBAAiB,GAE7BsJ,GAAcC,IACdtJ,KAAKf,YAAY4G,KAAKwD,GACtBrJ,KAAKf,YAAY4G,KAAKyD,G,CAI9BtJ,KAAK+J,YAAYJ,GAEjB3J,KAAKiF,iCACLjF,KAAKyE,Q,CACT,CAGUsF,YAAYJ,GAEtB,CAGOK,yBAWH,OAVA,2BACIhK,KAAK4G,iBAAiBqD,UAAUC,eAChClK,KAAK4G,iBAAiBqD,UAAUzG,YAChCxD,KAAKlC,KACLkC,KAAKjC,KACLiC,KAAK4G,iBAAiBuD,cACtB,EACAnK,KAAKI,YAAYmH,iBAErBvH,KAAK4G,iBAAiBuD,aAAarD,cAAc9G,KAAK4G,iBAAiBwD,UAAWpK,KAAKZ,mBAChFY,KAAKZ,iBAChB,CAEUiL,8BAEV,CAEUC,mCAEV,CAOOC,4BACH,OAAO,eACX,CAOOC,sBACH,OAAO,eACX,CAKOC,sBAAsBvN,EAAcoE,GAClCtB,KAAK4G,mBACN5G,KAAK4G,iBAAmB,CAAC,GAE7B5G,KAAK4G,iBAAiB1J,GAAQoE,EAEjB,uBAATpE,IACA8C,KAAK4G,iBAAiBiD,gBAAkB,eAAgBvI,EAAQ,OAExE,CAOOwI,gBAAgB5M,EAAcwN,GACjC,OAAO,IACX,CAMO/F,oBACH,IAAK,IAAIxC,EAAI,EAAGA,EAAInC,KAAKf,YAAYmD,OAAQD,IACzCnC,KAAKf,YAAYkD,GAAGrE,KAAOkC,KAAKlC,KAChCkC,KAAKf,YAAYkD,GAAGpE,KAAOiC,KAAKjC,KAChCiC,KAAKf,YAAYkD,GAAGvE,IAAMoC,KAAKpC,IAC/BoC,KAAKf,YAAYkD,GAAG5B,SAASsD,SAAS7D,KAAKO,UAI3CP,KAAKxB,gBAAkBxB,EAAO2N,iCAC9B3K,KAAKf,YAAY,GAAGb,SAAW4B,KAAKf,YAAY,GAAGb,SAAW4B,KAAK5B,SAE3E,CAGOwM,eAAgB,CAMhBC,YACH,MAAMC,EAAsB,eAA8B9K,MAoB1D,OAnBA8K,EAAoBC,SAAW/K,KAAK+K,SAGpCD,EAAoBE,KAAOhL,KAAK8B,eAG5B9B,KAAK+G,QACL/G,KAAK+G,OAAOkE,mBAAmBH,GAG/B9K,KAAK0I,QACL1I,KAAK0I,OAAOmC,UAAUC,GAG1B,gCAA+C9K,KAAM8K,GACrDA,EAAoBI,OAASlL,KAAKmL,2BAElCL,EAAoBM,UAAYpL,KAAKoL,YAE9BN,CACX,CAQOO,MAAMnO,EAAcoO,EAA4B,MACnD,MAAMzC,EAAS,WACX7L,EAAOuO,uBAAuBvL,KAAK8B,eAAgB5E,EAAM8C,KAAKrD,WAAYqD,KAAK4J,mBAAoB5J,KAAKwL,0BACxGxL,MAOJ,OALA6I,EAAO3L,KAAOA,EACd2L,EAAO9B,OAASuE,EAEhBtL,KAAKyL,mBAAmB5J,gBAAgBgH,GAEjCA,CACX,CAOO6C,aAAaC,GAChB,MAAM7D,EAAS,WAIf,OAFA9H,KAAK4L,kBAAkBD,EAAW7D,GAE3BA,CACX,CAKWvF,uBAGP,OAFAvC,KAAKmG,iBAAiB0F,eAAUtI,EAAWvD,KAAKJ,mBAEzCI,KAAKJ,iBAChB,CAOOgM,kBAAkBD,EAAoB7D,GACzC,yBAA6B6D,EAAW3L,KAAKmG,iBAAkB2B,EACnE,CAYA/L,8BAA8BiP,EAAc9N,EAAcR,EAAcoP,EAA8B,EAAGN,GAAoC,GAOzI,OANwB,EAAAvO,EAAA,UAAe+N,EAAM9N,EAAMR,EAAO,CAEtDoP,oBAAqBA,EACrBN,yBAA0BA,KAQvB,KAAMxO,EAAO+O,2BAA2B7O,EAAMR,GACzD,CAMOsP,qBACH,OAAOhM,KAAKmG,gBAChB,CAQOpK,aAAakQ,EAAmBvP,GACnC,MAAMsO,EAAOiB,EAAajB,KACpBkB,EAAYlP,EAAOuO,uBAAuBP,EAAMiB,EAAa/O,KAAMR,EAAOuP,EAAaH,oBAAqBG,EAAaT,0BAEzH3C,EAAS,WAA0BqD,EAAWD,EAAcvP,GAqClE,QAlC8B6G,IAA1B0I,EAAaE,WACbtD,EAAOuD,iBAAmBH,EAAaE,eAIF5I,IAArC0I,EAAaI,sBACbxD,EAAOyD,4BAA8BL,EAAaI,qBAIlDxD,EAAOH,SACPG,EAAOH,OAAO6D,MAAMN,GAEpBpD,EAAO+B,gBAGPqB,EAAa1L,WACbsI,EAAOtI,SAAW,cAAkB0L,EAAa1L,WAG3CsI,EAAQ2D,cAEd3D,EAAO1L,SAASsP,eAAe,EAAG,EAAG,GAC/B5D,EAAQ2D,YAAY,cAAkBP,EAAa9O,YAIzD8O,EAAarE,QACHiB,EAAQ6D,WACR7D,EAAQ6D,UAAU,cAAkBT,EAAarE,SAK3DqE,EAAazN,cAAe,CAC5B,MAAMmL,EAAYsC,EAAaH,oBAAsB,CAAElC,mBAAoBqC,EAAaH,qBAAwB,CAAC,EACjHjD,EAAOa,iBAAiBuC,EAAazN,cAAemL,E,CAIxD,GAAIsC,EAAa/J,WAAY,CACzB,IAAK,IAAIyK,EAAiB,EAAGA,EAAiBV,EAAa/J,WAAWE,OAAQuK,IAAkB,CAC5F,MAAMC,EAAkBX,EAAa/J,WAAWyK,GAC1CE,GAAgB,OAAS,qBAC3BA,GACAhE,EAAO3G,WAAW2D,KAAKgH,EAAcC,MAAMF,G,CAGnD,EAAA3P,EAAA,qBAA0B4L,EAAQoD,EAAcvP,E,CAYpD,OATIuP,EAAac,aACbrQ,EAAMsQ,eAAenE,EAAQoD,EAAagB,gBAAiBhB,EAAaiB,cAAejB,EAAakB,gBAAiBlB,EAAamB,kBAAoB,QAI3H7J,IAA3B0I,EAAab,WACbvC,EAAOwE,WAAWpB,EAAab,WAG5BvC,CACX,EA/6Cc,EAAAkD,2BAA6B,CAAC7O,EAAcR,KACtD,MAAM,OAAY,kBAAkB,EAQjB,EAAAwB,mBAAqB,EAKrB,EAAAoP,oBAAsB,EAMtB,EAAA/O,uBAAyB,EAIzB,EAAAgP,yBAA2B,EAM3B,EAAA9O,cAAgB,EAKhB,EAAAkM,+BAAiC,GAIjC,EAAA6C,0CAA4C,GAI5C,EAAAC,2CAA6C,GAI7C,EAAAC,gCAAkC,GAIlC,EAAAC,iCAAmC,GAInC,EAAAC,YAAc,GAId,EAAAC,eAAiB,GAIjB,EAAAC,gBAAkB,GAK3B,EAAAC,0CAA2C,GASzD,UADC,QAAmB,a,iCAepB,UADC,QAAmB,a,iCAuDpB,UADC,W,+BAoBD,UADC,W,gCAoBD,UADC,W,iCAoBD,UADC,W,8BASD,UADC,W,2BASD,UADC,W,2CASD,UADC,W,4BASD,UADC,W,4BAQD,UADC,W,+BAiBD,UADC,W,0BAsBD,UADC,W,iCAOD,UADC,W,+BASD,UADC,W,qCAOD,UADC,W,0CAOD,UADC,W,gFC7UE,MAAMC,EAIT9R,YAAmB+R,EAA6BC,EAA6BC,GAA1D,KAAAF,GAAAA,EAA6B,KAAAC,GAAAA,EAA6B,KAAAC,SAAAA,EAHtE,KAAAC,OAAS,EACT,KAAAC,UAAY,CAE6E,E,+CCE7F,MAAMC,EAAb,cACW,KAAAC,kBAAmB,EACnB,KAAAC,gBAAkB,EAClB,KAAAC,iBAAmB,EACnB,KAAAC,mBAA+C,KAC/C,KAAAC,UAAgC,KAChC,KAAAC,0BAA4B,IAAI,IAAQ,EAAG,EAAG,GAC9C,KAAAC,2BAA6B,IAAI,IAAQ,EAAG,EAAG,GAG/C,KAAAC,oBAAqB,CAChC,E,yDCTO,MAAMC,EAAb,cAIW,KAAAC,KAAM,EAIN,KAAAb,SAAW,EAIX,KAAAc,YAAiC,KAIjC,KAAAC,WAAqC,KAErC,KAAAjB,GAAK,EAEL,KAAAC,GAAK,EAEL,KAAAE,QAAU,EAEV,KAAAe,eAAiB,EAEjB,KAAAd,UAAY,EAEZ,KAAAe,aAAiC,KAEjC,KAAAC,mBAAqB,EAIrB,KAAAC,IAAqB,KAIrB,KAAAC,WAAqC,KAIrC,KAAAC,aAAwC,KAKxC,KAAAC,cAAyC,IAsGpD,CA7FWC,UAAUC,GAAsB,EAAOC,GAAqB,GAC/D,IAAK5P,KAAKkP,YAAeU,IAAuB5P,KAAKkP,WAAWW,sBAAsB,gBAClF,OAAO,KAGX,MAAMC,EAAU9P,KAAKkP,WAAWa,aAEhC,IAAKD,EACD,OAAO,KAGX,IAAIhI,EAEJ,GAAI8H,EAAoB,CACpB,MAAMI,EAAsBhQ,KAAKkP,WAAWe,gBAAgB,gBAE5D,IAAIC,EAAU,cAAkBF,EAAoC,EAA3BF,EAAsB,EAAd9P,KAAKoO,SAClD+B,EAAU,cAAkBH,EAAwC,EAA/BF,EAAsB,EAAd9P,KAAKoO,OAAa,IAC/DgC,EAAU,cAAkBJ,EAAwC,EAA/BF,EAAsB,EAAd9P,KAAKoO,OAAa,IAEnE8B,EAAUA,EAAQG,MAAMrQ,KAAKiO,IAC7BkC,EAAUA,EAAQE,MAAMrQ,KAAKkO,IAC7BkC,EAAUA,EAAQC,MAAM,EAAMrQ,KAAKiO,GAAKjO,KAAKkO,IAE7CpG,EAAS,IAAI,IAAQoI,EAAQpT,EAAIqT,EAAQrT,EAAIsT,EAAQtT,EAAGoT,EAAQnT,EAAIoT,EAAQpT,EAAIqT,EAAQrT,EAAGmT,EAAQI,EAAIH,EAAQG,EAAIF,EAAQE,E,KACxH,CACH,MAAMC,EAAwBvQ,KAAKkP,WAAWe,gBAAgB,kBAExDO,EAAU,cAAkBD,EAAsC,EAA3BT,EAAsB,EAAd9P,KAAKoO,SACpDqC,EAAU,cAAkBF,EAA0C,EAA/BT,EAAsB,EAAd9P,KAAKoO,OAAa,IACjEsC,EAAU,cAAkBH,EAA0C,EAA/BT,EAAsB,EAAd9P,KAAKoO,OAAa,IAEjEuC,EAAOH,EAAQI,SAASH,GACxBI,EAAOH,EAAQE,SAASH,GAE9B3I,EAAS,UAAc6I,EAAME,E,CAQjC,GAJI7Q,KAAKsP,KAAO,QAAYxH,EAAQ9H,KAAKsP,IAAIwB,WAAa,GACtDhJ,EAAOiJ,gBAGPpB,EAAqB,CACrB,IAAIqB,EAAKhR,KAAKkP,WAAW/I,iBAErBnG,KAAKkP,WAAW+B,oBAChB,wBAA8BD,GAC9BA,EAAK,eACLA,EAAGE,yBAAyB,EAAG,EAAG,GAClCF,EAAGG,SACHH,EAAGI,eAAe,gBAElBJ,EAAK,gBAGT,yBAA6BlJ,EAAQkJ,EAAIlJ,E,CAK7C,OAFAA,EAAOuJ,YAEAvJ,CACX,CAMOwJ,wBACH,IAAKtR,KAAKkP,aAAelP,KAAKkP,WAAWW,sBAAsB,YAC3D,OAAO,KAGX,MAAMC,EAAU9P,KAAKkP,WAAWa,aAChC,IAAKD,EACD,OAAO,KAGX,MAAMyB,EAAMvR,KAAKkP,WAAWe,gBAAgB,YAC5C,IAAKsB,EACD,OAAO,KAGX,IAAIC,EAAM,eAAkBD,EAAgC,EAA3BzB,EAAsB,EAAd9P,KAAKoO,SAC1CqD,EAAM,eAAkBF,EAAoC,EAA/BzB,EAAsB,EAAd9P,KAAKoO,OAAa,IACvDsD,EAAM,eAAkBH,EAAoC,EAA/BzB,EAAsB,EAAd9P,KAAKoO,OAAa,IAM3D,OAJAoD,EAAMA,EAAInB,MAAMrQ,KAAKiO,IACrBwD,EAAMA,EAAIpB,MAAMrQ,KAAKkO,IACrBwD,EAAMA,EAAIrB,MAAM,EAAMrQ,KAAKiO,GAAKjO,KAAKkO,IAE9B,IAAI,KAAQsD,EAAI1U,EAAI2U,EAAI3U,EAAI4U,EAAI5U,EAAG0U,EAAIzU,EAAI0U,EAAI1U,EAAI2U,EAAI3U,EAClE,E,mECnJG,MAAM4U,EAiETzV,YAAY0V,EAA6BC,EAA6BC,GA7DtD,KAAAC,QAAqB,eAAsB,EAAG,UAI9C,KAAAC,OAAkB,WAIlB,KAAAC,YAAuB,WAIvB,KAAAC,WAAsB,WAItB,KAAAC,gBAA2B,WAI3B,KAAAC,WAAwB,eAAsB,EAAG,UAIjD,KAAAC,aAA0B,eAAsB,EAAG,UAInD,KAAAC,aAAwB,WAIxB,KAAAC,aAAwB,WAIxB,KAAAC,QAAmB,WAInB,KAAAC,QAAmB,WAW5B,KAAAC,kBAA2C,KAE3C,KAAAC,iBAA0C,KAS7C3S,KAAK4S,YAAYhB,EAAKC,EAAKC,EAC/B,CAUOc,YAAYhB,EAA6BC,EAA6BC,GACzE,MAAMe,EAAOjB,EAAI9U,EACbgW,EAAOlB,EAAI7U,EACXe,EAAO8T,EAAItB,EACXyC,EAAOlB,EAAI/U,EACXkW,EAAOnB,EAAI9U,EACXgB,EAAO8T,EAAIvB,EACTyB,EAAU/R,KAAK+R,QAErB/R,KAAKwS,QAAQ/F,eAAeoG,EAAMC,EAAMhV,GACxCkC,KAAKyS,QAAQhG,eAAesG,EAAMC,EAAMjV,GACxCgU,EAAQ,GAAGtF,eAAeoG,EAAMC,EAAMhV,GACtCiU,EAAQ,GAAGtF,eAAesG,EAAMC,EAAMjV,GACtCgU,EAAQ,GAAGtF,eAAesG,EAAMD,EAAMhV,GACtCiU,EAAQ,GAAGtF,eAAeoG,EAAMG,EAAMlV,GACtCiU,EAAQ,GAAGtF,eAAeoG,EAAMC,EAAM/U,GACtCgU,EAAQ,GAAGtF,eAAesG,EAAMC,EAAMlV,GACtCiU,EAAQ,GAAGtF,eAAeoG,EAAMG,EAAMjV,GACtCgU,EAAQ,GAAGtF,eAAesG,EAAMD,EAAM/U,GAGtC8T,EAAIoB,SAASrB,EAAK5R,KAAKgS,QAAQkB,aAAa,IAC5CrB,EAAIsB,cAAcvB,EAAK5R,KAAKkS,YAAYgB,aAAa,IAErDlT,KAAKqG,aAAeyL,GAAe,sBAEnC9R,KAAKoT,QAAQpT,KAAKqG,aACtB,CAOOgK,MAAMgD,GACT,MAAMC,EAAa3B,EAAY4B,YACzBC,EAAOxT,KAAKyS,QAAQU,cAAcnT,KAAKwS,QAASc,EAAW,IAC3DlO,EAAMoO,EAAKpR,SACjBoR,EAAKC,oBAAoBrO,GACzB,MAAM+I,EAAW/I,EAAMiO,EACjBK,EAAYF,EAAKN,aAAwB,GAAX/E,GAE9ByD,EAAM5R,KAAKgS,OAAOmB,cAAcO,EAAWJ,EAAW,IACtDzB,EAAM7R,KAAKgS,OAAOiB,SAASS,EAAWJ,EAAW,IAIvD,OAFAtT,KAAK4S,YAAYhB,EAAKC,EAAK7R,KAAKqG,cAEzBrG,IACX,CAMOmG,iBACH,OAAOnG,KAAKqG,YAChB,CAKO+M,QAAQO,GACX,MAAMC,EAAW5T,KAAKsS,aAChBuB,EAAW7T,KAAKuS,aAChBH,EAAapS,KAAKoS,WAClBC,EAAerS,KAAKqS,aACpBN,EAAU/R,KAAK+R,QAErB,GAAK4B,EAAMG,aAcJ,CACHF,EAAS/P,SAAS7D,KAAKwS,SACvBqB,EAAShQ,SAAS7D,KAAKyS,SACvB,IAAK,IAAIzJ,EAAQ,EAAGA,EAAQ,IAAKA,EAC7BqJ,EAAarJ,GAAOnF,SAASkO,EAAQ/I,IAIzChJ,KAAKmS,gBAAgBtO,SAAS7D,KAAKkS,YACnClS,KAAKiS,YAAYpO,SAAS7D,KAAKgS,O,KAvBV,CACrB4B,EAASG,OAAO1Q,OAAOC,WACvBuQ,EAASE,QAAQ1Q,OAAOC,WAExB,IAAK,IAAI0F,EAAQ,EAAGA,EAAQ,IAAKA,EAAO,CACpC,MAAMgL,EAAI3B,EAAarJ,GACvB,8BAAkC+I,EAAQ/I,GAAQ2K,EAAOK,GACzDJ,EAASK,gBAAgBD,GACzBH,EAASK,gBAAgBF,E,CAI7BH,EAASV,cAAcS,EAAU5T,KAAKmS,iBAAiBe,aAAa,IACpEW,EAASZ,SAASW,EAAU5T,KAAKiS,aAAaiB,aAAa,G,CAa/D,mBAAuBS,EAAMQ,EAAG,EAAG/B,EAAW,IAC9C,mBAAuBuB,EAAMQ,EAAG,EAAG/B,EAAW,IAC9C,mBAAuBuB,EAAMQ,EAAG,EAAG/B,EAAW,IAE9CpS,KAAKqG,aAAesN,CACxB,CAOOhM,YAAYyM,GACf,OAAOzC,EAAY0C,YAAYrU,KAAKqS,aAAc+B,EACtD,CAOOpM,sBAAsBoM,GACzB,OAAOzC,EAAY2C,sBAAsBtU,KAAKqS,aAAc+B,EAChE,CAOOG,gBAAgBC,GACnB,MAAM5C,EAAM5R,KAAKsS,aACXT,EAAM7R,KAAKuS,aACXM,EAAOjB,EAAI9U,EACbgW,EAAOlB,EAAI7U,EACXe,EAAO8T,EAAItB,EACXyC,EAAOlB,EAAI/U,EACXkW,EAAOnB,EAAI9U,EACXgB,EAAO8T,EAAIvB,EACTmE,EAASD,EAAM1X,EACjB4X,EAASF,EAAMzX,EACf4X,EAASH,EAAMlE,EACbsE,GAAS,KAEf,QAAI7B,EAAO0B,EAASG,GAASA,EAAQH,EAAS5B,GAI1CG,EAAO0B,EAASE,GAASA,EAAQF,EAAS5B,GAI1C/U,EAAO4W,EAASC,GAASA,EAAQD,EAAS7W,EAKlD,CAOO+W,iBAAiBC,GACpB,OAAOnD,EAAYoD,iBAAiB/U,KAAKsS,aAActS,KAAKuS,aAAcuC,EAAO7C,YAAa6C,EAAOE,YACzG,CAQOC,iBAAiBrD,EAA6BC,GACjD,MAAMqD,EAAQlV,KAAKsS,aACb6C,EAAQnV,KAAKuS,aACb6C,EAASF,EAAMpY,EACjBuY,EAASH,EAAMnY,EACfuY,EAASJ,EAAM5E,EACfiF,EAASJ,EAAMrY,EACf0Y,EAASL,EAAMpY,EACf0Y,EAASN,EAAM7E,EACbuC,EAAOjB,EAAI9U,EACbgW,EAAOlB,EAAI7U,EACXe,EAAO8T,EAAItB,EACXyC,EAAOlB,EAAI/U,EACXkW,EAAOnB,EAAI9U,EACXgB,EAAO8T,EAAIvB,EACf,QAAIiF,EAAS1C,GAAQuC,EAASrC,GAI1ByC,EAAS1C,GAAQuC,EAASrC,GAI1ByC,EAAS3X,GAAQwX,EAASvX,EAKlC,CAKOuK,U,QACmB,QAAtB,EAAAtI,KAAK0S,yBAAiB,SAAEpK,UACH,QAArB,EAAAtI,KAAK2S,wBAAgB,SAAErK,SAC3B,CAUOvM,kBAAkB2Z,EAAkCC,GACvD,OAAOD,EAAKT,iBAAiBU,EAAKrD,aAAcqD,EAAKpD,aACzD,CAUOxW,wBAAwB6Z,EAAkCC,EAAkCC,EAAsCC,GACrI,MAAMC,EAASrE,EAAY4B,YAAY,GAGvC,OAFA,eAAmBuC,EAAcF,EAAUC,EAAUG,GACzC,oBAAwBF,EAAcE,IACpCD,EAAeA,CACjC,CAQOha,6BAA6Bka,EAAgD7B,GAChF,IAAK,IAAI8B,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,MAAMC,EAAe/B,EAAc8B,GACnC,IAAK,IAAI/T,EAAI,EAAGA,EAAI,IAAKA,EACrB,GAAIgU,EAAaC,cAAcH,EAAgB9T,IAAM,EACjD,OAAO,C,CAInB,OAAO,CACX,CAQOpG,mBAAmBka,EAAgD7B,GACtE,IAAK,IAAI8B,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAIG,GAAiB,EACrB,MAAMF,EAAe/B,EAAc8B,GACnC,IAAK,IAAI/T,EAAI,EAAGA,EAAI,IAAKA,EACrB,GAAIgU,EAAaC,cAAcH,EAAgB9T,KAAO,EAAG,CACrDkU,GAAiB,EACjB,K,CAGR,GAAIA,EACA,OAAO,C,CAGf,OAAO,CACX,EA9SwB,EAAA9C,YAAc,eAAsB,EAAG,S,4EClDnE,MAAM+C,EAAW,CAAE1E,IAAK,EAAGC,IAAK,GAC1B0E,EAAW,CAAE3E,IAAK,EAAGC,IAAK,GAC1B2E,EAAoB,CAACC,EAA8BC,EAAiC5O,KACtF,MAAMoO,EAAI,QAAYQ,EAAIzE,YAAawE,GAMjCE,EAJKhW,KAAKiW,IAAI,QAAYF,EAAItE,WAAW,GAAIqE,IAASC,EAAIxE,WAAWpV,EAChE6D,KAAKiW,IAAI,QAAYF,EAAItE,WAAW,GAAIqE,IAASC,EAAIxE,WAAWnV,EAChE4D,KAAKiW,IAAI,QAAYF,EAAItE,WAAW,GAAIqE,IAASC,EAAIxE,WAAW5B,EAG3ExI,EAAO8J,IAAMsE,EAAIS,EACjB7O,EAAO+J,IAAMqE,EAAIS,CAAC,EAGhBE,EAAc,CAACJ,EAA8Bf,EAAkCC,KACjFa,EAAkBC,EAAMf,EAAMY,GAC9BE,EAAkBC,EAAMd,EAAMY,KACrBD,EAAS1E,IAAM2E,EAAS1E,KAAO0E,EAAS3E,IAAM0E,EAASzE,MA0B7D,MAAMiF,EAoBT5a,YAAYsW,EAAiCC,EAAiCX,GAVtE,KAAAiF,WAAY,EAWhB/W,KAAKgX,YAAc,IAAI,IAAYxE,EAASC,EAASX,GACrD9R,KAAKiX,eAAiB,IAAI,IAAezE,EAASC,EAASX,EAC/D,CAQOc,YAAYhB,EAA6BC,EAA6BC,GACzE9R,KAAKgX,YAAYpE,YAAYhB,EAAKC,EAAKC,GACvC9R,KAAKiX,eAAerE,YAAYhB,EAAKC,EAAKC,EAC9C,CAKWU,cACP,OAAOxS,KAAKgX,YAAYxE,OAC5B,CAKWC,cACP,OAAOzS,KAAKgX,YAAYvE,OAC5B,CAKWyE,eACP,OAAOlX,KAAK+W,SAChB,CAEWG,aAAS5V,GAChBtB,KAAK+W,UAAYzV,CACrB,CAOOmD,OAAOkP,GACN3T,KAAK+W,YAGT/W,KAAKgX,YAAY5D,QAAQO,GACzB3T,KAAKiX,eAAe7D,QAAQO,GAChC,CAQOwD,SAASnF,EAAgCoF,GAC5C,MAAM5E,EAAUsE,EAAavD,YAAY,GAAG1P,SAASmO,GAAQqF,gBAAgBD,GACvE3E,EAAUqE,EAAavD,YAAY,GAAG1P,SAASmO,GAAQsF,WAAWF,GAKxE,OAHApX,KAAKgX,YAAYpE,YAAYJ,EAASC,EAASzS,KAAKgX,YAAY7Q,kBAChEnG,KAAKiX,eAAerE,YAAYJ,EAASC,EAASzS,KAAKgX,YAAY7Q,kBAE5DnG,IACX,CAOOuX,YAAY/C,GACf,MAAMhC,EAAU,aAAiBxS,KAAKwS,QAASgC,GACzC/B,EAAU,aAAiBzS,KAAKyS,QAAS+B,GAG/C,OAFAxU,KAAK4S,YAAYJ,EAASC,EAASzS,KAAKgX,YAAY7Q,kBAE7CnG,IACX,CAOOwX,wBAAwBC,GAI3B,OAHAzX,KAAKuX,YAAYE,EAAcT,YAAY/E,YAAYrB,SAAS6G,EAAcT,YAAY7E,kBAC1FnS,KAAKuX,YAAYE,EAAcT,YAAY/E,YAAYyF,IAAID,EAAcT,YAAY7E,kBAE9EnS,IACX,CAOOqQ,MAAMgD,GAIT,OAHArT,KAAKgX,YAAY3G,MAAMgD,GACvBrT,KAAKiX,eAAe5G,MAAMgD,GAEnBrT,IACX,CAQO2H,YAAYyM,EAA4CuD,EAAmB,GAG9E,QADiB,IAAbA,GAAuB,IAAV,IAET3X,KAAKiX,eAAeW,kBAAkBxD,OAKzCpU,KAAKiX,eAAetP,YAAYyM,OAKpB,IAAbuD,GAAuB,IAAV,IAKV3X,KAAKgX,YAAYrP,YAAYyM,GACxC,CAKWyD,qBACP,MAAMb,EAAchX,KAAKgX,YAEzB,OADaA,EAAYzE,aAAaY,cAAc6D,EAAY1E,aAAcwE,EAAavD,YAAY,IAC3FnR,QAChB,CAQO4F,sBAAsBoM,GACzB,OAAOpU,KAAKgX,YAAYhP,sBAAsBoM,EAClD,CAIO0D,gBAAgBC,GACnB,OAAOA,EAASC,gBAAgBhY,KAAKiX,eAAehF,YAAajS,KAAKiX,eAAejC,YAAahV,KAAKgX,YAAY1E,aAActS,KAAKgX,YAAYzE,aACtJ,CAQOgC,gBAAgBC,GACnB,QAAKxU,KAAKiX,eAAehF,eAIpBjS,KAAKiX,eAAe1C,gBAAgBC,MAIpCxU,KAAKgX,YAAYzC,gBAAgBC,EAK1C,CASOyD,WAAWC,EAA2CC,GACzD,IAAK,eAA0BnY,KAAKiX,eAAgBiB,EAAajB,gBAC7D,OAAO,EAGX,IAAK,eAAuBjX,KAAKgX,YAAakB,EAAalB,aACvD,OAAO,EAGX,IAAKmB,EACD,OAAO,EAGX,MAAMzC,EAAO1V,KAAKgX,YACZrB,EAAOuC,EAAalB,YAE1B,SAAKH,EAAYnB,EAAKtD,WAAW,GAAIsD,EAAMC,IAGtCkB,EAAYnB,EAAKtD,WAAW,GAAIsD,EAAMC,IAGtCkB,EAAYnB,EAAKtD,WAAW,GAAIsD,EAAMC,IAGtCkB,EAAYlB,EAAKvD,WAAW,GAAIsD,EAAMC,IAGtCkB,EAAYlB,EAAKvD,WAAW,GAAIsD,EAAMC,IAGtCkB,EAAYlB,EAAKvD,WAAW,GAAIsD,EAAMC,IAGtCkB,EAAY,UAAcnB,EAAKtD,WAAW,GAAIuD,EAAKvD,WAAW,IAAKsD,EAAMC,IAGzEkB,EAAY,UAAcnB,EAAKtD,WAAW,GAAIuD,EAAKvD,WAAW,IAAKsD,EAAMC,IAGzEkB,EAAY,UAAcnB,EAAKtD,WAAW,GAAIuD,EAAKvD,WAAW,IAAKsD,EAAMC,IAGzEkB,EAAY,UAAcnB,EAAKtD,WAAW,GAAIuD,EAAKvD,WAAW,IAAKsD,EAAMC,IAGzEkB,EAAY,UAAcnB,EAAKtD,WAAW,GAAIuD,EAAKvD,WAAW,IAAKsD,EAAMC,IAGzEkB,EAAY,UAAcnB,EAAKtD,WAAW,GAAIuD,EAAKvD,WAAW,IAAKsD,EAAMC,IAGzEkB,EAAY,UAAcnB,EAAKtD,WAAW,GAAIuD,EAAKvD,WAAW,IAAKsD,EAAMC,IAGzEkB,EAAY,UAAcnB,EAAKtD,WAAW,GAAIuD,EAAKvD,WAAW,IAAKsD,EAAMC,IAGzEkB,EAAY,UAAcnB,EAAKtD,WAAW,GAAIuD,EAAKvD,WAAW,IAAKsD,EAAMC,GAKlF,EApQwB,EAAApC,YAAc,eAAsB,EAAG,S,wDC1D5D,MAAM6E,EAmCTlc,YAAY0V,EAA6BC,EAA6BC,GA/BtD,KAAAE,OAAS,WAQT,KAAAC,YAAc,WAQd,KAAAO,QAAU,WAIV,KAAAC,QAAU,WAYtBzS,KAAK4S,YAAYhB,EAAKC,EAAKC,EAC/B,CAQOc,YAAYhB,EAA6BC,EAA6BC,GACzE9R,KAAKwS,QAAQ3O,SAAS+N,GACtB5R,KAAKyS,QAAQ5O,SAASgO,GAEtB,MAAM1D,EAAW,aAAiByD,EAAKC,GAEvCA,EAAIoB,SAASrB,EAAK5R,KAAKgS,QAAQkB,aAAa,IAC5ClT,KAAKqY,OAAoB,GAAXlK,EAEdnO,KAAKoT,QAAQtB,GAAe,sBAChC,CAOOzB,MAAMgD,GACT,MAAMK,EAAY1T,KAAKqY,OAAShF,EAC1BC,EAAa8E,EAAe7E,YAC5B+E,EAAmBhF,EAAW,GAAGS,OAAOL,GACxC9B,EAAM5R,KAAKgS,OAAOmB,cAAcmF,EAAkBhF,EAAW,IAC7DzB,EAAM7R,KAAKgS,OAAOiB,SAASqF,EAAkBhF,EAAW,IAI9D,OAFAtT,KAAK4S,YAAYhB,EAAKC,EAAK7R,KAAKqG,cAEzBrG,IACX,CAMOmG,iBACH,OAAOnG,KAAKqG,YAChB,CAMO+M,QAAQtB,GACX,GAAKA,EAAYgC,aAMb9T,KAAKiS,YAAYpO,SAAS7D,KAAKgS,QAC/BhS,KAAKgV,YAAchV,KAAKqY,WAPG,CAC3B,8BAAkCrY,KAAKgS,OAAQF,EAAa9R,KAAKiS,aACjE,MAAMsG,EAAaH,EAAe7E,YAAY,GAC9C,mCAAuC,EAAK,EAAK,EAAKzB,EAAayG,GACnEvY,KAAKgV,YAAcrU,KAAKkR,IAAIlR,KAAKiW,IAAI2B,EAAWzb,GAAI6D,KAAKiW,IAAI2B,EAAWxb,GAAI4D,KAAKiW,IAAI2B,EAAWjI,IAAMtQ,KAAKqY,M,CAKnH,CAOO1Q,YAAYyM,GACf,MAAMpC,EAAShS,KAAKiS,YACdoG,EAASrY,KAAKgV,YACpB,IAAK,IAAI7S,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIiS,EAAcjS,GAAGiU,cAAcpE,KAAYqG,EAC3C,OAAO,EAGf,OAAO,CACX,CAQOT,kBAAkBxD,GACrB,MAAMpC,EAAShS,KAAKiS,YACpB,IAAK,IAAI9P,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIiS,EAAcjS,GAAGiU,cAAcpE,GAAU,EACzC,OAAO,EAGf,OAAO,CACX,CAOOuC,gBAAgBC,GACnB,MAAMgE,EAAiB,oBAAwBxY,KAAKiS,YAAauC,GACjE,QAAIxU,KAAKgV,YAAchV,KAAKgV,YAAcwD,EAK9C,CASOzc,kBAAkB0c,EAAwCC,GAC7D,MAAMF,EAAiB,oBAAwBC,EAAQxG,YAAayG,EAAQzG,aACtE0G,EAAYF,EAAQzD,YAAc0D,EAAQ1D,YAEhD,QAAI2D,EAAYA,EAAYH,EAKhC,CASOzc,iCAAiCiW,EAAgCqG,EAAgBO,GACpF5Y,KAAKuT,YAAY,GAAG1P,SAASmO,GAC7BhS,KAAKuT,YAAY,GAAG9G,eAAe,EAAG,EAAG4L,GACzCrY,KAAKuT,YAAY,GAAG1P,SAASmO,GAC7BhS,KAAKuT,YAAY,GAAG+D,WAAWtX,KAAKuT,YAAY,IAChDvT,KAAKuT,YAAY,GAAG8D,gBAAgBrX,KAAKuT,YAAY,IAErD,MAAMuB,EAAS,IAAIsD,EAAepY,KAAKuT,YAAY,GAAIvT,KAAKuT,YAAY,IAQxE,OALIuB,EAAOzO,aADPuS,GAGsB,gBAGnB9D,CACX,EA9JwB,EAAAvB,YAAc,eAAsB,EAAG,S,iBChCnE,IAAYsF,EAuBAC,EA0BAC,EA8BAC,EAkDAC,EAkDAC,EAgDAC,E,wEAnOZ,SAAYN,GAER,yBAEA,2BAEA,qBAEA,qBAEA,6BAEA,mBAEA,uBAEA,4BACH,CAjBD,CAAYA,IAAAA,EAAU,KAuBtB,SAAYC,GAER,+BAEA,2BAEA,6BAEA,iCAEA,+BAEA,iCAEA,uCAEA,iCAEA,iCAEA,iCAEA,mBACH,CAvBD,CAAYA,IAAAA,EAAY,KA0BxB,SAAYC,GAER,+BAEA,2BAEA,6BAEA,iCAEA,+BAEA,iCAEA,uCAEA,iCAEA,iCAEA,iCAEA,0CAEA,qCACH,CAzBD,CAAYA,IAAAA,EAAkB,KA8B9B,SAAYC,GAER,qBAEA,uBAEA,uBAEA,2BAEA,eAEA,eAEA,eAEA,eAEA,qBAEA,yBAEA,gBAEA,gBAEA,wBAEA,4BAEA,4BAEA,8BAEA,oBAEA,4BAEA,kCAEA,kCAEA,kCAEA,iCACH,CA7CD,CAAYA,IAAAA,EAAc,KAkD1B,SAAYC,GAER,qBAEA,uBAEA,uBAEA,2BAEA,eAEA,eAEA,eAEA,eAEA,uBAEA,yBAEA,gBAEA,gBAEA,wBAEA,4BAEA,4BAEA,8BAEA,oBAEA,4BAEA,kCAEA,kCAEA,kCAEA,iCACH,CA7CD,CAAYA,IAAAA,EAAc,KAkD1B,SAAYC,GAER,aAEA,aAEA,aAEA,aAEA,eAEA,eAEA,eAEA,eAEA,mBAEA,qBAEA,gBAEA,gBAEA,wBAEA,4BAEA,4BAEA,8BAEA,oBAEA,kCAEA,kCAEA,kCAEA,iCACH,CA3CD,CAAYA,IAAAA,EAAS,KAgDrB,SAAYC,GAER,aAEA,aAEA,aAEA,aAEA,aAEA,aAEA,eAEA,eAEA,qBAEA,mBAEA,gBAEA,gBAEA,wBAEA,4BAEA,4BAEA,8BAEA,oBAEA,0BAEA,kCAEA,kCAEA,kCAEA,iCACH,CA7CD,CAAYA,IAAAA,EAAW,I,gDClNhB,MAAMC,EAgBTld,YACImd,EAEgBC,EAEAC,EAAqB,GAFrB,KAAAD,WAAAA,EAEA,KAAAC,WAAAA,EAhBJ,KAAAC,yBAA2B,IAAI,KAkB3CxZ,KAAKyZ,mBAAqBJ,CAC9B,CAOOK,SAASC,GACZ,OAAO3Z,KAAKyZ,mBAAmBG,UAAU5Z,KAAKsZ,WAAYtZ,KAAKuZ,WAAYI,EAC/E,E,mEC3CG,MAAME,EAYF9d,yBACHud,EACAC,EACAI,EACAG,EACAT,EACAU,GAEA,OAAQT,GACJ,KAAK,cACD,OAAOtZ,KAAKga,qBAAqBL,EAAYG,EAAcT,EAAmBU,GAClF,KAAK,WACD,GAAIJ,IAAe,kBAA4BA,IAAe,kBAA4BA,IAAe,iBACrG,OAAO3Z,KAAKia,kBAAkBX,EAAYC,EAAYI,EAAYG,EAAcT,EAAmBU,GAG3G,KAAK,WACD,OAAO/Z,KAAKka,oBAAoBZ,EAAYC,EAAYI,EAAYG,EAAcT,EAAmBU,GACzG,QACI,KAAM,uCAAuC,KAAWT,KAEpE,CAaQvd,2BACJud,EACAC,EACAI,EACAG,EACAT,EACAU,GAEA,MAAMtd,EAAMuD,KAAKma,kBAAkBb,EAAYC,EAAYI,EAAYG,EAAcT,EAAmBU,GAmBxG,OAjBIT,IAAe,YACf7c,EAAI6c,WAAa,WACjB7c,EAAI2d,UAAY,EAChB3d,EAAI4d,YAAc,UAElB5d,EAAI6c,WAAa,WACjB7c,EAAI2d,UAAYb,EAChB9c,EAAI4d,YAAc,SAGlBV,IAAe,UACfld,EAAIuO,KAAO,cACJ2O,GAAc,gBAA0BA,GAAc,kBAC7Dld,EAAIuO,KAAwB,IAAjB8O,EAAqB,cAAgB,YAChDrd,EAAI6d,OAASX,EAAa,GAGvBld,CACX,CAYQV,yBACJud,EACAC,EACAI,EACAG,EACAT,EACAU,GAEA,MAAMtd,EAAMuD,KAAKma,kBAAkBb,EAAYC,EAAYI,EAAYG,EAAcT,EAAmBU,GAQxG,OANAtd,EAAIuO,KAAO,QACXvO,EAAI8d,UAAY,oBAChB9d,EAAI+d,OAAS,EACb/d,EAAIge,OAAS,EACbhe,EAAIie,OAAS,EAELf,GACJ,KAAK,iBACDld,EAAI+d,OAASV,EACb,MACJ,KAAK,iBACDrd,EAAIge,OAASX,EACb,MACJ,KAAK,iBACDrd,EAAIie,OAASZ,EAIrB,OAAOrd,CACX,CAYQV,yBACJud,EACAC,EACAI,EACAG,EACAT,EACAU,GAEA,MAAMtd,EAAMuD,KAAK2a,aAAaZ,GACxB3d,EAAWid,EAAkBO,UAAUN,EAAYC,EAAY,iBAC/Dld,EAAWgd,EAAkBO,UAAUN,EAAYC,EAAY,eAyBrE,OAtBIQ,GACAtd,EAAIme,UAAY,EAChBne,EAAIoe,UAAY,EAChBpe,EAAIqe,QAAUre,EAAIme,UAAYb,EAAkBgB,wBAAwBje,EACxEL,EAAIue,QAAUve,EAAIoe,UAAYd,EAAkBgB,wBAAwBhe,IAExEN,EAAIme,UAAYvB,EAAkBO,UAAUN,EAAYC,EAAY,sBACpE9c,EAAIoe,UAAYxB,EAAkBO,UAAUN,EAAYC,EAAY,oBACpE9c,EAAIqe,QAAU,EACdre,EAAIue,QAAU,GAElBhb,KAAKib,uBAAuBxe,EAAK4c,GAEjC5c,EAAIye,QAAU9e,EACdK,EAAI0e,QAAU9e,EACdI,EAAIK,EAAIV,EACRK,EAAIM,EAAIV,EAERI,EAAI6c,WAAaA,EACjB7c,EAAI8c,WAAaA,EACjB9c,EAAIkd,WAAaA,EAEVld,CACX,CAUQV,4BAA4B4d,EAAoBG,EAAgCT,EAAuCU,GAC3H,MAAMtd,EAAMuD,KAAK2a,aAAaZ,GAU9B,OATA/Z,KAAKib,uBAAuBxe,EAAK4c,GACjC5c,EAAI6c,WAAa,cACjB7c,EAAI8c,WAAa,EACjB9c,EAAIkd,WAAaA,EAEjBld,EAAIuO,KAAwB,IAAjB8O,EAAqB,UAAY,QAC5Crd,EAAI2e,IAAMC,OAAOC,aAAa3B,GAC9Bld,EAAI8e,QAAU5B,EAEPld,CACX,CAOQV,8BAA8BU,EAAU4c,GAC5C,MAAMmC,EAAmBnC,EAAkBoC,kBAAkB,eACvDC,EAASF,GAAwE,IAApDnC,EAAkBO,UAAU,cAAqB,EAAG,IACjF+B,EAAUH,GAAwE,IAApDnC,EAAkBO,UAAU,cAAqB,EAAG,IAClFgC,EACFJ,IACqD,IAApDnC,EAAkBO,UAAU,cAAqB,EAAG,KACG,IAApDP,EAAkBO,UAAU,cAAqB,EAAG,KACA,IAApDP,EAAkBO,UAAU,cAAqB,EAAG,KACtDiC,EAAWL,GAAwE,IAApDnC,EAAkBO,UAAU,cAAqB,EAAG,IAEzFnd,EAAIif,OAASA,EACbjf,EAAIkf,QAAUA,EACdlf,EAAImf,QAAUA,EACdnf,EAAIof,SAAWA,CACnB,CAOQ9f,oBAAoBge,GACxB,MAAMtd,EAA4B,CAClCA,eAAqB,QAGrB,OAFAA,EAAImL,OAASmS,EAENtd,CACX,EC7NG,MAAMqf,EAGT,YACIC,EACAC,EACAC,GAEAjc,KAAKkc,aAAeC,QAAQC,kBACtB,IAAID,QAAQC,kBAAkBL,EAAmBC,GAAsB,CAAC1C,EAAYC,EAAYI,EAAYG,KACxG,MAAMrd,EAAMod,EAAmBwC,kBAAkB/C,EAAYC,EAAYI,EAAYG,EAAc9Z,MAEnGic,EAAe3C,EAAYC,EAAY9c,EAAI,IAE/CuD,KAAKsc,yBACf,CAUO1C,UAAUN,EAAwBC,EAAoBI,GACzD,OAAO3Z,KAAKkc,aAAatC,UAAUN,EAAYC,EAAYI,EAC/D,CAOO8B,kBAAkBnC,GAErB,OAAOA,IAAe,YAAoBA,IAAe,UAC7D,CAKOhR,UACHtI,KAAKkc,aAAa5T,SACtB,CAMQgU,0BAWJ,MAVoB,CAChB1C,UAAW,IACA,EAEX6B,kBAAmB,KACR,EAEXnT,QAAS,OAIjB,E,uBC5DJ,MAEMiU,EAAqB/gB,OAAOghB,KAAK,MAAcpa,OAAS,EAGvD,MAAMqa,EAwDTvgB,YACIkI,EACA2X,EACAC,EACAC,GA1DI,KAAAS,QAA0D,GAE1D,KAAAC,iBAA2B,EAC3B,KAAAC,gBAA0B,EAIjB,KAAAC,aAAwB,gBAGxB,KAAAC,YAAuB,0BAA0BC,KAAKC,UAAUC,UAOzE,KAAAC,mBAAsBzgB,IAAD,EAErB,KAAA0gB,iBAAoB1gB,IAAD,EAEnB,KAAA2gB,mBAAsB3gB,IAAD,EAGrB,KAAA4gB,kBAAqB5gB,IAAD,EAEpB,KAAA6gB,kBAAqB7gB,IAAD,EAEpB,KAAA8gB,gBAAmB9gB,IAAD,EAElB,KAAA+gB,oBAAuB/gB,IAAD,EAEtB,KAAAghB,mBAAsBhhB,IAAD,EAErB,KAAAihB,kBAAqBjhB,IAAD,EAEpB,KAAAkhB,iBAA2B,EAE3B,KAAAC,UAAY,EACH,KAAAC,gBAAkB,6BAAwCb,UAAUc,YAAyD,IAA5Cd,UAAUc,UAAU/a,QAAQ,WAItH,KAAAgb,gBAA0B,EAE1B,KAAAC,2BAAyD,KAGzD,KAAAC,uBAA0BxhB,IAAD,EAEzB,KAAAyhB,0BAA6BzhB,IAAD,EAUhCuD,KAAKme,aAAe,sBAAuB/Z,GAC3CpE,KAAKoe,QAAUha,EAEfpE,KAAKqe,mBAAqBtC,EAC1B/b,KAAKse,sBAAwBtC,EAC7Bhc,KAAKue,gBAAkBtC,EAEvBjc,KAAKwe,gBAEDxe,KAAK8c,cACL9c,KAAKye,UAAY,IAIhBze,KAAKoe,QAAQM,uBACd1e,KAAKoe,QAAQM,qBAAuB,KAChC1e,KAAKwe,eAAe,EAGhC,CAUO5E,UAAUN,EAAwBC,EAAoBI,GACzD,MAAMgF,EAAS3e,KAAK0c,QAAQpD,GAAYC,GAExC,IAAKoF,EACD,KAAM,yBAAyB,KAAWrF,KAG1CA,GAAc,gBAAwBA,GAAc,gBACpDtZ,KAAK4e,cAActF,EAAYC,EAAYI,GAG/C,MAAMkF,EAAeF,EAAOhF,GAC5B,QAAqBpW,IAAjBsb,EACA,KAAM,wBAAwBlF,gBAAyB,KAAWL,cAAuBC,IAO7F,OAJII,IAAe,WACf,UAAW,mIAGRkF,CACX,CAOOpD,kBAAkBnC,GACrB,YAAoC/V,IAA7BvD,KAAK0c,QAAQpD,EACxB,CAKOhR,UAEHtI,KAAKqe,mBAAqB,OAC1Bre,KAAKse,sBAAwB,OAC7Bte,KAAKue,gBAAkB,cAChBve,KAAKoe,QAAQM,qBAEhB1e,KAAK8e,oBACL9e,KAAK+e,gBAEb,CAKQP,gBACJ,MAAMQ,EAAehf,gBAAI,EAAJA,KAAMoe,QAAQa,kBACnC,GAAID,KAAkBhf,KAAK2d,iBAAmB3d,KAAK8e,qBAAuBE,GAAe,CAKrF,GAHAhf,KAAK+e,iBAGD/e,KAAK0c,QACL,IAAK,MAAMhU,KAAU1I,KAAK0c,QACtB,GAAIhU,EACA,IAAK,MAAMwW,KAAiBxW,EAAQ,CAChC,MACMiW,EAASjW,GADKwW,GAEpB,GAAIP,EACA,IAAK,IAAIhF,EAAa,EAAGA,EAAagF,EAAOvc,OAAQuX,IACjDgF,EAAOhF,GAAc,C,CAQ7C3Z,KAAK8e,mBAAqBE,EAE1Bhf,KAAK8e,mBAAmBK,UAAiD,IAAtCnf,KAAK8e,mBAAmBK,SAAkBnf,KAAK8e,mBAAmBK,SAAWnf,KAAKoe,QAAQgB,eAC7Hpf,KAAKqf,oBACLrf,KAAKsf,wBACLtf,KAAKuf,wBACLvf,KAAK2d,iBAAkB,EAGvB3d,KAAKwf,2B,CAEb,CAKQT,iBACA/e,KAAK8e,qBAEL9e,KAAK8e,mBAAmBW,oBAAoB,OAAQzf,KAAKod,oBACzDpd,KAAK8e,mBAAmBW,oBAAoB,OAAQzf,KAAK0d,mBAGzD1d,KAAK8e,mBAAmBW,oBAAoB,UAAWzf,KAAKkd,oBAC5Dld,KAAK8e,mBAAmBW,oBAAoB,QAASzf,KAAKmd,kBAG1Dnd,KAAK8e,mBAAmBW,oBAAoBzf,KAAKme,aAAe,OAAQne,KAAKqd,mBAC7Erd,KAAK8e,mBAAmBW,oBAAoBzf,KAAKme,aAAe,OAAQne,KAAKsd,mBAC7Etd,KAAK8e,mBAAmBW,oBAAoBzf,KAAKme,aAAe,KAAMne,KAAKud,iBAC3Evd,KAAK8e,mBAAmBW,oBAAoBzf,KAAKme,aAAe,SAAUne,KAAKwd,qBAC/Exd,KAAK8e,mBAAmBW,oBAAoBzf,KAAK0f,gBAAiB1f,KAAKyd,oBAGvEkC,OAAOF,oBAAoB,mBAAoBzf,KAAKie,wBACpD0B,OAAOF,oBAAoB,sBAAuBzf,KAAKke,4BAGvDle,KAAKge,4BACLhe,KAAKoe,QAAQwB,qBAAqBC,OAAO7f,KAAKge,4BAGlDhe,KAAK2d,iBAAkB,CAC3B,CAMQ6B,4BACJ,GAAIxC,UAAU8C,YAAa,CACvB,MAAMC,EAAW/C,UAAU8C,cAE3B,IAAK,MAAME,KAAWD,EACdC,GACAhgB,KAAKigB,YAAYD,E,CAMH,mBAAfE,YAA6BA,WAAW,kBAAkBC,SAGjEngB,KAAKogB,kBAAkB,WAAkB,EAAG,EAAG,EAEvD,CAOQH,YAAYD,GAChB,MAAM1G,EAAatZ,KAAKqgB,sBAAsBL,EAAQM,IAChD/G,EAAayG,EAAQhX,MAE3BhJ,KAAKugB,UAAYvgB,KAAKugB,WAAa,IAAIplB,MAAkB6kB,EAAQhX,MAAQ,GACzEhJ,KAAKwgB,gBAAgBlH,EAAYC,EAAYyG,EAAQS,QAAQre,OAAS4d,EAAQU,KAAKte,QAEnFpC,KAAKugB,UAAUhH,GAAcD,CACjC,CASQ8G,kBAAkB9G,EAAwBC,EAAoBoH,EAAkBC,GAC/E5gB,KAAK4c,iBACN5c,KAAK4c,gBAAiB,GAE1B5c,KAAKwgB,gBAAgBlH,EAAYC,EAAYgD,GAC7C,MAAMsE,EAAU7gB,KAAK0c,QAAQpD,GAAYC,GACzCsH,EAAQ,GAAKF,EACbE,EAAQ,GAAKD,CACjB,CAQQJ,gBAAgBlH,EAAwBC,EAAoBuH,GAChE,QAAmBvd,IAAfgW,EACA,KAAM,6BAA6B,KAAWD,wBAOlD,GAJKtZ,KAAK0c,QAAQpD,KACdtZ,KAAK0c,QAAQpD,GAAc,CAAC,IAG3BtZ,KAAK0c,QAAQpD,GAAYC,GAAa,CACvC,MAAMoF,EAAS,IAAIxjB,MAAc2lB,GAEjCnC,EAAOoC,KAAK,GAEZ/gB,KAAK0c,QAAQpD,GAAYC,GAAcoF,EACvC3e,KAAKqe,mBAAmB/E,EAAYC,E,CAE5C,CAOQyH,kBAAkB1H,EAAwBC,GAC1CvZ,KAAK0c,QAAQpD,GAAYC,YAClBvZ,KAAK0c,QAAQpD,GAAYC,GAChCvZ,KAAKse,sBAAsBhF,EAAYC,GAE/C,CAKQ8F,oBACJrf,KAAKkd,mBAAsBzgB,IAClBuD,KAAK2c,kBACN3c,KAAK2c,iBAAkB,EACvB3c,KAAKwgB,gBAAgB,cAAqB,EAzTrC,MA4TT,MAAMS,EAAQjhB,KAAK0c,QAAQ,eAAqB,GAChD,GAAIuE,EAAO,CACPA,EAAMxkB,EAAI8e,SAAW,EAErB,MAAM2F,EAAczkB,EACpBykB,EAAYvH,WAAald,EAAI8e,QAEzBvb,KAAK8c,aAAergB,EAAImf,SAAuB,SAAZnf,EAAI2e,MAClCpb,KAAKye,UAAU0C,SAAS1kB,EAAI8e,UAC7Bvb,KAAKye,UAAU5Y,KAAKpJ,EAAI8e,UAIhCvb,KAAKue,gBAAgB,cAAqB,EAAG2C,E,GAIrDlhB,KAAKmd,iBAAoB1gB,IAChBuD,KAAK2c,kBACN3c,KAAK2c,iBAAkB,EACvB3c,KAAKwgB,gBAAgB,cAAqB,EAhVrC,MAmVT,MAAMS,EAAQjhB,KAAK0c,QAAQ,eAAqB,GAChD,GAAIuE,EAAO,CACPA,EAAMxkB,EAAI8e,SAAW,EAErB,MAAM2F,EAAczkB,EAGpB,GAFAykB,EAAYvH,WAAald,EAAI8e,QAEzBvb,KAAK8c,aAA2B,SAAZrgB,EAAI2e,KAAkBpb,KAAKye,UAAUrc,OAAS,EAAG,CACrE,IAAK,MAAMmZ,KAAWvb,KAAKye,UAAW,CAClC,MAAMyC,EAAwBrH,EAAmBwC,kBAAkB,cAAqB,EAAGd,EAAS,EAAGvb,KAAMA,KAAK8e,oBAClHmC,EAAM1F,GAAW,EACjBvb,KAAKue,gBAAgB,cAAqB,EAAG2C,E,CAEjDlhB,KAAKye,UAAU3Y,OAAO,EAAG9F,KAAKye,UAAUrc,O,CAG5CpC,KAAKue,gBAAgB,cAAqB,EAAG2C,E,GAIrDlhB,KAAKod,mBAAqB,KACtB,GAAIpd,KAAK2c,gBAAiB,CACtB,MAAMsE,EAAQjhB,KAAK0c,QAAQ,eAAqB,GAEhD,IAAK,IAAIva,EAAI,EAAGA,EAAI8e,EAAM7e,OAAQD,IAC9B,GAAiB,IAAb8e,EAAM9e,GAAU,CAChB8e,EAAM9e,GAAK,EAEX,MAAM+e,EAAwBrH,EAAmBwC,kBAAkB,cAAqB,EAAGla,EAAG,EAAGnC,KAAMA,KAAK8e,oBAE5G9e,KAAKue,gBAAgB,cAAqB,EAAG2C,E,CAGjDlhB,KAAK8c,aACL9c,KAAKye,UAAU3Y,OAAO,EAAG9F,KAAKye,UAAUrc,O,GAKpDpC,KAAK8e,mBAAmBsC,iBAAiB,UAAWphB,KAAKkd,oBACzDld,KAAK8e,mBAAmBsC,iBAAiB,QAASphB,KAAKmd,kBACvDnd,KAAK8e,mBAAmBsC,iBAAiB,OAAQphB,KAAKod,mBAC1D,CAKQkC,wBAEJtf,KAAK+d,gBAAmB,6BAAwCf,UAAUqE,gBAAmB,EACxFrhB,KAAKshB,kBACNthB,KAAKshB,gBAAkB,IAAInmB,MAAc6E,KAAK+d,kBAGlD,IAAK,IAAI5b,EAAI,EAAGA,EAAInC,KAAK+d,gBAAiB5b,IACtCnC,KAAKshB,gBAAgBnf,IAAM,EAG/BnC,KAAKqd,kBAAqB5gB,IACtB,MAAM6c,EAAatZ,KAAKuhB,gBAAgB9kB,GAClC8c,EAAaD,IAAe,WAAmB,EAAItZ,KAAKshB,gBAAgBve,QAAQtG,EAAI2d,WAErFpa,KAAK0c,QAAQpD,KACdtZ,KAAK0c,QAAQpD,GAAc,CAAC,GAG3BtZ,KAAK0c,QAAQpD,GAAYC,IAC1BvZ,KAAKogB,kBAAkB9G,EAAYC,EAAY9c,EAAIye,QAASze,EAAI0e,SAGpE,MAAM0F,EAAU7gB,KAAK0c,QAAQpD,GAAYC,GACzC,GAAIsH,EAAS,CACT,MAAMK,EAAczkB,EACpBykB,EAAYvH,WAAa,UAEzBkH,EAAQ,iBAA2BpkB,EAAIye,QACvC2F,EAAQ,eAAyBpkB,EAAI0e,QAErCnb,KAAKue,gBAAgBjF,EAAYC,EAAY2H,GAGxClhB,KAAK6c,eAAgC,IAAhBpgB,EAAI6d,SAC1B4G,EAAYvH,WAAald,EAAI6d,OAAS,EACtCuG,EAAQpkB,EAAI6d,OAAS,GAAKuG,EAAQpkB,EAAI6d,OAAS,GAAK,EAAI,EACxDta,KAAKue,gBAAgBjF,EAAYC,EAAY2H,G,GAKzDlhB,KAAKsd,kBAAqB7gB,IACtB,MAAM6c,EAAatZ,KAAKuhB,gBAAgB9kB,GACxC,IAAI8c,EAAaD,IAAe,WAAmB,EAAI7c,EAAI2d,UAE3D,GAAId,IAAe,WAAkB,CACjC,MAAMpT,EAAMlG,KAAKshB,gBAAgBve,SAAS,GAE1C,KAAImD,GAAO,GAMP,YADA,UAAW,kEAAkElG,KAAK+d,mBAJlFxE,EAAarT,EACblG,KAAKshB,gBAAgBpb,GAAOzJ,EAAI2d,S,CAQnCpa,KAAK0c,QAAQpD,KACdtZ,KAAK0c,QAAQpD,GAAc,CAAC,GAG3BtZ,KAAK0c,QAAQpD,GAAYC,GAEnBD,IAAe,YACtBtZ,KAAKqe,mBAAmB/E,EAAYC,GAFpCvZ,KAAKogB,kBAAkB9G,EAAYC,EAAY9c,EAAIye,QAASze,EAAI0e,SAKpE,MAAM0F,EAAU7gB,KAAK0c,QAAQpD,GAAYC,GACzC,GAAIsH,EAAS,CACT,MAAMW,EAAqBX,EAAQ,iBAC7BY,EAAmBZ,EAAQ,eAEjC,GAAIvH,IAAe,YAWf,IATuB,IAAnBtZ,KAAK4d,gBACiBra,IAAlB9G,EAAI2d,UAEJpa,KAAK4d,SAAW5d,KAAK6d,gBAAkB,EAAI,EAE3C7d,KAAK4d,SAAWnhB,EAAI2d,YAIvBsH,SAASC,mBACV,IACI3hB,KAAK8e,mBAAmB8C,kBAAkB5hB,KAAK4d,S,CACjD,MAAOiE,G,OAMb,GAAIplB,EAAI2d,YAAcsH,SAASC,mBAC3B,IACI3hB,KAAK8e,mBAAmB8C,kBAAkBnlB,EAAI2d,U,CAChD,MAAOyH,G,CAMjBhB,EAAQ,iBAA2BpkB,EAAIye,QACvC2F,EAAQ,eAAyBpkB,EAAI0e,QACrC0F,EAAQpkB,EAAI6d,OAAS,GAAK,EAE1B,MAAM4G,EAAczkB,EAKpBykB,EAAYvH,WAAald,EAAI6d,OAAS,EAEtCta,KAAKue,gBAAgBjF,EAAYC,EAAY2H,GAEzCM,IAAuB/kB,EAAIye,SAAWuG,IAAqBhlB,EAAI0e,UAC/D+F,EAAYvH,WAAa,UACzB3Z,KAAKue,gBAAgBjF,EAAYC,EAAY2H,G,GAKzDlhB,KAAKud,gBAAmB9gB,I,cACpB,MAAM6c,EAAatZ,KAAKuhB,gBAAgB9kB,GAClC8c,EAAaD,IAAe,WAAmB,EAAItZ,KAAKshB,gBAAgBve,QAAQtG,EAAI2d,WAE1F,GAAId,IAAe,WAAkB,CACjC,IAAoB,IAAhBC,EACA,OAEAvZ,KAAKshB,gBAAgB/H,IAAe,C,CAI5C,MAAMsH,EAAkC,QAAxB,EAAA7gB,KAAK0c,QAAQpD,UAAW,eAAGC,GAC3C,GAAIsH,GAAuC,IAA5BA,EAAQpkB,EAAI6d,OAAS,GAAU,CAC1C,MAAMkH,EAAqBX,EAAQ,iBAC7BY,EAAmBZ,EAAQ,eAEjCA,EAAQ,iBAA2BpkB,EAAIye,QACvC2F,EAAQ,eAAyBpkB,EAAI0e,QACrC0F,EAAQpkB,EAAI6d,OAAS,GAAK,EAE1B,MAAM4G,EAAczkB,EAEhB+kB,IAAuB/kB,EAAIye,SAAWuG,IAAqBhlB,EAAI0e,UAC/D+F,EAAYvH,WAAa,UACzB3Z,KAAKue,gBAAgBjF,EAAYC,EAAY2H,IAMjDA,EAAYvH,WAAald,EAAI6d,OAAS,EAElChB,IAAe,YAAoBtZ,KAAK4d,UAAY,IAA8C,QAAzC,KAAA5d,KAAK8e,oBAAmBgD,yBAAiB,sBAAG9hB,KAAK4d,WAC1G5d,KAAK8e,mBAAmBiD,sBAAsB/hB,KAAK4d,UAC5CnhB,EAAI2d,YAAsD,QAAzC,KAAApa,KAAK8e,oBAAmBgD,yBAAiB,sBAAGrlB,EAAI2d,aACxEpa,KAAK8e,mBAAmBiD,sBAAsBtlB,EAAI2d,WAGtDpa,KAAKue,gBAAgBjF,EAAYC,EAAY2H,GAEzC5H,IAAe,YACftZ,KAAKse,sBAAsBhF,EAAYC,E,GAKnDvZ,KAAKwd,oBAAuB/gB,I,YACxB,GAAwB,UAApBA,EAAI4d,YAAyB,CAC7B,MAAMwG,EAAU7gB,KAAK0c,QAAQ,YAAkB,GAE3C1c,KAAK4d,UAAY,IAA8C,QAAzC,KAAA5d,KAAK8e,oBAAmBgD,yBAAiB,sBAAG9hB,KAAK4d,YACvE5d,KAAK8e,mBAAmBiD,sBAAsB/hB,KAAK4d,UAGvD,IAAK,IAAIjE,EAAa,eAAwBA,GAAc,oBAA6BA,IACrF,GAA4B,IAAxBkH,EAAQlH,GAAmB,CAC3BkH,EAAQlH,GAAc,EAEtB,MAAMuH,EAAwBrH,EAAmBwC,kBAAkB,WAAkB,EAAG1C,EAAY,EAAG3Z,KAAMA,KAAK8e,oBAElH9e,KAAKue,gBAAgB,WAAkB,EAAG2C,E,MAG/C,CACH,MAAM3H,EAAavZ,KAAKshB,gBAAgBve,QAAQtG,EAAI2d,YAEP,QAAzC,KAAApa,KAAK8e,oBAAmBgD,yBAAiB,sBAAGrlB,EAAI2d,aAChDpa,KAAK8e,mBAAmBiD,sBAAsBtlB,EAAI2d,WAGtDpa,KAAK0c,QAAQ,YAAkBnD,GAAY,gBAA0B,EAErE,MAAM2H,EAAwBrH,EAAmBwC,kBAAkB,WAAkB9C,EAAY,eAAwB,EAAGvZ,KAAMA,KAAK8e,oBAEvI9e,KAAKue,gBAAgB,WAAkBhF,EAAY2H,GAEnDlhB,KAAKshB,gBAAgB/H,IAAe,EACpCvZ,KAAKse,sBAAsB,WAAkB/E,E,GAKrDvZ,KAAK0f,gBACD,YAAagC,SAASM,cAAc,OAC9B,aACiCze,IAA3Bme,SAAUO,aAChB,aACA,iBAMV,IAAIC,GAAmB,EACvB,MAAMC,EAAO,WAAa,EAE1B,IACI,MAAMC,EAAU5mB,OAAO6mB,eAAe,CAAC,EAAG,UAAW,CACjDC,IAAK,WACDJ,GAAmB,CACvB,IAGJliB,KAAK8e,mBAAmBsC,iBAAiB,OAAQe,EAAMC,GACvDpiB,KAAK8e,mBAAmBW,oBAAoB,OAAQ0C,EAAMC,E,CAC5D,MAAOP,G,CAIT7hB,KAAK0d,kBAAoB,K,cAErB,GAAI1d,KAAKyb,kBAAkB,YAAmB,CAC1C,MAAMoF,EAAU7gB,KAAK0c,QAAQ,YAAkB,GAE3C1c,KAAK4d,UAAY,IAA8C,QAAzC,KAAA5d,KAAK8e,oBAAmBgD,yBAAiB,sBAAG9hB,KAAK4d,YACvE5d,KAAK8e,mBAAmBiD,sBAAsB/hB,KAAK4d,UAGvD,IAAK,IAAIjE,EAAa,eAAwBA,GAAc,oBAA6BA,IACrF,GAA4B,IAAxBkH,EAAQlH,GAAmB,CAC3BkH,EAAQlH,GAAc,EAEtB,MAAMuH,EAAwBrH,EAAmBwC,kBAAkB,WAAkB,EAAG1C,EAAY,EAAG3Z,KAAMA,KAAK8e,oBAElH9e,KAAKue,gBAAgB,WAAkB,EAAG2C,E,EAMtD,GAAIlhB,KAAKyb,kBAAkB,YAAmB,CAC1C,MAAMoF,EAAU7gB,KAAK0c,QAAQ,YAE7B,IAAK,IAAInD,EAAa,EAAGA,EAAavZ,KAAKshB,gBAAgBlf,OAAQmX,IAAc,CAC7E,MAAMa,EAAYpa,KAAKshB,gBAAgB/H,GAMvC,IAJ6C,QAAzC,KAAAvZ,KAAK8e,oBAAmBgD,yBAAiB,sBAAG1H,KAC5Cpa,KAAK8e,mBAAmBiD,sBAAsB3H,IAG/B,IAAfA,GAAsE,KAA/B,QAAnB,EAAAyG,EAAQtH,UAAW,eAAG,iBAA+B,CACzEsH,EAAQtH,GAAY,gBAA0B,EAE9C,MAAM2H,EAAwBrH,EAAmBwC,kBAAkB,WAAkB9C,EAAY,eAAwB,EAAGvZ,KAAMA,KAAK8e,oBAEvI9e,KAAKue,gBAAgB,WAAkBhF,EAAY2H,GAEnDlhB,KAAKshB,gBAAgB/H,IAAe,EACpCvZ,KAAKse,sBAAsB,WAAkB/E,E,KAM7DvZ,KAAKyd,mBAAsBhhB,IACvB,MAAM6c,EAAa,WAGdtZ,KAAK0c,QAAQpD,KACdtZ,KAAK0c,QAAQpD,GAAc,IAG1BtZ,KAAK0c,QAAQpD,GANC,KAOftZ,KAAK4c,gBAAiB,EACtB5c,KAAKwgB,gBAAgBlH,EARN,EAQ8BiD,IAGjD,MAAMsE,EAAU7gB,KAAK0c,QAAQpD,GAXV,GAYnB,GAAIuH,EAAS,CACTA,EAAQ,kBAA4BpkB,EAAI+d,QAAU,EAClDqG,EAAQ,kBAA4BpkB,EAAIge,QAAUhe,EAAI8lB,YAAc,EACpE1B,EAAQ,kBAA4BpkB,EAAIie,QAAU,EAElD,MAAMwG,EAAczkB,EAEsB,IAAtCokB,EAAQ,oBACRK,EAAYvH,WAAa,iBACzB3Z,KAAKue,gBAAgBjF,EArBV,EAqBkC4H,IAEP,IAAtCL,EAAQ,oBACRK,EAAYvH,WAAa,iBACzB3Z,KAAKue,gBAAgBjF,EAzBV,EAyBkC4H,IAEP,IAAtCL,EAAQ,oBACRK,EAAYvH,WAAa,iBACzB3Z,KAAKue,gBAAgBjF,EA7BV,EA6BkC4H,G,GAKzDlhB,KAAK8e,mBAAmBsC,iBAAiBphB,KAAKme,aAAe,OAAQne,KAAKqd,mBAC1Erd,KAAK8e,mBAAmBsC,iBAAiBphB,KAAKme,aAAe,OAAQne,KAAKsd,mBAC1Etd,KAAK8e,mBAAmBsC,iBAAiBphB,KAAKme,aAAe,KAAMne,KAAKud,iBACxEvd,KAAK8e,mBAAmBsC,iBAAiBphB,KAAKme,aAAe,SAAUne,KAAKwd,qBAC5Exd,KAAK8e,mBAAmBsC,iBAAiB,OAAQphB,KAAK0d,mBACtD1d,KAAK8e,mBAAmBsC,iBAAiBphB,KAAK0f,gBAAiB1f,KAAKyd,qBAAoByE,GAAmB,CAAEM,SAAS,IAGtHxiB,KAAKge,2BAA6Bhe,KAAKoe,QAAQwB,qBAAqBlI,KAAI,KACpE,GAAI1X,KAAKyb,kBAAkB,YAAmB,CAC1C,MAAMoF,EAAU7gB,KAAK0c,QAAQ,YAAkB,GAC/CmE,EAAQ,kBAA4B,EACpCA,EAAQ,kBAA4B,EACpCA,EAAQ,kBAA4B,C,IAGhD,CAKQtB,wBACJvf,KAAKie,uBAA0BxhB,IAC3BuD,KAAKigB,YAAYxjB,EAAIujB,QAAQ,EAGjChgB,KAAKke,0BAA6BzhB,IAC9B,GAAIuD,KAAKugB,UAAW,CAChB,MAAMjH,EAAatZ,KAAKqgB,sBAAsB5jB,EAAIujB,QAAQM,IACpD/G,EAAa9c,EAAIujB,QAAQhX,MAE/BhJ,KAAKghB,kBAAkB1H,EAAYC,UAC5BvZ,KAAKugB,UAAUhH,E,GAI9BoG,OAAOyB,iBAAiB,mBAAoBphB,KAAKie,wBACjD0B,OAAOyB,iBAAiB,sBAAuBphB,KAAKke,0BACxD,CAQQU,cAActF,EAAwBC,EAAoBI,GAE9D,MAAM8I,EAAKzF,UAAU8C,cAAcvG,GAEnC,GAAIkJ,GAAMnJ,IAAetZ,KAAKugB,UAAUhH,GAAa,CACjD,MAAMoF,EAAS3e,KAAK0c,QAAQpD,GAAYC,GAEpCI,GAAc8I,EAAGhC,QAAQre,OACzBuc,EAAOhF,GAAc8I,EAAG/B,KAAK/G,EAAa8I,EAAGhC,QAAQre,QAAQsgB,UAE7D/D,EAAOhF,GAAc8I,EAAGhC,QAAQ9G,GAAYrY,K,CAGxD,CAOQ+e,sBAAsBsC,GAC1B,OAAoC,IAAhCA,EAAW5f,QAAQ,SAEoB,IAAhC4f,EAAW5f,QAAQ,QAAiB,eAAuB,gBACvB,IAApC4f,EAAW5f,QAAQ,cAAyD,IAAnC4f,EAAWC,OAAO,cAAuD,IAAjCD,EAAWC,OAAO,UAEnG,WACgC,IAAhCD,EAAW5f,QAAQ,QAEnB,YAGJ,YACX,CAOQwe,gBAAgB9kB,GACpB,IAAI6c,EAAa,WAMjB,OAJwB,UAApB7c,EAAI4d,aAA+C,QAApB5d,EAAI4d,aAAyB5d,EAAIomB,WAChEvJ,EAAa,YAGVA,CACX,E,cCjwBG,MAAMwJ,EAYT,YAAmB1e,GAJF,KAAA2e,oBAAsB,IAAI5nB,MAEpC,KAAA6nB,UAAY,EA6CH,KAAAC,gBAAmBC,IAC/B,IAAK,IAAI5J,EAAa,EAAGA,EAAatZ,KAAKmjB,SAAS/gB,OAAQkX,IAAc,CACtE,MAAMqF,EAAS3e,KAAKmjB,SAAS7J,GAC7B,IAAK,MAAM4F,KAAiBP,EAAQ,CAChC,MAAMpF,GAAc2F,EACpBgE,EAAQE,WAAW,IAAI,IAAapjB,KAAKyZ,mBAAoBH,EAAYC,G,EAGjFvZ,KAAK+iB,oBAAoBld,KAAKqd,EAAQ,EAG1B,KAAAG,kBAAqBH,IACjC,MAAMhd,EAAMlG,KAAK+iB,oBAAoBhgB,QAAQmgB,GAEzChd,GAAO,GACPlG,KAAK+iB,oBAAoBjd,OAAOI,EAAK,E,EAzDzC,MAAMod,EAAsB9nB,OAAOghB,KAAK,MAAYpa,OAAS,EAC7DpC,KAAKmjB,SAAW,IAAIhoB,MAAqBmoB,GAEzC,MAAMvH,EAAoB,CAACzC,EAAwBC,KAC1CvZ,KAAKmjB,SAAS7J,KACftZ,KAAKmjB,SAAS7J,GAAc,IAAIne,OAG/B6E,KAAKmjB,SAAS7J,GAAYC,KAC3BvZ,KAAKmjB,SAAS7J,GAAYC,GAAcA,GAE5C,IAAK,MAAM2J,KAAWljB,KAAK+iB,oBAAqB,CAC5C,MAAMQ,EAAe,IAAI,IAAavjB,KAAKyZ,mBAAoBH,EAAYC,GAC3E2J,EAAQE,WAAWG,E,GAIrBvH,EAAuB,CAAC1C,EAAwBC,K,OACrB,QAAzB,EAAAvZ,KAAKmjB,SAAS7J,UAAW,eAAGC,YACrBvZ,KAAKmjB,SAAS7J,GAAYC,GAErC,IAAK,MAAM2J,KAAWljB,KAAK+iB,oBACvBG,EAAQM,cAAclK,EAAYC,E,EAIpC0C,EAAiB,CAAC3C,EAAwBC,EAAoBkK,KAChE,GAAIA,EACA,IAAK,MAAMP,KAAWljB,KAAK+iB,oBACvBG,EAAQ3E,gBAAgBjF,EAAYC,EAAYkK,E,EAKrC,oBAAZtH,QACPnc,KAAKyZ,mBAAqB,IAAIqC,EAAwBC,EAAmBC,EAAsBC,GAE/Fjc,KAAKyZ,mBAAqB,IAAIgD,EAAqBrY,EAAQ2X,EAAmBC,EAAsBC,EAE5G,CAsBO3T,UACHtI,KAAKyZ,mBAAmBnR,SAC5B,ECjGG,MAAMob,EA2DTxnB,YAAYkI,GACR,MAAMkf,EAAsB9nB,OAAOghB,KAAK,MAAYpa,OAAS,EAC7DpC,KAAKmjB,SAAW,IAAIhoB,MAAMmoB,GAC1BtjB,KAAK2jB,aAAe,IAAIxoB,MAAMmoB,GAC9BtjB,KAAKoe,QAAUha,EAEVpE,KAAKoe,QAAQwF,uBACd5jB,KAAKoe,QAAQwF,qBAAuB,IAAId,EAA4B1e,IAExEpE,KAAKoe,QAAQwF,qBAAqBZ,YAGlChjB,KAAK6jB,4BAA8B,IAAI,MAAYC,IAC/C,IAAK,MAAMC,KAAW/jB,KAAKmjB,SACvB,GAAIY,EACA,IAAK,MAAMpF,KAAUoF,EACbpF,GACA3e,KAAK6jB,4BAA4BG,eAAeF,EAAUnF,E,IAM9E3e,KAAKikB,+BAAiC,IAAI,KAE1CjkB,KAAKoe,QAAQwF,qBAAqBX,gBAAgBjjB,MAElDA,KAAKkkB,mBAAqB9f,EAAO+f,oBAAoBzM,KAAI,KACrD1X,KAAKsI,SAAS,GAEtB,CAhEO8b,gBAAsC9K,EAAeC,GACxD,QAAmBhW,IAAfgW,EAA0B,CAC1B,QAAsChW,IAAlCvD,KAAK2jB,aAAarK,GAClB,OAAO,KAGXC,EAAavZ,KAAK2jB,aAAarK,E,CAGnC,OAAKtZ,KAAKmjB,SAAS7J,SAAyD/V,IAA1CvD,KAAKmjB,SAAS7J,GAAYC,GAIrDvZ,KAAKmjB,SAAS7J,GAAYC,GAHtB,IAIf,CAMO8K,iBAAuC/K,GAE1C,OAAKtZ,KAAKmjB,SAAS7J,GAGZtZ,KAAKmjB,SAAS7J,GAAYgL,QAAQnoB,KAC5BA,IAHF,EAKf,CAyCOmM,UAEHtI,KAAK6jB,4BAA4Bpb,QACjCzI,KAAKikB,+BAA+Bxb,QAEhCzI,KAAKoe,QAAQwF,uBACb5jB,KAAKoe,QAAQwF,qBAAqBP,kBAAkBrjB,QAC9CA,KAAKoe,QAAQwF,qBAAqBZ,UAAY,IAChDhjB,KAAKoe,QAAQwF,qBAAqBtb,iBAC3BtI,KAAKoe,QAAQwF,uBAG5B5jB,KAAKoe,QAAQ+F,oBAAoBtE,OAAO7f,KAAKkkB,mBACjD,CAOOd,WAAWG,GACTvjB,KAAKmjB,SAASI,EAAajK,cAC5BtZ,KAAKmjB,SAASI,EAAajK,YAAc,IAAIne,OAG5C6E,KAAKmjB,SAASI,EAAajK,YAAYiK,EAAahK,cACrDvZ,KAAKmjB,SAASI,EAAajK,YAAYiK,EAAahK,YAAcgK,EAClEvjB,KAAKukB,oBAAoBhB,EAAajK,aAG1CtZ,KAAK6jB,4BAA4BhiB,gBAAgB0hB,EACrD,CAOOC,cAAclK,EAAwBC,G,QACzC,MAAMgK,EAAwC,QAAzB,EAAAvjB,KAAKmjB,SAAS7J,UAAW,eAAGC,GACjDvZ,KAAKikB,+BAA+BpiB,gBAAgB0hB,IACvB,QAAzB,EAAAvjB,KAAKmjB,SAAS7J,UAAW,eAAGC,YACrBvZ,KAAKmjB,SAAS7J,GAAYC,GAGrCvZ,KAAKukB,oBAAoBjL,EAC7B,CAQOiF,gBAAsCjF,EAAeC,EAAoBkK,G,QACrC,QAAvC,EAAyB,QAAzB,EAAAzjB,KAAKmjB,SAAS7J,UAAW,eAAGC,UAAW,SAAEC,yBAAyB3X,gBAAgB4hB,EACtF,CAGQc,oBAAoBvZ,GACxB,OAAQA,GACJ,KAAK,cACL,KAAK,WACDhL,KAAK2jB,aAAa3Y,GAAQ,EAC1B,MACJ,KAAK,WACL,KAAK,eACL,KAAK,eACL,KAAK,UACL,KAAK,YACL,KAAK,aAAoB,QACdhL,KAAK2jB,aAAa3Y,GAEzB,MAAM+Y,EAAU/jB,KAAKmjB,SAASnY,GAC9B,GAAI+Y,EACA,IAAK,IAAI5hB,EAAI,EAAGA,EAAI4hB,EAAQ3hB,OAAQD,IAChC,GAAI4hB,EAAQ5hB,GAAI,CACZnC,KAAK2jB,aAAa3Y,GAAQ7I,EAC1B,K,CAIZ,K,EAGZ,E,iBC7LJ,IAAYqiB,E,yBAAZ,SAAYA,GAGR,iCAEA,iCAEA,4BACH,CARD,CAAYA,IAAAA,EAAoB,KA0RzB,MAAMC,GAIK,EAAAC,gBAAkB,EAKlB,EAAAC,eAAiB,EAKjB,EAAAC,eAAiB,C,qDCxS5B,MAAMC,GAIc,EAAAC,QAAU,EAIV,EAAAC,MAAQ,EAM5B,MAAMC,EAOT9oB,YAIW8O,EAIAia,GAJA,KAAAja,KAAAA,EAIA,KAAAia,MAAAA,CACR,EAOA,MAAMC,UAAwBF,EAuBjC9oB,YAIW8O,EAIAia,GAEP5nB,MAAM2N,EAAMia,GANL,KAAAja,KAAAA,EAIA,KAAAia,MAAAA,EAGPjlB,KAAKmlB,0BAA2B,CACpC,CAzBWC,8BACP,OAAOplB,KAAKmlB,wBAChB,CACWC,4BAAwB9jB,GAC/BtB,KAAKmlB,yBAA2B7jB,CACpC,E,0EC9CG,MAAM+jB,GAIc,EAAAC,YAAc,EAId,EAAAC,UAAY,EAIZ,EAAAC,YAAc,EAId,EAAAC,aAAe,EAIf,EAAAC,YAAc,GAId,EAAAC,WAAa,GAIb,EAAAC,iBAAmB,GAMvC,MAAMC,EAMT3pB,YAIW8O,EAIAia,GAJA,KAAAja,KAAAA,EAIA,KAAAia,MAAAA,CACR,EAOA,MAAMa,UAAuBD,EAiChC3pB,YAAY8O,EAAcia,EAAoBc,EAAgBC,GAC1D3oB,MAAM2N,EAAMia,GA9BT,KAAA3V,IAAqB,KAUrB,KAAA2W,oBAA6C,KAqBhDjmB,KAAKolB,yBAA0B,EAC/BplB,KAAKkmB,cAAgB,IAAI,KAAQH,EAAQC,EAC7C,EAOG,MAAMG,UAAoBN,EAqB7B3pB,YAAY8O,EAAcia,EAAoBmB,EAAiCC,EAAuC,MAClHhpB,MAAM2N,EAAMia,GACZjlB,KAAKsmB,UAAYF,EACjBpmB,KAAKumB,cAAgBF,CACzB,CAlBWD,eAKP,OAJKpmB,KAAKsmB,WACNtmB,KAAKwmB,oBAGFxmB,KAAKsmB,SAChB,CAkBOE,oBACCxmB,KAAKumB,gBACLvmB,KAAKsmB,UAAYtmB,KAAKumB,cAAcE,UAAWzmB,KAAKilB,MAAwB7K,WAC5Epa,KAAKumB,cAAcG,qBAAqB1mB,KAAKsmB,UAAWtmB,KAAKilB,OAC7DjlB,KAAKumB,cAAgB,KAE7B,E,kCCnJG,MAAMI,EA6FF5qB,6BAA6B6qB,EAAmBC,GAGnD,OAAID,EAAEE,gBAAkBD,EAAEC,eACdD,EAAEC,cAAgB,EAAI,IAAMF,EAAEE,cAAgB,EAAI,GAEvDD,EAAEE,eAAiBH,EAAEG,cAChC,EA/FuB,EAAAC,gBAAkB,EAKlB,EAAAC,iBAAmB,EAMnB,EAAAC,aAAe,EAMf,EAAAC,iBAAmB,EASnB,EAAAC,iBAAmB,EAMnB,EAAAC,kBAAoB,EAMpB,EAAAC,qBAAuB,EAQvB,EAAAC,wBAA0B,EAI1B,EAAAC,4BAA8B,EAI9B,EAAAC,gCAAkC,EAIlC,EAAAC,0BAA4B,EAI5B,EAAAC,wBAA0B,EAM1B,EAAAC,uBAAyB,EAIzB,EAAAC,6BAA+B,EAI/B,EAAAC,sBAAwB,EAIxB,EAAAC,6BAA+B,C,kCCjFnD,MAAMC,EAUSC,iDACd,OAAOD,EAAiBE,oCAC5B,CAEkBD,+CAAoC3mB,GAClD0mB,EAAiBE,qCAAuC5mB,CAC5D,CAKkB6mB,+BACd,OAAOH,EAAiBI,kBAC5B,CAEkBD,6BAAkB7mB,GAChC0mB,EAAiBI,mBAAqB9mB,CAC1C,CAOkB+mB,0BACd,OAAOL,EAAiBM,aAC5B,CAGkBD,wBAAa/mB,GAC3B0mB,EAAiBM,cAAgBhnB,CACrC,CAKkBinB,oCACd,OAAOP,EAAiBQ,uBAC5B,CAEkBD,kCAAuBjnB,GACrC0mB,EAAiBQ,wBAA0BlnB,CAC/C,EAlDe,EAAA4mB,sCAAuC,EACvC,EAAAE,oBAAqB,EACrB,EAAAI,yBAA0B,EAC1B,EAAAF,cAAgB,C,mECA5B,MAAMG,EAAb,cACY,KAAAC,QAAS,EAET,KAAAC,WAAa,IAAI,KAAO,EAAG,EAAG,EAAG,GAEjC,KAAAC,aAAe,IAAI,KAAO,EAAG,EAAG,EAAG,GACnC,KAAAC,iBAAmB,IAAI,KAAO,EAAG,EAAG,EAAG,GACvC,KAAAC,eAAiB,IAAI,KAAO,EAAG,EAAG,EAAG,GACrC,KAAAC,cAAgB,IAAI,KAAO,EAAG,EAAG,EAAG,GAEpC,KAAAC,eAAiB,IAAI,KAAO,EAAG,EAAG,EAAG,GACrC,KAAAC,eAAiB,IAAI,KAAO,EAAG,EAAG,EAAG,GAGrC,KAAAC,WAAa,GAGb,KAAAC,eAAiB,EAGjB,KAAAC,kBAAoB,EAGpB,KAAAC,gBAAkB,EAmElB,KAAAC,eAAiB,GAGjB,KAAAC,mBAAqB,EAGrB,KAAAC,sBAAwB,EAGxB,KAAAC,oBAAsB,EAkEtB,KAAAC,aAAe,GAGf,KAAAC,iBAAmB,EAGnB,KAAAC,oBAAsB,EAGtB,KAAAC,kBAAoB,EAiEpB,KAAAC,YAAc,GACd,KAAAC,gBAAkB,EAClB,KAAAC,mBAAqB,EACrB,KAAAC,iBAAmB,CAmT/B,CAxgBeC,gBACP,OAAOlqB,KAAKkpB,UAChB,CAKWgB,cAAU5oB,GACjBtB,KAAKkpB,WAAa5nB,EAClBtB,KAAK0oB,QAAS,CAClB,CAMWyB,oBACP,OAAOnqB,KAAKmpB,cAChB,CAMWgB,kBAAc7oB,GACrBtB,KAAKmpB,eAAiB7nB,EACtBtB,KAAK0oB,QAAS,CAClB,CAKW0B,uBACP,OAAOpqB,KAAKopB,iBAChB,CAKWgB,qBAAiB9oB,GACxBtB,KAAKopB,kBAAoB9nB,EACzBtB,KAAK0oB,QAAS,CAClB,CAMW2B,qBACP,OAAOrqB,KAAKqpB,eAChB,CAKWgB,mBAAe/oB,GACtBtB,KAAKqpB,gBAAkB/nB,EACvBtB,KAAK0oB,QAAS,CAClB,CAkBW4B,oBACP,OAAOtqB,KAAKspB,cAChB,CAKWgB,kBAAchpB,GACrBtB,KAAKspB,eAAiBhoB,EACtBtB,KAAK0oB,QAAS,CAClB,CAMW6B,wBACP,OAAOvqB,KAAKupB,kBAChB,CAMWgB,sBAAkBjpB,GACzBtB,KAAKupB,mBAAqBjoB,EAC1BtB,KAAK0oB,QAAS,CAClB,CAKW8B,2BACP,OAAOxqB,KAAKwpB,qBAChB,CAKWgB,yBAAqBlpB,GAC5BtB,KAAKwpB,sBAAwBloB,EAC7BtB,KAAK0oB,QAAS,CAClB,CAKW+B,yBACP,OAAOzqB,KAAKypB,mBAChB,CAKWgB,uBAAmBnpB,GAC1BtB,KAAKypB,oBAAsBnoB,EAC3BtB,KAAK0oB,QAAS,CAClB,CAkBWgC,kBACP,OAAO1qB,KAAK0pB,YAChB,CAKWgB,gBAAYppB,GACnBtB,KAAK0pB,aAAepoB,EACpBtB,KAAK0oB,QAAS,CAClB,CAMWiC,sBACP,OAAO3qB,KAAK2pB,gBAChB,CAMWgB,oBAAgBrpB,GACvBtB,KAAK2pB,iBAAmBroB,EACxBtB,KAAK0oB,QAAS,CAClB,CAKWkC,yBACP,OAAO5qB,KAAK4pB,mBAChB,CAKWgB,uBAAmBtpB,GAC1BtB,KAAK4pB,oBAAsBtoB,EAC3BtB,KAAK0oB,QAAS,CAClB,CAKWmC,uBACP,OAAO7qB,KAAK6pB,iBAChB,CAKWgB,qBAAiBvpB,GACxBtB,KAAK6pB,kBAAoBvoB,EACzBtB,KAAK0oB,QAAS,CAClB,CAWWoC,iBACP,OAAO9qB,KAAK8pB,WAChB,CAKWgB,eAAWxpB,GAClBtB,KAAK8pB,YAAcxoB,EACnBtB,KAAK0oB,QAAS,CAClB,CAMWqC,qBACP,OAAO/qB,KAAK+pB,eAChB,CAMWgB,mBAAezpB,GACtBtB,KAAK+pB,gBAAkBzoB,EACvBtB,KAAK0oB,QAAS,CAClB,CAKWsC,wBACP,OAAOhrB,KAAKgqB,kBAChB,CAKWgB,sBAAkB1pB,GACzBtB,KAAKgqB,mBAAqB1oB,EAC1BtB,KAAK0oB,QAAS,CAClB,CAKWuC,sBACP,OAAOjrB,KAAKiqB,gBAChB,CAKWgB,oBAAgB3pB,GACvBtB,KAAKiqB,iBAAmB3oB,EACxBtB,KAAK0oB,QAAS,CAClB,CAMO5mB,eACH,MAAO,aACX,CAUO/F,YACHmvB,EACAC,EACAC,EAAkB,4BAClBC,EAAiB,2BACjBC,EAAkB,6BAEdJ,EAAYxC,SACZwC,EAAYxC,QAAS,EAGrBwC,EAAYK,0BACRL,EAAYhC,WACZgC,EAAY/B,eACZ+B,EAAY9B,kBACZ8B,EAAY7B,gBACZ6B,EAAYtC,cAIhBsC,EAAYK,0BACRL,EAAY5B,eACZ4B,EAAY3B,mBACZ2B,EAAY1B,sBACZ0B,EAAYzB,oBACZyB,EAAYvC,YAEhBuC,EAAYvC,WAAW7hB,cAAcokB,EAAYtC,aAAcsC,EAAYrC,kBAG3EqC,EAAYK,0BACRL,EAAYxB,aACZwB,EAAYvB,iBACZuB,EAAYtB,oBACZsB,EAAYrB,kBACZqB,EAAYvC,YAEhBuC,EAAYvC,WAAW7hB,cAAcokB,EAAYtC,aAAcsC,EAAYpC,gBAG3EoC,EAAYK,0BACRL,EAAYpB,YACZoB,EAAYnB,gBACZmB,EAAYlB,mBACZkB,EAAYjB,iBACZiB,EAAYvC,YAEhBuC,EAAYvC,WAAW7hB,cAAcokB,EAAYtC,aAAcsC,EAAYnC,eAG3EmC,EAAYrC,iBAAiB1V,cAAc+X,EAAYpC,eAAgBoC,EAAYlC,gBACnFkC,EAAYpC,eAAe3V,cAAc+X,EAAYnC,cAAemC,EAAYjC,iBAGhFkC,IACAA,EAAOK,UAAUJ,EAAiBF,EAAYlC,eAAerS,EAAGuU,EAAYlC,eAAeyC,EAAGP,EAAYlC,eAAenC,EAAGqE,EAAYlC,eAAepC,GACvJuE,EAAOK,UAAUH,EAAgBH,EAAYpC,eAAenS,EAAGuU,EAAYpC,eAAe2C,EAAGP,EAAYpC,eAAejC,EAAGqE,EAAYpC,eAAelC,GACtJuE,EAAOK,UAAUF,EAAiBJ,EAAYjC,eAAetS,EAAGuU,EAAYjC,eAAewC,EAAGP,EAAYjC,eAAepC,EAAGqE,EAAYjC,eAAerC,GAE/J,CAMO7qB,uBAAuB2vB,GAC1BA,EAAa7lB,KAAK,2BAA4B,4BAA6B,4BAC/E,CAUQ0lB,0BAA0BI,EAAaC,EAAiBC,EAAoBC,EAAkBhkB,GACvF,MAAP6jB,IAIJA,EAAMlD,EAAYsD,OAAOJ,EAAK,EAAG,KACjCC,EAAUnD,EAAYsD,OAAOH,GAAU,IAAK,KAC5CC,EAAapD,EAAYsD,OAAOF,GAAa,IAAK,KAClDC,EAAWrD,EAAYsD,OAAOD,GAAW,IAAK,KAK9CF,EAAUnD,EAAYuD,kCAAkCJ,GACxDA,GAAW,GAEXE,EAAWrD,EAAYuD,kCAAkCF,GAErDF,EAAU,IACVA,IAAY,EACZD,GAAOA,EAAM,KAAO,KAGxBlD,EAAYwD,cAAcN,EAAKC,EAAS,GAAK,IAAOE,EAAUhkB,GAC9DA,EAAOokB,WAAW,EAAGpkB,GACrBA,EAAO8e,EAAI,EAAI,IAAOiF,EAC1B,CAOQ9vB,yCAAyCuF,GAC7CA,GAAS,IAET,IAAIxE,EAAY6D,KAAKiW,IAAItV,GASzB,OARAxE,EAAI6D,KAAKwrB,IAAIrvB,EAAG,GAEZwE,EAAQ,IACRxE,IAAM,GAGVA,GAAK,IAEEA,CACX,CAUQf,qBAAqB4vB,EAAaE,EAAoBO,EAAoBtkB,GAC9E,IAAIukB,EAAY5D,EAAYsD,OAAOJ,EAAK,EAAG,KAC3C,MAAMW,EAAY7D,EAAYsD,OAAOF,EAAa,IAAK,EAAG,GACpD7X,EAAYyU,EAAYsD,OAAOK,EAAa,IAAK,EAAG,GAE1D,GAAU,IAANE,EACAxkB,EAAO6O,EAAI3C,EACXlM,EAAO2jB,EAAIzX,EACXlM,EAAO+e,EAAI7S,MACR,CAEHqY,GAAK,GACL,MAAMlqB,EAAIxB,KAAK4rB,MAAMF,GAGfG,EAAIH,EAAIlqB,EACR+T,EAAIlC,GAAK,EAAIsY,GACbG,EAAIzY,GAAK,EAAIsY,EAAIE,GACjBlxB,EAAI0Y,GAAK,EAAIsY,GAAK,EAAIE,IAE5B,OAAQrqB,GACJ,KAAK,EACD2F,EAAO6O,EAAI3C,EACXlM,EAAO2jB,EAAInwB,EACXwM,EAAO+e,EAAI3Q,EACX,MACJ,KAAK,EACDpO,EAAO6O,EAAI8V,EACX3kB,EAAO2jB,EAAIzX,EACXlM,EAAO+e,EAAI3Q,EACX,MACJ,KAAK,EACDpO,EAAO6O,EAAIT,EACXpO,EAAO2jB,EAAIzX,EACXlM,EAAO+e,EAAIvrB,EACX,MACJ,KAAK,EACDwM,EAAO6O,EAAIT,EACXpO,EAAO2jB,EAAIgB,EACX3kB,EAAO+e,EAAI7S,EACX,MACJ,KAAK,EACDlM,EAAO6O,EAAIrb,EACXwM,EAAO2jB,EAAIvV,EACXpO,EAAO+e,EAAI7S,EACX,MACJ,QAEIlM,EAAO6O,EAAI3C,EACXlM,EAAO2jB,EAAIvV,EACXpO,EAAO+e,EAAI4F,E,CAKvB3kB,EAAO8e,EAAI,CACf,CASQ7qB,cAAcuF,EAAesQ,EAAaC,GAC9C,OAAOlR,KAAKiR,IAAIjR,KAAKkR,IAAIvQ,EAAOsQ,GAAMC,EAC1C,CAMOxG,QACH,OAAO,YAA0B,IAAM,IAAIod,GAAezoB,KAC9D,CAMO6K,YACH,OAAO,eAA8B7K,KACzC,CAOOjE,aAAaI,GAChB,OAAO,YAA0B,IAAM,IAAIssB,GAAetsB,EAAQ,KAAM,KAC5E,GAthBA,UADC,W,kCAID,UADC,W,sCAID,UADC,W,yCAID,UADC,W,uCAoED,UADC,W,sCAID,UADC,W,0CAID,UADC,W,6CAID,UADC,W,2CAmED,UADC,W,oCAID,UADC,W,wCAID,UADC,W,2CAID,UADC,W,wCA2XL,wBAAyCssB,EAAY3b,K,kCCxiB9C,MAAM4f,EAAb,cACY,KAAAC,SAA6C,CAAC,EAE9C,KAAAC,aAAe,GACf,KAAAC,UAAY,EAEZ,KAAAC,MAAgC,IA2G5C,CAtGWC,aACH/sB,KAAK8sB,MAAQ,IACjB,CAOOE,YAAYC,EAAcC,GACxBltB,KAAK2sB,SAASM,KACXA,EAAOjtB,KAAK4sB,eACZ5sB,KAAK4sB,aAAeK,GAGpBA,EAAOjtB,KAAK6sB,WACZ7sB,KAAK6sB,SAAWI,GAGpBjtB,KAAK2sB,SAASM,GAAQ,IAAI9xB,OAG9B6E,KAAK2sB,SAASM,GAAMpnB,KAAKqnB,EAC7B,CAOOC,uBAAuBF,EAAcnqB,GACxC9C,KAAK8sB,MAAQhqB,EAETmqB,EAAOjtB,KAAK4sB,eACZ5sB,KAAK4sB,aAAeK,GAEpBA,EAAOjtB,KAAK6sB,WACZ7sB,KAAK6sB,SAAWI,EAExB,CAKWG,uBACP,OAAOptB,KAAK4sB,cAAgB5sB,KAAK6sB,QACrC,CAQOQ,OAAOC,EAAwBnC,GAElC,GAAInrB,KAAK8sB,OAAS9sB,KAAK8sB,MAAMS,0BAA4BvtB,KAAK8sB,MAAMU,mBAAqB,EAAG,CACxFxtB,KAAK8sB,MAAMS,0BAA2B,EACtCD,EAAiBA,EAAeG,QAAQ,gCAAkCztB,KAAK8sB,MAAMU,mBAAoB,kCACzGrC,EAAOuC,8BAA+B,EAEtC,MAAMhxB,EAAQsD,KAAK8sB,MAAMnwB,WACzB,IAAK,IAAIqM,EAAQ,EAAGA,EAAQtM,EAAMixB,OAAOvrB,OAAQ4G,IAAS,CACtD,MAAM4kB,EAAYlxB,EAAMixB,OAAO3kB,GAE/B,GAAK4kB,EAAUC,UAOf,GAAKD,EAAUL,0BAA6D,IAAjCK,EAAUJ,mBAIrD,GAAII,EAAUC,SAASC,cAAgB3C,EACnCyC,EAAUL,0BAA2B,OAClC,GAAIK,EAAUG,UACjB,IAAK,MAAMC,KAAWJ,EAAUG,UAG5B,GAFsBC,EAAQ7C,SAERA,EAAQ,CAC1ByC,EAAUL,0BAA2B,EACrC,K,OAlBHvtB,KAAK8sB,MAAMe,UAAYD,EAAUL,0BAA4BK,EAAUJ,mBAAqB,IAC7FI,EAAUL,0BAA2B,E,MAsB9C,CACH,MAAMU,EAAmBjuB,KAAK2sB,SAAS3sB,KAAK4sB,cAC5C,GAAIqB,EACA,IAAK,IAAIjlB,EAAQ,EAAGA,EAAQilB,EAAiB7rB,OAAQ4G,IACjDskB,EAAiBA,EAAeG,QAAQ,WAAaQ,EAAiBjlB,GAAQ,IAItFhJ,KAAK4sB,c,CAGT,OAAOU,CACX,E,mHCnFG,MAAMY,UAA4C,IAkBrDhyB,cACImB,QAlBG,KAAA8wB,iBAAkB,EAClB,KAAAC,UAAW,EACX,KAAAC,2BAA4B,EAC5B,KAAAC,yBAA0B,EAC1B,KAAAC,aAAc,EACd,KAAAC,kBAAmB,EACnB,KAAAC,UAAW,EACX,KAAAC,aAAc,EACd,KAAAC,cAAe,EACf,KAAAC,gBAAiB,EACjB,KAAAC,qBAAsB,EACtB,KAAAC,iBAAkB,EAClB,KAAAC,QAAS,EACT,KAAAC,4BAA6B,EAC7B,KAAAC,UAAW,EACX,KAAAC,qBAAsB,EAIzBlvB,KAAKmvB,SACT,EAQG,MAAMC,EAAb,cAgBW,KAAAlE,YAAqC,IAAI,IAGxC,KAAAmE,qBAAsB,EAwCtB,KAAAC,sBAAuB,EAoBvB,KAAAC,6BAA8B,EAoB9B,KAAAC,kBAAmB,EAqBpB,KAAAC,UAAY,EAoBX,KAAAC,qBAAsB,EAoBtB,KAAAC,iBAAmBP,EAA6BQ,qBAoB9C,KAAAC,UAAY,EAuBf,KAAAC,gBAAkB,EAMlB,KAAAC,gBAAkB,EAMlB,KAAAC,gBAAkB,EAMlB,KAAAC,eAAiB,IAOjB,KAAAC,cAAwB,IAAI,KAAO,EAAG,EAAG,EAAG,GAM5C,KAAAC,kBAAoB,GAGnB,KAAAC,mBAAqBhB,EAA6BiB,sBAoBlD,KAAAC,kBAAmB,EAoBnB,KAAAC,mBAAoB,EAsBpB,KAAAC,oBAAsB,EAAM,IAqB7B,KAAAC,sBAAuB,EAuBvB,KAAAC,qBAAsB,EAoBrB,KAAAC,YAAa,EAsBd,KAAAC,mBAAqB,IAAI,IA6NpC,CAvkBeC,yBACP,OAAO7wB,KAAKqvB,mBAChB,CAIWwB,uBAAmBvvB,GACtBtB,KAAKqvB,sBAAwB/tB,IAIjCtB,KAAKqvB,oBAAsB/tB,EAC3BtB,KAAK8wB,oBACT,CAOWC,0BACP,OAAO/wB,KAAKgxB,oBAChB,CAIWD,wBAAoBzvB,GACvBtB,KAAKgxB,uBAAyB1vB,IAIlCtB,KAAKgxB,qBAAuB1vB,EAC5BtB,KAAK8wB,oBACT,CAOWG,0BACP,OAAOjxB,KAAKsvB,oBAChB,CAIW2B,wBAAoB3vB,GACvBtB,KAAKsvB,uBAAyBhuB,IAIlCtB,KAAKsvB,qBAAuBhuB,EAC5BtB,KAAK8wB,oBACT,CAOWI,iCACP,OAAOlxB,KAAKuvB,2BAChB,CAIW2B,+BAA2B5vB,GAC9BtB,KAAKuvB,8BAAgCjuB,IAIzCtB,KAAKuvB,4BAA8BjuB,EACnCtB,KAAK8wB,oBACT,CAOWK,sBACP,OAAOnxB,KAAKwvB,gBAChB,CAIW2B,oBAAgB7vB,GACnBtB,KAAKwvB,mBAAqBluB,IAI9BtB,KAAKwvB,iBAAmBluB,EACxBtB,KAAK8wB,oBACT,CAQWhF,eACP,OAAO9rB,KAAKyvB,SAChB,CAIW3D,aAASxqB,GACZtB,KAAKyvB,YAAcnuB,IAIvBtB,KAAKyvB,UAAYnuB,EACjBtB,KAAK8wB,oBACT,CAOWM,yBACP,OAAOpxB,KAAK0vB,mBAChB,CAIW0B,uBAAmB9vB,GACtBtB,KAAK0vB,sBAAwBpuB,IAIjCtB,KAAK0vB,oBAAsBpuB,EAC3BtB,KAAK8wB,oBACT,CAOWO,sBACP,OAAOrxB,KAAK2vB,gBAChB,CAIW0B,oBAAgB/vB,GACnBtB,KAAK2vB,mBAAqBruB,IAI9BtB,KAAK2vB,iBAAmBruB,EACxBtB,KAAK8wB,oBACT,CAOWQ,eACP,OAAOtxB,KAAK6vB,SAChB,CAIWyB,aAAShwB,GACZtB,KAAK6vB,YAAcvuB,IAIvBtB,KAAK6vB,UAAYvuB,EACjBtB,KAAK8wB,oBACT,CA4CWS,wBACP,OAAOvxB,KAAKowB,kBAChB,CAIWmB,sBAAkBjwB,GACrBtB,KAAKowB,qBAAuB9uB,IAIhCtB,KAAKowB,mBAAqB9uB,EAC1BtB,KAAK8wB,oBACT,CAOWU,sBACP,OAAOxxB,KAAKswB,gBAChB,CAIWkB,oBAAgBlwB,GACnBtB,KAAKswB,mBAAqBhvB,IAI9BtB,KAAKswB,iBAAmBhvB,EACxBtB,KAAK8wB,oBACT,CAQWW,uBACP,OAAOzxB,KAAKuwB,iBAChB,CAKWkB,qBAAiBnwB,GACpBtB,KAAKuwB,oBAAsBjvB,IAI/BtB,KAAKuwB,kBAAoBjvB,EACzBtB,KAAK8wB,oBACT,CAOWY,yBACP,OAAO1xB,KAAKwwB,mBAChB,CAIWkB,uBAAmBpwB,GACtBtB,KAAKwwB,sBAAwBlvB,IAIjCtB,KAAKwwB,oBAAsBlvB,EAC3BtB,KAAK8wB,oBACT,CASWa,0BACP,OAAO3xB,KAAKywB,oBAChB,CAKWkB,wBAAoBrwB,GACvBtB,KAAKywB,uBAAyBnvB,IAIlCtB,KAAKywB,qBAAuBnvB,EAC5BtB,KAAK8wB,oBACT,CAQWc,yBACP,OAAO5xB,KAAK0wB,mBAChB,CAIWkB,uBAAmBtwB,GACtBtB,KAAK0wB,sBAAwBpvB,IAIjCtB,KAAK0wB,oBAAsBpvB,EAC3BtB,KAAK8wB,oBACT,CAOW1lB,gBACP,OAAOpL,KAAK2wB,UAChB,CAIWvlB,cAAU9J,GACbtB,KAAK2wB,aAAervB,IAIxBtB,KAAK2wB,WAAarvB,EAClBtB,KAAK8wB,oBACT,CAUUA,oBACN9wB,KAAK4wB,mBAAmB/uB,gBAAgB7B,KAC5C,CAMO8B,eACH,MAAO,8BACX,CAOO/F,uBAAuB81B,EAAoBC,GAC1CA,EAAQ7C,UACR4C,EAAShsB,KAAK,kBAEdisB,EAAQrD,UACRoD,EAAShsB,KAAK,YAEdisB,EAAQnD,cACRkD,EAAShsB,KAAK,2BAEdisB,EAAQ1D,UAAY0D,EAAQ/C,SAC5B8C,EAAShsB,KAAK,sBAEdisB,EAAQ1D,WACRyD,EAAShsB,KAAK,qBACdgsB,EAAShsB,KAAK,sBAEdisB,EAAQpD,aACR,oBAA4BmD,GAE5BC,EAAQ/C,QACR8C,EAAShsB,KAAK,kBAEtB,CAOO9J,uBAAuBg2B,EAAwBD,GAC9CA,EAAQnD,cACRoD,EAAalsB,KAAK,mBAE1B,CAOOmsB,eAAeF,EAA+CG,GAAiB,GAClF,GAAIA,IAAmBjyB,KAAK4xB,qBAAuB5xB,KAAK2wB,WAapD,OAZAmB,EAAQ1D,UAAW,EACnB0D,EAAQvD,aAAc,EACtBuD,EAAQtD,kBAAmB,EAC3BsD,EAAQrD,UAAW,EACnBqD,EAAQ7C,UAAW,EACnB6C,EAAQpD,aAAc,EACtBoD,EAAQnD,cAAe,EACvBmD,EAAQlD,gBAAiB,EACzBkD,EAAQ/C,QAAS,EACjB+C,EAAQ3D,iBAAkB,EAC1B2D,EAAQ5C,oBAAsBlvB,KAAK2xB,yBACnCG,EAAQ9C,2BAA6BhvB,KAAK4xB,oBAAsB5xB,KAAK2wB,YAIzEmB,EAAQ1D,SAAWpuB,KAAKwxB,gBACxBM,EAAQzD,0BAA4BruB,KAAKuxB,oBAAsBnC,EAA6B8C,uBAC5FJ,EAAQxD,yBAA2BwD,EAAQzD,0BAE3CyD,EAAQvD,YAAcvuB,KAAKoxB,mBACnBpxB,KAAK2vB,mBACJP,EAA6BZ,iBAC9BsD,EAAQtD,kBAAmB,EAG3BsD,EAAQtD,kBAAmB,EAInCsD,EAAQrD,SAA6B,IAAlBzuB,KAAKsxB,SACxBQ,EAAQ7C,SAA6B,IAAlBjvB,KAAK8rB,SACxBgG,EAAQpD,YAAc1uB,KAAK6wB,sBAAwB7wB,KAAKkrB,YACxD4G,EAAQnD,aAAe3uB,KAAKixB,uBAAyBjxB,KAAK+wB,oBACtDe,EAAQnD,aACRmD,EAAQlD,eAAiB5uB,KAAK+wB,oBAAqBoB,KAEnDL,EAAQlD,gBAAiB,EAE7BkD,EAAQjD,oBAAsB7uB,KAAKkxB,2BACnCY,EAAQhD,gBAAkB9uB,KAAKmxB,gBAC/BW,EAAQ/C,OAAS/uB,KAAKuwB,kBACtBuB,EAAQ9C,2BAA6BhvB,KAAK4xB,mBAC1CE,EAAQ5C,oBAAsBlvB,KAAK2xB,oBACnCG,EAAQ3D,gBAAkB2D,EAAQ1D,UAAY0D,EAAQvD,aAAeuD,EAAQrD,UAAYqD,EAAQ7C,UAAY6C,EAAQpD,aAAeoD,EAAQnD,cAAgBmD,EAAQ/C,MACxK,CAMO/rB,UAEH,OAAQhD,KAAKixB,sBAAwBjxB,KAAK+wB,qBAAuB/wB,KAAK+wB,oBAAoB/tB,SAC9F,CAOOovB,KAAKjH,EAAgBkH,GAOxB,GALIryB,KAAKqvB,qBAAuBrvB,KAAKkrB,aACjC,SAAiBlrB,KAAKkrB,YAAaC,GAInCnrB,KAAKswB,kBAAoBtwB,KAAKuwB,kBAAmB,CACjD,MAAM+B,EAAe,EAAInH,EAAO/qB,YAAYW,iBACtCwxB,EAAgB,EAAIpH,EAAO/qB,YAAYa,kBAO7C,GANAkqB,EAAOqH,UAAU,qBAAsBF,EAAcC,GAEjDvyB,KAAKuwB,mBACLpF,EAAOsH,SAAS,kBAAmB,GAAMzyB,KAAKwwB,qBAG9CxwB,KAAKswB,iBAAkB,CACvB,MAAM9sB,EAAqC,MAAvB6uB,EAA8BA,EAAsBE,EAAgBD,EAExF,IAAII,EAAiB/xB,KAAKC,IAA6B,GAAzBZ,KAAKmwB,mBAC/BwC,EAAiBD,EAAiBlvB,EAEtC,MAAMovB,EAA6BjyB,KAAKkyB,KAAKF,EAAiBD,GAC9DC,EAAiB,SAAUA,EAAgBC,EAA4B5yB,KAAK8vB,iBAC5E4C,EAAiB,SAAUA,EAAgBE,EAA4B5yB,KAAK8vB,iBAE5E3E,EAAOK,UAAU,oBAAqBmH,EAAgBD,GAAiBC,EAAiB3yB,KAAK+vB,iBAAkB2C,EAAiB1yB,KAAKgwB,iBAErI,MAAM8C,GAAiB,EAAM9yB,KAAKiwB,eAClC9E,EAAOK,UAAU,oBAAqBxrB,KAAKkwB,cAAcvZ,EAAG3W,KAAKkwB,cAAczE,EAAGzrB,KAAKkwB,cAAcrJ,EAAGiM,E,EAWhH,GANA3H,EAAOsH,SAAS,iBAAkBzyB,KAAK8rB,UAGvCX,EAAOsH,SAAS,WAAYzyB,KAAKsxB,UAG7BtxB,KAAK+wB,oBAAqB,CAC1B5F,EAAO4H,WAAW,mBAAoB/yB,KAAK+wB,qBAC3C,MAAMiC,EAAchzB,KAAK+wB,oBAAoBkC,UAAUC,OAEvD/H,EAAOK,UACH,0BACCwH,EAAc,GAAKA,EACpB,GAAMA,EACNA,EACAhzB,KAAK+wB,oBAAoBoC,M,CAGrC,CAMO9nB,QACH,OAAO,YAA0B,IAAM,IAAI+jB,GAAgCpvB,KAC/E,CAMO6K,YACH,OAAO,eAA8B7K,KACzC,CAOOjE,aAAaI,GAChB,OAAO,YAA0B,IAAM,IAAIizB,GAAgCjzB,EAAQ,KAAM,KAC7F,CASkBk0B,mCACd,OAAOrwB,KAAKkyB,sBAChB,CAKkBkB,iCACd,OAAOpzB,KAAKqzB,oBAChB,EAzlBuB,EAAAzD,qBAAuB,EAMvB,EAAApB,iBAAmB,EAokB3B,EAAA0D,uBAAyB,EACzB,EAAAmB,qBAAuB,GA/jBtC,UADC,W,mCAID,UADC,W,2CAqBD,UADC,QAAmB,wB,4CAqBpB,UADC,W,4CAqBD,UADC,W,mDAqBD,UADC,W,wCAsBD,UADC,W,iCAqBD,UADC,W,2CAqBD,UADC,W,wCAqBD,UADC,W,iCAwBD,UADC,W,uCAOD,UADC,W,uCAOD,UADC,W,uCAOD,UADC,W,sCAQD,UADC,W,qCAOD,UADC,W,yCAID,UADC,W,0CAqBD,UADC,W,wCAqBD,UADC,W,yCAuBD,UADC,W,2CAsBD,UADC,W,4CAwBD,UADC,W,2CAqBD,UADC,W,iCAuPL,yCAA0DjE,EAA6BtiB,K,oHChpBhF,MAAMwmB,UAAiC,IAA9C,c,oBACI,KAAAC,QAAS,EACT,KAAAC,eAAiB,EACjB,KAAAC,yBAA2B,CAC/B,EAUO,MAAMC,UAA+B,IAuDxCx3B,YAAY2xB,EAA8C8F,GAAkB,GACxEt2B,MAAMwwB,EAAU,YAAa,IAAK,IAAIyF,EAA4BK,GAvD9D,KAAAC,SAAkC,KAanC,KAAAC,kBAAoB,EAOpB,KAAAC,oBAAsB,EAOtB,KAAAC,UAAY,EAEX,KAAAC,mBAAqB,wCAQrB,KAAArD,YAAa,EAMd,KAAAvlB,WAAY,EAcfpL,KAAKi0B,yCAA2CpG,EAASqG,gBAAgB,EAC7E,CATOC,mCACHn0B,KAAKo0B,QAAQp0B,KAAK2wB,YAClB3wB,KAAKi0B,0CACT,CAQOI,kBAAkBvC,EAAmCp1B,EAAc0H,GACtE,OAAKpE,KAAK2wB,cAINmB,EAAQwC,mBAAqB53B,EAAM63B,iBAC/BnwB,EAAOowB,UAAUC,qBAAuBz0B,KAAK4zB,UAAY,2BAEpD5zB,KAAK4zB,SAAS5wB,UAO/B,CAEOgvB,eAAeF,EAAmCp1B,GACrD,GAAIsD,KAAK2wB,WAAY,CACjBmB,EAAQ2B,yBAA2BzzB,KAAKg0B,mBAExC,MAAM5vB,EAAS1H,EAAM0D,YAEjB0xB,EAAQwC,oBACJlwB,EAAOowB,UAAUC,qBAAuBz0B,KAAK4zB,UAAY,0BAAsC5zB,KAAK2wB,YACpG,8BAAyC3wB,KAAK4zB,SAAU9B,EAAS,UACjEA,EAAQ2B,yBAA2BzzB,KAAKg0B,oBAExClC,EAAQyB,QAAS,E,MAIzBzB,EAAQyB,QAAS,CAEzB,CAEOmB,eAAeC,EAA8Bj4B,GAChD,IAAKsD,KAAK2wB,WACN,OAGJ,MAAMiE,EAAW50B,KAAK60B,UAAUD,SAE3BD,EAAcG,QAAWF,GAAaD,EAAcI,QACjD/0B,KAAK4zB,UAAY,2BACjBe,EAAcK,aAAa,eAAgBh1B,KAAK4zB,SAASqB,iBAAkBj1B,KAAK6zB,kBAAmB7zB,KAAK+zB,UAAW/zB,KAAK8zB,qBACxH,sBAAiC9zB,KAAK4zB,SAAUe,EAAe,WAKnEj4B,EAAM63B,iBACFv0B,KAAK4zB,UAAY,0BACjBe,EAAc5B,WAAW,gBAAiB/yB,KAAK4zB,SAG3D,CAEOsB,WAAWC,GACd,OAAIn1B,KAAK4zB,WAAauB,CAK1B,CAEOC,kBAAkBC,GACjBr1B,KAAK4zB,UACLyB,EAAexvB,KAAK7F,KAAK4zB,SAEjC,CAEO0B,eAAeC,GACdv1B,KAAK4zB,UAAY5zB,KAAK4zB,SAAS1xB,YAAclC,KAAK4zB,SAAS1xB,WAAWE,OAAS,GAC/EmzB,EAAY1vB,KAAK7F,KAAK4zB,SAE9B,CAEOtrB,QAAQktB,G,MACPA,IACa,QAAb,EAAAx1B,KAAK4zB,gBAAQ,SAAEtrB,UAEvB,CAEOxG,eACH,MAAO,wBACX,CAEO2zB,YAAYC,GACfA,EAAS7vB,KAAK,gBAClB,CAEO8vB,cACH,MAAO,CACHC,IAAK,CACD,CAAE14B,KAAM,eAAgB24B,KAAM,EAAG7qB,KAAM,QACvC,CAAE9N,KAAM,eAAgB24B,KAAM,GAAI7qB,KAAM,SAGpD,GAzJA,UAFC,QAAmB,kBACnB,QAAiB,qC,+BAQlB,UADC,W,yCAQD,UADC,W,2CAQD,UADC,W,iCASD,UAFC,WACA,QAAiB,qC,yCASlB,UAFC,WACA,QAAiB,qC,iLCpEf,MAAM8qB,EAIT,cACI91B,KAAK+1B,OACT,CAKOA,QACH/1B,KAAKg2B,SAAU,EACfh2B,KAAKi2B,KAAO,IAEZj2B,KAAKk2B,KAAO,IACZl2B,KAAKm2B,QAAU,EACfn2B,KAAKo2B,SAAW,IAEhBp2B,KAAKq2B,cAAgB,KACrBr2B,KAAKs2B,YAAc,KACnBt2B,KAAKu2B,mBAAqB,IAC9B,CAOWL,WACP,OAAOl2B,KAAKw2B,KAChB,CAEWN,SAAK50B,GACZtB,KAAKw2B,MAAQl1B,CACjB,CAOW60B,cACP,OAAOn2B,KAAKy2B,QAChB,CAEWN,YAAQ70B,GACftB,KAAKy2B,SAAWn1B,CACpB,CAOW80B,eACP,OAAOp2B,KAAK02B,SAChB,CAEWN,aAAS90B,GAChBtB,KAAK02B,UAAYp1B,CACrB,CAOW+0B,oBACP,OAAOr2B,KAAK22B,cAChB,CAEWN,kBAAc/0B,GACrBtB,KAAK22B,eAAiBr1B,CAC1B,CAOWg1B,kBACP,OAAOt2B,KAAK42B,YAChB,CAEWN,gBAAYh1B,GACnBtB,KAAK42B,aAAet1B,CACxB,CAOWi1B,yBACP,OAAOv2B,KAAK62B,mBAChB,CAEWN,uBAAmBj1B,GAC1BtB,KAAK62B,oBAAsBv1B,CAC/B,CAOW20B,WACP,OAAOj2B,KAAK82B,KAChB,CAEWb,SAAK30B,GACZtB,KAAK82B,MAAQx1B,CACjB,CAOW00B,cACP,OAAOh2B,KAAK+2B,QAChB,CAEWf,YAAQ10B,GACftB,KAAK+2B,SAAWz1B,CACpB,CAMOQ,eACH,MAAO,sBACX,CAMOk1B,OAAOC,GACV,YAA0B,IAAMA,GAAcj3B,KAClD,CAMO6K,YACH,OAAO,eAA8B7K,KACzC,CAQOuM,MAAMpQ,EAAaO,EAAcw6B,GACpC,YAA0B,IAAMl3B,MAAM7D,EAAQO,EAAOw6B,EACzD,GAnIA,UADC,W,0BAcD,UADC,W,6BAcD,UADC,W,8BAcD,UADC,W,mCAcD,UADC,W,iCAcD,UADC,W,wCAcD,UADC,W,0BAcD,UADC,W,0CC/CE,MAAMC,EAmwBTj7B,YAAYgB,EAAcR,EAAyB06B,GA1nB5C,KAAAC,mBAAmD,KAOnD,KAAAC,wBAAyB,EA2BzB,KAAAC,SAAgB,KAKhB,KAAAC,kBAAyB,KAMzB,KAAAC,uBAAwB,EAMxB,KAAAC,oBAAqB,EAMrB,KAAAC,MAAQ,GAeL,KAAAC,OAAS,EAoCT,KAAAC,kBAAmB,EAwBnB,KAAAC,gBAAiB,EAoBnB,KAAAC,sBAAuB,EA8CxB,KAAAC,WAAiD,KAKjD,KAAAC,QAA8D,KAK9D,KAAAC,wBAA2E,KAc3E,KAAAC,gBAAiB,EAKjB,KAAAC,yBAA0B,EAK1B,KAAAl2B,WAAyC,KAKzC,KAAAiiB,oBAAsB,IAAI,KAKzB,KAAAD,mBAAmD,KACnD,KAAAmU,oBAAsD,KA4BtD,KAAAC,gBAAoD,KAwCpD,KAAAC,WAAqB,EAuCrB,KAAAC,mBAAoB,EAiCrB,KAAAC,mBAAoB,EAMpB,KAAAC,mBAAoB,EAMpB,KAAAC,iBAAkB,EAMlB,KAAAC,cAAgB,EAMhB,KAAAC,qBAAsB,EAMrB,KAAAC,aAAc,EAwBf,KAAAC,UAAY,EAMZ,KAAAC,QAAU,EAMV,KAAAC,aAAe,EAiEN,KAAAC,QAAU,IAAIpD,EAuBtB,KAAAqD,SAAmB,EAWnB,KAAAC,UAAYjC,EAASkC,iBAKrB,KAAAC,wBAAkC,EAKlC,KAAAC,wBAAkC,EAKlC,KAAAC,0BAAoC,EASrC,KAAAC,4BAA8B,EAG9B,KAAAC,QAAgE,KAGhE,KAAA3wB,iBAA4C,KAM5C,KAAA4wB,2BAA4B,EAEzB,KAAAC,WAa6B,CAAC,EAGjC,KAAAC,4BAUK,KAAY,EAEjB,KAAAC,sCAA8F,KAAY,EAE1G,KAAAC,mCAAwF,KAAY,EAEpG,KAAAC,mDAAwG,KAAY,EAEpH,KAAAC,uCAAgG,KAAY,EAE5G,KAAAC,mCAAwF,KAAY,EAEpG,KAAAC,4CAA0G,KAAY,EAEtH,KAAAC,6CAA4G,KAAY,EAgJrH,KAAAC,iBAAkB,EAKlB,KAAAC,kBAAsC,KA5I5Ct6B,KAAK9C,KAAOA,EACZ,MAAMq9B,EAAW79B,GAAS,qBACrB69B,IAGLv6B,KAAKyC,OAAS83B,EACdv6B,KAAKk0B,gBAAkB,CAAC,EAExBl0B,KAAKk0B,gBAAgB,QAAU,iCAAiC,KAAC,MACjEl0B,KAAKk0B,gBAAgB,QAAU,+BAA+B,KAAC,MAC/Dl0B,KAAKk0B,gBAAgB,QAAU,gCAA6B,KAAK,MACjEl0B,KAAKk0B,gBAAgB,QAAU,mCAAgC,KAAK,MACpEl0B,KAAKk0B,gBAAgB,SAAU,6BAA8B,KAAC,MAC9Dl0B,KAAKk0B,gBAAgB,SAAU,gCAAiC,KAAC,MACjEl0B,KAAKk0B,gBAAgB,SAAU,4BAA6B,KAAC,MAE7Dl0B,KAAKsgB,GAAKpjB,GAAQ,gBAClB8C,KAAK+K,SAAW/K,KAAKyC,OAAO+3B,cAC5Bx6B,KAAKy6B,iBAAmBz6B,KAAKyC,OAAOrC,YAAYs6B,wBAChD16B,KAAK26B,aAAe,IAAI,IAAY36B,KAAKyC,OAAOrC,aAAa,GAC7DJ,KAAK26B,aAAaC,gBAAkB56B,KAAKy6B,iBAErCz6B,KAAKyC,OAAOC,qBACZ1C,KAAK66B,gBAAkB1D,EAAS2D,yBAEhC96B,KAAK66B,gBAAkB1D,EAAS4D,gCAGpC/6B,KAAKg7B,eAAiB,IAAI,IAAch7B,KAAKyC,OAAOrC,iBAAamD,OAAWA,EAAWrG,GACvF8C,KAAKm5B,QAAUn5B,KAAKrD,WAAWyD,YAAY66B,uBAEtC7D,GACDp3B,KAAKyC,OAAOy4B,YAAYl7B,MAGxBA,KAAKyC,OAAO04B,qBACZn7B,KAAK05B,QAAU,CAAC,GAGpBvC,EAASiE,kBAAkBv5B,gBAAgB7B,KAAM,aACrD,CArmBWq7B,qBAGP,OAAO,CACX,CAiBWC,UAAMh6B,GACb,GAAItB,KAAK43B,SAAWt2B,EAChB,OAGJ,MAAMi6B,EAAWv7B,KAAK43B,OACtB53B,KAAK43B,OAASt2B,EAGG,IAAbi6B,GAA4B,IAAVj6B,GAClBtB,KAAKgG,YAAYmxB,EAASqE,cAElC,CAKWF,YACP,OAAOt7B,KAAK43B,MAChB,CAWW6D,oBAAgBn6B,GACnBtB,KAAK63B,mBAAqBv2B,IAG9BtB,KAAK63B,iBAAmBv2B,EACxBtB,KAAKgG,YAAYmxB,EAASuE,kBAC9B,CAKWD,sBACP,OAAOz7B,KAAK63B,gBAChB,CAWW8D,kBAAcr6B,GACjBtB,KAAK83B,iBAAmBx2B,IAG5BtB,KAAK83B,eAAiBx2B,EACtBtB,KAAKgG,YAAYmxB,EAASuE,kBAC9B,CAKWC,oBACP,OAAO37B,KAAK83B,cAChB,CAQW8D,0BACP,OAAO57B,KAAK+3B,oBAChB,CAEW6D,wBAAoBt6B,GACvBtB,KAAK+3B,uBAAyBz2B,IAIlCtB,KAAK+3B,qBAAuBz2B,EAEvBA,GACDtB,KAAK67B,YAEb,CAQOC,sBAAsBC,GACzB/7B,KAAK47B,qBAAsB,EAC3B,IACIG,EAAS/7B,K,SAETA,KAAK47B,qBAAsB,C,CAEnC,CA0BWI,8BAGP,OAFAh8B,KAAK45B,WAAWoC,yBAA0B,EAC1Ch8B,KAAKm6B,4CAA4Cn6B,KAAK45B,YAC/C55B,KAAK45B,WAAWoC,uBAC3B,CA+BWC,cAAUF,GACb/7B,KAAKkkB,oBACLlkB,KAAKmkB,oBAAoBtE,OAAO7f,KAAKkkB,oBAEzClkB,KAAKkkB,mBAAqBlkB,KAAKmkB,oBAAoBzM,IAAIqkB,EAC3D,CAOWG,uBAKP,OAJKl8B,KAAKm8B,oBACNn8B,KAAKm8B,kBAAoB,IAAI,MAG1Bn8B,KAAKm8B,iBAChB,CAUWC,WAAOL,GACV/7B,KAAKs4B,iBACLt4B,KAAKk8B,iBAAiBrc,OAAO7f,KAAKs4B,iBAEtCt4B,KAAKs4B,gBAAkBt4B,KAAKk8B,iBAAiBxkB,IAAIqkB,EACrD,CAKWM,yBAKP,OAJKr8B,KAAKq4B,sBACNr4B,KAAKq4B,oBAAsB,IAAI,MAG5Br4B,KAAKq4B,mBAChB,CAOWiE,gCAKP,OAJKt8B,KAAKu8B,6BACNv8B,KAAKu8B,2BAA6B,IAAI,MAGnCv8B,KAAKu8B,0BAChB,CA0BWC,cAAUl7B,GACbtB,KAAKu4B,aAAej3B,IAGxBtB,KAAKu4B,WAAaj3B,EAClBtB,KAAKgG,YAAYmxB,EAASuE,kBAC9B,CAKWc,gBACP,OAAOx8B,KAAKu4B,UAChB,CAWWkE,qBAAiBn7B,GACpBtB,KAAKw4B,oBAAsBl3B,IAG/BtB,KAAKw4B,kBAAoBl3B,EACrBtB,KAAKw4B,oBACLx4B,KAAKy3B,uBAAwB,GAErC,CAKWgF,uBACP,OAAOz8B,KAAKw4B,iBAChB,CAKWkE,uBACP,OAAO,CACX,CAyCWC,eAAWr7B,GACdtB,KAAK84B,cAAgBx3B,IAGzBtB,KAAK84B,YAAcx3B,EACnBtB,KAAKgG,YAAYmxB,EAASqE,eAC9B,CAKWmB,iBACP,OAAO38B,KAAK84B,WAChB,CAoBW8D,gBACP,OAAQ58B,KAAKo5B,WACT,KAAKjC,EAAS0F,kBACd,KAAK1F,EAAS2F,iBACd,KAAK3F,EAAS4F,iBACd,KAAK5F,EAAS6F,kBACV,OAAO,EAGf,OAAOh9B,KAAKyC,OAAOw6B,cACvB,CAKWL,cAAUt7B,GACjBtB,KAAKk9B,SAAW57B,EAAQ61B,EAAS0F,kBAAoB1F,EAASkC,gBAClE,CAMW8D,kBACP,OAAQn9B,KAAKo5B,WACT,KAAKjC,EAASiG,cACd,KAAKjG,EAASkG,kBACV,OAAO,EAGf,OAAOr9B,KAAKyC,OAAO66B,gBACvB,CAKWH,gBAAY77B,GACnBtB,KAAKk9B,SAAW57B,EAAQ61B,EAASiG,cAAgBjG,EAASkC,gBAC9D,CAMW6D,eACP,OAAOl9B,KAAKo5B,SAChB,CAKW8D,aAAS57B,GACZtB,KAAKo5B,YAAc93B,IAIvBtB,KAAKo5B,UAAY93B,EACjBtB,KAAKgG,YAAYmxB,EAASqE,eAC9B,CAeO+B,kBACH,OAAOv9B,KAAK26B,YAChB,CAIO6C,gBAAgBC,GACnBz9B,KAAK26B,aAAe8C,CACxB,CAuJO17B,SAASC,GAEZ,MADY,SAAWhC,KAAK9C,IAEhC,CAMO4E,eACH,MAAO,UACX,CAKW8yB,eACP,OAAO50B,KAAK03B,kBAChB,CAKOgG,SACH19B,KAAK67B,YACL77B,KAAK03B,oBAAqB,CAC9B,CAKOiG,WACH39B,KAAK67B,YACL77B,KAAK03B,oBAAqB,CAC9B,CASO10B,QAAQF,EAAqB86B,GAChC,OAAO,CACX,CAUOvJ,kBAAkBvxB,EAAoBkrB,EAAkB4P,GAC3D,MAAM9L,EAAU9D,EAAQ6P,gBACxB,QAAK/L,IAIL9xB,KAAK45B,WAAWvF,mBAAoB,EACpCr0B,KAAK45B,WAAW9H,QAAUA,EAC1B9xB,KAAK85B,sCAAsC95B,KAAK45B,YAEzC55B,KAAK45B,WAAWvF,kBAC3B,CAMOvG,YACH,OAAO9tB,KAAK26B,aAAaxP,MAC7B,CAMOxuB,WACH,OAAOqD,KAAKyC,MAChB,CAgBWq7B,uBACP,OAAO99B,KAAKs6B,iBAChB,CAaWwD,qBAAiBx8B,GACpBtB,KAAKs6B,oBAAsBh5B,IAI/BtB,KAAKs6B,kBAAoBh5B,EAEzBtB,KAAKq6B,gBAAkB/4B,IAAU61B,EAAS4G,2BAE1C/9B,KAAKg+B,0CACT,CAKcC,4BACV,OAAOj+B,KAAKs6B,oBAAsBnD,EAAS+G,iBAAmBl+B,KAAKs6B,oBAAsBnD,EAASgH,kBACtG,CAMOC,oBACH,OAAIp+B,KAAKi+B,uBAIFj+B,KAAKs7B,MAAQ,CACxB,CAOO+C,yBAAyBv7B,GAC5B,OAAIA,EAAKw7B,WAAa,IAIlBt+B,KAAKi+B,wBAIFn7B,EAAKy7B,gBAAkBv+B,KAAKo+B,oBACvC,CAMOI,mBACH,QAAIx+B,KAAKq6B,eAKb,CAMUoE,uBAAuB37B,GAC7B,OAAQ9C,KAAKq+B,yBAAyBv7B,IAAS9C,KAAKw+B,kBACxD,CAMOE,sBACH,OAAO,IACX,CAKO7C,YACH,MAAMlO,EAAS3tB,KAAKrD,WAAWgxB,OAC/B,IAAK,MAAM7qB,KAAQ6qB,EACf,GAAK7qB,EAAKirB,UAGV,IAAK,MAAMC,KAAWlrB,EAAKirB,UACnBC,EAAQ2Q,gBAAkB3+B,MAIzBguB,EAAQ7C,SAIb6C,EAAQ7C,OAAOyT,qBAAsB,EACrC5Q,EAAQ7C,OAAO0T,6BAA+B,KAG1D,CAKOC,SAAS3T,EAA+B4T,EAAwC,MACnF,MAAM36B,EAASpE,KAAKyC,OAAOrC,YAGrB4+B,GADqC,MAAvBD,EAA8B/+B,KAAK66B,gBAAkBkE,KACzC5H,EAAS2D,yBAKzC,OAHA12B,EAAO66B,aAAa9T,GAAkBnrB,KAAKu9B,mBAC3Cn5B,EAAO86B,SAASl/B,KAAKy7B,gBAAiBz7B,KAAKg5B,SAAS,EAAOgG,EAASh/B,KAAK27B,cAAe37B,KAAKk5B,QAASl5B,KAAKi5B,cAEpG+F,CACX,CAQO5M,KAAKze,EAAe7Q,GAAoB,CAKxCq8B,qBACH,MAAMvJ,EAAM51B,KAAKg7B,eAEjBh7B,KAAK45B,WAAWhE,IAAMA,EACtB51B,KAAK65B,4BAA4B,yBAA0C75B,KAAK45B,YAEhFhE,EAAIwJ,SAEJp/B,KAAK25B,2BAA4B,CACrC,CAQOjF,eAAe/gB,EAAe7Q,EAAYkrB,GAC9BA,EAAQ7C,SAKvBnrB,KAAK45B,WAAW5L,QAAUA,EAC1BhuB,KAAKk6B,mCAAmCl6B,KAAK45B,YACjD,CAOOyF,oBAAoB1rB,GAAsB,CAM1C2rB,SAASnU,GACPnrB,KAAKm5B,QAGNn5B,KAAKu/B,qBAAsB,EAF3BpU,EAAOqU,UAAU,OAAQx/B,KAAKrD,WAAWyJ,gBAIjD,CAMOq5B,mBAAmBtU,GACjBnrB,KAAKm5B,QAINn5B,KAAKu/B,qBAAsB,GAH3BpU,EAAOqU,UAAU,iBAAkBx/B,KAAKrD,WAAW+iC,sBACnDvU,EAAOqU,UAAU,aAAcx/B,KAAKrD,WAAWyK,uBAIvD,CAOOu4B,gBAAgBxU,EAAgByU,GAC9B5/B,KAAKm5B,QAGNn5B,KAAKu/B,qBAAsB,EAF3Bv/B,KAAKyC,OAAOk9B,gBAAgBxU,EAAQyU,EAI5C,CAOUC,WAAW/8B,EAAaqoB,EAA2B,MAmBzD,GAlBAnrB,KAAKyC,OAAOq9B,gBAAkB9/B,KAC1BA,KAAKu/B,qBACDpU,IACAnrB,KAAKu/B,qBAAsB,EAC3B,2BAAsCpU,EAAQnrB,KAAKrD,WAAWojC,yBAC9D//B,KAAKyC,OAAOu9B,oBAIhBhgC,KAAKyC,OAAOw9B,kBADZn9B,EACgCA,EAAKw7B,WAEL,EAGhCt+B,KAAKm8B,mBAAqBr5B,GAC1B9C,KAAKm8B,kBAAkBt6B,gBAAgBiB,GAGvC9C,KAAKy4B,kBAAmB,CACxB,MAAMr0B,EAASpE,KAAKyC,OAAOrC,YAC3BJ,KAAKs5B,uBAAyBl1B,EAAO87B,gBACrC97B,EAAO+7B,eAAc,E,CAGzB,GAAIngC,KAAK04B,kBAAmB,CACxB,MAAMt0B,EAASpE,KAAKyC,OAAOrC,YAC3BJ,KAAKu5B,uBAAyBn1B,EAAOg8B,gBACrCh8B,EAAOi8B,eAAc,E,CAGzB,GAA2B,IAAvBrgC,KAAK44B,cAAqB,CAC1B,MAAMx0B,EAASpE,KAAKyC,OAAOrC,YAC3BJ,KAAKw5B,0BAA4Bp1B,EAAOk8B,oBAAsB,EAC9Dl8B,EAAOm8B,iBAAiBvgC,KAAK44B,c,CAErC,CAKO4H,SACCxgC,KAAKq4B,qBACLr4B,KAAKq4B,oBAAoBx2B,gBAAgB7B,MAGlB,IAAvBA,KAAK44B,eACU54B,KAAKyC,OAAOrC,YACpBmgC,iBAAiBvgC,KAAKw5B,2BAG7Bx5B,KAAKy4B,mBACUz4B,KAAKyC,OAAOrC,YACpB+/B,cAAcngC,KAAKs5B,wBAG1Bt5B,KAAK04B,mBACU14B,KAAKyC,OAAOrC,YACpBigC,cAAcrgC,KAAKu5B,uBAElC,CAMOjE,iBAGH,OAFAt1B,KAAK45B,WAAWrE,YAAc,GAC9Bv1B,KAAK65B,4BAA4B,mBAAoC75B,KAAK45B,YACnE55B,KAAK45B,WAAWrE,WAC3B,CAMOH,oBAGH,OAFAp1B,KAAK45B,WAAWvE,eAAiB,GACjCr1B,KAAK65B,4BAA4B,sBAAuC75B,KAAK45B,YACtE55B,KAAK45B,WAAWvE,cAC3B,CAOOH,WAAWC,GAId,OAHAn1B,KAAK45B,WAAW1E,YAAa,EAC7Bl1B,KAAK45B,WAAWzE,QAAUA,EAC1Bn1B,KAAK65B,4BAA4B,eAAgC75B,KAAK45B,YAC/D55B,KAAK45B,WAAW1E,UAC3B,CAQO7pB,MAAMnO,GACT,OAAO,IACX,CAMOujC,kBACH,GAAIzgC,KAAK05B,QAAS,CACd,MAAM5xB,EAAS,IAAI3M,MACnB,IAAK,MAAMulC,KAAU1gC,KAAK05B,QAAS,CAC/B,MAAM52B,EAAO9C,KAAK05B,QAAQgH,GACtB59B,GACAgF,EAAOjC,KAAK/C,E,CAGpB,OAAOgF,C,CAGP,OADe9H,KAAKyC,OAAOkrB,OACbrJ,QAAQxhB,GAASA,EAAK+qB,WAAa7tB,MAEzD,CASO2gC,iBACH79B,EACAk1B,EACA5V,EACA6V,GAEA,MAAM2I,EAAe,CACjBC,WAAW,EACXjD,cAAc,KACXxb,GAGD1lB,EAAQsD,KAAKrD,WACbmkC,EAAyB9gC,KAAKs3B,uBACpCt3B,KAAKs3B,wBAAyB,EAE9B,MAAMyJ,EAAa,KACf,IAAK/gC,KAAKyC,SAAWzC,KAAKyC,OAAOrC,YAC7B,OAGJ,MAAM4gC,EAAiBtkC,EAAMmkC,UAM7B,GAJID,EAAaC,YACbnkC,EAAMmkC,UAAY,IAAI,IAAM,EAAG,EAAG,EAAG,IAGrC7gC,KAAKo4B,wBAAyB,CAC9B,IAAI6I,GAAU,EACVC,EAAY,KAChB,GAAIp+B,EAAKirB,UAAW,CAChB,MAAMoT,EAAc,IAAI,IAAQ,EAAG,EAAG,EAAG,EAAG,EAAGr+B,OAAMS,GAAW,GAAO,GACnE49B,EAAYtD,kBACZsD,EAAYtD,gBAAgBuD,WAAa,GAExCphC,KAAKq0B,kBAAkBvxB,EAAMq+B,EAAaP,EAAahD,gBACpDuD,EAAYhW,QAAUgW,EAAYhW,OAAOkW,uBAAyBF,EAAYhW,OAAOmW,wBACrFJ,EAAYC,EAAYhW,OAAOkW,uBAE/BJ,GAAU,EACVM,WAAWR,EAAY,K,CAI/BE,IACAjhC,KAAKs3B,uBAAyBwJ,EAC1BI,GACIjJ,GACAA,EAAQiJ,GAGZlJ,GACAA,EAAWh4B,M,MAIfA,KAAKgD,WACLhD,KAAKs3B,uBAAyBwJ,EAC1B9I,GACAA,EAAWh4B,OAGfuhC,WAAWR,EAAY,IAI3BH,EAAaC,YACbnkC,EAAMmkC,UAAYG,E,EAI1BD,GACJ,CAQOS,sBAAsB1+B,EAAoBsf,GAC7C,OAAO,IAAIqf,SAAQ,CAACC,EAASC,KACzB3hC,KAAK2gC,iBACD79B,GACA,KACI4+B,GAAS,GAEbtf,GACCwf,IACGD,EAAOC,EAAO,GAErB,GAET,CAgCO57B,YAAY67B,GACX7hC,KAAKrD,WAAWmlC,6BAA+B9hC,KAAK+3B,uBAIxDZ,EAAS4K,oBAAoB3/B,OAAS,EAElCy/B,EAAO1K,EAASuE,kBAChBvE,EAAS4K,oBAAoBl8B,KAAKsxB,EAAS6K,uBAG3CH,EAAO1K,EAAS8K,gBAChB9K,EAAS4K,oBAAoBl8B,KAAKsxB,EAAS+K,sBAG3CL,EAAO1K,EAASgL,kBAChBhL,EAAS4K,oBAAoBl8B,KAAKsxB,EAASiL,uBAG3CP,EAAO1K,EAASkL,qBAChBlL,EAAS4K,oBAAoBl8B,KAAKsxB,EAASmL,yBAG3CT,EAAO1K,EAASqE,eAChBrE,EAAS4K,oBAAoBl8B,KAAKsxB,EAASoL,oBAG3CV,EAAO1K,EAASqL,kBAChBrL,EAAS4K,oBAAoBl8B,KAAKsxB,EAASsL,uBAG3CtL,EAAS4K,oBAAoB3/B,QAC7BpC,KAAK0iC,yBAAyBvL,EAASwL,oBAG3C3iC,KAAKrD,WAAWimC,sBACpB,CAKOC,iBACH,MAAMlV,EAAS3tB,KAAKrD,WAAWgxB,OAC/B,IAAK,MAAM7qB,KAAQ6qB,EACf,GAAK7qB,EAAKirB,UAGV,IAAK,MAAMC,KAAWlrB,EAAKirB,UACnBC,EAAQ2Q,gBAAkB3+B,MAI9BguB,EAAQ6U,gBAGpB,CAMUH,yBAAyBxM,GAC/B,GAAIl2B,KAAKrD,WAAWmlC,6BAA+B9hC,KAAK+3B,qBACpD,OAGJ,MAAMpK,EAAS3tB,KAAKrD,WAAWgxB,OAC/B,IAAK,MAAM7qB,KAAQ6qB,EACf,GAAK7qB,EAAKirB,UAGV,IAAK,MAAMC,KAAWlrB,EAAKirB,UAEvB,GAAIC,EAAQ2Q,aAAY,KAAW3+B,KAInC,IAAK,MAAMy9B,KAAezP,EAAQ8U,cACzBrF,GAAgBA,EAAY3L,SAAa2L,EAAY3L,QAA4BiR,gBAGlF/iC,KAAKy6B,mBAAqBgD,EAAY7C,iBACtC1E,EAAKuH,EAAY3L,QAKrC,CAKUkR,yBACN,GAAIhjC,KAAKrD,WAAWmlC,6BAA+B9hC,KAAK+3B,qBACpD,OAGJ,MAAMhyB,EAAkB/F,KAAKrD,WAAWsmC,wBACpCl9B,GACAA,EAAgBC,aAExB,CAKUk9B,8BACNljC,KAAK0iC,yBAAyBvL,EAASgM,kBAC3C,CAKUC,0CACNpjC,KAAK0iC,yBAAyBvL,EAASkM,8BAC3C,CAKUlP,mCACNn0B,KAAK0iC,yBAAyBvL,EAAS6K,sBAC3C,CAKUsB,kCACNtjC,KAAK0iC,yBAAyBvL,EAASiL,sBAC3C,CAKUmB,yCACNvjC,KAAK0iC,yBAAyBvL,EAASqM,6BAC3C,CAKUC,iCACNzjC,KAAK0iC,yBAAyBvL,EAAS+K,qBAC3C,CAKUwB,qCACN1jC,KAAK0iC,yBAAyBvL,EAASmL,wBAC3C,CAKUqB,+BACN3jC,KAAK0iC,yBAAyBvL,EAASoL,mBAC3C,CAKUqB,kCACN5jC,KAAK0iC,yBAAyBvL,EAASoL,mBAC3C,CAKUvE,0CACNh+B,KAAK0iC,yBAAyBvL,EAAS0M,6BAC3C,CAQOC,mBAAmB/9B,GAEtB,OAAO,CACX,CAQOuC,QAAQy7B,EAA8BvO,EAAgCwO,GACzE,MAAMtnC,EAAQsD,KAAKrD,WAWnB,GATAD,EAAMiM,cAAc3I,MACpBtD,EAAMunC,yBAGNvnC,EAAMwnC,eAAelkC,MAErBA,KAAK45B,WAAWpE,qBAAuBA,EACvCx1B,KAAK65B,4BAA4B,aAA8B75B,KAAK45B,YAEhE55B,KAAK+I,iBAAkB,CACvB,MAAMC,EAAQhJ,KAAK+I,iBAAiBo7B,UAAUphC,QAAQ/C,MAClDgJ,GAAS,GACThJ,KAAK+I,iBAAiBo7B,UAAUr+B,OAAOkD,EAAO,GAElDhJ,KAAK+I,iBAAmB,I,CAG5B,IAAuB,IAAnBi7B,EAEA,GAAIhkC,KAAK05B,QACL,IAAK,MAAMgH,KAAU1gC,KAAK05B,QAAS,CAC/B,MAAM52B,EAAO9C,KAAK05B,QAAQgH,GACtB59B,IACAA,EAAK+qB,SAAW,KAChB7tB,KAAKokC,yBAAyBthC,EAAMihC,G,KAGzC,CACH,MAAMpW,EAASjxB,EAAMixB,OACrB,IAAK,MAAM7qB,KAAQ6qB,EACX7qB,EAAK+qB,WAAa7tB,MAAU8C,EAAuBuhC,aACnDvhC,EAAK+qB,SAAW,KAChB7tB,KAAKokC,yBAAyBthC,EAAMihC,G,CAMpD/jC,KAAKg7B,eAAe1yB,UAGhBy7B,GAAsB/jC,KAAK26B,aAAaxP,SACnCnrB,KAAKo4B,yBACNp4B,KAAK26B,aAAaxP,OAAO7iB,UAG7BtI,KAAK26B,aAAaxP,OAAS,MAG/BnrB,KAAKu3B,SAAW,KAGhBv3B,KAAKmkB,oBAAoBtiB,gBAAgB7B,MAEzCA,KAAKmkB,oBAAoB1b,QACrBzI,KAAKm8B,mBACLn8B,KAAKm8B,kBAAkB1zB,QAGvBzI,KAAKq4B,qBACLr4B,KAAKq4B,oBAAoB5vB,QAGzBzI,KAAKu8B,4BACLv8B,KAAKu8B,2BAA2B9zB,OAExC,CAMQ27B,yBAAyBthC,EAAoBihC,GACjD,GAAWjhC,EAAMwhC,SAAU,CACvB,MAAMA,EAA4BxhC,EAAMwhC,SACxC,GAAItkC,KAAKo4B,wBACL,IAAK,MAAMpK,KAAWlrB,EAAKirB,UACvBuW,EAASC,0BAA0BvW,EAAQ7C,QACvC4Y,GAAsB/V,EAAQ7C,QAC9B6C,EAAQ7C,OAAO7iB,eAIvBg8B,EAASC,0BAA0BvkC,KAAK26B,aAAaxP,O,CAGjE,CAMOtgB,YACH,MAAMC,EAAsB,eAA8B9K,MAI1D,OAFA8K,EAAoBouB,QAAUl5B,KAAKk5B,QAAQruB,YAC3CC,EAAoBC,SAAW/K,KAAK+K,SAC7BD,CACX,CASO/O,aAAayoC,EAAqB9nC,EAAcw6B,GACnD,GAAKsN,EAAeC,YAEb,GAAkC,wBAA9BD,EAAeC,YAAwCD,EAAeE,mBAC7EF,EAAeC,WAAa,6BACvBE,QAAQC,mBAET,OADA,UAAa,oHACN,UALXJ,EAAeC,WAAa,2BAShC,MACM5W,EADe,iBAAkB2W,EAAeC,YACxB33B,MAAM03B,EAAgB9nC,EAAOw6B,GAE3D,OADArJ,EAASgX,gBAAkBL,EAAez5B,SACnC8iB,CACX,EAvqDuB,EAAAwL,iBAAmB,EAInB,EAAAwD,kBAAoB,EAIpB,EAAAO,cAAgB,EAIhB,EAAAC,kBAAoB,EAIpB,EAAAP,iBAAmB,EAInB,EAAAC,iBAAmB,EAInB,EAAAC,kBAAoB,EAIpB,EAAA8H,sBAAwB,EAIxB,EAAAC,oBAAsB,EAKtB,EAAAjK,yBAA2B,EAK3B,EAAAC,gCAAkC,EAKlC,EAAAW,iBAAmB,EAKnB,EAAAuG,eAAiB,EAKjB,EAAAE,iBAAmB,EAKnB,EAAAE,oBAAsB,EAKtB,EAAA7G,cAAgB,GAKhB,EAAAgH,iBAAmB,GAKnB,EAAAwC,aAAe,GAKf,EAAA9G,gBAAkB,EAKlB,EAAAC,mBAAqB,EAKrB,EAAA8G,oBAAsB,EAMtB,EAAAlH,2BAA6B,EAM7B,EAAAmH,oCAAsC,EAMtC,EAAAC,+BAAiC,EAK1C,EAAA/J,kBAAoB,IAAI,KA2tCd,EAAA+H,kBAAqBrR,GAA6BA,EAAQiR,iBAC1D,EAAAM,8BAAiCvR,GAA6BA,EAAQsT,6BACtE,EAAApD,sBAAyBlQ,GAA6BA,EAAQuT,sBAC9D,EAAAjD,sBAAyBtQ,GAA6BA,EAAQwT,qBAC9D,EAAA/C,mBAAsBzQ,GAA6BA,EAAQyT,kBAC3D,EAAA9C,sBAAyB3Q,GAA6BA,EAAQ0T,qBAC9D,EAAAtD,qBAAwBpQ,GAA6BA,EAAQ2T,mBAC7D,EAAAnD,wBAA2BxQ,GAA6BA,EAAQ4T,wBAEzE,EAAAlC,6BAAgC1R,IAC3CqF,EAASiL,sBAAsBtQ,GAC/BqF,EAASoL,mBAAmBzQ,EAAQ,EAGzB,EAAA+R,6BAAgC/R,IAC3CqF,EAAS6K,sBAAsBlQ,GAC/BqF,EAASoL,mBAAmBzQ,EAAQ,EAGhB,EAAAiQ,oBAAiE,GACjE,EAAAY,mBAAsB7Q,IAC1C,IAAK,MAAM6T,KAAMxO,EAAS4K,oBACtB4D,EAAG7T,E,GAltCX,UADC,W,0BAOD,UADC,W,gCAUD,UADC,W,4BAOD,UADC,W,gCAYD,UADC,W,6CAOD,UADC,W,0CAOD,UADC,W,6BAgBD,UADC,QAAU,U,8BAqCX,UADC,QAAU,oB,wCAyBX,UADC,QAAU,kB,sCA8DX,UADC,W,uCAuHD,UADC,QAAU,c,kCAwCX,UADC,W,yCAkCD,UADC,W,yCAOD,UADC,W,yCAOD,UADC,W,uCAOD,UADC,W,qCAOD,UADC,W,2CAOD,UADC,QAAU,e,mCAyBX,UADC,W,iCAOD,UADC,W,+BAOD,UADC,W,oCA0BD,UADC,W,iCAsBD,UADC,W,8BA+RD,UADC,W,sECp+BE,MAAM8T,EA0CT1pC,YAAY2pC,GAIR,GA5CM,KAAAC,MAAkB,GACpB,KAAAC,UAAW,EAKZ,KAAAC,iBAAkB,EAElB,KAAAC,oBAAqB,EAErB,KAAAC,qBAAsB,EAEtB,KAAA5R,mBAAoB,EAEpB,KAAA6R,kBAAmB,EAEnB,KAAAC,eAAgB,EAEhB,KAAAC,kBAAmB,EAEnB,KAAAC,0BAA2B,EAG3B,KAAAC,UAAW,EAEX,KAAAC,MAAO,EAGP,KAAAC,cAAe,EAEf,KAAAC,UAAW,EAWd1mC,KAAK2mC,oBAAsBd,EAGvBA,EACA,IAAK,MAAMe,KAAQf,EACXrqC,OAAOC,UAAUC,eAAeC,KAAKkqC,EAAoBe,IACzD5mC,KAAK6mC,iBAAiBD,EAItC,CAKWE,cACP,OAAO9mC,KAAK+lC,QAChB,CAKOgB,kBACH/mC,KAAK+lC,UAAW,EAChB/lC,KAAKkmC,qBAAsB,EAC3BlmC,KAAKs0B,mBAAoB,EACzBt0B,KAAKmmC,kBAAmB,EACxBnmC,KAAKgmC,iBAAkB,EACvBhmC,KAAKimC,oBAAqB,EAC1BjmC,KAAKomC,eAAgB,EACrBpmC,KAAKqmC,kBAAmB,EACxBrmC,KAAKsmC,0BAA2B,CACpC,CAKOU,oBACHhnC,KAAK+lC,UAAW,CACpB,CAKOhD,iBACH/iC,KAAKs0B,mBAAoB,EACzBt0B,KAAKkmC,qBAAsB,EAC3BlmC,KAAKgmC,iBAAkB,EACvBhmC,KAAKmmC,kBAAmB,EACxBnmC,KAAKomC,eAAgB,EACrBpmC,KAAKsmC,0BAA2B,EAChCtmC,KAAK+lC,UAAW,CACpB,CAKOX,6BACHplC,KAAKsmC,0BAA2B,EAChCtmC,KAAK+lC,UAAW,CACpB,CAMON,iBAAiBwB,GAAW,GAC/BjnC,KAAKgmC,iBAAkB,EACvBhmC,KAAKimC,mBAAqBjmC,KAAKimC,oBAAsBgB,EACrDjnC,KAAK+lC,UAAW,CACpB,CAKOL,wBACH1lC,KAAKkmC,qBAAsB,EAC3BlmC,KAAK+lC,UAAW,CACpB,CAKOV,sBACHrlC,KAAKs0B,mBAAoB,EACzBt0B,KAAK+lC,UAAW,CACpB,CAKOT,qBACHtlC,KAAKmmC,kBAAmB,EACxBnmC,KAAK+lC,UAAW,CACpB,CAKOR,kBACHvlC,KAAKomC,eAAgB,EACrBpmC,KAAK+lC,UAAW,CACpB,CAKOP,qBACHxlC,KAAKqmC,kBAAmB,EACxBrmC,KAAK+lC,UAAW,CACpB,CAKO5W,UACHnvB,KAAK8lC,MAAM1jC,OAAS,EAEpB,IAAK,MAAMgZ,KAAO5f,OAAOghB,KAAKxc,MACX,MAAXob,EAAI,IAIRpb,KAAK8lC,MAAMjgC,KAAKuV,GAGpB,GAAIpb,KAAK2mC,oBACL,IAAK,MAAMzpC,KAAQ8C,KAAK2mC,qBACc,IAA9B3mC,KAAK8lC,MAAM/iC,QAAQ7F,IACnB8C,KAAK8lC,MAAMjgC,KAAK3I,EAIhC,CAOOgqC,QAAQC,GACX,GAAInnC,KAAK8lC,MAAM1jC,SAAW+kC,EAAMrB,MAAM1jC,OAClC,OAAO,EAGX,IAAK,IAAI4G,EAAQ,EAAGA,EAAQhJ,KAAK8lC,MAAM1jC,OAAQ4G,IAAS,CACpD,MAAM49B,EAAO5mC,KAAK8lC,MAAM98B,GAExB,GAAUhJ,KAAM4mC,KAAgBO,EAAOP,GACnC,OAAO,C,CAIf,OAAO,CACX,CAMOQ,QAAQD,GACPnnC,KAAK8lC,MAAM1jC,SAAW+kC,EAAMrB,MAAM1jC,SAClC+kC,EAAMrB,MAAQ9lC,KAAK8lC,MAAMvgC,MAAM,IAGnC,IAAK,IAAIyD,EAAQ,EAAGA,EAAQhJ,KAAK8lC,MAAM1jC,OAAQ4G,IAAS,CACpD,MAAM49B,EAAO5mC,KAAK8lC,MAAM98B,GAElBm+B,EAAOP,GAAc5mC,KAAM4mC,E,CAEzC,CAKO7Q,QACH/1B,KAAK8lC,MAAM/9B,SAAS6+B,GAAS5mC,KAAK6mC,iBAAiBD,IACvD,CAEQC,iBAAiBD,G,cACrB,MAAM57B,EAA6C,QAAtC,EAAgC,QAAhC,EAAwB,QAAxB,EAAAhL,KAAK2mC,2BAAmB,eAAGC,UAAK,eAAE57B,YAAI,eAAiBhL,KAAM4mC,GACpES,EAA2C,QAAhC,EAAwB,QAAxB,EAAArnC,KAAK2mC,2BAAmB,eAAGC,UAAK,eAAEU,QAEnD,OAAQt8B,GACJ,IAAK,SACKhL,KAAM4mC,GAAQS,QAAAA,EAAY,EAChC,MACJ,IAAK,SACKrnC,KAAM4mC,GAAQS,QAAAA,EAAY,GAChC,MACJ,QACUrnC,KAAM4mC,GAAQS,SAAAA,EAGhC,CAMOtlC,WACH,IAAI+F,EAAS,GACb,IAAK,IAAIkB,EAAQ,EAAGA,EAAQhJ,KAAK8lC,MAAM1jC,OAAQ4G,IAAS,CACpD,MAAM49B,EAAO5mC,KAAK8lC,MAAM98B,GAClB1H,EAActB,KAAM4mC,GAG1B,cAFoBtlC,GAGhB,IAAK,SACL,IAAK,SACDwG,GAAU,WAAa8+B,EAAO,IAAMtlC,EAAQ,KAC5C,MACJ,QACQA,IACAwG,GAAU,WAAa8+B,EAAO,M,CAM9C,OAAO9+B,CACX,E,gDCrQG,MAAMy/B,EAMSC,mCACd,OAAOxnC,KAAKynC,sBAChB,CACkBD,iCAAsBlmC,GAChCtB,KAAKynC,yBAA2BnmC,IAIpCtB,KAAKynC,uBAAyBnmC,EAC9B,4BAA+B,GACnC,CAMkBomC,kCACd,OAAO1nC,KAAK2nC,qBAChB,CACkBD,gCAAqBpmC,GAC/BtB,KAAK2nC,wBAA0BrmC,IAInCtB,KAAK2nC,sBAAwBrmC,EAC7B,4BAA+B,GACnC,CAMkBsmC,mCACd,OAAO5nC,KAAK6nC,sBAChB,CACkBD,iCAAsBtmC,GAChCtB,KAAK6nC,yBAA2BvmC,IAIpCtB,KAAK6nC,uBAAyBvmC,EAC9B,4BAA+B,GACnC,CAMkBwmC,mCACd,OAAO9nC,KAAK+nC,sBAChB,CACkBD,iCAAsBxmC,GAChCtB,KAAK+nC,yBAA2BzmC,IAIpCtB,KAAK+nC,uBAAyBzmC,EAC9B,4BAA+B,GACnC,CAMkB0mC,sCACd,OAAOhoC,KAAKioC,yBAChB,CACkBD,oCAAyB1mC,GACnCtB,KAAKioC,4BAA8B3mC,IAIvCtB,KAAKioC,0BAA4B3mC,EACjC,4BAA+B,GACnC,CAMkB4mC,oCACd,OAAOloC,KAAKmoC,uBAChB,CACkBD,kCAAuB5mC,GACjCtB,KAAKmoC,0BAA4B7mC,IAIrCtB,KAAKmoC,wBAA0B7mC,EAC/B,4BAA+B,GACnC,CAMkB8mC,oCACd,OAAOpoC,KAAKqoC,uBAChB,CACkBD,kCAAuB9mC,GACjCtB,KAAKqoC,0BAA4B/mC,IAIrCtB,KAAKqoC,wBAA0B/mC,EAC/B,4BAA+B,GACnC,CAMkBgnC,gCACd,OAAOtoC,KAAKuoC,mBAChB,CACkBD,8BAAmBhnC,GAC7BtB,KAAKuoC,sBAAwBjnC,IAIjCtB,KAAKuoC,oBAAsBjnC,EAC3B,4BAA+B,GACnC,CAMkBknC,oCACd,OAAOxoC,KAAKyoC,uBAChB,CACkBD,kCAAuBlnC,GACjCtB,KAAKyoC,0BAA4BnnC,IAIrCtB,KAAKyoC,wBAA0BnnC,EAC/B,4BAA+B,GACnC,CAMkBonC,sCACd,OAAO1oC,KAAK2oC,yBAChB,CACkBD,oCAAyBpnC,GACnCtB,KAAK2oC,4BAA8BrnC,IAIvCtB,KAAK2oC,0BAA4BrnC,EACjC,4BAA+B,GACnC,CAMkBsnC,wCACd,OAAO5oC,KAAK6oC,2BAChB,CACkBD,sCAA2BtnC,GACrCtB,KAAK6oC,8BAAgCvnC,IAIzCtB,KAAK6oC,4BAA8BvnC,EACnC,4BAA+B,GACnC,CAMkBwnC,4BACd,OAAO9oC,KAAK+oC,eAChB,CACkBD,0BAAexnC,GACzBtB,KAAK+oC,kBAAoBznC,IAI7BtB,KAAK+oC,gBAAkBznC,EACvB,4BAA+B,GACnC,CAMkB0nC,qCACd,OAAOhpC,KAAKipC,wBAChB,CACkBD,mCAAwB1nC,GAClCtB,KAAKipC,2BAA6B3nC,IAItCtB,KAAKipC,yBAA2B3nC,EAChC,4BAA+B,GACnC,CAMkB4nC,yCACd,OAAOlpC,KAAKmpC,4BAChB,CACkBD,uCAA4B5nC,GACtCtB,KAAKmpC,+BAAiC7nC,IAI1CtB,KAAKmpC,6BAA+B7nC,EACpC,4BAA+B,GACnC,CAMkB8nC,yCACd,OAAOppC,KAAKqpC,4BAChB,CACkBD,uCAA4B9nC,GACtCtB,KAAKqpC,+BAAiC/nC,IAI1CtB,KAAKqpC,6BAA+B/nC,EACpC,4BAA+B,GACnC,CAMkBgoC,iCACd,OAAOtpC,KAAKupC,oBAChB,CACkBD,+BAAoBhoC,GAC9BtB,KAAKupC,uBAAyBjoC,IAIlCtB,KAAKupC,qBAAuBjoC,EAC5B,4BAA+B,GACnC,CAMkBkoC,uCACd,OAAOxpC,KAAKypC,0BAChB,CACkBD,qCAA0BloC,GACpCtB,KAAKypC,6BAA+BnoC,IAIxCtB,KAAKypC,2BAA6BnoC,EAClC,4BAA+B,GACnC,CAMkBooC,qCACd,OAAO1pC,KAAK2pC,wBAChB,CACkBD,mCAAwBpoC,GAClCtB,KAAK2pC,2BAA6BroC,IAItCtB,KAAK2pC,yBAA2BroC,EAChC,4BAA+B,GACnC,CAMkBsoC,+CACd,OAAO5pC,KAAK2pC,wBAChB,CACkBC,6CAAkCtoC,GAC5CtB,KAAK6pC,qCAAuCvoC,IAIhDtB,KAAK6pC,mCAAqCvoC,EAC1C,4BAA+B,GACnC,CAMkBwoC,iDACd,OAAO9pC,KAAK2pC,wBAChB,CACkBG,+CAAoCxoC,GAC9CtB,KAAK+pC,uCAAyCzoC,IAIlDtB,KAAK+pC,qCAAuCzoC,EAC5C,4BAA+B,GACnC,CAMkB0oC,uCACd,OAAOhqC,KAAKiqC,0BAChB,CACkBD,qCAA0B1oC,GACpCtB,KAAKiqC,6BAA+B3oC,IAIxCtB,KAAKiqC,2BAA6B3oC,EAClC,4BAA+B,GACnC,EA9Ue,EAAAmmC,wBAAyB,EAgBzB,EAAAE,uBAAwB,EAgBxB,EAAAE,wBAAyB,EAgBzB,EAAAE,wBAAyB,EAgBzB,EAAAE,2BAA4B,EAgB5B,EAAAE,yBAA0B,EAgB1B,EAAAE,yBAA0B,EAgB1B,EAAAE,qBAAsB,EAgBtB,EAAAE,yBAA0B,EAgB1B,EAAAE,2BAA4B,EAgB5B,EAAAE,6BAA8B,EAgB9B,EAAAE,iBAAkB,EAgBlB,EAAAE,0BAA2B,EAgB3B,EAAAE,8BAA+B,EAgB/B,EAAAE,8BAA+B,EAgB/B,EAAAE,sBAAuB,EAgBvB,EAAAE,4BAA6B,EAgB7B,EAAAE,0BAA2B,EAgB3B,EAAAE,oCAAqC,EAgBrC,EAAAE,sCAAuC,EAgBvC,EAAAE,4BAA6B,C,oHC3SzC,MAAMC,EAMFnuC,8BAA8BovB,EAAgBgf,GACjDA,EAASC,aAAajf,EAAQ,QAClC,CASOpvB,iCAAiCo5B,EAAsBrD,EAAc1W,GACxE0W,EAAQ4U,UAAW,EACnB5U,EAAQ1W,IAAO,EACX+Z,EAAQkV,sBAAwBlV,EAAQmV,mBAAmBC,mBAC3DzY,EAAQ1W,EAAM,YAAc+Z,EAAQF,iBAAmB,EACvDnD,EAAQ,UAAYqD,EAAQF,iBAAmB,KAAM,GAErDnD,EAAQ1W,EAAM,YAAc,CAEpC,CAQOrf,yBAAyBo5B,EAAsBR,EAA8BvZ,GAChF,MAAMxC,EAASuc,EAAQmV,mBAEvB3V,EAAc6V,aAAapvB,EAAM,SAAUxC,EAC/C,CAQO7c,mBAAmB+G,EAAoBpG,GAC1C,OAAOA,EAAMigC,YAAc75B,EAAK2nC,UAAY/tC,EAAMguC,UAAY,gBAClE,CAYO3uC,6BACH+G,EACApG,EACAiuC,EACAxN,EACAR,EACAiO,EACA9Y,GAEIA,EAAQsU,gBACRtU,EAA0B,iBAAI6Y,EAC9B7Y,EAAmB,UAAIqL,EACvBrL,EAAa,IAAI6K,GAAc38B,KAAK6qC,YAAY/nC,EAAMpG,GACtDo1B,EAA2B,kBAAIhvB,EAAKmO,kBACpC6gB,EAAmB,UAAI8Y,EAE/B,CAWO7uC,yCACHW,EACA0H,EACA0tB,EACA8L,EACAkN,EAAkC,KAClCC,GAA4B,GAE5B,IAAIC,GAAU,EACVC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EAEpBL,EAAgC,MAAhBH,OAA2CvnC,IAApB7G,EAAMmkC,WAA+C,OAApBnkC,EAAMmkC,UAAqBiK,EACnGI,EAAgC,MAAhBJ,OAA4CvnC,IAArB7G,EAAM6uC,YAAiD,OAArB7uC,EAAM6uC,WAAsBT,EACrGK,EAAgC,MAAhBL,OAA4CvnC,IAArB7G,EAAM8uC,YAAiD,OAArB9uC,EAAM8uC,WAAsBV,EACrGM,EAAgC,MAAhBN,OAA4CvnC,IAArB7G,EAAM+uC,YAAiD,OAArB/uC,EAAM+uC,WAAsBX,EACrGO,EAAgC,MAAhBP,OAA4CvnC,IAArB7G,EAAMgvC,YAAiD,OAArBhvC,EAAMgvC,WAAsBZ,EACrGQ,EAAgC,MAAhBR,OAA4CvnC,IAArB7G,EAAMivC,YAAiD,OAArBjvC,EAAMivC,WAAsBb,EAEjGhZ,EAAmB,YAAMmZ,IACzBnZ,EAAmB,UAAImZ,EACvBD,GAAU,GAGVlZ,EAAoB,aAAMoZ,IAC1BpZ,EAAoB,WAAIoZ,EACxBF,GAAU,GAGVlZ,EAAoB,aAAMqZ,IAC1BrZ,EAAoB,WAAIqZ,EACxBH,GAAU,GAGVlZ,EAAoB,aAAMsZ,IAC1BtZ,EAAoB,WAAIsZ,EACxBJ,GAAU,GAGVlZ,EAAoB,aAAMuZ,IAC1BvZ,EAAoB,WAAIuZ,EACxBL,GAAU,GAGVlZ,EAAoB,aAAMwZ,IAC1BxZ,EAAoB,WAAIwZ,EACxBN,GAAU,GAGVlZ,EAAsB,gBAAO1tB,EAAOg8B,kBACpCtO,EAAsB,cAAKA,EAAsB,aACjDkZ,GAAU,GAGVlZ,EAAmB,YAAM8L,IACzB9L,EAAmB,UAAI8L,EACvBoN,GAAU,GAGVlZ,EAAwB,iBAAMiZ,IAC9BjZ,EAAwB,eAAIiZ,EAC5BC,GAAU,GAGVA,GACAlZ,EAAQkV,mBAEhB,CAOOjrC,8BAA8B+G,EAAoBgvB,GACrD,GAAIhvB,EAAK8oC,UAAY9oC,EAAKyqB,0BAA4BzqB,EAAK+oC,SAAU,CACjE/Z,EAA8B,qBAAIhvB,EAAK0qB,mBAEvC,MAAMse,OAAyDvoC,IAA3BuuB,EAAqB,YAEzD,GAAIhvB,EAAK+oC,SAASE,2BAA6BD,EAC3Cha,EAAqB,aAAI,MACtB,CACHA,EAAsB,aAAIhvB,EAAK+oC,SAASG,MAAM5pC,OAAS,EACvD0vB,EAAqB,aAAIga,QAAsCvoC,EAE/D,MAAMwC,EAAkBjD,EAAKnG,WAAWoJ,gBACxC,GAAIA,GAAmBA,EAAgBiwB,QAAS,CAC5C,MAAMiW,GAAqE,IAAvDlmC,EAAgBmmC,oBAAoBnpC,QAAQD,GAChEgvB,EAAgC,uBAAIma,C,QAI5Cna,EAA8B,qBAAI,EAClCA,EAAsB,aAAI,CAElC,CAOO/1B,qCAAqC+G,EAAoBgvB,GAC5D,MAAM5O,EAAiBpgB,EAAMqpC,mBACzBjpB,GACA4O,EAAyB,gBAAI5O,EAAQkpB,aAAeta,EAAa,IACjEA,EAA8B,qBAAI5O,EAAQmpB,kBAAoBva,EAAiB,QAC/EA,EAA6B,oBAAI5O,EAAQopB,iBAAmBxa,EAAgB,OAC5EA,EAAsB,aAAI5O,EAAQqpB,eAAiB,EACnDza,EAA+B,sBAAI5O,EAAQqpB,eAE3Cza,EAA8B,qBAAI5O,EAAQspB,2BAE1C1a,EAAyB,iBAAI,EAC7BA,EAA8B,sBAAI,EAClCA,EAA6B,qBAAI,EACjCA,EAAsB,cAAI,EAC1BA,EAA+B,sBAAI,EAE3C,CAOO/1B,6CAA6C+G,EAAoBgvB,GACpE,MAAM5O,EAAiBpgB,EAAM2pC,4BAC7B3a,EAAwC,kCAAI5O,IAAWA,EAAQ9X,UACnE,CAaOrP,mCACH+G,EACAgvB,EACA4a,EACAd,EACAe,GAAkB,EAClBC,GAAiB,EACjBC,GAA0B,GAE1B,IAAK/a,EAAQoU,qBAAuBpU,EAAQ2U,eAAiB3U,EAAQyU,UAAYzU,EAAQ4U,WAAa5U,EAAQ0U,KAC1G,OAAO,EAGX1U,EAAQyU,SAAWzU,EAAQ2U,aAC3B3U,EAAQ0U,KAAO1U,EAAQ4U,SAEvB5U,EAAgB,OAAIA,EAAQ2U,cAAgB3jC,EAAK+M,sBAAsB,gBAEnEiiB,EAAQ2U,cAAgB3jC,EAAK+M,sBAAsB,mBACnDiiB,EAAiB,SAAI,GAGzB,IAAK,IAAI3vB,EAAI,EAAGA,GAAK,MACjB2vB,EAAQ,KAAO3vB,KAAK2vB,EAAQ4U,UAAW5jC,EAAK+M,sBAAsB,KAAW,IAAN1N,EAAU,GAAKA,KAG1F,GAAIuqC,EAAgB,CAChB,MAAMI,EAAkBhqC,EAAKiqC,iBAAmBjqC,EAAK+M,sBAAsB,eAC3EiiB,EAAqB,YAAIgb,EACzBhb,EAAqB,YAAIhvB,EAAKy7B,gBAAkBuO,GAAmBF,C,CAmBvE,OAhBI9pC,EAAK+M,sBAAsB,yBAAoC/M,EAAKkqC,cAAgBlqC,EAAKmqC,oBACzFnb,EAAwB,gBAAI,GAG5B8Z,GACA5rC,KAAKktC,uBAAuBpqC,EAAMgvB,GAGlC6a,GACA3sC,KAAKmtC,8BAA8BrqC,EAAMgvB,GAGzC+a,GACA7sC,KAAKotC,sCAAsCtqC,EAAMgvB,IAG9C,CACX,CAOO/1B,kCAAkCW,EAAco1B,GACnD,GAAIp1B,EAAMwD,aAAc,CACpB,MAAMmtC,EAAoBvb,EAAQwb,UAClCxb,EAAQwb,UAAsD,OAA1C5wC,EAAMwD,aAAavB,oBAA+BjC,EAAMwD,aAAavB,mBAAmB4uC,eAAiB,EACzHzb,EAAQwb,WAAaD,GACrBvb,EAAQkV,mB,CAGpB,CAQOjrC,4BAA4BW,EAAco1B,EAAcsM,GAC3D,MAAMoP,EAAiB1b,EAAQ2b,+BACzBC,EAAuB5b,EAAQ6b,sCAErC7b,EAAQ2b,+BAAiC/wC,EAAMkxC,iCAAmCxP,EAClFtM,EAAQ6b,uCAAyCjxC,EAAM0D,YAAYo0B,UAAUqZ,4BAEzEL,IAAmB1b,EAAQ2b,gCAAkCC,IAAyB5b,EAAQ6b,uCAC9F7b,EAAQkV,mBAEhB,CAQOjrC,gCAAgCW,EAAco1B,EAAcuJ,GAC/D,MAAMyS,EAAkBhc,EAAQic,QAEhC,IAAKjc,EAAQuU,iBACT,OAGJ,MAAM2H,EAAe,CACjB,CACIhjC,KAAM,EACNkiB,OAAQ,mBACRlkB,MAAO,0BAEX,CACIgC,KAAM,EACNkiB,OAAQ,mBACRlkB,MAAO,0BAEX,CACIgC,KAAM,EACNkiB,OAAQ,uBACRlkB,MAAO,8BAEX,CACIgC,KAAM,EACNkiB,OAAQ,qBACRlkB,MAAO,4BAEX,CACIgC,KAAM,EACNkiB,OAAQ,sBACRlkB,MAAO,6BAEX,CACIgC,KAAM,EACNkiB,OAAQ,gBACRlkB,MAAO,uBAEX,CACIgC,KAAM,EACNkiB,OAAQ,iBACRlkB,MAAO,yBAIf,GAAItM,EAAMqJ,iBAAmBrJ,EAAMqJ,gBAAgBiwB,SAAWqF,EAAgB,CAC1EvJ,EAAQic,SAAU,EAClBjc,EAAQmc,gBAAkBvxC,EAAMqJ,gBAAgBmoC,SAEhD,IAAK,IAAI/rC,EAAI,EAAGA,EAAI6rC,EAAa5rC,OAAQD,IAAK,CAC1C,MAAM6G,EAAQtM,EAAMqJ,gBAAgBooC,SAASH,EAAa7rC,GAAG6I,OAC9C,IAAXhC,GACA8oB,EAAQkc,EAAa7rC,GAAG+qB,SAAU,EAClC4E,EAAQkc,EAAa7rC,GAAG6G,OAASA,GAEjC8oB,EAAQkc,EAAa7rC,GAAG+qB,SAAU,C,MAGvC,CACH4E,EAAQic,SAAU,EAClB,IAAK,IAAI5rC,EAAI,EAAGA,EAAI6rC,EAAa5rC,OAAQD,IACrC2vB,EAAQkc,EAAa7rC,GAAG+qB,SAAU,C,CAItC4E,EAAQic,SAAWD,IACnBhc,EAAQkV,oBACRlV,EAAQsT,6BAEhB,CAiBOrpC,8BACHW,EACAoG,EACAsrC,EACAC,EACAvc,EACAwc,EACA3W,GA4BA,OApBAA,EAAM4W,aAAc,OAEkBhrC,IAAlCuuB,EAAQ,QAAUuc,KAClB1W,EAAM6W,aAAc,GAGxB1c,EAAQ,QAAUuc,IAAc,EAEhCvc,EAAQ,YAAcuc,IAAc,EACpCvc,EAAQ,YAAcuc,IAAc,EACpCvc,EAAQ,aAAeuc,IAAc,EACrCvc,EAAQ,WAAauc,IAAc,EAEnCD,EAAMK,4BAA4B3c,EAASuc,GAG3Cvc,EAAQ,yBAA2Buc,IAAc,EACjDvc,EAAQ,qBAAuBuc,IAAc,EAC7Cvc,EAAQ,yBAA2Buc,IAAc,EAEzCD,EAAMM,aACV,KAAK,iBACD5c,EAAQ,qBAAuBuc,IAAc,EAC7C,MACJ,KAAK,qBACDvc,EAAQ,yBAA2Buc,IAAc,EACjD,MACJ,KAAK,qBACDvc,EAAQ,yBAA2Buc,IAAc,EA0BzD,GArBIC,IAAsBF,EAAMO,SAASC,aAAa,EAAG,EAAG,KACxDjX,EAAMkX,iBAAkB,GAI5B/c,EAAQ,SAAWuc,IAAc,EACjCvc,EAAQ,YAAcuc,IAAc,EACpCvc,EAAQ,iBAAmBuc,IAAc,EACzCvc,EAAQ,wBAA0Buc,IAAc,EAChDvc,EAAQ,yBAA2Buc,IAAc,EACjDvc,EAAQ,mBAAqBuc,IAAc,EAC3Cvc,EAAQ,wBAA0Buc,IAAc,EAChDvc,EAAQ,YAAcuc,IAAc,EACpCvc,EAAQ,aAAeuc,IAAc,EACrCvc,EAAQ,gBAAkBuc,IAAc,EACxCvc,EAAQ,YAAcuc,IAAc,EACpCvc,EAAQ,iBAAmBuc,IAAc,EACzCvc,EAAQ,aAAeuc,IAAc,EACrCvc,EAAQ,mBAAqBuc,IAAc,EAC3Cvc,EAAQ,sBAAwBuc,IAAc,EAE1CvrC,GAAQA,EAAKgsC,gBAAkBpyC,EAAMqyC,gBAAkBX,EAAMtnB,cAAe,CAC5E,MAAMkoB,EAAkBZ,EAAMa,qBAC9B,GAAID,EAAiB,CACjB,MAAME,EAAYF,EAAgBG,eAC9BD,GACIA,EAAUE,YAAcF,EAAUE,WAAWhtC,OAAS,IACtDu1B,EAAM7Q,eAAgB,EACtBkoB,EAAgBhd,eAAeF,EAASuc,G,EAMpDD,EAAMiB,cAAgB,sBACtB1X,EAAM0X,cAAe,EACrBvd,EAAQ,mBAAqBuc,IAAc,EAC3Cvc,EAAQ,qBAAuBuc,GAAcD,EAAMiB,cAAgB,2BAEnEvd,EAAQ,mBAAqBuc,IAAc,EAC3Cvc,EAAQ,qBAAuBuc,IAAc,EAErD,CAYOtyC,+BAA+BW,EAAcoG,EAAoBgvB,EAAcwc,EAA4BgB,EAAwB,EAAGC,GAAkB,GAC3J,IAAKzd,EAAQkU,gBACT,OAAOlU,EAAQ2U,aAGnB,IAAI4H,EAAa,EACjB,MAAM1W,EAAQ,CACV4W,YAAazc,EAAQ2U,aACrB+H,aAAa,EACba,cAAc,EACdvoB,eAAe,EACf+nB,iBAAiB,GAGrB,GAAInyC,EAAM8yC,gBAAkBD,EACxB,IAAK,MAAMnB,KAAStrC,EAAK2sC,aAIrB,GAHAzvC,KAAK0vC,uBAAuBhzC,EAAOoG,EAAMsrC,EAAOC,EAAYvc,EAASwc,EAAmB3W,GAExF0W,IACIA,IAAeiB,EACf,MAKZxd,EAAsB,aAAI6F,EAAMkX,gBAChC/c,EAAiB,QAAI6F,EAAM7Q,cAG3B,IAAK,IAAI9d,EAAQqlC,EAAYrlC,EAAQsmC,EAAuBtmC,SACvBzF,IAA7BuuB,EAAQ,QAAU9oB,KAClB8oB,EAAQ,QAAU9oB,IAAS,EAC3B8oB,EAAQ,YAAc9oB,IAAS,EAC/B8oB,EAAQ,aAAe9oB,IAAS,EAChC8oB,EAAQ,WAAa9oB,IAAS,EAC9B8oB,EAAQ,YAAc9oB,IAAS,EAC/B8oB,EAAQ,SAAW9oB,IAAS,EAC5B8oB,EAAQ,YAAc9oB,IAAS,EAC/B8oB,EAAQ,iBAAmB9oB,IAAS,EACpC8oB,EAAQ,wBAA0B9oB,IAAS,EAC3C8oB,EAAQ,yBAA2B9oB,IAAS,EAC5C8oB,EAAQ,mBAAqB9oB,IAAS,EACtC8oB,EAAQ,wBAA0B9oB,IAAS,EAC3C8oB,EAAQ,YAAc9oB,IAAS,EAC/B8oB,EAAQ,aAAe9oB,IAAS,EAChC8oB,EAAQ,gBAAkB9oB,IAAS,EACnC8oB,EAAQ,YAAc9oB,IAAS,EAC/B8oB,EAAQ,iBAAmB9oB,IAAS,EACpC8oB,EAAQ,aAAe9oB,IAAS,EAChC8oB,EAAQ,mBAAqB9oB,IAAS,EACtC8oB,EAAQ,sBAAwB9oB,IAAS,GAIjD,MAAM2mC,EAAOjzC,EAAM0D,YAAYo0B,UAc/B,YAZ+BjxB,IAA3BuuB,EAAqB,cACrB6F,EAAM6W,aAAc,GAGxB1c,EAAqB,YACjB6F,EAAM7Q,gBAAmB6oB,EAAKC,oBAAsBD,EAAK9B,6BAAiC8B,EAAKE,wBAA0BF,EAAKG,iCAClIhe,EAA0B,iBAAI6F,EAAM0X,aAEhC1X,EAAM6W,aACN1c,EAAQ3C,UAGLwI,EAAM4W,WACjB,CAWOxyC,0CACHsyC,EACA3iB,EACAqG,EACAge,EACAC,EAAyC,KACzCC,GAAwB,GAEpBD,GACAA,EAAmBnqC,KAAK,QAAUwoC,GAGlC4B,IAIJvkB,EAAa7lB,KACT,aAAewoC,EACf,gBAAkBA,EAClB,iBAAmBA,EACnB,kBAAoBA,EACpB,gBAAkBA,EAClB,eAAiBA,EACjB,cAAgBA,EAChB,cAAgBA,EAChB,cAAgBA,GAGpBtc,EAAalsB,KAAK,gBAAkBwoC,GACpCtc,EAAalsB,KAAK,eAAiBwoC,GAEnC3iB,EAAa7lB,KACT,eAAiBwoC,EACjB,qBAAuBA,EACvB,wBAA0BA,EAC1B,kBAAoBA,EACpB,mBAAqBA,EACrB,iBAAmBA,GAGnB0B,IACAhe,EAAalsB,KAAK,yBAA2BwoC,GAC7C3iB,EAAa7lB,KAAK,0BAA4BwoC,IAEtD,CASOtyC,sCACHm0C,EACAne,EACAD,EACAwd,EAAwB,GAExB,IAAI5jB,EACAskB,EAAyC,KAE7C,GAA6BE,EAAuBC,cAAe,CAC/D,MAAM/tB,EAAkC8tB,EACxCxkB,EAAetJ,EAAQ+tB,cACvBH,EAAqB5tB,EAAQguB,oBAC7Bre,EAAe3P,EAAQsT,SACvB5D,EAAU1P,EAAQ0P,QAClBwd,EAAwBltB,EAAQktB,uBAAyB,C,MAEzD5jB,EAAyBwkB,EACpBne,IACDA,EAAe,IAIvB,IAAK,IAAIsc,EAAa,EAAGA,EAAaiB,GAC7Bxd,EAAQ,QAAUuc,GADkCA,IAIzDruC,KAAKqwC,mCAAmChC,EAAY3iB,EAAcqG,EAAcD,EAAQ,wBAA0Buc,GAAa2B,GAG/Hle,EAA+B,uBAC/BpG,EAAa7lB,KAAK,yBAGlBisB,EAAwC,iCACxCpG,EAAa7lB,KAAK,gCAClB6lB,EAAa7lB,KAAK,2CAClB6lB,EAAa7lB,KAAK,4BAClBksB,EAAalsB,KAAK,+BAE1B,CAUO9J,iCAAiC+1B,EAAcwe,EAA4BhB,EAAwB,EAAGriB,EAAO,GAChH,IAAIsjB,EAAoB,EACxB,IAAK,IAAIlC,EAAa,EAAGA,EAAaiB,GAC7Bxd,EAAQ,QAAUuc,GADkCA,IAKrDA,EAAa,IACbkC,EAAoBtjB,EAAOohB,EAC3BiC,EAAUtjB,YAAYujB,EAAmB,QAAUlC,IAGlDvc,EAAiB,UACdA,EAAQ,SAAWuc,IACnBiC,EAAUtjB,YAAYC,EAAM,SAAWohB,GAGvCvc,EAAQ,YAAcuc,IACtBiC,EAAUtjB,YAAYC,EAAM,YAAcohB,GAG1Cvc,EAAQ,aAAeuc,IACvBiC,EAAUtjB,YAAYC,EAAM,aAAeohB,GAG3Cvc,EAAQ,gBAAkBuc,IAC1BiC,EAAUtjB,YAAYC,EAAM,gBAAkBohB,GAG9Cvc,EAAQ,YAAcuc,IACtBiC,EAAUtjB,YAAYC,EAAM,YAAcohB,GAG1Cvc,EAAQ,iBAAmBuc,IAC3BiC,EAAUtjB,YAAYC,EAAM,iBAAmBohB,IAI3D,OAAOkC,GACX,CAUOx0C,mDAAmDy0C,EAAmB1tC,EAAoB2tC,GAC7FzwC,KAAK0wC,qBAAqBC,sBAAwBF,EAClDzwC,KAAK4wC,iCAAiCJ,EAAS1tC,EAAM9C,KAAK0wC,qBAC9D,CAQO30C,wCAAwCy0C,EAAmB1tC,EAAoBgvB,GAClF,MAAM2e,EAAc3e,EAA+B,sBAEnD,GAAI2e,EAAc,GAAK,sBAA+B,CAClD,MAAMI,EAAqB,gCAAwCC,iBAC7D5tB,EAAiBpgB,EAAMqpC,mBAC7B,GAAIjpB,aAAO,EAAPA,EAASspB,yBACT,OAEJ,MAAMuE,EAAS7tB,GAAWA,EAAQopB,iBAAmBxa,EAAgB,OAC/Dkf,EAAU9tB,GAAWA,EAAQmpB,kBAAoBva,EAAiB,QAClEmf,EAAK/tB,GAAWA,EAAQkpB,aAAeta,EAAa,IAC1D,IAAK,IAAI9oB,EAAQ,EAAGA,EAAQynC,EAAaznC,IACrCwnC,EAAQ3qC,KAAK,iBAA4BmD,GAErC+nC,GACAP,EAAQ3qC,KAAK,eAA0BmD,GAGvCgoC,GACAR,EAAQ3qC,KAAK,gBAA2BmD,GAGxCioC,GACAT,EAAQ3qC,KAAK,WAAsB,IAAMmD,GAGzCwnC,EAAQpuC,OAASyuC,GACjB,UAAa,8CAAgD/tC,EAAK5F,K,CAIlF,CAQOnB,gDAAgDy0C,EAAmB1tC,EAAoBgvB,GAC1EA,EAAwC,gCAAKA,EAAmB,WAG5E0e,EAAQ3qC,KAAK,wCAErB,CASO9J,iCAAiCy0C,EAAmB1tC,EAAoBgvB,EAAcwe,GACrFxe,EAA8B,qBAAI,IAClCwe,EAAUnjB,uBAAuB,EAAGrqB,GAEpC0tC,EAAQ3qC,KAAK,yBACb2qC,EAAQ3qC,KAAK,yBACTisB,EAA8B,qBAAI,IAClC0e,EAAQ3qC,KAAK,8BACb2qC,EAAQ3qC,KAAK,+BAGzB,CAOO9J,qCAAqCy0C,EAAmB1e,IACvDA,EAAmB,WAAKA,EAAwB,iBAChD9xB,KAAKkxC,2BAA2BV,IAAW1e,EAA0B,kBAGrEA,EAAQqf,gBACRX,EAAQ3qC,KAAK,sBAErB,CAOO9J,kCAAkCy0C,EAAmBY,GAAiC,GACzFZ,EAAQ3qC,KAAK,UACb2qC,EAAQ3qC,KAAK,UACb2qC,EAAQ3qC,KAAK,UACb2qC,EAAQ3qC,KAAK,UACTurC,IACAZ,EAAQ3qC,KAAK,kBACb2qC,EAAQ3qC,KAAK,kBACb2qC,EAAQ3qC,KAAK,kBACb2qC,EAAQ3qC,KAAK,kBAErB,CAQO9J,2BAA2BqyC,EAAcjjB,EAAgBkjB,GAC5DD,EAAMiD,iBAAiBlmB,EAAQkjB,EAAa,GAChD,CAWOtyC,iBAAiBqyC,EAAcC,EAAoB3xC,EAAcyuB,EAAgBmmB,EAAsBxC,GAAiB,GAC3HV,EAAMmD,WAAWlD,EAAY3xC,EAAOyuB,EAAQmmB,EAAaxC,EAC7D,CAUO/yC,kBAAkBW,EAAcoG,EAAoBqoB,EAAgB2G,EAAcwd,EAAwB,GAC7G,MAAMlqC,EAAMzE,KAAKiR,IAAI9O,EAAK2sC,aAAartC,OAAQktC,GAE/C,IAAK,IAAIntC,EAAI,EAAGA,EAAIiD,EAAKjD,IAAK,CAC1B,MAAMisC,EAAQtrC,EAAK2sC,aAAattC,GAChCnC,KAAKwxC,UAAUpD,EAAOjsC,EAAGzF,EAAOyuB,EAA2B,kBAAZ2G,EAAwBA,EAAUA,EAAsB,aAAGhvB,EAAKgsC,e,CAEvH,CAUO/yC,yBAAyBW,EAAcoG,EAAoBqoB,EAAgBsmB,GAAc,GACxF/0C,EAAMigC,YAAc75B,EAAK2nC,UAAY/tC,EAAMguC,UAAY,mBACvDvf,EAAOK,UAAU,YAAa9uB,EAAMguC,QAAShuC,EAAMg1C,SAAUh1C,EAAMi1C,OAAQj1C,EAAMk1C,YAE7EH,GACA/0C,EAAMm1C,SAASC,mBAAmB9xC,KAAK+xC,eACvC5mB,EAAO6mB,UAAU,YAAahyC,KAAK+xC,gBAEnC5mB,EAAO6mB,UAAU,YAAat1C,EAAMm1C,UAGhD,CAQO91C,2BAA2B+G,EAAqBqoB,EAAiB8mB,GACpE,GAAK9mB,GAAWroB,IAGZA,EAAKyqB,0BAA4BpC,EAAOuC,+BACxC5qB,EAAKyqB,0BAA2B,GAGhCzqB,EAAK8oC,UAAY9oC,EAAKyqB,0BAA4BzqB,EAAK+oC,UAAU,CACjE,MAAMA,EAAW/oC,EAAK+oC,SAEtB,GAAIA,EAASE,2BAA6B5gB,EAAO+mB,gBAAgB,qBAAuB,EAAG,CACvF,MAAMC,EAActG,EAASuG,0BAA0BtvC,GACvDqoB,EAAO4H,WAAW,cAAeof,GACjChnB,EAAOsH,SAAS,mBAAoB,GAAOoZ,EAASG,MAAM5pC,OAAS,G,KAChE,CACH,MAAMiwC,EAAWxG,EAASyG,qBAAqBxvC,GAE3CuvC,IACAlnB,EAAOonB,YAAY,SAAUF,GACzBJ,GAAwBnvC,EAAKnG,WAAWoJ,iBAAmBjD,EAAKnG,WAAWoJ,gBAAiBooC,SAAS,KAChG8D,EAAqBO,cAAc1vC,EAAKiI,YACzCknC,EAAqBO,cAAc1vC,EAAKiI,UAAYsnC,EAAS9sC,SAEjE4lB,EAAOonB,YAAY,iBAAkBN,EAAqBO,cAAc1vC,EAAKiI,WAC7Em/B,EAAeuI,iCAAiCJ,EAAUJ,EAAqBO,cAAc1vC,EAAKiI,Y,EAKtH,CAGQhP,wCAAwCI,EAAsByL,GAGlE,OAFAA,EAAO8qC,IAAIv2C,GAEJyL,CACX,CAOO7L,iCAAiC42C,EAA4BxnB,GAChE,MAAMjI,EAAiByvB,EAAcxG,mBAChCwG,GAAiBzvB,GAItBiI,EAAOynB,cAAc,wBAAyB1vB,EAAQ2vB,WAC1D,CAQO92C,oBAAoB+1B,EAAc3G,EAAgBzuB,GACrD,IAAKo1B,GAAWA,EAA0B,kBAAMA,EAAQ/uB,SAAW+uB,EAAQ/uB,QAAQ,qBAAuB,EAAI,CAC1G,MAAM8F,EAAiBnM,EAAMwD,aACzB2I,EAAOnI,OAAS,yBAChB,UAAa,iEAAkE,IAEnFyqB,EAAOsH,SAAS,2BAA4B,GAAO9xB,KAAKmyC,IAAIjqC,EAAO9K,KAAO,GAAO4C,KAAKoyC,K,CAE9F,CAOOh3C,qBAAqBovB,EAAgBzuB,GACxC,kBAAiCyuB,EAAQzuB,EAC7C,EAtQe,EAAAg0C,qBAAuB,CAAEC,sBAAuB,GA+JhD,EAAAoB,cAAgB,Y,oECv4B5B,MAAMiB,EA2CT92C,YAAY2xB,EAAoB3wB,EAAc+1C,EAAkBnhB,EAAkC6B,GAAkB,EAAMuf,GAAS,GAhC5H,KAAAD,SAAmB,IAMnB,KAAAE,wBAAkC,EA2BrCnzC,KAAK60B,UAAYhH,EACjB7tB,KAAK9C,KAAOA,EACZ8C,KAAKizC,SAAWA,EAEXplB,EAASulB,gBACVvlB,EAASulB,cAAgB,IAAI,KAAsBvlB,IAGvD7tB,KAAKqzC,mBAAqBvhB,EAC1B9xB,KAAKszC,eAAiBzlB,EAASulB,cAE3Bzf,GACA3zB,KAAKszC,eAAeC,WAAWvzC,MAG/BkzC,GACAlzC,KAAKo0B,SAAQ,GAGjBp0B,KAAKwzC,sBAAwB3lB,EAASqG,gBAAgB,GAC1D,CAzCUE,QAAQ8e,GACVA,GACAlzC,KAAKszC,eAAeG,gBAAgBzzC,KAE5C,CA2CO8B,eACH,MAAO,oBACX,CAWOuyB,kBAAkBvC,EAA0Bp1B,EAAc0H,EAAgB4pB,GAC7E,OAAO,CACX,CAUO0lB,mBAAmB/e,EAA8Bj4B,EAAc0H,EAAgB4pB,GAAyB,CAUxG0G,eAAeC,EAA8Bj4B,EAAc0H,EAAgB4pB,GAAyB,CAOpG1lB,QAAQktB,GAAuC,CAW/Cme,cAAcC,GACjB,OAAO,IACX,CAMOC,eAAe/hB,GAClB,GAAK9xB,KAAKqzC,mBAGV,IAAK,MAAMj4B,KAAO5f,OAAOghB,KAAKxc,KAAKqzC,oBAAqB,CACpD,GAAe,MAAXj4B,EAAI,GACJ,SAGJ,MAAMpQ,SAAchL,KAAKqzC,mBAAmBj4B,GAC5C0W,EAAQ1W,GAAO,CACXpQ,KAAe,WAATA,EAAoB,SAAoB,WAATA,EAAoB,SAAoB,YAATA,EAAqB,UAAY,SACrGs8B,QAAStnC,KAAKqzC,mBAAmBj4B,G,CAG7C,CASO04B,+BAA+BhiB,EAA0Bp1B,EAAcoG,GAA2B,CASlGkvB,eAAeF,EAA0Bp1B,EAAcoG,GAA2B,CAQlFoyB,WAAWC,GACd,OAAO,CACX,CAMO6G,0BACH,OAAO,CACX,CAOO+X,yBAAyBC,GAAuD,CAOhF5e,kBAAkBC,GAAsC,CAOxDC,eAAeC,GAAmC,CASlD0e,aAAaniB,EAA0Bwe,EAA4B4D,GACtE,OAAOA,CACX,CAOOze,YAAYC,GAA2B,CASvCye,cAAcC,EAAsB13C,EAAcoG,GAA2B,CAO7EuxC,uBAAuBC,GAAuB,CAM9C3e,cACH,MAAO,CAAC,CACZ,CAMOqB,OAAOud,GACV,YAA0B,IAAMA,GAAQv0C,KAC5C,CAMO6K,YACH,OAAO,eAA8B7K,KACzC,CAQOuM,MAAMpQ,EAAaO,EAAcw6B,GACpC,YAA0B,IAAMl3B,MAAM7D,EAAQO,EAAOw6B,EACzD,GA1QA,UADC,W,4BAOD,UADC,W,gCAOD,UADC,W,6DCyDL,IAAYsd,E,iBAAZ,SAAYA,GACR,yBACA,2BACA,uCACA,mDACA,8CACA,wCACA,wCACA,uCACA,yCACA,+CACA,kCACA,8DACA,4DACA,iDACH,CAfD,CAAYA,IAAAA,EAAmB,I,sFC1DxB,MAAMC,EAwBTv4C,YAAY2xB,GAhBF,KAAA6mB,SAAiC,GACjC,KAAAC,eAAuC,GACvC,KAAAC,6BAAqD,GAe3D50C,KAAK60B,UAAYhH,EACjB7tB,KAAKyC,OAASorB,EAASlxB,WACvBqD,KAAKoe,QAAUpe,KAAKyC,OAAOrC,WAC/B,CAKOmzC,WAAWgB,GACd,IAAK,IAAIpyC,EAAI,EAAGA,EAAInC,KAAK00C,SAAStyC,SAAUD,EACxC,GAAInC,KAAK00C,SAASvyC,GAAGjF,OAASq3C,EAAOr3C,KACjC,KAAM,WAAWq3C,EAAOr3C,wCAAwC8C,KAAK60B,UAAU33B,SAIvF,GAAI8C,KAAK60B,UAAU8E,0BACf,KAAM,eAAe4a,EAAOr3C,yCAAyC8C,KAAK60B,UAAU33B,mJAGxF,MAAM23C,EAAkBN,EAAOzyC,eAC1B2yC,EAAsBK,iCAAiCD,KACxDJ,EAAsBK,iCAAiCD,GAAmB,qBAAsBJ,EAAsBM,wBAG1H/0C,KAAK60B,UAAUgF,4BAA8B75B,KAAKg1C,mBAAmB5iB,KAAKpyB,MAE1EA,KAAK00C,SAAS7uC,KAAK0uC,GACnBv0C,KAAK00C,SAASO,MAAK,CAACruB,EAAGC,IAAMD,EAAEqsB,SAAWpsB,EAAEosB,WAE5CjzC,KAAKk1C,qBAAuB,CAAC,EAE7B,MAAMC,EAA6E,CAAC,EACpFA,EAAuBV,EAAsBK,iCAAiCD,IAAoB,CAC9F7pC,KAAM,UACNs8B,SAAS,GAGb,IAAK,MAAMiN,KAAUv0C,KAAK00C,SACtBH,EAAOV,eAAesB,GACtBn1C,KAAKo1C,mBAAmB,SAAUb,EAAOZ,cAAc,WACvD3zC,KAAKo1C,mBAAmB,WAAYb,EAAOZ,cAAc,aAG7D3zC,KAAKq1C,wBAA0BF,CACnC,CAKO1B,gBAAgBc,IAC0B,IAAzCv0C,KAAK20C,eAAe5xC,QAAQwxC,KAC5Bv0C,KAAK20C,eAAe9uC,KAAK0uC,GACzBv0C,KAAK20C,eAAeM,MAAK,CAACruB,EAAGC,IAAMD,EAAEqsB,SAAWpsB,EAAEosB,WAElDjzC,KAAK60B,UAAUiF,sCAAwC95B,KAAKs1C,oCAAoCljB,KAAKpyB,MACrGA,KAAK60B,UAAUmF,mDAAqDh6B,KAAKu1C,iDAAiDnjB,KAAKpyB,MAC/HA,KAAK60B,UAAUkF,mCAAqC/5B,KAAKw1C,iCAAiCpjB,KAAKpyB,MAC/FA,KAAK60B,UAAUqF,mCAAqCl6B,KAAKy1C,iCAAiCrjB,KAAKpyB,MAE3Fu0C,EAAOpB,yBACPnzC,KAAK40C,6BAA6B/uC,KAAK0uC,GACvCv0C,KAAK40C,6BAA6BK,MAAK,CAACruB,EAAGC,IAAMD,EAAEqsB,SAAWpsB,EAAEosB,WAChEjzC,KAAK60B,UAAUsF,4CAA8Cn6B,KAAK01C,0CAA0CtjB,KAAKpyB,MACjHA,KAAK60B,UAAUuF,6CAA+Cp6B,KAAK21C,2CAA2CvjB,KAAKpyB,MACnHA,KAAK60B,UAAUoF,uCAAyCj6B,KAAK41C,qCAAqCxjB,KAAKpyB,OAGnH,CAOO61C,UAAU34C,GACb,IAAK,IAAIiF,EAAI,EAAGA,EAAInC,KAAK00C,SAAStyC,SAAUD,EACxC,GAAInC,KAAK00C,SAASvyC,GAAGjF,OAASA,EAC1B,OAAO8C,KAAK00C,SAASvyC,GAG7B,OAAO,IACX,CAEUmzC,oCAAoC7xB,GAC1C,IAAIzgB,GAAU,EACd,IAAK,MAAMuxC,KAAUv0C,KAAK20C,eACtB3xC,EAAUA,GAAWuxC,EAAOlgB,kBAAkB5Q,EAAUqO,QAAS9xB,KAAKyC,OAAQzC,KAAKoe,QAASqF,EAAUuK,SAE1GvK,EAAU4Q,kBAAoBrxB,CAClC,CAEUuyC,iDAAiD9xB,GACvD,IAAK,MAAM8wB,KAAUv0C,KAAK20C,eACtBJ,EAAOT,+BAA+BrwB,EAAUqO,QAAS9xB,KAAKyC,OAAQghB,EAAU3gB,KAExF,CAEU0yC,iCAAiC/xB,GACvC,IAAK,MAAM8wB,KAAUv0C,KAAK20C,eACtBJ,EAAOviB,eAAevO,EAAUqO,QAAS9xB,KAAKyC,OAAQghB,EAAU3gB,KAExE,CAEU8yC,qCAAqCnyB,GAC3C,IAAK,MAAM8wB,KAAUv0C,KAAK40C,6BACtBL,EAAOb,mBAAmB1zC,KAAK60B,UAAUmG,eAAgBh7B,KAAKyC,OAAQzC,KAAKoe,QAASqF,EAAUuK,QAEtG,CAEUynB,iCAAiChyB,GACvC,IAAK,MAAM8wB,KAAUv0C,KAAK20C,eACtBJ,EAAO7f,eAAe10B,KAAK60B,UAAUmG,eAAgBh7B,KAAKyC,OAAQzC,KAAKoe,QAASqF,EAAUuK,QAElG,CAEU0nB,0CAA0CjyB,GAChD,IAAIuY,GAA0B,EAC9B,IAAK,MAAMuY,KAAUv0C,KAAK40C,6BAEtB,GADA5Y,EAA0BuY,EAAOvY,0BAC7BA,EACA,MAGRvY,EAAUuY,wBAA0BA,CACxC,CAEU2Z,2CAA2ClyB,GACjD,IAAK,MAAM8wB,KAAUv0C,KAAK40C,6BACtBL,EAAOR,yBAAyBtwB,EAAUuwB,cAElD,CAEUgB,mBACN10B,EACAw1B,GASA,OAAQx1B,GACJ,KAAK,sBAAuC,CACxC,MAAMmD,EAAYqyB,EAClB,IAAK,MAAMvB,KAAUv0C,KAAK20C,eACtBJ,EAAOnf,kBAAkB3R,EAAU4R,gBAEvC,K,CAGJ,KAAK,mBAAoC,CACrC,MAAM5R,EAAYqyB,EAClB,IAAK,MAAMvB,KAAUv0C,KAAK20C,eACtBJ,EAAOjf,eAAe7R,EAAU8R,aAEpC,K,CAGJ,KAAK,eAAgC,CACjC,MAAM9R,EAAYqyB,EAClB,IAAI5gB,GAAa,EACjB,IAAK,MAAMqf,KAAUv0C,KAAK20C,eAEtB,GADAzf,EAAaqf,EAAOrf,WAAWzR,EAAU0R,SACrCD,EACA,MAGRzR,EAAUyR,WAAaA,EACvB,K,CAGJ,KAAK,aAA8B,CAC/B,MAAMzR,EAAYqyB,EAClB,IAAK,MAAMvB,KAAUv0C,KAAK00C,SACtBH,EAAOjsC,QAAQmb,EAAU+R,sBAE7B,K,CAGJ,KAAK,mBACiBsgB,EACRC,YAAc/1C,KAAKq1C,wBAC7B,MAGJ,KAAK,kBAAmC,CACpC,MAAM5xB,EAAYqyB,EAClB,IAAK,MAAMvB,KAAUv0C,KAAK20C,eACtBlxB,EAAUuyB,aAAezB,EAAON,aAAaxwB,EAAUqO,QAASrO,EAAU6sB,UAAW7sB,EAAUuyB,cAC/FzB,EAAOJ,cAAc1wB,EAAU2wB,WAAYp0C,KAAKyC,OAAQghB,EAAU3gB,MAElE9C,KAAKi2C,aAAa7zC,OAAS,GAC3BqhB,EAAUoO,SAAShsB,QAAQ7F,KAAKi2C,cAEhCj2C,KAAKk2C,aAAa9zC,OAAS,GAC3BqhB,EAAUiS,SAAS7vB,QAAQ7F,KAAKk2C,cAEhCl2C,KAAKm2C,SAAS/zC,OAAS,GACvBqhB,EAAU2sB,oBAAoBvqC,QAAQ7F,KAAKm2C,UAE/C1yB,EAAU2yB,WAAap2C,KAAKq2C,kBAAkB5yB,EAAU2yB,YACxD,K,CAGJ,KAAK,yBAA0C,CAC3C,MAAM3yB,EAAYqyB,EAClB91C,KAAKs2C,gBAAkB,GACvBt2C,KAAKu2C,mBAAqB,GAC1Bv2C,KAAKw2C,qBAAuB,GAC5Bx2C,KAAKi2C,aAAe,GACpBj2C,KAAKk2C,aAAe,GACpBl2C,KAAKm2C,SAAW,GAChB,IAAK,MAAM5B,KAAUv0C,KAAK00C,SAAU,CAChC,MAAM7iB,EAAW0iB,EAAO5e,cACxB,GAAI9D,EAAU,CACV,GAAIA,EAAS+D,IACT,IAAK,MAAM6gB,KAAW5kB,EAAS+D,IAC3BnS,EAAUmS,IAAI8gB,WAAWD,EAAQv5C,KAAMu5C,EAAQ5gB,MAC/C71B,KAAKs2C,iBAAmB,GAAGG,EAAQzrC,QAAQyrC,EAAQv5C,YACnD8C,KAAKi2C,aAAapwC,KAAK4wC,EAAQv5C,MAGnC20B,EAAS8kB,SACT32C,KAAKu2C,oBAAsB1kB,EAAS8kB,OAAS,QAE7C9kB,EAAS+kB,WACT52C,KAAKw2C,sBAAwB3kB,EAAS+kB,SAAW,O,CAGzDrC,EAAO9e,YAAYz1B,KAAKk2C,cACxB3B,EAAOF,uBAAuBr0C,KAAKm2C,S,CAEvC,K,EAGZ,CAEUf,mBAAmBxB,EAAoBwC,GAC7C,GAAKA,EAGL,IAAK,MAAMS,KAAaT,EACfp2C,KAAKk1C,qBAAqBtB,KAC3B5zC,KAAKk1C,qBAAqBtB,GAAc,CAAC,GAE7C5zC,KAAKk1C,qBAAqBtB,GAAYiD,IAAa,CAE3D,CAEUR,kBAAkBS,GACxB,MAAO,CAAClD,EAAoBmD,K,MACpBD,IACAC,EAAOD,EAAiBlD,EAAYmD,IAEpC/2C,KAAKs2C,kBACLS,EAAOA,EAAKtpB,QAAQ,qCAAsCztB,KAAKs2C,kBAE/Dt2C,KAAKu2C,qBACLQ,EAAOA,EAAKtpB,QAAQ,wCAAyCztB,KAAKu2C,qBAElEv2C,KAAKw2C,uBACLO,EAAOA,EAAKtpB,QAAQ,0CAA2CztB,KAAKw2C,uBAExE,MAAMQ,EAAkC,QAAzB,EAAAh3C,KAAKk1C,4BAAoB,eAAGtB,GAC3C,IAAKoD,EACD,OAAOD,EAEX,IAAK,MAAMF,KAAaG,EAAQ,CAC5B,IAAIC,EAAe,GACnB,IAAK,MAAM1C,KAAUv0C,KAAK20C,eAAgB,CACtC,MAAMyB,EAAa7B,EAAOZ,cAAcC,IACpCwC,aAAU,EAAVA,EAAaS,MACbI,GAAgBb,EAAWS,GAAa,O,CAGhD,GAAII,EAAa70C,OAAS,EACtB,GAA4B,MAAxBy0C,EAAUK,OAAO,GAAY,CAE7B,MAAMC,EAAK,IAAIC,OAAOP,EAAUQ,UAAU,GAAI,KAC9C,IAAIC,EAAQH,EAAGI,KAAKR,GACpB,KAAiB,OAAVO,GAAgB,CACnB,IAAIE,EAAUP,EACd,IAAK,IAAI90C,EAAI,EAAGA,EAAIm1C,EAAMl1C,SAAUD,EAChCq1C,EAAUA,EAAQ/pB,QAAQ,IAAMtrB,EAAGm1C,EAAMn1C,IAE7C40C,EAAOA,EAAKtpB,QAAQ6pB,EAAM,GAAIE,GAC9BF,EAAQH,EAAGI,KAAKR,E,MAEjB,CACH,MAAMU,EAAgB,WAAaZ,EACnCE,EAAOA,EAAKtpB,QAAQgqB,EAAe,OAASR,EAAe,OAASQ,E,EAIhF,OAAOV,CAAI,CAEnB,EAjUe,EAAAjC,iCAA+D,CAAC,EAChE,EAAAC,uBAAiC,EAwUpD,MAAM2C,EAAkD,GACxD,IAAIC,GAAS,EAQN,SAASC,EAAuBC,EAAoBC,GAClDH,IACD,2BAAgC9pB,IAC5B,IAAK,MAAO,CAAEiqB,KAAYJ,EACtBI,EAAQjqB,E,GAEb,aACH8pB,GAAS,GAEb,MAAMI,EAAWL,EAAQpzB,QAAO,EAAEpnB,EAAM86C,KAAc96C,IAAS26C,IAC3DE,EAAS31C,OAAS,EAClB21C,EAAS,GAAG,GAAKD,EAEjBJ,EAAQ7xC,KAAK,CAACgyC,EAAYC,GAElC,CAQO,SAASG,EAAyBJ,GACrC,IAAK,IAAI11C,EAAI,EAAGA,EAAIu1C,EAAQt1C,SAAUD,EAClC,GAAIu1C,EAAQv1C,GAAG,KAAO01C,EAElB,OADAH,EAAQ5xC,OAAO3D,EAAG,IACX,EAGf,OAAO,CACX,CAMO,SAAS+1C,IACZR,EAAQt1C,OAAS,CACrB,C,oEClZO,MAAM+1C,UAAsB,IAkC/Bj8C,YAAYgB,EAAcR,GACtBW,MAAMH,EAAMR,GAAO,GAhChB,KAAA07C,8BAA0C,GAkC7Cp4C,KAAKrD,WAAW07C,eAAexyC,KAAK7F,MAEpCA,KAAKs4C,aAAe,IAAIn9C,MAExB6E,KAAKo4B,yBAA0B,CACnC,CAjCWkgB,mBACP,OAAOt4C,KAAKu4C,aAChB,CAEWD,iBAAah3C,GACpBtB,KAAKu4C,cAAgBj3C,EACrBtB,KAAKw4C,WAAWl3C,EACpB,CAMOm3C,cACH,OAAOz4C,KAAKs4C,YAChB,CAoBQE,WAAWE,GACf,MAAMC,EAAUD,EAAM7yC,KACtB6yC,EAAM7yC,KAAO,IAAI+yC,KACb,MAAM9wC,EAAS6wC,EAAQE,MAAMH,EAAOE,GAIpC,OAFA54C,KAAKm0B,mCAEErsB,CAAM,EAGjB,MAAMgxC,EAAYJ,EAAM5yC,OACxB4yC,EAAM5yC,OAAS,CAACkD,EAAe+vC,KAC3B,MAAMC,EAAUF,EAAUD,MAAMH,EAAO,CAAC1vC,EAAO+vC,IAI/C,OAFA/4C,KAAKm0B,mCAEE6kB,CAAO,CAEtB,CAOOC,eAAejwC,GAClB,OAAIA,EAAQ,GAAKA,GAAShJ,KAAKs4C,aAAal2C,OACjCpC,KAAKrD,WAAWu8C,gBAGpBl5C,KAAKs4C,aAAatvC,EAC7B,CAMOosB,oBACH,OAAO/3B,MAAM+3B,oBAAoB5vB,UAC1BxF,KAAKs4C,aAAaa,KAAKC,GAClBA,EACOA,EAAYhkB,oBAEZ,KAIvB,CAOOF,WAAWC,G,MACd,GAAI93B,MAAM63B,WAAWC,GACjB,OAAO,EAGX,IAAK,IAAIhzB,EAAI,EAAGA,EAAInC,KAAKs4C,aAAal2C,OAAQD,IAC1C,GAAwB,QAApB,EAAAnC,KAAKs4C,aAAan2C,UAAE,eAAE+yB,WAAWC,GACjC,OAAO,EAIf,OAAO,CACX,CAOOrzB,eACH,MAAO,eACX,CASOuyB,kBAAkBvxB,EAAoBkrB,EAAkB4P,GAC3D,IAAK,IAAI50B,EAAQ,EAAGA,EAAQhJ,KAAKs4C,aAAal2C,OAAQ4G,IAAS,CAC3D,MAAMowC,EAAcp5C,KAAKs4C,aAAatvC,GACtC,GAAIowC,EAAa,CACb,GAAIA,EAAYhhB,wBAAyB,CACrC,IAAKghB,EAAY/kB,kBAAkBvxB,EAAMkrB,EAAS4P,GAC9C,OAAO,EAEX,Q,CAGJ,IAAKwb,EAAYp2C,QAAQF,GACrB,OAAO,C,EAKnB,OAAO,CACX,CAQOuI,MAAMnO,EAAcm8C,GACvB,MAAMC,EAAmB,IAAInB,EAAcj7C,EAAM8C,KAAKrD,YAEtD,IAAK,IAAIqM,EAAQ,EAAGA,EAAQhJ,KAAKs4C,aAAal2C,OAAQ4G,IAAS,CAC3D,IAAIowC,EAAkC,KACtC,MAAMG,EAAUv5C,KAAKs4C,aAAatvC,GAE9BowC,EADAC,GAAiBE,EACHA,EAAQluC,MAAMnO,EAAO,IAAMq8C,EAAQr8C,MAEnC8C,KAAKs4C,aAAatvC,GAEpCswC,EAAiBhB,aAAazyC,KAAKuzC,E,CAGvC,OAAOE,CACX,CAMOzuC,YACH,MAAMC,EAA2B,CAAC,EAElCA,EAAoB5N,KAAO8C,KAAK9C,KAChC4N,EAAoBwV,GAAKtgB,KAAKsgB,GAC9BxV,EAAoBC,SAAW/K,KAAK+K,SAChC,MACAD,EAAoB0uC,KAAO,YAAax5C,OAE5C8K,EAAoB2uC,mBAAqB,GACzC3uC,EAAoBq5B,UAAY,GAEhC,IAAK,IAAIuV,EAAW,EAAGA,EAAW15C,KAAKs4C,aAAal2C,OAAQs3C,IAAY,CACpE,MAAMC,EAAS35C,KAAKs4C,aAAaoB,GAE7BC,GACA7uC,EAAoB2uC,mBAAmB5zC,KAAK8zC,EAAO5uC,UACnDD,EAAoBq5B,UAAUt+B,KAAK8zC,EAAOr5B,MAE1CxV,EAAoB2uC,mBAAmB5zC,KAAK,MAC5CiF,EAAoBq5B,UAAUt+B,KAAK,M,CAI3C,OAAOiF,CACX,CAQOxC,QAAQy7B,EAA8BvO,EAAgCokB,GACzE,MAAMl9C,EAAQsD,KAAKrD,WACnB,IAAKD,EACD,OAGJ,GAAIk9C,EACA,IAAK,IAAI5wC,EAAQ,EAAGA,EAAQhJ,KAAKs4C,aAAal2C,OAAQ4G,IAAS,CAC3D,MAAMowC,EAAcp5C,KAAKs4C,aAAatvC,GAClCowC,GACAA,EAAY9wC,QAAQy7B,EAAoBvO,E,CAKpD,MAAMxsB,EAAQtM,EAAM27C,eAAet1C,QAAQ/C,MACvCgJ,GAAS,GACTtM,EAAM27C,eAAevyC,OAAOkD,EAAO,GAGvC3L,MAAMiL,QAAQy7B,EAAoBvO,EACtC,CAQOz5B,0BAA0B89C,EAA0Bn9C,GACvD,MAAMo9C,EAAgB,IAAI3B,EAAc0B,EAAoB38C,KAAMR,GAelE,OAbAo9C,EAAcx5B,GAAKu5B,EAAoBv5B,GACvCw5B,EAAcjV,gBAAkBgV,EAAoB9uC,SAEhD,KACA,cAAe+uC,EAAeD,EAAoBL,MAGlDK,EAAoBJ,mBACpBK,EAAc1B,8BAAgCyB,EAAoBJ,mBAElEI,EAAoB1V,UAAUp8B,SAASgyC,GAAqBD,EAAcxB,aAAazyC,KAAKnJ,EAAMs9C,oBAAoBD,MAGnHD,CACX,GAGJ,OAAc,wBAAyB3B,E,kCCtQhC,MAAM8B,EAAb,cAKW,KAAAC,sBAAqD,CAAC,EAetD,KAAA1H,cAAmD,CAAC,CA8D/D,CAtDWz2C,mBAAmB81B,GACtBA,EAAShsB,KAAK,gBAAiB,yBAA0B,iBAC7D,CAOO9J,mBAAmB25B,GAE1B,CAWOhB,eAAevJ,EAAgBzuB,EAAcoG,EAAY6Q,EAAeihB,GAC3E,GAAIl4B,EAAMqJ,iBAAmBrJ,EAAMqJ,gBAAgBiwB,SAAWt5B,EAAMqJ,gBAAgBo0C,qBAC7C,IAA/Bz9C,EAAMqJ,gBAAgBooC,SAAS,GAAU,CACpCnuC,KAAKk6C,sBAAsBp3C,EAAKiI,YACjC/K,KAAKk6C,sBAAsBp3C,EAAKiI,UAAY4I,EAAMtI,SAGjDrL,KAAKo6C,yBACNp6C,KAAKo6C,uBAAyB19C,EAAMgjC,qBAAqBr0B,QACzDrL,KAAKq6C,sBAAwB39C,EAAMgjC,qBAAqBr0B,SAG5D,MAAMjH,EAAS1H,EAAM0D,YAEjBJ,KAAKq6C,sBAAsBC,aAAe59C,EAAMgjC,qBAAqB4a,YAErEt6C,KAAKu6C,mBAAqBn2C,EAAOo2C,QACjCx6C,KAAKo6C,uBAAuBv2C,SAAS7D,KAAKq6C,uBAC1Cr6C,KAAKq6C,sBAAsBx2C,SAASnH,EAAMgjC,uBACnC1/B,KAAKu6C,qBAAuBn2C,EAAOo2C,UAE1Cx6C,KAAKu6C,mBAAqBn2C,EAAOo2C,QACjCx6C,KAAKo6C,uBAAuBv2C,SAAS7D,KAAKq6C,wBAG9ClvB,EAAOqU,UAAU,gBAAiBx/B,KAAKk6C,sBAAsBp3C,EAAKiI,WAClEogB,EAAOqU,UAAU,yBAA0Bx/B,KAAKo6C,wBAEhDp6C,KAAKk6C,sBAAsBp3C,EAAKiI,UAAY4I,EAAMtI,O,CAG9D,E,wDC9EG,MAAMovC,UAAqB,IAK9Bv+C,YAAYgB,EAAcR,EAAeg+C,GAAyB,GAC9Dr9C,MAAMH,EAAMR,GAHN,KAAAi+C,cAAwB,IAAI,KAIlC36C,KAAKo4B,wBAA0BsiB,CACnC,CAEO5sB,YACH,OAAO9tB,KAAKo4B,wBAA0Bp4B,KAAK46C,cAAgBv9C,MAAMywB,WACrE,CAEO9qB,QAAQF,EAAqB86B,GAChC,QAAK96B,KAIA9C,KAAKo4B,0BAILt1B,EAAKirB,WAAuC,IAA1BjrB,EAAKirB,UAAU3rB,QAI/BpC,KAAKq0B,kBAAkBvxB,EAAMA,EAAKirB,UAAU,GAAI6P,GAC3D,CAEUid,mBAAmB7sB,GACzB,MAAM8D,EAAU9D,EAAQ6P,gBACxB,QAAK79B,KAAKy3B,wBAAyBzJ,EAAQ7C,SAAU2G,GAC7CA,EAAQsP,YAAcphC,KAAKrD,WAAW+J,cAMlD,CAOO24B,oBAAoB1rB,GACvB3T,KAAK46C,cAAcpb,UAAU,QAAS7rB,EAC1C,CAOOmnC,qBAAqBC,GACxB/6C,KAAK46C,cAAcpb,UAAU,eAAgBub,EACjD,CAEO3oB,KAAKze,EAAe7Q,GAClBA,GAIL9C,KAAK00B,eAAe/gB,EAAO7Q,EAAMA,EAAKirB,UAAU,GACpD,CAEU8R,WAAW/8B,EAAaqoB,EAA2B,MACzD9tB,MAAMwiC,WAAW/8B,EAAMqoB,GACvBnrB,KAAKrD,WAAWq+C,cAAgB7vB,CACpC,CAEU8vB,YAAYv+C,EAAcyuB,EAAgBmT,EAAqB,GACrE,OAAO5hC,EAAMw+C,wBAAwBl7C,KAAMmrB,EAAQmT,EACvD,E,oRClFW,+nE,gBCiBkC,EAAkD,EAAE,qBAA+C,sB,0gCAKhF,EAAoB,MAE7B,EAAoB,MAGjE,EAAoB,M,+tXCd4C,kD,u3BAQ5B,QAMA,QAGb,QAErC,QAG2E,QAI3D,QAyJZ,Q,QAIuB,EAA4D,MA3J5D,QAED,EAAC,MAEA,QAEA,QAEhB,EAAsC,MAEtC,EAAoB,MAEpB,EAAoB,MAEpB,EAAmB,MAEnB,EAAqB,MAErB,EAAqB,MAEN,EAAE,MAEI,EAAK,KAE1B,EAAkB,KAElB,EAAmB,MAEnB,EAAmB,MAEnB,EAAkB,MAElB,EAAyB,M,EAUV,wCALI,gFAUX,EAAI,M,EA0Sc,mCApQ1B,mhK,gBA2SyB,Q,QA+TtB,QAA6B,mB,gBAG7B,EAAsC,E,YAmBpC,G,MACF,G,KAED,SAAU,E,cACA,E,KACV,W,KAEA,SAAU,E,cACA,E,KACV,W,KAEA,SAAU,E,KACV,gBAAkB,E,KAElB,gCAA0B,EAC/B,KAAE,WACL,uBA1ND,gB,uBAEG,mBACQ,KAAK,YAAa,EACzB,KAAK,UAAW,EACnB,wBAED,iB,yDAIG,iBACQ,KAAK,mBAAoB,EAChCt+B,KAAK,mBAAoB,EAEzB,KAAK,WAAY,EACjBA,KAAK,YAAa,EACrB,mBAOD,mB,sCAGG,kBACW,KAAK,cAAe,EAC9B,KAAK,kBAAmB,E,KACnB,WAAM,E,KACV,OAED,KAAK,cAAe,EACpB,KAAK,gBAAiB,E,KACjB,gBAAiB,E,KACrB,qBAED,KAAK,mBAAoB,EACzB,KAAK,iBAAe,E,KACf,SAAU,E,KACd,U,KAAM,W,KACF,KAAM,E,KACV,OAED,KAAK,KAAM,EACX,KAAK,KAAM,E,KACN,KAAM,E,UACA,E,KACN,aAAE,E,KACN,eACJ,4BAOD,oB,oBAEG,+BACQ,KAAK,WAAY,EACxB,KAAK,gBAAiB,EACzB,uBAED,mB,kBAEG,+BACQ,KAAK,yBAAmB,EAC/B,KAAK,+BAAgC,EACxC,iBACD,wB,8BAEG,+BACQ,KAAK,kBAAmB,EAC/BA,KAAK,yBAA0B,EAClC,6BAED,4B,sCAEG,sCACQ,KAAK,0BAAoB,EAChC,KAAK,sBAAuB,EAC/B,+BACD,sC,4CAEG,oDACQ,KAAK,yBAAmC,EAC/CA,KAAK,gBAAiB,EACzB,yBAED,mB,yBAEG,4BACQ,KAAK,kBAAmB,EAC/B,KAAK,aAAc,EACtB,qBACD,4B,6BAEG,wBACQ,KAAK,sBAAwB,EACpCA,KAAK,sBAAuB,EAC/B,0BAED,yB,+EAIG,2BACQ,KAAK,0BAAS,EACrB,KAAK,qBAAsB,EAC9B,kCACD,sB,gFAIG,yBACQ,KAAK,wBAAuB,EACnCA,KAAK,kBAAmB,EAC3B,+BAED,6B,mCAEG,uBACQ,KAAK,cAAS,EACrB,KAAK,gBAAiB,EACzB,uBAED,wB,iBAEG,kCACQ,KAAK,yBAAuB,EACnCA,KAAK,aAAc,EACtB,yBAED,iB,oBAEG,qBACQ,KAAK,gBAAiB,EAC7B,KAAK,qBAAsB,EAC9B,wBACD,e,mCAEG,4BACQ,KAAK,WAAY,EACxBA,KAAK,gCAAiC,EACzC,8C,6BAWD,6B,qDAKG,SACY,sBACP,yBACP,uBAED,2B,2BAEG,uBACY,0BACP,gCACP,sCAgDD,+CAEG,iBACY,KAAK,GAAQ,IAAM,C,QAYhC,UAAF,I,sDAaG,0BAEQ,KAAK,gBAAc,KAC1B,KAAK,mBAAqB,KAC7B,2BAEU,KAAK,iBAAmB,KAC/BA,KAAK,aAAe,KAEpBA,KAAK,iBAAmB,KAC3B,6BAMU,KAAK,aAAQ,gBAKpB,KAAK,aACW,IAAI,YAKvB,mCAMU,KAAK,cAAO,gBAQvB,sB,oCAEG,mCACW,KAAK,0BAAwB,EACvC,KAAK,uBAAwB,EAChC,gCAED,yB,iCAEG,qBACW,KAAK,uBAAO,E,6CAY1B,2B,+BAUS,YAAc,G,KAClB,2BAED,KAAK,mCAAgC,E,KAChC,oCAAqC,E,4BACtB,E,KACf,qB,KACJ,qBAED,KAAK,mBAAoB,E,KACpB,eAAiB,IAAI,EAAW,M,KAChC,2BAA6B,EAA6B,GAAG,O,KACjE,oCAED,KAAK,+BAAyB,EAC9B,KAAK,UAAqC,IAAI,EAAmB,Q,KAE5D,oCAAW,M,KACf,6BAED,KAAK,wBAA0B,KAE3B,KAAK,uBACD,EAAe,2FAEf,KAAI,6CAGJ,EAAE,2FACF,KAAK,eAAe,KAAK,KAAK,oBAGlC,KAAK,WAAW,cAAa,oBACjC,mEAEW,oB,gDAOC,6B,kCAOiB,G,yCACQ,G,4EAQxB,G,IACJ,qC,KAIA,+BAAiC,KAAK,0B,mCACR,mBAAmB,OAAI,+B,sCAG9C,6C,KAMP,gC,8BAC2B,KAAK,8BAAqB,6B,8CACjC,K,oCAMhB,iB,yEAMM,kB,8BAMM,G,kCACS,mBAAqB,C,0EAOd,mB,+BAKhB,G,kCACS,oBAAsB,C,0EAMd,kB,8BAKjB,G,mCACU,mBAAqB,C,gEAQd,Q,oBAO3B,G,mCACoB,SAAW,C,gEAM3B,Q,oBAIJ,G,mCACN,U,2EAMO,mB,+BAID,G,mCACoB,oBAAE,C,mEASxB,W,uBAQK,G,mCACL,a,wEAYJ,+F,EAIY,0BAAQ,kE,iHAkBjB,oB,yBAEQ,G,0BACQ,GAAC,6D,+DAczB,KAAK,wBAKD,KAAK,MAAQ,GACO,MAAxB,KAAK,iBACL,KAAK,qCAEJA,KAAK,2BAA6B,KAAC,oC,4BASpCA,KAAK,iBAIR,wG,4CAQ8B,M,KAAnB,iBAA2B,KAAK,gBAAD,wF,2BAUX,M,KAAnB,iBAA2B,KAAK,gBAAgB,UAA8B,MAAjB,KAAK,e,mCASpE,e,mBAqBG,EAAM,EAAQ,MAM5B,GALK,KAAK,2BAEN,KAAK,qBAGL,EAAQ,QAAM,eACV,EAAQ,OAAO,qBAAuB,EAAQ,OAAG,iCAEjD,OAAO,EAGV,EAAQ,kBAET,KAAK,4BAAO,oCACZ,EAAQ,gBAAc,sBAAkB,c,QAE9B,KAAK,WACd,oB,GAED,KAAK,mBAAiB,G,OACf,E,MAGL,EAAS,EAAM,Y,EAEhB,qG,EAGwC,kC,MAGvC,EAAM,KAAK,yBAAkB,oD,KACmB,wD,EAGnB,8B,EAE9B,mBAED,KAAK,WAAW,yBAAC,E,KACZ,4CAA+B,iB,KACnC,sEAED,EAAQ,UAAW,E,IACd,IAAI,EAAI,EAAG,GAAK,IAAK,EACzB,iB,GAGG,EAAM,gBAAiB,CAW1B,GAVA,oBAED,iBAEI8xB,EAAQ,gBAAc,EACtB,EAAQ,gBAAkB,EAC7B,qBAEGA,EAAQ,iBAAgB,EACxB,EAAQ,iBAAmB,EAC9B,+CAEO,IAAK,KAAK,gBAAU,uBAChB,OAAO,EAIP,EAAsC,6DAG9C,MAEH,aAGG,GAAI,KAAK,iBAAmB,EAAQ,uBACvC,gDAEW,OAAO,EAIP,+DAGR,MAEH,aAGG,GAAI,KAAK,iBAAI,wBAA0B,CAC1C,gDAEW,OAAO,EAGd,gEACJ,iDAGG,MAGJ,aAEA,wDACA,mDAEY,OAAO,EAaP,OATF,kBACE,EAAQ,cACR,EAAM,4BACN,EAAK,iDACL,EAAQ,eAAD,4DACP,EAAQ,iBAAD,+BACP,EAAQ,wBACJ,EAAI,wHACR,EAAI,8CACD,yCACC,KAAD,kBACA,8CACK,MACJ,KAAG,gBACC,EAAD,0CACC,MACJ,KAAK,EAAD,kBACA,gDACJ,MACA,KAAK,EAAD,cACA,EAAE,0CACV,MACI,wBACC,+CACA,MACD,KAAC,yBACA,qDACA,MACD,KAAG,+BACC,EAAD,yDACC,MACJ,KAAK,EAAC,sCACF,mEACA,MACJ,oBACA,KAAE,kBACF,QACI,EAAE,yCAGV,EAAM,uEAEd,MAEI,EAAQ,YAAQ,EAChB,EAAQ,yBAAS,EAErB,GAAI,KAAK,kBAAY,0BACjB,IAAK,KAAK,iBAAG,uBACT,OAAO,EAGP,EAAa,+DAErB,MAEI,EAAQ,UAAW,EAGvB,GAAI,KAAK,kBAAI,0BACT,IAAK,KAAK,iBAAE,uBACR,OAAO,EAGP,EAAa,gEACb,EAAQ,uBAAC,6BACT,EAAQ,aAAC,4BAEjB,MAEI,EAAQ,UAAS,EAErB,GAAI,KAAK,kBAAK,0BACV,IAAK,KAAK,iBAAG,uBACT,OAAO,EAKP,EAA0B,gEAC1B,EAAQ,WAAa,uCAE7B,MAEI,EAAQ,UAAW,EAEvB,GAAI,EAAM,YAAY,UAAU,qBAAG,yCAE/B,IAAK,KAAK,aAAa,UAE/B,SAII,8BAA6C,KAAK,aAAc,UAChE,6BACH,+CAGO,EAAQ,sBAAW,6BACvB,MAEI,EAAQ,MAAI,EACZ,EAAQ,UAAW,EACxB,uBAIC,GAAI,KAAK,oBAAsB,EAAD,0BAC1B,IAAK,KAAK,mBAAmB,uBACpC,SAKW,EAAQ,UAAW,EAGf,EAAQ,YAAG,EACX,EAAQ,iBAAO,+BACf,EAAQ,eAAiB,KAAE,0BAC3B,EAAQ,gCAAE,uCAElB,MAEI,EAAQ,YAAS,EAErB,EAAQ,kBAAoB,KAAK,kBAAa,sB,MAIjD,EACH,WAEE,EAAQ,WACR,EAAQ,SAAU,E,EACV,YAAa,E,EACb,UAAW,E,EACX,UAAW,E,EAClB,QAED,EAAQ,YAAa,E,EAEjB,iBAAmB,KAAK,oC,EACxB,uBAAyB,KAAG,2B,EAE5B,wBAAmB,8B,oBACC,KAAK,sB,mBACa,IAAnB,KAAK,WAAc,mB,sCACrB,6B,aAChB,8D,oBACE,qB,gBACC,QAAU,E,2CACiB,KAAK,a,KACvC,6B,OACJ,EAGL,GAAI,EAAQ,0BAA4B,KAAK,8BAAK,CAC9C,IAAK,KAAK,8BAAG,UAChB,SAGG,KAAK,8BAA8B,eAAG,GACtC,EAAQ,qBAA+C,MAAxB,KAAK,oBAAmB,kCAEvD,EAAQ,qBAAsB,gE,CAyClC,GAvCC,qBAEO,EAAI,gBAGhB,gC,iEAGG,mCACoB,KAAE,gCACT,EAAQ,eAAG,yEACX,EAAQ,eAAY,yEACpB,EAAQ,kBAAkB,+EAC1B,EAAQ,8BAAmB,uCAC3B,EAAQ,kBAAc,+EACtB,EAAQ,gBAAkB,KAAG,sEAC7B,EAAQ,cAAe,EACvB,EAAQ,SAAU,GAKtB,EAAQ,SAAU,GAI1B,EAAyC,+IAEzC,EAAoC,wFAEpC,KAAK,WAAW,QAAU,EAC1B,KAAK,WAAW,KAAO,EAEvB,KAAK,mDAA+B,iBAEpC,EAAoC,4CAEpC,KAAK,mCAAgC,iBAEjC,EAAQ,QAAS,CACjB,MAAM,EAAgB,EAAO,mBAC7B,EAAQ,kBAER,MAAM,EAAY,IAAI,EAAO,EACzB,EAAQ,YACR,EAAU,YAAY,EAAG,cAEzB,EAAQ,UACR,EAAU,YAAY,EAAG,YAEzB,EAAQ,MACR,EAAU,YAAY,EAAG,QAGpC,YAED,4B,0DAKG,qBACgB,EAAkB,YAAkB,EAAU,qBACrD,EAAQ,KAER,EAAmC,YAAY,EAAG,OAElD,EAAG,WACV,6BAGO,EAAK,kBACL,EAAG,kCAEP,EAAwB,6DAEpB,EAAQ,cACR,EAAU,YAAY,EAAG,gBAGzB,EAAQ,gBACR,EAAU,YAAY,EAAG,kBAIzB,EAAQ,gBACR,EAAU,YAAY,EAAG,kBAGzB,EAAQ,mBACR,EAAU,YAAY,EAAG,qBAEhC,mBAEO,EAAU,YAAY,EAAG,mBAGjC,WACQ,EAAU,YAAY,EAAE,WAExB,EAAQ,WACR,EAAU,YAAY,EAAG,a,QAGb,CAAC,EAAsC,EAAE,c,EAC7C,Q,EACA,KAAK,EAAoC,EAAE,Y,EAG3C,S,EACA,KAAK,EAEG,e,QASX,EAAI,EAAG,GAAK,IAAK,E,EACV,KAAO,I,EACP,KAAK,KAAW,IAAN,EAAU,GAAK3vB,K,EAI7B,a,EACA,KAAK,EAAmC,EAAE,W,EAGO,EAAE,0BAA0B,EAAD,O,EACvB,EAAE,8BAA8B,EAAS,G,EACtC,EAAE,iCAAiC,EAAS,EAAM,G,EAC7G,kD,MACJ,U,MAEC,EAAS,CACX,Q,k9BAyEa,C,mDAKb,wBACA,sB,oCAIA,c,0CAIA,sBACA,cAEA,eACA,kBACH,wBAGK,EAAiB,CAAC,WAAG,gB,KACtB,WAAW,UAAY,E,gBACZ,aAAe,E,KAC1B,qB,KAEA,WAAW,SAAW,E,gBACX,WAAa,E,KACxB,sB,KAEA,WAAW,oBAAsB,E,gBACtB,gBAAa,E,KACxB,kB,KAEA,4BAA4B,EAA6C,iC,EAClC,iB,EACe,EAAE,YAAY,G,EAChE,I,EAAM,uB,EAC+D,wB,EAEzE,kCAED,cAAe,E,oBACM,E,SACpB,EAED,QAAS,E,sBACc,KAAK,yB,MAG1B,EAAc,CAAC,E,KACZ,0B,EACJ,6C,QAGQ,EAAQ,WAChB,W,IAED,EAAS,EAAM,YAAY,aAAa,EAAY,C,WACxC,E,cACG,E,oBACV,E,SAAO,E,QACH,E,UACJ,E,WACJ,gBACJ,qBAEG,gBAAiB,CAAE,sBAAE,iFACrB,iBAAkB,EAAY,iBAC9B,yBAA0B,KAAK,WAAY,WAC9C,uBAEE,GACH,GAAI,EAQA,GANI,KAAK,6BACb,WAEQ,EAAC,UACD,KAAK,2BAAgB,oBAErB,KAAK,wBAAmB,iBAIxB,GAHX,IAEW,EAAQ,oBACP,EAGR,OADG,yBACH,OAMO,EAAM,sBACN,EAAQ,UAAU,EAAH,wB,UAMtB,EAAK,8B,EAIF,UAAY,EAAM,c,EAClB,8B,EACH,sCAED,EAAM,sBAAwB,EAAc,uB,KACxC,oBAAgB,GAGjB,G,4BASN,sBAED,EAAI,WAAW,mBAAoB,GACnCyzB,EAAI,WAAS,uBAChB,+BAED,sC,6EAGG,uCACQ,EAAI,WAAM,uBACjB,EAAI,WAAW,qBAAsB,GAErC,EAAI,WAAW,gBAAiB,G,EAC5B,WAAW,gBAAiB,G,EAC/B,8BAED,EAAI,WAAW,mBAAoB,G,EAC/B,WAAW,sBAAuB,G,EACrC,gCAED,EAAI,WAAW,iBAAkB,G,EAC7B,WAAW,iBAAkB,G,EAChC,+BAED,EAAI,WAAW,aAAc,G,EACzB,WAAW,gBAAiB,I,EAC/B,+BAED,EAAI,WAAW,gBAAiB,I,EAC5B,WAAW,mBAAoB,I,EAClC,gCAED,EAAI,WAAW,iBAAkB,I,EAC7B,WAAW,iBAAkB,I,EAChC,4BAED,EAAI,WAAW,sBAAuB,G,EAClC,WAAW,YAAa,G,EAC3B,4BAED,EAAI,WAAW,mBAAoB,I,EAC/B,WAAW,mBAAoB,G,EAClC,oCAED,EAAI,WAAW,kBAAmB,G,EAC9B,WAAW,iBAAkB,G,EAChC,+BAED,EAAI,WAAW,mBAClB,gCAED,0B,gBASK,OAED,IAAI,E,MACE,EAAQ,KAAK,WAClB,oBAED,IAAK,EACD,OAGJ,MAAM,EAAS,EAAQ,O,IAClB,EACJ,O,KAGI,cAAgB,EAGrB,EAAK,uBAAuB,aAAD,U,EACtB,iBAAiB,GAGtB,KAAK,eAAe,aAAG,c,KAClB,qBAAqB,eAAe,KAAE,mC,KAC1C,qBAED,KAAK,uCAAsB,iBAE1B,0BAEG,EAAM,eAAe,KAAK,eAC1B,KAAK,qBAAqB,KAAK,gBAGnC,MAAM,EAAa,KAAG,8BAG1B,6B,kCAIG,G,4BAAA,qCA+BS,GA9BW,EAAe,4BAElB,yEACf,+GAEe,EAAI,aAAa,oBAAK,8EAErC,wEAEe,EAAI,aAAa,eAAK,+LAErC,+EAEe,EAAI,aAAa,sBAAK,mFACtB,0HAGA,KAAK,6BAAoB,6CACzB,wHACf,0HAGe,2EACf,kHAEe,EAAI,aAAa,qBAAM,iFAK3B,EAAI,iB,GACf,gDAEe,EAAI,aAAa,gBAAM,kEACvB,yDAGA,KAAK,iBAAmB,EAAC,wBACzB,iGACf,yDAGJ,gDAED,iG,kFAIG,8C,sDAEiB,EAAI,aAAM,iEAChB,EAAI,aAAU,2CAAO,8BACjB,KAAK,mBAAK,kBACV,MAAM,EAAI,wBACV,EAAI,cAAS,6CACb,EAAI,cAAO,oCACf,C,GAEA,KAAK,kBAAU,2BACf,EAAI,aAAa,wDAAY,6BACtC,2DAGe,KAAK,kBAAoB,EAAiB,yBACzD,oGAEe,EAAwC,yDAG5D,kD,+JAIG,uFACsB,iHACN,EAA6B,EAAE,kBAAkB,KAAK,aAAc,EAAK,QAErE,0BACF,8FAKpB,+F,6DAcI,G,yHANF,gCAC4C,EAAgB,KAAD,2BAI1C,EAAI,aAAa,mBAAoB,KAAK,mBAAC,4DAC1D,yCAEe,gCACnB,6DAEuB,EAAI,cAAc,kBAAmB,EAAY,gBACzE,C,CAEG,CAEQ,kBACV,0CAEG,gBACH,uE,gGAIE,6DACgB,EAAM,aAAa,0DAC3B,wDACV,CAEG,oBACH,+CAED,oDAEG,+CACoB,EAAO,WAAW,iBAAF,sBAEtC,+CACsB,EAAO,WAAW,iBAAa,sBAErD,sDAED,+B,8DAIW,6DAGP,iDACH,sD,iDAIE,sDAEQ,iDACV,sDAEG,gEAAsC,EAAS,oBAClD,8C,sDAIE,+BACwB,EAAO,WAAM,iDAGb,EAAO,WAAW,sBAAU,2BAMpD,mFACgB,KAAK,WAAW,qBAAK,QAEvC,0BACc,KAAK,mCAAmC,iBAEtD,uB,uBAIE,MACiB,EAAM,YAAY,UAAF,iCAC5B,KAAG,yBAEI,GAAe,KAAK,WAElC,yCAED,qDAGoB,EAAM,YAAc,0CAC7B,yBACV,yBACkB,EAAK,gBACpB,YACH,iBAIE,6BAEQ,yBACV,mCAEG,mCACH,6EAIE,0BACgB,EAAyB,sBAGzB,KAAK,gCAAmC,uDACvD,6D,sCAKD,UACI,CAKP,iBACH,+BA3zDG,OAzCA,iGADC,6BAMD,iGADC,6BAID,iGADC,6BAMD,0GADC,gCAID,oGADC,8BAQD,oGADC,8BAID,wFADC,0BAOD,oGADC,8BAID,0GADC,gCAOD,CADC,CASD,oBADC,kC,6BAID,6B,sBAOA,6B,sBAGA,6B,yBAOA,gC,uBAGA,8B,uBAMA,8B,mBAOA,0B,uBAMA,8B,yBAMA,gC,CAOA,CAWA,cADC,6BAKA,0BAGA,uBAAU,GAKV,0BAGA,0BAAa,GAMb,2BAGA,wBAAW,GAMX,uBAGA,wBAAW,GAMX,2B,cAkBD,sBADC,I,6CACuC,YAGxC,yDADkB,QAAjB,8BAAwB,mB,yCACI,mBAM7B,0DADmB,QAAlB,+BAAiC,IAAP,GAAyB,EAAC,U,mCACzB,I,GAAA,YAG5B,0DADqB,QAApB,iCAAiC,IAAL,GAAK,aAQlC,mEADC,mCAAoB,mBAAmB,OAAO,KAAK,0BAOpD,kBADC,CAQA,S,UACwB,8CAezB,OARA,SADC,O,+BASD,CADC,CAeD,oBADC,UAAwC,GAAG,OAAM,IAAG,wB,kBAKrD,+B,CAMA,C,mCASA,gCADC,C,oCAID,2BADC,C,kCAUD,+BADC,C,mCAOD,0BADC,C,mCAUD,gCADC,C,oCAID,2BADC,C,mCAUD,gCADC,C,oCAMD,2BADC,C,sCASD,mCADC,C,uCAID,8BADC,C,oCASD,iCADC,C,qCAMD,4BADC,C,oCASD,iCADC,C,qCAkQD,4BADC,CAgyCU,gCACb,6B,iIC/kEF,qC,6BAMG,sCACY,OAAO,EAAS,0BAC3B,C,sEAOW,wC,OACA,EAA4D,EAAE,0B,CAE9D,sCAAgB,G,EACiB,8B,CAKjC,4B,OACN,kB,CAEM,0BAAe,G,EAC0B,EAAE,eAAiB,C,OAG9C,IAAI,E,IACS,IAAI,mB,EACrC,qC,IACoB,IAAE,E,IACS,IAAI,4C,EACxB,UAAW,sBAAkB,I,IACxC,MACL,EAAC,yBACJ,uC,+bCxCuC,UACY,4BAEjD,EAAiB,UAAW,wBAAoB,IACnD,EAAG,EAAc,MAGN,EAAG,EAAiC,IAAgB,qC,EAC3C,UAAW,uBAAmB,I,IACrB,IAAI,E,IACO,wB,EACpB,UAAW,wBAAa,I,IACf,IAAI,E,IACO,IAAI,qC,EACxB,UAAW,uBAAmB,I,IACzC,MACL,EAAC,sB,EAIsB,UAAW,oBAAoC,I,IAC7C,IAAI,E,IACO,yC,EACpB,UAAW,mBAAa,I,IACf,IAAI,E,IACS,IAAI,oB,EAC1B,UAAW,wBAAoB,I,IAC1C,MACL,EAAC,2CACJ,uCAtBG,UAFC,8B,sCAWA,IAID,UAFC,6C,qCAUA,IAGL,EAAG,EAAH,M,yJAQG,qCACI,EAAG,EAA0B,IAChC,EAMA,EAAG,EAAiB,iB,EACJ,UAAI,yB,IAEK,IAAI,EAE7B,EAAG,EAAO,O,EACM,UAAW,qBAAiB,I,IACnB,IAAI,E,IACA,IAAI,+B,EACjB,UAAW,mCAAkB,I,IACpB,IAAI,E,IACO,IAAI,4C,EACvC,gD,IAEM,M,IACa,kC,EACJ,UAAI,sC,IAClB,MACL,6CAEE,EAAH,+C,8MAQG,iCACO,EAAiB,UAAW,6BAAgD,I,IAC9D,MACpB,EAAG,EAAiB,yC,EAEP,0C,IACE,M,EACd,iC,EAEe,UAAW,+BAA2B,I,IAE5C,M,IAC0B,IAAI,qC,EACxB,UAAW,8BAAkB,I,IACpB,IAAI,E,IACA,IAAI,oB,EACjB,UAAW,wBAAkB,I,IACpB,IAAI,E,EAC5B,yC,EAEM,qC,IACa,M,IACA,gC,EAClB,8CACN,EAAC,Q,utBCrG+C,WAII,yCAE2B,UACpC,WAEM,mCAEM,UACC,mCAEA,+CAGD,UASvD,6CAE2D,8CACU,UACtB,qCAEY,iDACN,UACH,4CAER,gDAEQ,UAQ9C,EAAG,EAAS,iCACb,EAAiB,UAAW,iCAA6B,IAC5D,EAAG,EAAoB,MAAvB,mD,EAKkB,UAAmB,gCAAU,I,IACpC,M,IAC+C,IAAI,gC,EACnD,UAAgB,oCAA2C,I,IAC5C,IAAU,E,IACP,wC,EACX,UAAE,uC,IACK,IAAI,E,IACf,oC,EACE,UAAW,oCAAgC,I,IAC/C,M,IACwB,IAAI,oC,EAC5B,iD,IACa,IAAI,E,IACjB,kC,EACN,gD,IAEmB,IAAe,E,IACO,IAAI,oC,EAQlD,+C,EAAA,QAED,6C,6DAEI,MACA,EAAG,EAAiC,IAAI,oCACzC,EAAiB,UAAW,wCAAI,I,IAAnC,M,IAC+B,IAAI,sC,EACxB,UAAkB,0CAAM,I,IACxB,IAAoB,E,IACH,yC,EACjB,UAAkB,yCAAM,I,IACR,IAAI,E,IACF,8B,EAClB,UAAqC,kC,IACb,IAAI,E,IACD,IAAI,mC,EAC/B,UAAkB,iC,IAClB,IAAoB,E,IACpB,IAAwB,qB,EACxB,mCAAsC,I,IACtC,IAAoB,E,IACuB,yC,EAC3C,kCAAuC,I,IACvC,IAAoB,E,IACD,IAAmC,qB,EACtD,UAAkB,yBAAI,I,IACtB,M,IACqC,yC,EAErC,UAAuC,4B,IACvC,M,IACM,yB,EACN,UAAkB,yBAAO,I,IACzB,MACX,EAAC,mFAED,EAAG,EAAH,M,WAEG,yCACI,EAAG,EAAwB,iC,EAqsBhB,4BAEd,2BAIG,E,MA5nBH,EAAgB,OAET,IAA8B,EAAqB,CAE3C,EAAC,Q,qCAuIb,aACI,UAAwB,UAU/B,8D,IAEG,cACI,qBAUP,+D,IAEG,cACI,qBAEH,EAAO,UAAE,mDAEb,C,iBAEG,qBACI,0BAA4B,qCAEnC,CACO,gBAAiD,CAEpD,MAAM,EAAM,aACT,YAAe,cAAkC,qCA0BxD,C,iBAEG,qBACI,YAAgB,cAAc,qCAErC,C,UAUA,SAEG,OACI,EAAe,IAAM,EAE5B,UAEG,cACI,EAAwB,OAEd,EAAmD,EAAoB,M,uCAQxF,a,uBAEG,eACI,OAiGG,EAAI,EAAU,EAAS,GAC1B,IAAe,KAClB,EAAQ,0BAA0B,EAAG,EAAG,GACrC,4BAAoB,MAE3B,C,yBAEoB,EAAW,EAAO,EAAO,EAAK,KAC3C,UAAY,EAAO,sBA8EtB,MAAM,EAAI,EAAU,GACjB,SACG,EAAI,EAAU,EAAS,GAC1B,4BAA2B,OAC9B,EAAQ,0BAA0B,EAAG,EAAG,EACrC,C,WAsCA,EAAgB,gB,MACrB,EAAF,4D,mHAIO,OAAgB,EAAI,EAAE,MAwD7B,EAAQ,eACR,iB,oCAGG,gBAEA,C,8BAsBI,IAAwB,EAAO,EAAqB,EAAC,Q,MAE1D,EAAU,IAAI,wDACT,MAAW,EAAQ,yD,OAEzB,IACM,K,EAaC,iBAAQ,aACT,I,EAKC,GAAK,EAAC,U,EACN,GAAK,EAAI,U,EACTtlB,GAAK,EAAQ,EAAI,EAAE,M,EACzB,eAEF,EAAQ,GAAK,EAAG,UACT,WAAuB,EAA8B,EAAE,GAGvD,CA6BP,U,gBA1KG,K,EACqC,+D,EAExC,iC,WAEG,0C,EACI,mBAAuB,K,UA2kCR,OAEjB,OAEU,EAAK,IAAM,IAt5BT,IAAI,EAAO,QAEP,EAAG,QAEH,EAAU,OAEV,EAAM,QACN,EAAS,QACT,EAAU,QAEV,EAAkB,QAC1B,UACQ,EAAyB,QACzB,EAA6B,QACrC,UACQ,EAA4B,QAC5B,EAAe,QAClB,UACb,UACJ,SAnrBD,U,MAyBC,EAED,cACW,KAAK,QAAU,EACtB,KAAK,yBAAE,GACV,gCAqBD,yB,+CAGG,aAEK,IAAK,EAEb,I,IAIe,EAAG,GAEjB,uBACU,KAAK,uBAAgC,C,UAQhD,cACI,KAAK,iBAAkB,EAC1B,yBACU,KAAK,oBAA8B,EAC1CtQ,KAAK,WAAY,EACpB,wBAED,sB,mGAKG,kBACQ,KAAK,mBAAc,EAC1B,KAAK,uBAAwB,EAChC,sCACU,KAAK,mBAA6B,EACzCA,KAAK,YAAc,KACtB,8BAED,4B,kHAKG,qBACQ,KAAK,gCAAa,EAE5B,gCACU,KAAK,uBAAiC,C,QAOhD,c,YAOE,UA6QC,OA5QO,MAAM,EAAM,GAAO,GAI9B,yC,6BAcC,2DAMU,KAAK,oBAAsB,SAKlC,KAAK,oCAAsC,IAAI,EAAgC,GAI/EA,KAAK,4BAA8B,IAAI,K,6BAShC,KAAK,gBAAkB,K,KAEzB,gBAAY,KAIpB,iC,KAYQ,WAAY,EAUjB,KAAK,YAAa,E,KAIjB,kB,wBAyBM,KAAK,0BAAK,E,uBASZ,yBAAM,EAGX,KAAK,aAAe,EAA4C,SAIhE,KAAK,aAAe,I,KAEnB,wBAyCL,qB,uCAIG,4BAEC,KAAK,wBAAyB,EAKjC,iCAKE,8BAMCA,KAAK,cAAgB,KAMxB,gCAMG,KAAK,gBAAkB,IAAI,EAAe,S,KAQrC,WAAa,EAOlB,KAAK,WAAa,IAAI,EAAD,Y,KAEpB,oBAGDA,KAAK,YAAc,KACtB,wBAED,6B,iBAIG,wC,mBAGF,6B,6BAME,aACY,kBAAmB,M,KAGzB,wBAA0B,KAE/BA,KAAK,wBAA0B,K,kCAMhC,+CACY,EAAY,cAAF,kKACb,KAAK,8BAA8B,mBAAe,2DAC7D,2GAEW,GACA,KAAG,uCAGP,KAAK,oCAAoC,gBAAc,iBAE9D,mBAYS,QAAQ,MACP,KAAK,sBAEf,+GACU,KAAK,sBACJ,EAAM,qBACV,KAAK,EAAE,aACV,8BAGG,KAAK,EAA8B,eAC/B,KAAK,0BAAoB,EACpC,mB,CAQU,gC,OACN,sB,CAIJ,6BAED,0B,CAGkB,6BACd,OAAO,EAA6D,iBACxE,CAEW,6B,OACA,EAAI,iB,CAIJ,+BACV,4BAED,CAEW,wCACV,qCACD,CAMI,cACH,4DAED,CAKI,+B,OACO,KAAI,iE,CAGX,6BAAyB,GACzBA,KAAK,8BAA4B,qCACrC,CAOI,4BACH,0EAQD,C,6HAaI,OAAO,KAAK,8BAA8B,WAAW,c,CAExD,2BA6BD,8D,CASI,yBACH,uEAED,C,6FAKG,0BACQ,OAAO,KAAK,8BAAK,oB,CAE3B,2BAEU,KAAK,8BAA8B,sB,CAM3C,yBACQ,OAAO,KAAK,8BAAE,2B,CAQzB,yB,8MAQG,2CACH,CAMC,kCAsCG,OAAO,KAAK,8BAA8B,4BAC9C,CACI,gCAA0B,GAC7B,sEAIG,KAAK,8BAAO,+BACf,uCAoBD,C,qEAM8B,G,QACrB,MAAM,8BAA8B,K,KAIpC,6BACJ,E,eAKS,GACT,0EAEG,KAAK,oBAAoB,OAAO,KAAG,qEAGhC,KAAK,8BAAG,qE,CA8CL,8BAAe,GACrB,KAAK,8BAA8B,mBAAK,oCACxC,KAAK,oCAAoC,OAAG,0FAEnD,wIAED,CAIW,iBACP,OAAO,KAAK,8BAAoB,W,CAQpC,kB,6DAIW,MAAM,EAAW,KAAD,0CACvB,KAAK,8BAAsB,eAC9B,6BAED,gC,8GAYG,qCACQ,KAAK,8BAAqB,gC,wBAQjC,OAAO,KAAK,8BAAK,iB,sBAEA,G,KAChB,iD,CAIL,e,oDAGc,aAAS,GACfA,KAAK,8BAA8B,YAAQ,IAKlD,qGAED,4EAEG,+CACY,GAAS,EAAM,UACtB,EAAM,QAAQ,KAAK,UAAY,M,KAE1B,4BAA4B,gB,iCACA,gBAAC,MAEjC,iB,KAEA,iB,KACJ,iB,6BAWF,MACC,OAAyD,QAAjD,EAAK,KAAK,8BAA8B,8BAAS,iBACtD,C,yBAQQ,K,KACV,kBAEI,KAAK,8BAA4B,yBAClC,KAAK,8BAAc,2BAE1B,8DAED,C,4BAOS,kD,oBAGU,G,KACV,oDAIR,qDAED,kC,CAGW,qBACP,OAAO,KAAK,8BAA8B,e,CAG1C,mBAAe,GACX,KAAK,8BAAS,sB,KAGb,gD,KACA,kC,KACJ,4B,8BAGI,mD,qBAEW,GACf,0DAKD,KAAK,8BAAO,mBACL,KAAK,kC,CAMhB,+B,oEAGW,6BAAgC,GACnC,KAAK,8BAA8B,4BAAS,I,KAI/C,0DACDA,KAAK,kC,CAKG,yBACR,OAAO,KAAK,8BAAS,mB,wBAEpB,GAEG,KAAK,8BAA8B,sBAAD,I,mCAGH,oBAAuB,E,8DAKzD,4CACL,CAEA,gB,mDAIIA,KAAK,8BAA8B,UAAY,EAClD,iCAED,CAEI,2BACH,+DAED,CACW,yBAAqB,GAC5BA,KAAK,8BAA8B,sBAAwB,CAC/D,CAMG,gBACC,OAAO,KAAK,8BAA8B,UACvC,CACH,cAAU,GACN,IAAU,KAAK,8BAAE,aAIzB,gD,gDASI,OAAO,KAAK,8BAA0B,iC,mBAErC,GACJ,kFAED,CAQA,wB,yGAIG,0EACH,C,kGASW,mBAAY,GACnB,KAAK,8BAAI,gDACb,C,wBAaG,+EACI,CACH,sBAAY,GACf,0EAED,C,6CAMW,iBACP,OAAO,IACX,C,wcAwBG,2CACC,KAAK,eAAe,WAAW,aAAc,GACtC,KAAK,eAAuB,Q,kOAyBnC,MAAO,cACJ,C,0KAUJ,qD,OACK,IACO,GAAO,eAA+B,EAAmB,MAEvE,IAED,sF,wGAQA,sBAEA,qE,yEAQ4B,EAAS,GAAa,G,GAC7C,yDAEG,IAAI,EAMA,OAAO,KAAK,cALZ,GAAI,KAAK,cAAc,mBAAO,GAC1B,OAAO,KAAK,aAO5B,C,mBAIG,8C,IACI,C,eAYP,GALG,+CACuB,OAAX,KAAK,kBACZ,KAAK,gBAAkB,MAG/B,e,iEASI,KAAK,cAAc,OAAO,EAC7B,sCAED,e,kDAOW,KAAK,4B,oBAOD,G,MACD,EAAO,EAAM,aAAe,EAAE,oBAC9B,EAAQ,KAAK,cAAY,W,IAC3B,GAAU,EAErB,WAEO,IAAK,EACM,O,0BAIhB,KACM,CACM,GAAI,EAEnB,OAEG,KACK,KAAK,cAAc,OAAO,EAAO,EAC9B,CACPA,KAAK,2BAAqB,E,CAI9B,gBACW,IAAK,MAAM,KAAF,eACZ,EAAQ,UAAC,KAGjB,CAKA,mBAAgB,KACL,MAAM,EAAD,+BACC,IAAT,I,mEAOD,sBAAc,GACjB,GAAK,KAAK,UAIV,IAAK,MAAM,KAAW,KAAK,UAC9B,0CAEW,MAAI,qBACQ,GAAS,qCAG5B,YAEG,CAGR,C,2BAIiB,MAChB,sDAED,C,kCAGW,KAAK,uBAAO,8B,CAIvB,4B,uJAoBe,GACd,kB,kDAYG,gBACA,OAAO,C,CASX,U,+BAQW,OAAO,C,yCAed,OAAO,IACX,C,gBAQG,GACQ,OAAO,I,CA6BlB,gBAAC,SAED,W,oBA0BmB,EAAM,O,uBAYd,EAAS,G,OACT,I,uBAUW,G,oEAaD,mB,uDAGe,E,6FAanB,E,kCAQZ,yB,CAWE,kBAAkB,EAAS,EAAS,GAE1C,OADG,KAAK,cAAgB,IAAI,EAA6B,SACzD,kBAED,C,oBAQoB,GAAqB,EAAM,GAAW,KACzD,uCAED,CAEG,eACQ,OAAS,KAAK,U,kCACjB,KAAK,sBAAsB,EAAC,wBAE5BA,KAAK,sBAAsB,EAAoB,sB,gBAItC,C,qCAKoB,GAAY,C,UAKvC,EAAU,GAGhB,O,KAFC,aAEM,CACX,CAGO,gB,wBAUP,C,wBAMK,8DACU,KAAK,YAAY,iBAErB,MAAM,gB,qCAIZ,iBACU,KAAC,yCAGL,MAAK,4BACN,CAIN,mBACA,OAAO,CACX,C,4BAYA,uB,wBAgBG,O,kDAAA,IACI,C,cAYM,K,MACJ,YACJ,4HAEY,oBAChB,mBAED,iC,gEAeA,UAAiB,EAAU,EAAD,GAEzB,OADG,KAAK,SAAS,WAAW,KAAK,cAAc,EAAU,EAAgB,IACzE,IAED,CAUA,cAAC,OAED,uC,8CAYoB,GAAgB,EAAO,GAAa,G,OAChDA,KAAK,eAAiB,KAAK,cAAc,UAK7C,KAAK,qBAAqB,KAClB,iBAAiB,EAAe,GAAa,MALpD,IAcL,C,qBAsBG,KACQ,GAAI,EAAM,C,+CACT,KAAK,cAEL,KAAK,cAAS,iCAId,KAAK,cAAI,4B,IAGb,KAAK,UACL,IAAK,IAAI,EAAQ,EAAG,EAAQ,KAAC,qBACzB,KAAK,UAAU,GAAO,oBAAU,G,oCAyBzC,gCAEC,IADO,EAAO,QAA6C,EAAO,KAAW,6BACjE,GAAc,KAAK,mBAAoB,CAC/C,IAAI,EAAiB,EAEjB,EAAgB,EACpB,IAAK,IAAI,EAAc,EAAG,EAAY,cAElC,IAAK,IAAI,EAAG,4CACR,MAAM,EAAc,KAAK,mBAAmB,UAAD,GACtC,cACZ,QAEW,MAAM,EAAuB,EAAY,eACxD,IACW,oBAGA,CACG,CAElB,GADW,IACX,sBAED,wBAEG,IACwB,MAAc,MACrB,KAAI,kDACR,CAEX,CAED,CACA,GAAI,GAAQ,GAAiB,KAAG,UAC5B,MAAM,EAAsB,KAAE,kBAAqB,uBACvD,yBAAmE,EAAE,qBACjE,GAAI,GAAuB,EAAqB,CAC5C,MAAM,EAAa,KAAK,mBAAqB,EACzC,4DACf,4DAES,2CACM,kBACS,EAAE,eACV,iBAChB,QAED,kC,+HAaI,GAAI,EAMY,IAAK,EAAG,UACJ,EAAS,EAAyB,EAAe,GAC7C,EAAS,IACZ,8DACE,gBAMP,IAAO,eACtB,2DAIe,EAA4C,8DAEhD,EAAW,QAAO,KACd,IAAO,mCACtB,gCAGO,CACP,CAED,CAEA,OAAO,C,gBASI,GAAQ,Q,YACP,SAAK,wB,iBAWZ,a,OACJ,qC,kBAMY,EAAc,G,IACvB,E,IACA,EAAO,KAAK,gBAAO,kB,GACtB,gDAEG,KAAK,8BAA8B,WAAa,MAEhD,IAAU,GAAiB,KAAK,UAAM,6B,GAEtC,EAAO,EAAK,QACZ,KAAK,uBACD,KAAK,WAAI,CACZ,wBAEG,KAAK,8BAA8B,WAAa,IAAe,MAAM,EAAI,QAEzE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAE,WAClB,KAAK,8BAA8B,WAAW,IAAwB,QAAjB,EAAK,EAAI,UAAuB,IAAP,OAAS,qB,aAInF,gBAAW,M,uCAOvB,KAAK,cACL,KAAK,cAAc,kCAGnB,KAAK,cAAa,UAAsB,+C,KAEvC,6BAA6B,KAAK,sBAChC,I,8BAMkB,G,IACpB,KAAK,UACN,OAAO,K,MAEL,EAAQ,KAAK,UAAU,O,IACxB,IAAI,EAAW,EAAG,EAAW,EAAO,IAAY,CACjD,MAAM,EAAU,KAAK,UAAU,IAC3B,EAAQ,IAAM,EAAC,WACtB,uBAGJ,CAED,W,yDAQW,KAAK,sBAA+C,E,aASnD,G,OACD,KAAK,kBAAkB,YAAI,uB,CAOtC,sBAAC,GAED,sD,gBAUe,EAAM,GAAU,EAAO,G,MAC5B,EAAe,KAAK,kB,EACA,EAAK,kB,KAC1B,gBACJ,SAGD,GAAI,EACA,IAAK,MAAM,KAAS,KAAK,iBAErB,GAAI,EAAK,uBACL,OAAO,EAKnB,OAAO,C,iBASK,G,OACL,KAAK,kBAAkB,gBAAgB,E,CAW9C,sB,OACO,KAAK,8BAA8B,mBAAiB,gB,qBAG3C,G,KACX,mE,uBAUE,KAAK,8BAAO,4B,oBAUd,GACF,2BAES,+GACZ,MAAM,EAAc,KAAK,WAAW,qB,OAC/B,KAAK,8BAAkB,+BAC3B,oFAGD,KAAK,8BAA8B,mBAAQ,iCAC3C,EAAY,eAAe,KAAK,8BAAG,4LAC5B,I,oBAQQ,EAAK,KACpB,IAAI,E,GAEJ,KAAK,wBACA,KAAK,WACN,OAAO,K,IAGN,EAAQ,6BAAoB,0CAChC,yCAEG,EAAQ,2BAAoB,GAC5B,EAAQ,gBAAW,G,MACb,EAAQ,EAAQ,c,EACV,EAAQ,cAAgB,EAAQ,c,IACvC,gB,EAAM,+E,CAMf,O,EAFC,iPAEM,I,gCAKa,K,QACX,kDACJ,W,IACJ,iBAEG,MAAM,EAAG,UAEL,EAAM,IAAM,EAAQ,oBAKxB,KAAK,mBAAmB,EAAS,EAAW,EAChD,CACA,OAAO,I,CAIX,oBAEA,Q,iBAKG,GAEC,IAAK,KAAK,kBAAkB,gBAAc,GACtC,OAAO,K,wCASJ,O,4GADR,yCACe,I,CAKlB,uBACI,OAAO,CACH,C,WAYG,EAAK,EAAW,EAAmB,GAAmB,EAAO,EAAY,GAAmB,GACnG,MAAM,EAAc,IAAI,EAA2E,EAC7F,EAAiC,uBAAT,KAAK,gBAAI,+DACjC,EAAe,KAAK,kB,IACrB,KAAK,UACT,SAED,KAAK,GACR,0EAED,S,KAOe,O,gGADZ,cACmB,EAElB,IAAK,KAAK,uBACN,OAAO,EAEX,IAAI,EAAgB,KACpB,MAAM,EAAY,KAAK,OAAO,iCAAI,QAC5B,EAAM,EAAU,O,IAIlB,GAA6B,E,IAC5B,IAAI,EAAQ,EAAG,EAAQ,EAAK,IAAK,CAClC,MACM,EADU,EAAU,KAAK,GACN,c,GACxB,IAEA,eAAM,G,EAAA,UACkB,GAArB,EAAS,UACY,GAArB,EAAS,UACa,G,EAAb,UAAgB,C,GACE,E,sBAM1B,O,EAAM,gB,EACC,SAAW,EAAqC,6C,EACvD,aACJ,E,IAGA,IAAC,aACF,MAAM,EAAU,EAAU,KAAK,G,GAE3B,EAAM,IAAM,EAAQ,cAAc,GACrC,SAED,MAAM,EAAuB,EAAQ,WAAE,yC,GACnC,IACI,IAAc,GAAiB,EAAW,uBACjD,IACO,EAAc,YACV,GACf,KAKD,CACA,GAAI,EAAe,CAEf,MAAM,EAAQ,QAA+C,EAAa,KAAK,iBACzE,EAAc,EAAgF,GAAG,QAAO,GACxG,EAAY,EAAoD,cACtE,EAA8E,0CAC9E,EAAI,UAAU,WAAW,EAAc,SAAU,GACjD,MACM,EADiB,EAA2B,uBACf,WAAG,GAWtC,OATA,EAAY,KAAM,EAClB,EAAY,SAAW,EAA+C,gBACtE,EAAY,YAAc,EAC1B,EAAY,WAAa,KACzB,EAAY,GAAK,EAAc,IAAM,EACrC,EAAY,GAAK,EAAc,IAAM,EACrC,EAAY,cAAgB,EAAc,OAC1C,EAAY,OAAS,EAAc,OAAS,EAAO,iFACnD,EAAY,UAAY,EAAM,UACvB,C,QAEJ,C,SAWC,EAAW,G,+BAStB,kBAED,4B,iCAKG,yBAEC,OAAO,I,uBAmCX,I,gCAtBmB,KAAK,8BAAK,kEACjB,KAAK,8BAA8B,UAAU,QAAQ,KAAG,kBAIhE,KAAK,WAAW,mBACnB,2C,0GAQG,KAAK,8BAA8B,UAAY,KAE3C,KAAK,0BACLA,KAAK,wBAAkB,UAC1B,mCAIL,gD,kKAOkC,KAAD,kBACtB,SAAK,IACR,IAAI,EAAY,EAAM,mBAAS,eACxB,IAAH,GACX,iC,sEAQE,+BACY,GAAI,EAAmB,CAC1B,MAAM,EAAY,EAAU,eACxB,GAAa,EAAU,aACnC,8BACY,OACf,yB,wFAQE,wBAGC,MAAM,EAAS,KAAK,WAAW,YAWxB,GAVK,OAAR,KAAK,kBACZ,mCAED,oC,0CAMG,iCACY,KAAK,iBAA8B,CAC1C,MAAM,EAAQA,KAAK,iBAAiB,OAAO,QAAE,MACjD,MACQ,KAAI,oCAGhB,0B,CAaI,G,kGALmB,KAAK,SAAiB,SAAqB,QAKzD,EAED,IAAK,EAAQ,EAAG,EAAQ,KAAK,WAAW,gBAAgB,OAAQ,IACxD,KAAI,+CACf,6CACW,K,wPAab,iCACQ,MAAM,QAAQ,EAAsB,E,UAQtC,EAAM,GAAsB,G,SAC7B,kBACH,I,qDAeE,iBACH,MAAM,EAAO,KAAK,8BAAC,WACd,EAAK,eACN,EAAK,aAAM,WAEV,EAAK,iBACN,EAAK,eAAI,WAER,EAAK,oBACN,EAAK,kBAAO,WAEhB,EAAK,QAAW,KAAK,aAAa,OAAS,EAAK,EAChD,EAAK,yBAA2B,EAAK,yBAAY,8BACjD,EAAK,sBAAwB,EAAK,sBAAwB,EAAK,sBAAC,KAChE,IAAK,IAAI,EAAI,EAAG,EAAI,cAChB,EAAK,aAAO,cACf,+BAGD,OADA,EAAK,kBAAmB,EACjB,I,yBAWD,EAAO,KAAK,8BAA8B,W,EACtC,kB,KACD,iB,QAES,KAAK,gBAAS,kB,EAChB,KAAK,a,EACL,KAAK,gBAAW,gB,EAElB,KAAK,kB,KACV,iBAAgB,yB,KAEhB,uBAAwB,EACzB,aAAmB,Y,EACd,mBAAqB,IAAI,YAAY,Q,GAErC,aAAa,Y,EACb,mBAAc,uB,QAGD,E,IACb,uBACJ,eACJ,KACJ,KACW,C,qBAGhB,E,mBAIG,kBAEK,C,GACP,uCAED,gC,8DAIG,4CACY,CACP,EAAK,kBAAoB,GACzB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,QAAG,KACxB,MAAM,EAAmB,CAAE,IAAI,kBAC/B,EAAK,kBAAkB,KAAK,EAChC,CACA,EAAK,eAAiB,EAA8B,cACpD,EAAK,qBAAuB,EAAK,Q,GAEpC,mEACD,EAAK,OAAO,4DACf,qEAED,kDA8BI,G,uNAxBD,qCACC,EAAK,OAAO,EAAI,EAAK,OAAO,EAAI,EAAI,EAAI,EAAK,OAAO,EAC7C,EAAK,OAAO,EAAI,EAAmB,OAAgB,EAAI,EAAI,EAAI,EAAK,OAAG,EAEjF,2DAED,+D,iIAIG,kCACQ,EAAK,gBAAuB,iCACnC,EAAK,gBAAgB,UAAY,EAAK,eAClC,EAAK,gBAAkB,EAAK,wBAC5B,KAAK,oBAAe,GAEpBA,KAAK,aAAa,YAAS,kBAC3B,EAA2C,8BAAyB,4DACvE,qD,EACI,gBAAY,sCAChB,GAED,mBAA8B,EAAW,EAAS,EAAS,EAAK,iBAE5D,EAAK,gBAAG,yBACf,mDAED,wC,0HAKG,kCACY,CACP,KAAK,cAAS,+B,QAEjB,I,8BAUG,gDAKJ,OAJC,gBACG,KAAK,kBAGF,EAAK,YACT,C,yBASH,MAAM,EAAY,KAAD,yC,OACZ,EAAC,gBACT,uB,6CAWG,MAAM,EAAY,KAAK,8BAA8B,WAKzD,OAJS,EAAU,mBACX,KAAE,kBAGV,mB,CAt7Ec,oBACN,MAAM,EAAM,EAAc,SAE1B,OADM,6BAAyB,GACxB,CACD,C,oEAWX,wBAEK,OADe,EAA2B,mCACnC,I,4MAyBZ,C,0iBCtJgD,gDACvD,8BACsC,iBACF,iBAEuB,wBAEN,mDACiB,kEA6GlE,OAzGJ,GAEG,yDAuGC,C,mCA3E2B,mBAOnB,WAMA,IAaA,IAEJ,EAAO,EACJ,IAwCP,I,QAGG,IAYC,MAAM,EAAwB,8BACxB,EAAY,4BACZ,EAAK,wC,IACV,EACG,OAAO,KAGX,IAEI,EACA,EACA,EAJA,EAAW,OAAG,UACd,EAAc,EAMlB,IAAK,IAAI,EAAM,EAAC,eACZ,EAAM,EAAc,GACvB,O,EAAM,KACH,GAAK,EAAI,EAAG,GAAK,EAAK,GAAE,yBAC3B,8BAGO,EAAI,EAAK,EAAI,EAAG,EAAI,EAAK,EAAC,YACjC,mDAEO,EAAM,QACN,EAAE,QACF,EAAQ,EAAI,EAAK,EAAE,EACnB,EAAO,EAAQ,EACtB,MACJ,MAlFD,c,MAGuB,IACP,EAAU,EACzB,IAED,M,MAEG,S,OAIQ,C,+FAoBX,mBACW,MAAM,gDAyDjB,OAxDQ,EAAU,mBACjB,sBAgDD,2B,yBAEG,8BACY,EAAE,qBACT,EAAU,mBAAM,oBAGxB,I,eAWG,UACQ,OAAO,I,CAQX,cAAO,GACV,MAAM,EAAY,KAAK,gBAAQ,EAA+B,gBACjE,oBAED,MAUI,OARD,E,2CAAA,qCAGe,G,EAET,oF,KACJ,oCAEM,IACX,C,gBASgB,EAAQ,GACf,IACJ,UAGD,MAAM,EAAQ,EAAyB,cACjC,EAAQ,EAAkD,cAUzD,O,EATqB,oB,EAC3B,oBACJ,wBAED,oE,+CAKkB,I,CAGlB,uB,SASO,wBACH,MAAM,EAAG,EAA6B,mB,sBAarB,EAAS,EAAK,G,MACzB,EAAG,EAA+B,mB,CAO5C,8BAEA,gE,4BAMgB,0BAA0C,E,EAEjD,sBAAwB,E,EAE5B,oC,EAGI,sCAAoC,E,EASpC,yBAA2B,E,EAM3B,sC,EAYJ,uC,gEAaF,4B,QAQC,EAAqC,EAAe,KAEvD,OAED,U,2CAMG,UACyB,EAA4D,QACnE,EAA+B,QAE/B,EAAE,QACR,UACV,UAEgB,EAAS,MAEb,U,QA8BjB,+BASI,KAAK,eAAQ,E,KACR,eAAM,E,KACV,eAED,KAAK,yBAA0B,E,KAC1B,gBAAkB,GAEvB,KAAK,iBAAmB,K,KAOnB,6BAA8B,E,KAC9B,OAAM,wBACV,cAKD,KAAK,GAAK,E,KACL,SAAW,KAAK,OAAO,c,KAC3B,gCAEDA,KAAK,QAAU,GAGnB,uB,mCAIe,EACP,KAAK,mBAAY,KAIjB,KAAK,eAAiB,EAG9B,2C,qDAMG,0B,CAOC,mBACH,yBAED,CAIG,oBACY,KAAK,cACZ,KAAK,cAAc,SAAS,GAI/B,6BAGJ,iCAED,C,6BAMyB,G,MACf,EAAU,iCAEhB,O,EADC,eACM,CACX,C,8CAUI,OAAOA,KAAK,OAChB,C,WAOW,OAAO,KAAK,M,aAOnB,OAAOA,KAAK,OAChB,CAMO,UACH,OAAkB,IAAX,KAAK,gBAAM,uB,0BAMjB,kC,IAAM,+BACC,OAAO,E,OAGd,C,CAKL,W,wDAKG,yCACY,KAAK,aAA6B,KAAc,QAAQ,kBAAW,gC,IAG7E,+BAEwB,KAAK,eAAK,GAClB,U,oBAQF,EAAY,G,EAChB,gBAAgBA,KAAM,G,iDAYlC,sBAEK,EAAO,IAAI,aAAQ,I,MAEtB,wDAEDA,KAAK,kBAAkB,E,oBAOR,GACXA,KAAK,eAAe,KACvB,wCAEU,KAAK,eAAe,IAE3B,KAAK,qBACR,iCAGL,C,kBAQiB,e,MACZ,cACG,KAAK,eAAe,IAAI,GAC/B,iC,oEAOE,qBACc,EAAc,EAAiB,OAC5C,GAAI,IAAS,EAAQ,gBACjB,MAAM,EAAM,YACf,QACO,KAAK,eAAc,EAG1B,UAAM,8EAGV,sBAED,8B,kCAGG,+DACgB,EAAE,oCACT,EAAK,oBAAQ,GACb,EAAK,sBACZ,CACD,CACH,qBAED,C,2BAWK,YACJ,gCAED,I,wBAIG,sBACI,C,mBAWY,EAAM,EAAM,GAAgB,G,MAC1C,0BAEI,I,EAIJ,UACJ,sBAED,8B,uBAIO,oBAAsB,KAMzB,GALI,GACA,KAAK,cAAE,GAGX,KAAK,yBACD,EAAe,CACf,MAAM,EAAS,KAAK,QACvB,kBAEW,EAAK,gBACL,EAAK,kBAAkB,YAAY,KAAC,sCAKpC,EAAK,kBAAkB,KAAK,QAAQ,QAAS,KAAK,QAAQ,SAE9D,MAAM,EAAY,EAAK,UAEvB,IAAK,MAAM,KAAW,EAElB,EAAM,qBAGd,C,EAMA,MAAM,EAAQ,EAAmC,EAAF,GACnD,IAAK,EACD,YAEgB,I,MACd,mB,MACE,EAAD,wB,IACF,E,aAGc,KAAK,eAAkB,KAAK,sBAAwB,E,iBAC9D,QAAQ,YAAE,S,MAGd,8BAGJ,WACJ,wDAGG,KAAK,QAAQ,sBAAsB,EAAK,S,gCAS9B,U,KAGE,e,kBAYX,OAED,MAAM,EAAS,wBACf,OAAK,EAIR,kEAFc,IAIP,C,wBAOH,GAED,MAAM,EAAK,KAAK,eAAe,G,QAC1B,GAIT,e,iBAOe,G,OACV,e,KAIW,eAAO,GAFR,I,CAUf,mBAEY,OAAK,KAAK,UAGjB,oBAFU,I,uBAcW,G,OACb,KAAK,oBAQL,6BANG,KAAK,aAEmB,IAAjB,KAAK,WAAW,QAAC,E,CAexC,uB,WAEG,MACQ,IAAK,KAAK,gBAAF,gBACX,IAAK,KAAI,gBACL,EAAO,KAAK,Q,IAIX,KAAQ,KAAK,eACd,EAAO,KAAK,G,OAGnB,C,eASA,UAED,GAAK,KAAK,a,GAGL,KAAK,wBAGL,CACJ,wCAMG,GALP,IAEO,yBAEO,KAAK,QAAQ,yBAAC,uBACjB,EACX,4BAEe,0B,WAZH,WAAW,EAAS,MAAM,E,YA0BlC,eAEG,KAAK,cACLA,KAAK,QAAQ,eAAe,KAAK,cAGrC,KAAK,SAAW,EAChBA,KAAK,wBAA0B,EAEH,IAAxB,KAAK,QAAQ,QAAgB,KAAK,WAElC,KAAK,aAAG,iDAGhB,U,uBAIW,IAAK,MAAC,kBACT,EAAK,sBAAe,GAC3B,yBAGG,KAAK,e,0BAQA,KAAK,UAGT,qBAFU,CAGf,C,WAQW,EAAW,GAClB,IAAK,KAAK,UACN,OAAO,KAEX,MAAM,EAAO,KAAK,SAElB,OAAK,GAAe,GAAc,wBAKvB,EAAK,QAHL,C,kBAaX,OAAK,KAAK,UAIH,KAAK,aAHD,I,2BASW,EAAS,MAC1B,6BAID,KAAK,oBAAe,SAC3B,8EAED,gC,gBAUe,EAAM,GACjB,MAAM,EAAO,aACP,EAAQ,EAAO,QAAQ,IACH,I,IAI1B,EAAO,OAAO,EAAO,GACjB,KAAK,qBACL,EAAK,uC,EAEJ,UAAY,KACK,IAAlB,EAAO,QAAgB,GAEvB,KAAK,U,aAMD,G,iBACeA,K,eAIE,EAAK,U,KAErB,kBAER,0BAEG,EAAK,uCAGT,MAAM,EAAS,KAAK,QAGpB,EAAK,UAAY,K,EACZ,8BAA8B,WAAa,K,KAC3C,OAAO,aAAa,M,EACxB,QAEG,KAAK,UACL,KAAK,aAAa,GAGzB,oBAED,qC,eAGG,QACQ,GAAI,KAAC,gDACR,KAAK,QAAU,CAEX,QAAS,KAAK,cAAW,gBACzB,QAAS,KAAK,cAAc,QAAQ,aAIvC,CACJ,SAEO,EAAO,KAAK,gBAAO,mBAKf,OAER,KAAK,SAAU,EAAG,EAAwB,+C,CAElD,CAEA,gB,sEAKG,gCAES,IAAS,EAAE,iBACN,KAAK,SAEN,KAAK,gBAET,EAAK,kBAAI,2CACZ,sCAEJ,yB,+CAMF,iFAIC,EAAK,sC,EAEA,sB,eAEA,GACJ,wBAEGA,KAAK,kBAAkB,KAAI,GAE3B,KAAK,qB,KACA,6B,IAER,wBAEG,EAAK,iC,QASD,GACoB,I,KAAnB,iBAILA,KAAK,UACD,GACA,KAKR,KAAK,eAAiB,E,KACjB,WAAW,EAAO,I,cAET,GACT,wB,EAIC,eAAe,M,EACf,UAAU,KAAK,kBAAgB,I,IAC5B,KAAK,sBACT,OAGDA,KAAK,sBAAsB,oBAC3B,KAAK,eAAiB,EACtB,KAAK,WAAa,G,EACZ,kBAAkB,M,MACvB,eACJ,WAEG,IAAK,IAAI,EAAQ,EAAG,EAAO,MACvB,KAAK,aAAa,EAAO,IAEzB,GACH,GACJ,QAEE,GAAW,G,sBAQR,EAAW,KAAK,YAAW,G,GACjB,MAAZ,GAAoB,EAAS,OAAS,EAAG,CACzC,IAAK,IAAImC,EAAI,EAAG,EAAI,EAAS,OAAI,MAC7B,MAAM,EAAQ,EAAS,EAAI,GAC9B,cACJ,QAEG,CACA,KAAK,WAAW,E,OAGf,4C,GACJ,qBAEG,IAAK,IAAI,EAAI,EAAGA,EAAI,EAAW,OAAQ,GAAK,EAExC,EAAW,EAAI,IAAI,OAGvB,KAAE,sCAEV,C,oGAKG,eAEK,KAAK,gBAAgB,EAAO,kBAEhC,C,CAKJ,yBAEA,oB,oDAOW,MAAM,EAAO,KAAF,kCAClB,IAAK,GAAE,aACV,SAGG,IAAK,IAAI6G,EAAsC,EAA9B,KAAK,gBAAgB,OAAY,EAAW,KAAC,2CAC1D,KAAK,gBAAgB,GAAY,EAAyB,iB,IAEzD,gCACJ,kDAOF,OAFH,uC,sCAEG,CACI,C,oBAOI,KAAK,W,sCAGP,qBACJ,wCAAS,KAAK,QAAQ,yBAAyB,KAAE,wBAG9C,KAAK,oBAAsB,CAAC,E,MACtB,EAAS,KAAK,QACd,EAAc,EAAK,O,IACxB,gBAEG,EAAO,GAAO,sC,kBAUhB,EAAS,KAAK,Q,EACA,EAAO,O,YAEd,EAAG,EAAQ,EAAa,I,oBACb,EAAO,I,aAEtB,S,sCAEJ,+BAED,KAAK,eAAe,GAAM,U,uBAElB,G,oBACU,E,gCAET,kC,kBAEO,K,KACf,Y,KAEA,eAAiB,E,sBACE,K,2BACZ,K,gBACM,G,mBACG,K,2BACR,M,KACJ,kB,MACC,EAAQ,KAAK,iBAAM,yBACxB,MAEG,KAAK,iBAAiB,WAAW,OAAO,EAAO,G,KAE9C,iBAAG,I,mBAEO,C,iBASA,IAAI,EAA8C,E,UAChD,G,QACR,kB,SAEJ,IAAI,EAAQ,EAAG,EAAK,aACxB,qB,SAIO,E,GACO,E,SAEN,qB,MAEH,EAAO,KAAK,gBAAO,G,GACxB,IAEO,aAAgB,aAChB,EAAW,IAAI,IAAImyC,aAAa,GAAO,GAIvC,EAAW,IAAI,EAAK,MAAM,GAAI,IAE7B,GAAc,CACf,MAAM,EAAK,KAAK,gBAAgB,GAC5B,IACA,EAAY,EAAG,cACf,GAAgB,E,QAK3B,2B,WAEI,eAAiB,KAAK,e,EACtB,iBAAmB,KAAK,iB,EACxB,sBAAuB,2BACnB,KAAK,W,EACL,WAAa,EAAS,YAAc,G,EACpC,WAAW,KAAK,G,uBAGJ,IAAI,EAAgE,6C,oBAUvF,EAAsB,CAAC,E,SACT,GAAK,KAAK,G,EACV,SAAW,KAAK,S,EAC/B,0BAED,EAAuD,GAAK,EAAgB,kB,EACxD,KAAO,EAA+D,EAAE,QAAQ,O,yCAMtF,G,EAKT,6B,iCAYO,G,KACX,yB,IAEA,MAAM,KAAU,KAAK,eACjB,OAAO,UAAU,eAAG,8B,KAIpB,eAAe,GAAK,mB,8BAWvB,EAAsB,KAAC,Y,YACpB,sBAAoB,IAAoB,gB,EAC5C,sEAEG,KAAK,wBAAkB,oBACvB,EAAoB,UAAC,gB,KAIpB,sBAAsB,EAA0B,gB,EACjC,QAAU,KAAE,qD,KAEvB,wBAAwB,EAAuC,gB,EAChD,QAAQ,YAAa,I,2BAIlB,EAAuC,iB,EAC9C,SAAW,KAAK,eAAe,KAAK,gBAAgB,EAA6B,gB,KAC5F,2C,EAEe,SAAK,gB,2BAEF,EAA+B,Y,EACtC,IAAM,KAAG,sCAAoC,EAAE,S,KAC9D,sCACJ,sB,2BAI0B,EAAK,a,EAEZ,KAAO,KAAK,eAAe,KAAK,gBAAgB,EAAS,Y,6BAC5C,EAAwC,a,EAEjD,KAAK,YAAa,I,2BAGf,EAA0E,a,EAC5F,4D,KAEA,wBAAoB,e,EACxB,qB,2BAEsB,EAAE,a,EACxB,4DACJ,4CAEG,EAAoB,KAAK,YAAO,I,KAGnC,qCAED,EAAoB,KAAO,KAAK,eAAS,mCACrC,KAAK,wBAAgB,eACxB,uBAKD,KAAK,sBAAG,eACR,EAAoB,KAAO,KAAD,kDACtB,KAAK,wBAAW,eAChB,EAAoB,KAAK,YAAa,I,KAWzC,uCACJ,kEAEO,KAAK,wBAAE,iBACP,EAAoB,OAAO,YAAE,IAGpC,sDAEG,EAAK,mFACL,EAAoB,gBAAM,eAEtB,KAAK,wBAAwB,EAA8B,yBACtE,kCAIO,KAAC,iDACD,EAAO,mFACV,wDACO,EAAoB,gBAAG,gB,EAIX,QAAD,uC,yBASA,EAAM,GACzB,MAAM,EAAW,EAAK,UACtB,OAAK,EAIE,EAAS,KAAK,GAHV,I,4BAayB,a,qCAEZ,K,UACP,EAAG,EAAQ,EAAM,WAAW,OAAQ,I,gBAC5B,GAAO,kBAAQ,E,OAC3B,gB,OAGN,I,wBAKY,EAAgB,G,QACrB,EAAK,W,EAEM,EAAS,iB,EACf,EAAe,W,MACV,EAAY,C,QACvB,8D,GAER,gB,sBAE8B,YAAa,C,QACzB,EAAK,Y,KACnB,gD,MAAO,EAAD,yE,EACF,gBAAgB,EAAmC,oB,MAEvD,4CACJ,6EACJ,sCAEG,CACA,GAAI,EAAW,iBAAmB,EAAG,yBACjC,MAAM,EAAW,qEACxB,uCACJ,CAED,yC,8IAOmB,EAAK,gBAAqB,EAA2B,cAChE,CACA,GAAI,EAAW,cAAgB,EAAW,aAAO,SAEjD,6BAAM,0CACN,KAAgD,4BACnD,4BAEe,EAAS,GAAS,EAAI,EAAC,GAG/B,EAAK,gBAAgB,EAAI,UAAa,KAE1C,CACA,GAAI,EAAW,cAAc,wBACzB,MAAM,EAAW,IAAI,aAAI,8CAC5B,iCAEO,IAAK,IAAI,EAAQ,EAAG,EAAE,cAClB,EAAS,GAAQ,OAIzB,EAAK,gBAAgB,EAAI,aAAsB,E,CAGnD,GAAI,EAAW,cAAgB,EAAD,sBAC1B,MAAM,EAAW,IAAI,aAAI,8CAC5B,iCAEO,IAAK,IAAI,EAAQ,EAAG,EAAE,cAClB,EAAS,GAAQ,OAIzB,EAAK,gBAAgB,EAAI,aAAsB,E,CAGnD,GAAI,EAAW,cAAgB,EAAC,sBAC5B,MAAM,EAAW,IAAI,aAAI,8CAC5B,iCAEO,IAAK,IAAI,EAAQ,EAAG,EAAQ,EAAK,YAC7B,EAAS,GAAQ,OAIzB,EAAK,gBAAgB,EAAI,e,CAG7B,GAAI,EAAW,cAAgB,EAAE,sBACpC,uEAAM,iCACH,4BACH,YAKJ,mCACJ,C,gsCC5jD2D,GAAI,EAAW,mBAAqB,EAAW,kBAAkB,MAAQ,EAAG,CACvE,MAAM,EAAgB,IAAI,WAAW,EAAgB,EAAW,kBAAkB,OAA6C,EAArC,EAAW,kBAAkB,OAExH,EAAK,UAAY,GAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,kBAAkB,MAAO,IAAK,CAEI,MAAM,EAAgB,EAAkB,EAAJ,EAAQ,GAE5F,EAAgB,EAAkB,EAAJ,EAAQ,GAE7B,EAAgB,EAAkB,EAAJ,EAAQ,GACd,EAAa,EAAkB,EAAJ,EAAQ,GAClE,EAAa,EAAkB,EAAJ,EAAQ,GAEvD,EAAyE,EAAE,UAAU,EAAe,EAAe,EAAe,EAAY,EAAY,EACpI,CAEd,CACb,MACa,GAAI,EAAe,WAAa,EAAe,SAAW,EAAe,QAAS,CA4DjI,GA3DoC,EAAK,gBAAgB,EAAiF,EAAE,aAAc,EAAe,UAAW,EAAe,UAAU,YAG5J,EAAK,gBAAgB,EAA+E,EAAE,WAAY,EAAe,QAAS,EAAe,QAAQ,YACnJ,EAAe,UACX,EAAK,gBAAgB,EAAgF,EAAE,YAAa,EAAe,SAAU,EAAe,SAAS,YAG3K,EAAe,KAChC,EAAK,gBAAgB,EAA2E,EAAE,OAAQ,EAAe,IAAK,EAAe,IAAI,YAE1I,EAAe,MACF,EAAK,gBAAgB,EAA4E,EAAE,QAAS,EAAe,KAAM,EAAe,KAAK,YAUjN,EAAe,M,wDAGR,EAAe,MAYtB,EAAK,gBAAgB,EAA4E,EAAE,QAAS,EAAe,KAAM,EAAe,KAAK,Y,QAGrJ,EAAK,gBAAgB,EAA4E,EAAE,QAAS,EAAe,KAAM,EAAe,KAAK,YACrK,QACW,kBAA6B,EAA4E,EAAE,QAAS,EAAe,KAAM,EAAe,KAAK,YAE7J,UACA,kBAAwB,EAA8E,EAAE,UAAW,EAA6E,GAAG,aAAa,EAAe,OAAQ,EAAe,UAAU,OAAS,GAAI,EAAe,OAAO,YAc9R,EAAe,gBACf,GAAK,EAAe,gBAAgB,mB,8BAWhC,EAAK,gBAAgB,EAAwF,EAAE,oBAAqB,EAAe,gBAAiB,EAAe,gBAAgB,gBAXtJ,C,WAE7C,IAAK,IAAI,EAAI,EAAG,EAAI,EAAe,gBAAgB,OAAQ,IAAK,CACrD,MAAM,EAAgB,EAAe,gBAAgB,GAApF,cACsB,EAAa,MAAsB,MAAhB,IAA+B,GAC7D,EAAwB,MAAsD,SAAhB,IAA+B,IAClF,EAAsB,KAAM,GAAiB,GAAM,IAC9D,CACK,EAAK,gBAAgB,EAAwF,EAAE,oBAAqB,EAAc,EAAe,gBAAgB,WAAjL,CAKL,KAA0B,qBAC1B,KAAyC,qBAAqB,mBAYzE,8BAOW,kBAAqC,EAA6F,EAAE,yBAA0B,EAAe,qBAAsB,EAAe,qBAAqB,gBAnB5J,CAC3E,QAA8C,GAC9C,QAAgB,EAAI,EAAG,EAAI,EAAe,qBAAqB,OAAQ,IAAK,CAClE,MAA+B,EAAgB,EAAe,qBAAqB,GAE7F,EAAwC,KAAqB,IAAhB,GAC7C,EAA4C,MAAsB,MAAhB,IAA+B,GAExE,EAAa,MAAsB,SAAhB,IAA+B,IAA9C,EAAa,KAAM,GAAiB,GAAM,IAC9C,C,mFAEJ,CAaJ,EAAe,kBAChB,EAEA,sBAAsB,EAAgB,GACtC,kBAAgC,EAAwF,EAAE,oBAAqB,EAAe,gBAAiB,EAAe,gBAAgB,aAE9M,EAAkB,sBACjB,EAAK,gBAAgB,EAA6F,EAAE,yBAA0B,EAAe,qBAAsB,EAAe,gBAAgB,YAInN,eAAkD,QAAS,KAC3D,CACH,GAAI,EAAe,UAAW,CAC1B,EAAK,UAAY,G,sCAEb,MAAM,EAAgB,EAAe,UAAU,GAC7C,EAAoB,wFA+S1B,C,oKAWR,6BAAsD,EAAgC,GAClF,MAAM,EAAU,KA5NpB,IAAK,EAAyG,EAAE,uBACxG,OAgGR,IAAI,EAAuB,E,qFAGvB,IAAK,EACF,O,iBAOA,QAAmB,EAAoB,gBAAgB,EAAwF,EAAE,qBAYlJ,EAAuB,EAAK,gBAAgB,EAA6F,EAAE,0BAC3I,EAAkB,EAAe,gBAChC,EAAwD,EAAe,qBACxE,EAAc,EAAe,kBAC5B,IAA4C,OAgBnD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,GAAK,EAAG,CAC3B,QACC,GAAmB,EACpB,oBAA2B,CAC1B,MAAM,EAAI,EAAgB,EAAI,GAC/B,KACK,EAAI,GAAW,EAAkB,IACjC,EAAkB,EAE1B,C,KAEI,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC7B,UAAwD,EAAI,GACvD,GAAU,E,iBAIf,C,IAiEK,EAAkB,GAAK,EAAmC,EAAyB,KACnF,EAAkB,EAAc,G,EAEvB,EAAS,C,MACZ,EAAU,EAAM,E,IACjB,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,EAAgB,EAAI,IAAM,EAE9B,GAAI,EACA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,EAAqB,EAAI,IAAM,C,MAKnC,GAAmB,GAC3B,aACQ,EAAqB,EAAI,EAAkB,GAAK,IAGhD,EAAgB,EAAI,GAAmB,EAAM,EAC7C,EAAgB,EAAI,GAAmB,E,mBAI9B,EAAwF,EAAE,oBAAqB,G,EACjH,sB,EACV,gBAAgB,EAA6F,EAAE,yBAA0B,E,cAUzI,EAAkB,EAAO,G,QACjB,IAAI,EAAS,EAAiB,GAAI,OAAO,EAAW,EAAiB,W,SAC7E,gBAAkB,EAAiB,S,EACe,G,EACU,EAAE,UAAU,EAAU,EAAiB,M,EAEvF,kB,EACR,eAAiB,E,EACjB,iBAAmB,EAAU,EAAiB,iB,EAC9C,cAAgB,IAAI,EAA0E,EAAE,EAA4E,EAAE,UAAU,EAAiB,oBAAqB,EAA4E,EAAE,UAAU,EAAiB,qB,EACvU,WAAa,GAClB,EAAiB,QACjB,EAAS,WAAW,KAAK,EAA2E,EAAE,QAEtG,EAAiB,SACjB,EAAS,WAAW,KAAK,EAA4E,EAAE,SAEvG,EAAiB,SACjB,EAAS,WAAW,KAAK,EAA4E,EAAE,SAEvG,EAAiB,S,EACR,WAAW,KAAK,EAA4E,EAAE,SAEvG,EAAiB,SACjB,EAAS,WAAW,KAAK,EAA4E,EAAE,SAEvG,EAAiB,SACjB,EAAS,WAAW,KAAK,EAA4E,EAAE,SAEvG,EAAiB,WACjB,EAAS,WAAW,KAAK,EAA8E,EAAE,WAEzG,EAAiB,oB,EACR,WAAW,KAAK,EAAwF,EAAE,qB,EAElG,oB,EACR,WAAW,KAAK,EAAwF,EAAE,qB,EAE9G,sBAAwB,EAA2F,EAAE,kB,EAGnC,EAAE,iBAAiB,EAAkB,G,EAE9H,aAAa,GAAU,G,aASQ,EAAqB,KAE7C,EAAoB,EAAE,EAAqB,CACzC,GAAM,IAAM,EACZ,GAAM,IAAM,EACZ,GAAM,IAAM,IAEd,IAAI,EAAmD,EAAoB,MACvE,EAA8C,EAAoB,MAClE,EAAmD,EAAoB,MACvE,EAA6C,EAAoB,MACjE,EAAkD,EAAoB,MACtE,EAAkD,EAAoB,MACtE,EAAyC,EAAoB,MAC7D,EAAqD,EAAoB,KACzE,EAAoD,EAAoB,MAClE,EAAyC,EAAoB,MAC7D,EAAoD,EAAoB,MAC9E,EAAoD,EAAoB,MACxE,EAA6C,EAAoB,MACjE,EAAiD,EAAoB,MACrE,EAA4C,EAAoB,MAChE,EAAuD,EAAoB,MAC3E,EAA4D,EAAoB,MAChF,EAA6D,EAAoB,MACjF,EAAoD,EAAoB,MACxE,EAAgD,EAAoB,MACpE,EAAmD,EAAoB,MACvE,EAAkD,EAAoB,MACtE,EAAmD,EAAoB,MACvE,EAAiD,EAAoB,M,qDAoC9D,CAAC,E,gBACP,IAAI,E,2CACuB,IAAI,E,KAC5C,oBAAsB,I,QAM7B,EA3YF,c,8IAcW,KAAK,eAAiB,EAC7B,KAAK,aAAe,KACpB,KAAK,qBAAuB,KACrB,KAAK,iBAAmB,IAC/Bn7C,KAAK,WAAa,KAClB,KAAK,gBAAkB,GAMhB,KAAK,cAAgB,I,6BAQvB,mBAAoB,E,KAEpB,QAAU,K,KAEV,QAAU,K,KACV,gBAAkB,E,KAElB,WAAa,IAAI,MAEtBA,KAAK,uBAAwB,EAC7B,KAAK,mBAAqB,KAC1B,KAAK,qBAAuB,C,kBAMjB,EAAmE,EAYlF,YAAY,EAAM,EAAQ,KAAM,EAAS,KAAM,EAAS,KAAM,EAAoB,GAAuB,GAoF9F,G,WAjFA,KAAK,sBAAkB,MAM9B,KAAK,eAAiB,EAOtB,KAAK,UAAY,IAAI,M,+BAKd,KAAK,UAAY,K,KAEnB,qBAAuB,IAAI,EAEhC,KAAK,yBAA2B,IAAI,EAGpC,KAAK,4BAA6B,EAG3B,KAAK,gCAA8C,EAAK,YAI/DA,KAAK,gCAAkC,KAKhC,KAAK,kBAAW,E,kBACvB,KAAK,cAAU,CAAC,EAAY,EAAO,KAC3B,GAAc,IAkCV,KAAK,e,yBAIL,EAAkB,oBAAoB,GAE9C,EAEO,EAAQ,CAkQf,GAhQI,EAAO,WAmBP,EAAO,UAAU,YAAY,MAG1B,EAAE,mBACL,OACA,WACA,W,gCAIA,SACO,WAGP,qBACA,eACA,6B,qCAEA,eACO,WACP,YACA,mBACO,UACP,qBACA,eACA,WACA,eACA,WACA,gBACO,UACP,KACA,QACA,mBACO,kBACP,6BACA,sBACA,oBACO,YACP,uBACA,mBACO,eACP,mBACD,CAAC,gBAEG,KAAK,sBAAsB,QAAU,EACxC,EAAM,mBACD,EAAO,sBAAsB,UACvB,EAAO,sBAAsB,QAAU,CAAC,GAEnD,EAAO,sBAAsB,QAAQ,KAAK,UAAY,MAyL1D,KAAK,gCAAkC,EAAO,gCAC9C,KAAK,qBAAuB,EAAO,qBAE/B,EAAO,QAAS,CAChB,MAAM,EAAS,EAAO,QACtB,IAAK,MAAM,KAAQ,EACV,OAAO,UAAU,eAAe,KAAK,EAAQ,IAG7C,EAAO,IAGZ,KAAK,qBAAqB,EAAM,EAAO,GAAM,KAAM,EAAO,GAAM,GAExE,CAsBA,GApBK,EAAyB,UAAY,EAAO,SAAS,M,KACjD,SAAW,EAAO,SAAS,QAGhC,KAAK,SAAW,EAAO,SAGvB,EAAuD,GAAK,EAA+D,EAAE,QAAQ,IACrI,EAAiE,EAAE,UAAU,KAAM,EAA+D,EAAE,QAAQ,GAAQ,I,iCAMxK,KAAK,OAAS,EAAO,OAErB,KAAK,eAAe,EAAO,kBAC3B,KAAK,GAAK,EAAO,IAAM,EAAO,GAEvB,KAAK,SAAW,EAAO,UACzB,EAAoB,CAErB,MAAM,EAAoB,EAAO,gBAAe,G,kDAIxC,EAAM,MAAM,EAAO,IAAM,EAAM,KAAM,KAE7C,CACJ,CAMA,GAJI,EAAO,qBACP,KAAK,mBAAqB,EAAO,oBAGjC,EAAM,iBAAkB,CACxB,MAAM,EAAgB,EAAM,mBAC5B,GAAI,GAAwB,EAAe,CACvC,MAAM,EAAW,EAAc,4BAA4B,GACvD,IACA,KAAK,gBAAkB,EAAS,MAAM,M,MAK7C,IAAI,EAAQ,EAAG,EAAQ,EAAM,gBAAgB,OAAQ,IAAS,CAC/D,MAAM,EAAS,EAAM,gBAAgB,GACjC,EAAO,UAAY,GACnB,EAAO,MAAM,EAAO,KAAM,KAElC,CAEA,KAAK,SAAW,EAAO,SACvB,KAAK,qBAAoB,GAAM,GAC/B,KAAK,oBAAmB,E,CAGb,OAAX,I,eAGG,KAAK,qBAAO,sEACnB,KAAK,sBAAsB,0BAA6B,IAEpD,EAAS,sBAAuB,E,kEAKvB,KAAK,sBAAsB,0BAC5B,KAAK,sBAAsB,wBAA0B,KAAK,OAAO,yBAAyB,KAAI,KAEtF,KAAK,SAAQ,KACb,KAAK,OAAO,yBAAyB,OAAO,KAAK,sBAAsB,yBACvE,KAAK,sBAAsB,wBAA0B,KACrD,KAAK,sBAAsB,gBAAgB,MAC/C,I,EAKhB,KAAK,sBAAwB,IAAI,EAAmE,GAAG,KAAK,sBAAsB,2BAC9H,GACA,EAAO,mBAAmB,gBAAgB,K,mCAShB,G,OAC1B,c,CAKJ,2B,OACO,KAAK,sBAAsB,qB,CAElC,yBAAqB,GACrB,KAAK,sBAAsB,sBAAwB,CACvD,CACI,+B,uKAOI,GAAS,KAAK,sBAAsB,mBAEpC,KAAK,gBAAgB,EAAkF,EAAE,aAAc,KAAK,sBAAsB,kBAAkB,GAChK,KAAK,sBAAsB,gBAC3B,KAAK,gBAAgB,EAAgF,EAAE,WAAY,KAAK,sBAAsB,gBAAgB,GAElK,KAAK,sBAAsB,iBAAmB,KAC9C,KAAK,sBAAsB,eAAiB,MAEhD,KAAK,8BAA8B,0BAA4B,E,wCAMxD,+B,OACF,KAAK,sBAAsB,4BAC5B,KAAK,sBAAsB,0BAA4B,IAAI,EAAmE,I,KAEtH,sBAAsB,yB,8BASlC,OAHK,KAAK,sBAAsB,0BAC5B,KAAK,sBAAsB,wBAA0B,IAAI,EAAmE,IAEzH,KAAK,sBAAsB,uB,+BASlC,OAHK,KAAK,sBAAsB,2BACrB,KAAa,sBAAiC,mCAElD,KAAK,sBAAsB,wB,sCAM7B,KAAK,sBAAsB,2B,KACvB,sBAAsB,yBAA2B,IAAI,EAAmE,IAE1H,KAAK,sBAAsB,wB,CAKlC,6B,OACK,KAAK,sBAAsB,0BAC5B,KAAK,sBAAsB,wBAA0B,IAAI,EAAmE,IAEzH,KAAK,sBAAsB,uB,kBAKrB,G,KACJ,uB,KACA,uBAAuB,OAAO,KAAK,uB,KAEvC,sBAAwB,KAAK,uBAAuB,IAAI,E,2BAGtD,KAAK,UAAU,OAAS,C,qCAIiC,Q,OAA7C,yBAAyB,sBAAmC,IAAP,EAAgB,EAAK,GAAK,C,uCAQtF,sBAAsB,oB,yBAEd,G,2BACO,qBAAuB,C,cAMlD,OAAOA,KAAK,sBAAsB,OACtC,CAMI,mBACA,OAAO,KAAK,sBAAsB,O,CAKlC,kB,OACO,KAAK,U,CAEZ,gBAAY,GACR,KAAK,aAAe,IACpB,KAAK,WAAa,E,qcAoBtB,OAAO,KAAK,qBAAqB,oB,sDAEgB,GACjD,KAAK,qBAAM,qBAA0B,C,sBAEpB,EAAY,KAAM,EAAS,G,MACtC,EAAuC,IAA5B,KAAK,oBAA6B,GAAW,EAAQ,oBAAkD,IAA7B,EAAQ,kBAA6B,EAAQ,iBAAiB,OACnJ,KAAK,MAAM,aAAe,KAAK,MAAQ,KAAK,IAAK,GAAa,KAAK,QAAQ,GAC3E,KAAK,eAAe,gBAAkB,KAAK,MAAQ,KAAK,KAC9D,EAAS,OAAS,GAAa,KAAK,O,6WAiBxB,eAAgB,GACV,GAEV,EAAM,qBAAqB,EAAU,EAAS,GAGtD,OAAO,CACX,C,4DAiBS,GACE,IAAI,EAAM,MAAM,SAAc,G,+CACrC,GAAO,cAAgB,KAAK,iBAAmB,KAAK,iBAAmB,KAAK,OAAS,KAAK,OAAO,KAAO,QACpG,KAAK,W,IACA,IAAI,EAAI,EAAG,EAAI,KAAK,WAAW,OAAQ,IACxC,GAAO,mBAAqB,KAAK,WAAW,GAAG,SAAS,GAGhE,GAAI,EACA,GAAI,KAAK,UAAW,CAChB,MAAM,EAAK,KAAK,a,yNAgBpB,EAAS,e,2BAMN,KAAK,sBAAsB,WAAW,OAAS,C,gBAOtD,OAAO,KAAK,sBAAsB,UAC/B,C,uBAEG,EAAqB,KAAa,sBAAsB,uBAAyB,EAAI,E,KACtF,sBAAsB,WAAW,MAAK,CAAC,EAAG,IACvC,EAAE,yBAA2B,EAAE,yBACxB,EAEP,EAAE,yBAA2B,EAAE,0BACvB,EAEL,G,aAWH,EAA0B,GAC3B,GAAI,GAAQ,EAAD,YAEd,OADA,EAAiE,EAAE,KAAK,4CACjE,KAEX,MAAM,EAAQ,IAAI,EAAmE,EAAE,EAA0B,G,OACjH,KAAK,sBAAsB,WAAW,KAAK,GACvC,I,+CAYR,sBAAoB,GAChB,MAAM,EAAmB,KAAK,sBAC9B,IAAK,IAAI,EAAQ,EAAG,EAAQ,EAAiB,WAAW,OAAQ,IAAS,CACrE,MAAM,EAAQ,EAAiB,WAAW,G,gDAK9C,OAAO,IACJ,C,eAMQ,GACX,MAAM,EAAmB,KAAK,sB,IACzB,IAAI,EAAQ,EAAG,EAAQ,EAAiB,WAAW,OAAQ,IACxD,EAAiB,WAAW,GAAO,OAAS,IAC5C,EAAiB,WAAW,OAAO,EAAO,GACtC,IACA,EAAK,YAAc,OAK/B,OADAA,KAAK,iBACE,I,qBAUkB,KAAK,sB,MACR,YAAqD,IAAvC,EAAiB,WAAW,O,uBAQvC,KAAK,kBACH,e,QAEF,EAAO,OAAS,EAAkF,EAAE,oBAAsB,EAAO,KAAO,EAAQ,YAAY,SAAS,EAAO,gBAAgB,S,IAEjN,EAAe,EACf,EAAc,EAClB,GAH0B,EAAiB,sBAGpB,CACnB,MAAM,EAAa,EAAO,WAC1B,IAAI,EAAY,EAAQ,YAAc,EAAO,KAAQ,EACrD,EAAW,EAAQ,OAAY,G,EAChB,EAAW,E,GACX,C,MAED,EAAiB,WAAW,EAAiB,WAAW,OAAS,GAAG,yBAA2B,EAAc,E,YAClH,qB,yBACoB,EAAc,KAAM,M,aAI5C,EAAQ,EAAG,EAAQ,EAAiB,WAAW,OAAQ,IAAS,C,MAC/D,EAAQ,EAAiB,WAAW,GAC1C,GAAI,EAAc,EAAM,yBAA2B,EAAc,EAAc,CAC3E,GAAI,EAAM,KAAM,CACZ,GAAkC,IAA9B,EAAM,KAAK,eAEX,OADA,EAAM,KAAK,mBACJ,KAEX,GAAkC,IAA9B,EAAM,KAAK,eACX,OAAO,KAEX,EAAM,KAAK,e,8DAEf,CAIA,OAHW,KAAK,qBACZ,KAAK,oBAAoB,EAAc,KAAM,EAAM,MAEhD,EAAM,I,EAMrB,OAHI,KAAK,qBACE,KAAK,iCAETA,IACX,CAII,eACO,OAAO,KAAK,S,oBAOZ,OAAuB,OAAnB,KAAK,gBAAiD,IAAnB,KAAK,UACxC,EAEJ,KAAK,UAAU,kBAC1B,CAoBA,gBAAgB,EAAM,EAAgB,G,QAElC,IAAK,KAAK,UACC,OAAO,K,IAEd,EAAuH,QAA/G,EAAkD,QAA5C,EAAK,KAAK,oCAAiD,IAAP,OAAgB,EAAS,EAAG,cAAc,UAA0B,IAAP,OAAgB,EAAS,EAAG,aAAa,KAAK,UAAU,mBAAoB,GAAc,GAAmD,IAAjC,KAAK,UAAU,OAAO,Q,aAE1P,KAAK,UAAU,gBAAgB,EAAM,EAAgB,IAEzD,C,CAoBX,gBAAgB,GACL,IAAI,EAAI,EACf,OAAK,KAAK,UAG6G,QAA/G,EAAkD,QAA5C,EAAK,KAAK,oCAAiD,IAAP,OAAgB,EAAS,EAAG,cAAc,UAA0B,IAAP,EAAgB,EAAK,KAAK,UAAU,gBAAgB,GAFxK,IAGf,CAmBO,sBAAsB,GACzB,IAAI,EACJ,OAAK,KAAK,eAMwG,KAA7D,QAA5C,EAAK,KAAK,oCAAiD,IAAP,OAAgB,EAAS,EAAG,cAAc,KAAwB,KAAK,UAAU,sBAAsB,KAL5J,KAAK,aACqC,IAAnC,KAAK,WAAW,QAAQ,E,yBAuBnB,G,IAChB,EAAI,E,YACE,WAM8G,QAA/G,EAAkD,QAA5C,EAAK,KAAK,oCAAiD,IAAP,OAAgB,EAAS,EAAG,cAAc,UAA0B,IAAP,OAAgB,EAAS,EAAG,gBAAkB,KAAK,UAAU,wBAAwB,KAL7M,KAAK,aACqC,IAAnC,KAAK,WAAW,QAAQ,E,4BAWlC,KAAK,UAAW,CACjB,MAAM,EAAS,IAAI,MAMnB,OALI,KAAK,YACL,KAAK,WAAW,SAAQ,SAAU,GAC9B,EAAO,KAAK,EAChB,IAEG,CACX,CACA,MAAM,EAAQ,KAAK,UAAU,uB,GACzB,KAAK,6B,IACA,MAAM,KAAQ,KAAK,6BAA6B,cACjD,EAAM,KAAK,G,OAGZ,C,kHAsBA,KAAK,UAAU,WAAW,EAAgB,G,EAC9C,CACH,gB,OAC2B,OAApB,KAAK,kBAAe,oB,SAQvB,GAAgB,EAAO,GAAuB,GAClD,IAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EACxB,GAA4B,IAAxB,KAAK,e,2OAeT,KAAK,qBACE,MAAM,EAAM,KAAK,UAAoB,EAAM,gBAClD,GAAI,EACA,GAAI,EAAI,wBACJ,IAAK,MAAM,KAAW,KAAK,UAAW,CAClC,MAAM,EAAoB,EAAQ,cAClC,GAAI,EACA,GAAI,EAAkB,yB,yHAoBhC,EAAsB,EAAO,oB,IAC9B,MAAM,KAAS,KAAK,aAAc,CACnC,MAAM,EAAY,EAAkB,qBACpC,GAAI,MAAoD,QAAnC,EAAK,EAAU,sBAAmC,IAAP,OAAgB,EAAS,EAAG,cAAqD,QAAnC,EAAK,EAAU,sBAAmC,IAAP,OAAgB,EAAS,EAAG,cAAsK,KAAxD,QAA7F,EAAyC,QAAnC,EAAK,EAAU,sBAAmC,IAAP,OAAgB,EAAS,EAAG,kBAA+B,IAAP,OAAgB,EAAS,EAAG,QAAQ,QAAiB,CACxV,EAAU,iB,+MAMC,OADP,EAAO,oBAAsB,GACD,EAGpC,EAAO,oBAAsB,CACjC,CACJ,CAEA,IAAK,MAAM,KAAO,KAAK,sBAAsB,W,2IAmB7C,O,gDAAO,IACJ,C,8BAME,sBAAsB,mBAAoB,EACxC,I,CAKP,2BAAuB,GACvB,KAAK,qBAAqB,uBAAyB,C,mDAM7C,EAAgB,KAAK,WAAW,cAC/B,OAAI,EAAiB,iBAA+C,I,EAG1D,eAAiB,E,KAC7B,qBAAqB,iBAAmB,MAHlC,I,sCASsB,G,YACxB,qBAAqB,mB,KACrB,qBAAqB,iBAAiB,4BAA8B,GAEtE,I,mCAoBP,O,6CAbI,KAAK,qBAAqB,iBAAmB,CAClC,gBAAM,EACb,oBAAqB,KAAK,YAG7B,KAAK,qBAAqB,iBAAiB,UACO,IAA/C,KAAK,qBAAqB,kBAAkC,KAAK,qBAAqB,WACtF,KAAK,qBAAqB,iBAAiB,KAAK,qBAAqB,kBAAoB,MAE7F,KAAK,qBAAqB,iBAAO,EACjC,KAAK,qBAAqB,iBAAiB,GAAY,IAAI,OAE/D,KAAK,qBAAqB,iBAAiB,GAAU,KAAK,GACnD,IACX,C,oFAMS,KAAK,uBACC,KAAK,iCAAgE,G,iBAK5E,KAAI,gEAAS,kCACb,KAAK,gBAAgB,gBAAgB,gBAAgB,KAAK,e,KACrD,cAAc,gBAAgB,KAAK,KAAK,kB,gCAWjD,GAAI,KAAK,iBAAmB,KAAK,kBAAkB,SACxC,OAAO,K,MAEZ,EAAO,KAAK,SAAW,KAAK,SAAS,aAAe,KAE1D,O,KADK,qBAAqB,KAAK,iBAAiB,EAAe,GAAa,GACrE,I,yBAMP,MAAM,EAAgB,KAAK,mBACpB,IAAK,IAAG,kBACX,OAAO,KAGX,GAAI,KAAK,WAAa,KAAK,UAAU,OAAS,EAAG,CAC7C,MAAM,EAAK,KAAK,aAChB,IAAK,EACD,OAAO,KAEX,MAAM,EAAe,EAAG,OACjB,IAAI,GAAkC,EAC7C,GAAI,EACA,GAAiB,OAGjB,IAAK,MAAM,KAAW,KAAK,UAAW,CAClC,GAAI,EAAQ,WAAa,EAAQ,WAAa,EAAc,CACxD,GAAiB,EACjB,KACJ,CACA,GAAI,EAAQ,cAAgB,EAAQ,cAAgB,EAAe,CAC/D,GAAiB,EACjB,KACJ,CACJ,C,IAEC,E,OACM,KAAK,UAAU,E,sCAIsC,EAAE,EAAG,EAAG,EAAe,EAAG,KAAK,kBAAmB,K,WAMhH,GACN,GAAI,EAAQ,EACR,O,MAEE,EAAe,KAAK,kB,MACH,EAAe,EAAS,EAC3C,EAAS,EAEb,KAAO,EAAkB,GAAM,GAC3B,I,wBAGJ,IAAK,IAAI,EAAQ,EAAG,EAAQ,KACb,GAAmB,GADC,IAI/B,EAA2E,EAAE,kBAAkB,EAAG,EAAQ,IAAU,EAAQ,EAAI,EAAe,EAAS,EAAiB,MACzK,GAAU,E,KAET,sB,iBAsBO,EAAM,EAAM,GAAY,EAAO,GAC3C,GAAK,KAAK,UAOC,KAAK,UAAU,gBAAkC,aAPvC,CACjB,MAAM,EAAa,IAAI,EAAoE,EAC3F,EAAW,IAAI,EAAM,G,2DAOzB,OAAOA,IACX,C,mBAiBmB,GACV,KAAK,WAGV,KAAK,UAAU,mBAAmB,EAC/B,C,4BAkBqB,EAAM,GAAY,GAC1C,MAAM,EAAK,KAAK,gBAAgB,GAC3B,GAAM,EAAG,gBAAkB,G,KAG3B,gBAAgB,EAAM,KAAK,gBAAgB,GAAO,E,mBAQzC,EAAQ,GAAwB,GAK9C,O,KAJU,Y,KACD,UAAY,EAAiF,EAAE,sBAAsB,OAE9H,KAAK,UAAU,kBAAkB,EAAQ,KAAM,GACxC,IACX,C,mBAoBmB,EAAM,EAAM,EAAe,GAC1C,OAAK,KAAK,WAGL,GAID,KAAK,qBACL,KAAK,mBAAmB,EAAM,EAAM,GAAe,IAJnD,KAAK,UAAU,mBAAmB,EAAM,EAAM,G,MAHvC,I,qBAkBK,EAAkB,GAAiB,G,QACjC,KAAK,gBAAgB,EAAkF,EAAE,c,aAEhH,K,KAEM,G,wBACO,EAAkF,EAAE,aAAc,GAAW,GAAO,G,EACxH,C,QACA,KAAK,a,EACL,KAAK,gBAAgB,EAAQ,c,aAElC,K,EAEwE,EAAE,eAAe,EAAW,EAAS,G,KACnH,mBAAmB,EAAgF,EAAE,WAAY,GAAS,GAAO,E,oEAYrG,I,sBAAX,O,oBAGN,KAAK,U,EACR,KAAK,UAAU,KAAK,EAAoE,EAAE,Y,SAC/F,eAAe,MAAM,G,EACxB,YAAY,MACd,I,cASS,EAAgB,KAAM,GAAY,G,GAC7C,KAAK,U,eAOS,WAAW,EAAS,EAAe,OAPjC,CACjB,MAAM,EAAa,IAAG,EAAW,EACjC,EAAW,QAAU,EACrB,MAAM,EAAQ,KAAK,W,IACf,EAA2D,EAAE,EAAoE,EAAE,WAAY,EAAO,EAAY,EAAW,K,2BAc3K,EAAS,EAAQ,GAAgB,G,YACjC,W,eAGK,cAAc,EAAS,EAAQ,GACvC,MAHI,I,4CAaN,UAAU,eACR,MAHI,I,SAQA,EAAQ,G,IACd,KAAK,UACN,OAAO,KAEX,MAAM,EAAS,KAAK,WAAW,Y,IAM3B,E,GAJA,KAAK,oBAAsB,KAAK,mBAAmB,0BACnDA,KAAK,mBAAmB,MAAM,GAI9B,KAAK,WACL,EAAc,UAGd,OAAQ,GACJ,KAAK,EAAmF,EAAE,cACtF,EAAc,K,MAElB,KAAK,EAAuF,EAAE,kBACnF,EAAc,EAAiB,qBAA6C,KAAK,aAAc,G,MAC1G,QACA,KAAK,EAAuC,mBACxC,EAAc,KAAK,UAAU,iB,OAKpC,KAAK,8BAAgC,KAAK,iBAC3C,KAAK,UAAU,MAAM,EAAQ,GAG7B,KAAK,UAAU,MAAM,EAAQ,EAAa,KAAK,6BAA6B,cAAe,KAAK,6BAA6B,oBAE1H,I,SAKI,EAAU,G,IAChB,KAAK,YAAc,KAAK,UAAU,qBAAwB,KAAK,aAAe,KAAK,UAAU,iBAC9F,OAAO,KAEP,KAAK,sBAAsB,yB,yEAG/B,MACa,EADC,KAAK,WACS,Y,OACxB,KAAK,YAAc,GAAY,EAAmF,EAAE,cAEpH,EAAO,eAAe,EAAU,EAAQ,cAAe,EAAQ,cAAe,KAAK,qBAAuB,GAErG,GAAY,EAAuF,EAAE,kBAE1G,EAAO,iBAAiB,EAAU,EAAG,EAAQ,iBAAkB,KAAK,qBAAuB,GAG3F,EAAO,iBAAiB,EAAU,EAAQ,WAAY,EAAQ,WAAY,KAAK,qBAAuB,GAEnG,I,sBAOU,G,YACZ,yBAAyB,IAAI,GAC3B,I,wBAOY,G,YACd,yBAAyB,eAAe,GACtC,I,qBAOS,G,oCACa,IAAI,G,2BAQf,GAElB,O,KADK,wBAAwB,eAAe,GACrCA,IACX,CAIO,wBAAwB,QAC3B,GAAIA,KAAKo7C,qBAAqB,SAAU,CACpC,GAAI,EAGA,OAFA,KAAK,qBAAqB,sCAAsC,2BAA2B,IAAa,EACxGp7C,KAAKo7C,qBAAqB,sCAAsC,WAAW,IAAa,EACjF,KAAK,qBAAqB,sCAErC,GAAI,KAAK,qBAAqB,cAC1B,OAAO,KAAK,qBAAqB,a,SAG3B,KAAK,W,EACe,EAAM,6B,EACf,E,mCACgB,8B,mCACA,kB,EACtB,KAAK,qBAAqB,W,KAClC,YAAa,E,EACb,WAAW,GAAa,IAAuB,GAAoB,KAAK,aAAe,KAAK,U,EAC5F,iBAAiB,GAAa,K,KAChC,qBAAqB,mBAAqB,EAAmB,C,MAC5D,EAAmB,KAAK,qBAAqB,iBAC7C,EAAkB,EAAM,cACxB,EAAkB,EAA4B,EAAiB,4BAA8B,EAAiB,gBACpH,EAAW,iBAAiB,GAAa,EAAiB,IACrD,EAAW,iBAAiB,IAAc,IAC3C,EAAW,iBAAiB,GAAa,EAAiB,GAElE,CAOA,O,EANW,2BAA2B,IACjC,GACG,KAAK,qBAAqB,4BACiB,OAA3C,EAAW,iBAAiB,SACe,IAA3C,EAAW,iBAAiB,G,KAC/B,qBAAqB,cAAgB,EACnC,C,sBAKU,EAAS,EAAU,EAAO,EAAQ,GACnD,IAAI,EACJ,MAAM,EAAmB,EAAM,iBAAiB,EAAQ,KAClD,EAAuB,EAAmB,EAAiB,OAAS,E,8GAMpE,EAA6B,I,KAAK,EACjC,KAAO,EAAyB,oBAA+B,G,yBAEjE,EAAgB,eAAiB,GAA8B,EAAgB,sBAChF,EAAgB,cAAgB,IAAI,aAAa,EAAgB,oBAAsB,KAEtF,KAAK,OAAO,6BAA+B,EAAgB,uBAA0B,GAA8B,EAAgB,uBACpI,EAAgB,sBAAwB,IAAI,aAAa,EAAgB,oBAAsB,IAEnG,IAAI,EAAS,EACT,EAAiB,E,MACf,EAAa,EAAM,WAAW,EAAQ,KACtC,GAAoB,GACtB,IAA+B,EAAgB,qBAC9C,KAAK,OAAO,6BAA+B,EAAgB,wB,GAC3D,KAAK,qBAAqB,cAAkB,EAAgB,WAAY,E,GAgDvD,EAAa,EAAI,GAAK,MAhDoD,CAC5F,MAAM,EAAQ,KAAK,iBAgBnB,GAfI,IACI,KAAK,OAAO,6BACP,EAAgB,+BAKjB,EAAgB,8BAA8B,YAAY,EAAgB,sBAAuB,GACjG,EAAgB,8BAA8B,SAAS,KALvD,EAAgB,8BAAgC,EAAM,QACtD,EAAgB,8BAA8B,YAAY,EAAgB,sBAAuB,KAOzG,EAAM,YAAY,EAAgB,cAAe,GACjD,GAAU,GACV,KAEA,EAAkB,CAClB,GAAI,EAAK,gCAAkC,KAAK,OAAO,eAAkD,QAAhC,EAAK,EAAQ,qBAAkC,IAAP,OAAgB,EAAS,EAAG,yBAAyB,EAAQ,qBAAsB,CAChM,MAAM,EAAiB,KAAK,OAAO,aAAa,eAChD,IAAK,IAAI,EAAgB,EAAG,EAAgB,EAAiB,OAAQ,IAAiB,CAClF,MAAM,EAAe,EAAiB,GACtC,EAAa,kBAAoB,EAA2E,EAAE,SAAS,EAAa,kBAAkB,eAAe,YAAa,EACtL,CACA,EAAiB,MAAK,CAAC,EAAI,IAChB,EAAG,kBAAoB,EAAG,mBAAqB,EAAI,EAAG,kBAAoB,EAAG,kBAAoB,EAAI,GAEpH,CACA,IAAK,IAAI,EAAgB,EAAG,EAAgB,EAAiB,OAAQ,IAAiB,CAClF,MAAM,EAAW,EAAiB,GAC5B,EAAS,EAAS,iBACxB,EAAO,YAAY,EAAgB,cAAe,GAC9C,KAAK,OAAO,6BACP,EAAS,sBAKV,EAAS,qBAAqB,YAAY,EAAgB,sBAAuB,GACjF,EAAS,qBAAqB,SAAS,KALvC,EAAS,qBAAuB,EAAO,QACvC,EAAS,qBAAqB,YAAY,EAAgB,sBAAuB,KAOzF,GAAU,GACV,G,GAmEZ,OA5DI,GACI,GACA,EAAgB,UAEhB,GACA,EAAwB,UAE5B,EAAkB,IAAI,EAA+D,EAAE,EAAQ,EAAgB,eAAe,EAAM,IAAI,GAAO,GAC/I,EAAgB,gBAAkB,EAC7B,KAAK,+BACN,KAAK,6BAA+B,CAChC,KAAM,CAAC,EACP,cAAe,CAAC,EAChB,QAAgC,CAAC,EACjC,MAAO,CAAC,EACR,mBAAoB,KAAK,YAAY,UAAU,kBAAoB,CAAC,OAAI,IAGhF,KAAK,6BAA6B,cAAsB,OAAI,EAAgB,mBAAmB,SAAU,EAAG,GAC5G,KAAK,6BAA6B,cAAsB,OAAI,EAAgB,mBAAmB,SAAU,EAAG,GAC5G,KAAK,6BAAiB,uBAAV,mBAAkB,cAC9B,KAAK,6BAA6B,cAAsB,OAAI,EAAgB,mBAAmB,SAAU,GAAI,GACzG,KAAK,OAAO,6BACZ,EAA0B,IAAI,EAA+D,EAAE,EAAQ,EAAgB,uBAAuB,EAAM,IAAI,GAAO,GAC/J,EAAgB,wBAA0B,EAC1C,KAAK,6BAA6B,cAA8B,eAAI,EAAwB,mBAAmB,iBAAkB,EAAG,GACpI,KAAK,6BAA6B,cAA8B,eAAI,EAAwB,mBAAmB,iBAAkB,EAAG,GACpI,KAAK,6BAA6B,cAA8B,eAAI,EAAwB,mBAAmB,iBAAkB,EAAG,GACpI,KAAK,6BAA6B,cAA8B,eAAI,EAAwB,mBAAmB,iBAAkB,GAAI,IAEzI,KAAK,wCAGA,KAAK,qBAAqB,WAC3B,EAAgB,eAAe,EAAgB,cAAe,EAAG,IAC7D,KAAK,OAAO,4BAAgC,KAAK,qBAAqB,eAAgB,KAAK,qBAAqB,sBAChH,EAAwB,eAAe,EAAgB,sBAAuB,EAAG,I,8BAI/D,EAAgB,G,KAEzC,WAAW,eAAe,SAAS,EAAQ,WAAc,GAAgB,G,EAEnE,sBACP,EAAO,oBAAoB,eAAgB,GAE/C,KAAK,MAAM,EAAS,EAAQ,GAC5B,KAAK,MAAM,EAAS,EAAU,IAI1B,KAAK,OAAO,4BACX,IACD,KAAK,qBAAqB,c,KACpB,+B,KACA,qBAAqB,sBAC3B,EAAwB,eAAe,EAAgB,cAAe,EAAG,G,EAEtE,2BACA,I,0BAKc,EAAS,EAAU,EAAQ,GAChD,IAAI,EAAI,E,MAEF,EAAwH,QAAtG,EAA8C,QAAxC,EAAK,KAAK,gCAA6C,IAAP,OAAgB,EAAS,EAAG,sBAAmC,IAAP,EAAgB,EAAK,E,KACtJ,WAAW,eAAe,SAAS,EAAQ,WAAa,GAAgB,GAEzE,EAAO,sBACP,EAAO,oBAAoB,eAAgB,G,KAE1C,MAAM,EAAS,EAAQ,G,KACvB,MAAM,EAAS,EAAU,GAI1B,KAAK,OAAO,6BAA+B,KAAK,yBAAyB,oBAAsB,KAAK,yBAAyB,aACxH,KAAK,yBAAyB,qBAI/B,KAAK,yBAAyB,qBAAqB,eAAe,KAAK,yBAAyB,WAAY,EAAG,GAH/G,KAAK,yBAAyB,qBAAuB,KAAK,gCAAgC,gBAAiB,KAAK,yBAAyB,YAAY,IAM7J,EAAO,0B,0BAMc,EAAkB,G,CAO3C,kBAAkB,EAAe,EAAS,EAAQ,EAAU,EAAO,EAA4B,EAAc,G,oFAKrG,O,uCAAO,KAEX,GAAI,EACA,KAAK,qBAAqB,EAAK,aAE9B,C,EACU,sBACP,EAAO,oBAAoB,eAAgB,GAE/C,IAAI,EAAgB,EAChB,EAAM,WAAW,EAAQ,OAEb,GACR,GAAyB,EAAO,EAAa,oBAEjD,IACA,KAAK,MAAM,EAAS,EAAU,KAAK,qBAAqB,yBAE5D,MAAM,EAA6B,EAAM,iBAAiB,EAAQ,KAClE,GAAI,EAA4B,CAC5B,MAAM,EAAuB,EAA2B,OACxD,GAAiB,EAEjB,IAAK,IAAI,EAAgB,EAAG,EAAgB,EAAsB,IAAiB,CAC/E,MAEM,EAFW,EAA2B,GAErB,iBACnB,GACA,GAAa,EAAM,EAAO,GAG9B,KAAK,MAAI,IACb,CACJ,CAEA,EAAM,eAAe,SAAqB,EAAQ,WAAQ,KAC9D,CACA,OAAO,I,UAKF,GAAU,G,GACX,KAAK,qBAAqB,kBAEtB,G,KACK,qBAAqB,gBAAgB,U,KAEzC,qBAAqB,gBAAkB,M,KAEvC,6BAA8B,C,IAC9B,MAAM,KAAQ,KAAK,6BAA6B,cAAe,CAChE,MAAM,EAAS,KAAK,6BAA6B,cAAc,GAC3D,IAEI,GACA,EAAO,UAEX,KAAK,6BAA6B,cAAc,GAAQ,KAEhE,CACI,KAAK,6BAAQ,qBACb,KAAK,6BAA6B,mBAAqB,CAAC,E,sEAO7D,UAKH,GAAK,KAAK,UAAV,C,IAIK,IAAI,EAAQ,EAAG,EAAQ,KAAK,UAAU,OAAQ,IAC/C,KAAK,wBAAwB,GAEjC,KAAK,sBAA8B,mBAAqB,KACxD,KAAK,qBAA6B,UAAW,CAN7C,C,aAUA,KAAK,qBAAqB,UAAW,E,KAChC,qBAAqB,cAAgB,I,UAS9B,EAAiB,G,QACjB,E,QACE,KAAK,W,QACV,8BAA8B,sB,mCACA,uBAAwB,E,KAGtD,8BAA8B,WAAY,EAE/C,KAAK,yBAA2B,KAAK,sBAAsB,2BAC3D,OAAO,K,QAGG,KAAK,wBAAwB,EAAQ,MAAO,G,KAChD,WACN,OAAO,K,IAGN,KAAK,YAAc,KAAK,UAAU,qBAAwB,KAAK,aAAe,KAAK,UAAU,iB,OACvF,K,QAEI,EAAM,Y,MACD,E,EACJ,K,uBACa,EAAM,eAAiB,EAAM,+B,EACtC,EAAM,aAAa,K,EACvB,EAAM,a,eACC,KAAO,E,yBACE,I,KAEvB,sBAAsB,2B,KACtB,sBAAsB,0BAA0B,gBAAgB,M,QAEnD,EAAQ,mB,EACK,EAAM,2BAA2B,EAAQ,M,EAC1D,oBACX,KAAK,+BAAiC,EAAQ,UAAU,8BAA8B,kBACvF,EAAsB,KAAK,qBAC3B,EAAmB,EAAQ,cACjC,IAAK,E,OACG,IACA,EAAU,KAAe,EACzB,EAAM,uBAAsB,IAEzB,K,KAGc,UAAa,KAAK,sBAAsB,oBAAsB,KAAK,sBAAsB,qBAAuB,GAmBpI,GAAK,EAAS,2BAAuD,QAAzB,EAAK,EAAQ,cAA2B,IAAP,OAAgB,EAAS,EAAG,uBACxG,EAAS,2BAA6D,QAA/B,EAAK,EAAS,mBAAgC,IAAP,OAAgB,EAAS,EAAG,qBAK5G,OAJI,IACA,EAAU,KAAO,EACjB,EAAM,uBAAsB,IAEzB,SAzBwI,C,GAC3I,EAAS,yBACT,IAAK,EAAS,kBAAkB,KAAM,EAAS,GAK3C,OAJI,IACA,EAAU,KAAO,EACjB,EAAM,uBAAsB,IAEzB,UAGV,IAAK,EAAS,QAAQ,KAAM,GAK7B,OAJI,IACA,EAAU,KAAO,EACjB,EAAM,uBAAsB,IAEzB,KAEX,KAAK,sBAAsB,mBAAqB,C,KAchD,EAHA,G,EACO,aAAa,KAAK,sBAAI,8BAI7B,EADA,KAAK,sBAAsB,mBAAmB,wBAChC,EAAQ,aAGR,KAAK,sBAAsB,mBAAmB,kBAEhE,QAAwC,QAAxC,iBAAgB,EAAY,cAA2B,IAAP,EAAgB,EAAK,K,IAChE,MAAM,KAAQ,EAAM,0B,EAChB,OAAO,KAAM,EAAS,EAAO,G,QAEjB,E,OACb,IACA,EAAU,KAAO,EACjB,EAAM,uBAAsB,IAEzB,K,MAEL,EAAgB,GAAI,K,IACtB,EACJ,GAAK,EAAoB,WAAa,KAAK,sBAAsB,mBAAmB,iBAA4D,OAAzC,KAAK,gCAYxG,EAAkB,EAAoB,oBAZ6G,CACnJ,MAAM,EAAkB,EAAc,6BACtC,EAAkB,KAAK,gCACA,MAAnB,I,4KAMG,EAA0B,iBACrC,C,MAIM,EAAU,KAAK,sBAAsB,mBAAmB,SAAS,EAAa,GAChF,KAAK,sBAAsB,mBAAmB,iBAC9C,EAAO,eAAc,GAGzB,MAAM,EAAW,EAAM,iB,yDAIb,KAAK,sBAAsB,mBAAmB,SAC7C,KAAK,sBAAa,yBACzB,KAAK,sBAAsB,wBAAwB,gBAAgB,MAElE,G,KAEI,MAAM,EAAS,EAAQ,G,MAE1B,EAAoB,KAAK,sBAAsB,mBAC/C,EAAQ,EAAc,iBACxB,EAAkB,wBAClB,EAAkB,eAAe,EAAO,KAAM,G,EAG5B,KAAK,EAAO,OAE7B,EAAkB,iBAAmB,EAAkB,sBACxD,EAAO,UAAS,EAAM,EAAkB,SAAS,GAAQ,EAAS,EAAkB,cAAe,EAAkB,QAAS,EAAkB,cAChJ,KAAK,kBAAkB,KAAM,EAAS,EAAQ,EAAU,EAAO,EAA4B,KAAK,cAAe,KAAK,sBAAsB,oBAC1I,EAAO,UAAS,EAAM,EAAkB,SAAS,EAAO,EAAS,EAAkB,cAAe,EAAkB,QAAS,EAAkB,cAC3I,KAAK,sBAAsB,0B,wEAKnC,KAAK,kBAAkB,KAAmB,EAAS,EAAQ,EAAU,EAAO,EAA4B,KAAK,cAAe,KAAK,sBAAsB,oB,KAElJ,sBAAsB,mBAAmB,S,IACzC,MAAM,KAAQ,EAAM,yBACrB,EAAK,OAAO,KAAM,EAAS,EAAO,G,OAElC,KAAK,sBAAsB,0BAC3B,KAAK,sBAAsB,yBAAyB,gBAAgB,MAEpE,I,mIAgBA,KAAK,sBAAkC,EAAC,yBACpC,KAAK,sBAA8B,EAA8F,EAAE,0BACnI,KAAa,gCAGb,KAAK,4B,mCAMP,EAAkB,KAAK,gBAAgB,EAAyF,EAAE,qB,EAChI,S,IACH,IAAI,EAAI,EAAG,EAAI,EAAY,GAAK,EAAG,CAEpC,MAAM,EAAI,EAAgB,GAAK,EAAgB,EAAI,GAAK,EAAgB,EAAI,GAAK,EAAgB,EAAI,GAErG,GAAU,IAAN,EACA,EAAgB,GAAK,MAEpB,CAED,MAAM,EAAQ,EAAI,EAClB,EAAgB,IAAM,EACtB,EAAgB,EAAI,IAAM,EAC1B,EAAgB,EAAI,IAAM,E,2FAQlC,MAAM,EAAuB,KAAK,gBAAgB,EAA8F,EAAE,0BACrI,EAAkB,KAAK,gBAAgB,EAA0B,uBACxE,EAAa,EAAgB,OACnC,IAAK,IAAI,EAAI,EAAGx0B,EAAI,EAAY,GAAK,EAAG,CAEpC,IAAI,EAAI,EAAgB,GAAK,EAAgB,EAAI,GAAK,EAAgB,EAAI,GAAK,EAAgB,EAAI,GAG5F,GAFP,GAAK,EAAqB,GAAK,EAAqB,EAAI,GAAK,EAAqB,EAAI,GAAK,EAAqB,EAAI,GAEvG,IAAF,EACP,EAAgB,GAAK,MAEpB,CAED,MAAM,EAAQ,EAAI,EAClB,EAAgB,IAAM,EACtB,EAAgB,EAAI,IAAM,EAC1B,EAAgB,EAAI,IAAM,EAC1B,EAAgB,EAAI,IAAM,EAE1B,EAAqB,IAAM,EAC3B,EAAqB,EAAI,IAAM,EAC/B,EAAqB,EAAI,IAAM,EAC/B,EAAqB,EAAI,IAAM,CACnC,CACJ,CACO,KAAK,gBAAW,2BACvB,KAAK,gBAAgB,EAAyF,EAAE,oBAAqB,E,iNAc9H,MAAM,EAAqB,EAAgC,OAClE,IAAI,EAAkB,EAClB,EAAiB,EACjB,EAAiB,E,qCAIrB,IAAK,IAAI,EAAI,EAAG,GAAK,EAAe,IACzB,EAA2B,GAAK,E,IAGtC,IAAI,EAAI,EAAG,EAAI,EAAY,GAAK,EAAG,CACpC,IAAI,EAAa,EAAgB,GAC7BtrB,EAAI,EACJ,EAAoB,IAAN,EAAU,EAAI,EAChC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAe,IAAK,CACpC,MAAM,EAAI,EAAI,EAAI,EAAgB,EAAI,GAAK,EAAqB,EAAI,EAAI,GACpE,EAAI,GACJ,IAEM,IAAN,GACA,IAEJ,GAAK,EACL,EAAa,CACjB,C,GAEA,EAAiB,KAEb,EAAc,IACd,EAAiB,GAGX,I,iBAKA,EAAQ,EAAI,EAClB,IAAI,EAAY,EAChB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAe,IAE3B,GADA,EAAI,EACS,KAAK,IAAI,EAAgB,EAAI,GAAK,EAAgB,EAAI,GAAK,GAG3D,KAAK,IAAI,EAAqB,EAAI,EAAI,GAAK,EAAqB,EAAI,EAAI,GAAK,GAI9F,EAvCa,MAwCb,GAER,CACJ,CAEA,MAAM,EAAW,KAAK,SAAS,MAAM,OAC/B,EAAkB,KAAK,gBAAgB,EAAyF,EAAE,qBAClI,EAAuB,KAAK,gBAAgB,EAA8F,EAAE,0BAClJ,IAAI,EAAoB,E,IACnB,IAAI,EAAI,EAAG,EAAI,EAAY,GAAK,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAe,IAAK,CACpC,MAAM,EAAQ,EAAI,EAAI,EAAgB,EAAI,GAAK,EAAqB,EAAI,EAAI,IACxE,GAAS,GAAY,EAAQ,IAC7B,GAER,C,mDAGkB,uBAClB,EAAa,EACb,0BACA,EACO,uBACP,EACA,kBACA,E,+CAPkB,wB,6BAoBnB,mBACH,MAAMoB,EAAQsD,KAAKrD,W,OACf,KAAK,UACL,KAAK,UAAU,KAAK,GAES,IAAxB,KAAK,iBACV,KAAK,eAAiB,EACtB,KAAK,WAAqC,IAEvC,I,YAEA,G,EACD,eAAe,M,MACf,GAA6E,IAA7D,KAAK,iBAAiB,QAAQ,0B,SACc,GAAG,SAAS,KAAK,kBAAmB,IAC9F,aAAgB,YAChB,KAAK,sBAAsB,EAAM,MAGjC,KAAK,sBAAsB,KAAK,MAAM,GAAO,MAEjD,KAAK,UAAU,SAAS,I,+IAepB,G,OACJ,2BAGC,MAAM,YAAwB,KAGnC,KAAK,oBACE,E,iBAOH,G,MACE,EAAY,KAAK,WAAW,U,IAC9B,E,IACC,EAAQ,EAAU,OAAS,EAAG,GAAS,EAAG,IAC3C,GAAI,EAAU,GAAO,KAAO,EAExB,OADA,KAAK,SAAW,EAAU,GACnB,K,MAIT,EAAiB,KAAK,WAAW,e,IAClC,EAAQ,EAAe,OAAS,EAAG,GAAS,EAAG,IAChD,GAAI,EAAe,GAAO,KAAO,EAErC,OADQ,KAAK,SAAW,EAAe,GACvC,K,OAGO,I,kBAOP,MAAM,EAAU,IAAI,MAOpB,OANI,KAAK,UACL,EAAQ,KAAK,KAAK,U,qCAKf,CACJ,C,0BAgBmB,G,IAEjB,KAAK,sBAAsB,EAAkF,EAAE,cAChH,OAAO,K,QAEO,KAAK,UAAU,OAAO,G,sCAE7B,KAAK,gBAAgB,EAAkF,EAAE,cAChH,EAAO,IAAI,M,MAEF,EAAG,EAAQ,EAAK,OAAQ,GAAS,E,EAC6C,EAAE,qBAAqB,EAA4E,EAAE,UAAU,EAAM,GAAQ,GAAW,QAAQ,EAAM,G,QAE5O,gBAAgB,EAAkF,EAAE,aAAc,EAAM,KAAK,gBAAgB,EAAkF,EAAE,cAAc,eAEhP,KAAK,sBAAsB,EAAiF,EAAE,YAAa,CAG3H,IAFA,EAAO,KAAK,gBAAgB,EAAgF,EAAE,YAC9G,EAAO,GACF,EAAQ,EAAG,EAAQ,EAAK,OAAQ,GAAS,EAC1C,EAAkF,EAAE,gBAAgB,EAA4E,EAAE,UAAU,EAAM,GAAQ,GAAW,YAAY,QAAQ,EAAM,GAEnP,KAAK,gBAAgB,EAAgF,EAAE,WAAY,EAAM,KAAK,gBAAgB,EAAgF,EAAE,YAAY,cAChP,C,OAEI,EAAU,cAAgB,GAC1B,KAAK,Y,uCAIQ,E,sCAYqB,GAA6B,G,OACnE,KAAK,0BAA0B,KAAK,oBAAmB,I,KAClD,iBAAiB,GACf,I,CAIP,iB,OACI,KAAK,8BAA8B,WAC5B,KAAK,8BAA8B,WAE1C,KAAK,UACE,KAAI,qBAER,I,sCAIE,W,KACA,UAAU,yBAEZ,I,qCAIE,WACE,KAAK,UAAU,sB,OAaxB,EAAO,GAAI,EAAY,KAAM,EAAoB,GAAuB,G,OACnE,IAAI,EAAK,EAAM,KAAK,WAAY,EAAW,KAAM,EAAoB,E,qGAYrE,MAAM,EAAY,2BAuBzB,GAtBI,EAAiB,yBACjB,EAES,wBAAwB,QAIjC,EAEK,yBACL,EAAyB,wBAAwB,QAEjD,EAAiB,2BACjB,EAAiB,0BAA0B,QAE3C,EAAiB,0BACjB,EAA6B,yBAAyB,QAEtD,EAAiB,0BACjB,EAAiB,yBAAyB,QAG1C,KAAK,OAAO,iBAAkB,CAC9B,GAAI,EAAiB,QACjB,IAAa,MAAM,KAAY,EAAiB,QAAS,CACrD,MAAM,EAAO,EAAiB,QAAQ,GAClC,IACA,EAAK,sBAAsB,QAAU,KACrC,EAAiB,QAAQ,QAAY,EAE7C,C,EAEiB,SAAW,EAAiB,QAAQ,sBAAsB,UAC3E,EAAiB,QAAQ,sBAAsB,QAAQ,KAAK,eAAY,EAEhF,KACK,CACD,MAAM,EAAS,KAAK,WAAW,OAC/B,IAAK,MAAM,KAAgB,EAAQ,CAC/B,MAAM,EAAO,EACT,EAAK,uBAAyB,EAAK,sBAAsB,SAAW,EAAK,sBAAsB,UAAY,OAC3G,EAAK,sBAAsB,QAAU,KAE7C,C,GAEa,QAAU,KAE3B,KAAK,+BAEL,KAAK,mCACD,KAAK,sBAAsB,yBAC3B,gGAEJ,MAAM,QAAQ,EAAc,E,CAGhC,+B,kGAwBqB,EAAK,EAAW,EAAW,EAAW,EAAI,QAC3D,MAAM,EAAQ,KAAK,W,SAiBgD,GAAG,UAAU,GAhBhE,I,iFAMZ,EAAQ,UAAU,EAAK,EAAG,GAG1B,MAAM,EAAS,EAAQ,aAAa,EAAG,EAAG,EAAgB,GAAiB,KAC3E,KAAK,+BAA+B,EAAQ,EAAgB,EAAiB,EAAW,EAAW,EAAU,EAAS,GAElH,GACA,EAAU,KACd,IAEyF,QAAW,EAAM,iBACvG,I,gCAgB6B,EAAC,UAAY,EAAS,GAAc,G,IACnE,KAAK,sBAAuB,EAA6B,EAAE,gBAAkB,KAAK,sBAAsB,EAAgF,EAAE,cAAgB,KAAK,sBAAsB,EAA4E,EAAE,QAEpT,OADA,EAA2E,EAAE,KAAK,oGAC3E,K,MAEL,EAAoB,KAAK,gBAAgB,EAAkF,EAAE,cAAc,GAAM,GACjJ,EAAU,KAAG,gBAA0B,EAAgF,EAAE,YACzH,EAAM,KAAa,gBAAgB,EAA4E,EAAE,Q,IACnH,EAAW,EAAuE,EAAE,O,QACzE,EAAuE,EAAE,OAClF,EAAK,EAAuE,GAAG,O,EAC1E,GAAoB,EAAuE,GAAG,O,EAC/F,GAAW,IAAI,EAAkE,GAAG,EAAG,G,QACxF,EAAQ,EAAG,EAAQ,EAAU,OAAQ,GAAS,EAAG,C,EAC2B,EAAE,eAAe,EAAW,EAAO,GACpH,EAAiF,EAAE,eAAe,EAAS,EAAO,G,EACjC,GAAG,eAAe,EAAM,EAAQ,EAAK,EAAG,G,QAIlF,IAF5B,KAAK,IAAI,EAAG,EAAI,EAAQ,EAAK,EAAS,EAAI,IAAO,EAAiB,GAAM,EAAiB,IACzF,KAAK,IAAI,EAAG,EAAI,EAAQ,EAAK,EAAS,EAAI,IAAO,EAAkB,GAAM,EAAkB,GACjF,G,EACX,EAAO,GAAO,IAGH,GAFX,EAAO,EAAM,GAAK,IAEG,I,EADd,EAAM,GAAK,IACc,I,6BAEtB,GAAa,EAAY,GAAa,G,IACtC,IAAI,G,UACP,EAAW,E,UAEmD,EAAE,eAAe,EAAW,KAAK,aAAc,G,wBAEzG,EAAkF,EAAE,aAAc,G,qBAClG,EAAgF,EAAE,WAAY,G,qBAC9F,EAA4E,EAAE,OAAQ,K,wBAGnF,EAAkF,EAAE,aAAc,G,wBAClG,EAAgF,EAAE,WAAY,I,4CAWvG,uB,0BAII,E,UAGS,EAAM,OAAS,IAAa,C,eAEnC,KAAK,gBAAgB,G,IAET,W,aACP,OAAU,aAAsB,eAC5B,I,EAAX,S,IAIN,EAAgF,EAAE,Y,EAM3F,GAAQ,E,EACP,GAAQ,KAAK,gBAAgB,G,EAC1B,GAAQ,K,EAPO,EAAa,c,SACnB,EAAW,G,cASN,KAAK,UAAU,MAAM,G,EAC/B,KAAK,a,EACA,KAAK,kB,YAGb,EAAG,EAAQ,EAAc,IAAS,C,QACvB,EAAQ,G,MACX,EAAG,EAAY,EAAM,OAAQ,IAAa,C,OAC1C,IACR,EAAI,GACL,S,QAEW,EAAI,GAAM,gB,IACpB,IAAI,EAAS,EAAG,EAAS,EAAQ,IAClC,EAAQ,GAAM,KAAK,EAAK,GAAM,EAAc,EAAS,G,UAKjD,G,IACU,EAAmF,EAAE,c,YAClF,KAAK,WAAY,qBAGsB,IAAzC,KAAK,gCAGoC,IAAzC,KAAK,gC,EAEnB,EAAG,EAAQ,EAAc,GAAS,EAAG,C,EACtC,GAAS,E,EACT,EAAQ,GAAK,EAAQ,E,EACrB,EAAQ,GAAK,EAAQ,E,MACvB,EAAK,EAA4E,EAAE,UAAU,EAAmB,EAAR,G,EACnG,EAAoF,EAAE,UAAU,EAAyB,GAAb,EAAQ,I,EACpH,EAA4E,EAAE,UAAU,EAAyB,GAAb,EAAQ,I,EAC1G,EAAG,SAAS,G,EACZ,EAAG,SAAS,G,EACV,EAA4E,EAAE,UAAU,EAAwE,EAAE,MAAM,EAAM,I,KAElL,cAAc,GAGzB,IAAK,IAAI,EAAa,EAAG,EAAa,EAAG,IACrC,EAAQ,KAAK,EAAO,GACpB,EAAQ,KAAK,EAAO,GACpB,EAAQ,KAAK,EAAO,E,CAM5B,I,mBAFA,KAAK,gBAAgB,EAAgF,EAAE,WAAY,EAAS,GAEvH,EAAY,EAAG,eAChB,EAAO,EAAM,GACR,EAAQ,IAGb,KAAK,gBAAgB,EAAM,EAAQ,GAAO,EAAI,GAAM,eAGxD,KAAK,mBACL,IAAK,IAAI,EAAe,EAAG,EAAe,EAAkB,OAAQ,IAAgB,CAChF,aACA,EAAmE,EAAE,UAAU,EAAY,cAAe,EAAY,WAAY,EAAY,WAAY,EAAY,WAAY,EAAY,WAAY,K,aAEzM,uBACE,I,gCASD,EAAQ,KAAK,uBAGb,EAAc,CAAC,EACf,EAAsB,CAAC,EACvB,EAAU,CAAC,E,cAGA,EAAG,EAAY,EAAM,OAAQ,IAAa,C,IAC1C,G,QACQ,KAAK,gBAAgB,G,KAC9B,E,KACC,EAAI,GAAM,U,KACP,E,SAGM,KAAK,UAAU,MAAM,G,EAC/B,KAAK,a,EACA,KAAK,kB,YAGb,EAAG,EAAQ,EAAc,IAAS,C,QACvB,EAAQ,G,MACX,EAAG,EAAY,EAAM,OAAQ,IAAa,C,EAChD,EAAM,G,QACE,EAAI,GAAM,gB,QAChB,EAAS,EAAG,EAAS,EAAQ,I,EAC1B,GAAM,KAAK,EAAK,GAAM,EAAc,EAAS,G,YAKzC,EAAc,GAAS,E,KAC1B,E,OACI,EAAQ,E,SACA,E,6BAID,EAAM,OAAQ,I,4BAErB,EAAM,EAAQ,GAAO,EAAI,GAAM,cAAe,EAAI,GAAM,iB,sCAIvC,EAAkB,OAAQ,IAAgB,C,UAC1C,G,EAC6B,EAAE,UAAU,EAAY,cAAe,EAAY,WAAY,EAAY,WAAY,EAAY,WAAY,EAAY,WAAY,K,sFAatG,EAAE,gBAAgB,M,iBAElG,sBAAsB,EAAgF,EAAE,aAAe,EAAY,Q,UACvI,EAAY,QAAQ,OAAQ,I,EAC5B,QAAQ,KAAO,E,KAGnB,QAAS,C,IACjB,EACJ,IAAK,EAAI,EAAG,EAAmB,EAAY,QAAQ,OAAQ,GAAK,EAE5D,EAAO,EAAY,QAAQ,EAAI,GAC/B,EAAY,QAAQ,EAAI,GAAK,EAAY,QAAQ,EAAI,GACrD,EAAY,QAAQ,EAAI,GAAK,C,UAGzB,YAAY,KAAM,KAAK,wBAAwB,EAAkF,EAAE,eACxI,I,kBAQM,EAAgB,G,MACvB,EAAc,EAAoF,EAAE,gBAAgB,MACpH,EAAiB,EAAY,UAAY,MAAM,QAAQ,EAAY,UAAY,MAAM,KAAO,MAAM,KAAK,EAAY,SAAW,EAAY,Q,EAC9H,EAAY,YAAc,MAAM,QAAQ,EAAY,YAAc,MAAM,KAAO,MAAM,KAAK,EAAY,WAAa,EAAY,UAC3I,EAAM,EAAY,MAAQ,MAAM,QAAQ,EAAY,MAAQ,MAAM,KAAO,MAAM,KAAK,EAAY,KAAO,EAAY,IACnH,EAAU,EAAY,UAAY,MAAM,QAAQ,EAAY,UAAY,MAAM,KAAO,MAAM,KAAK,EAAY,SAAW,EAAY,Q,MACjH,EAGnB,CACD,EAAY,QAAU,EACtB,EAAY,UAAY,EACpB,I,SAGA,IACO,EAAY,QAAkB,GAEzC,MAAM,EAAW,EAAgB,EAC3B,EAAc,IAAI,M,sBAEpB,EAAY,GAAK,IAAI,MAElB,IAAI,EACT,EACF,MAAM,EAAgB,IAAI,EAAkE,EAAE,EAAG,EAAG,GAC9F,EAAc,IAAI,EAAkE,EAAE,EAAG,EAAG,G,oDAKlG,IAAI,EAEA,E,EADO,EAAe,SAEtB,IACA,EAAQ,EAAI,Q,IAIZ,EAAa,EAAQ,QAEzB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAe,OAAQ,GAAK,EAAG,CAC/C,EAAY,GAAK,EAAe,GAChC,EAAY,GAAK,EAAe,EAAI,GACpC,EAAY,GAAK,EAAe,EAAI,GACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAenB,GAdA,EAAI,EAAY,GAChB,EAAI,GAAa,EAAI,GAAK,Q,8DAMN,IAAZ,EAAK,KACE,EAAK,GAA0B,gBAE1B,IAAZ,EAAK,KACL,EAAK,GAAK,IAAI,aAGH,IAAf,EAAK,GAAG,SAA4C,IAAf,EAAK,GAAG,GAAkB,CAC/D,EAAK,GAAG,GAAK,GACb,EAAS,oBACT,EAAc,GAAK,EAAU,EAAI,EAAI,GAAK,EAAU,EAAI,EAAI,IAAM,EAClE,EAAsB,GAAK,EAAU,EAAI,EAAI,GAAK,EAAU,EAAI,EAAI,IAAM,EAC1F,IACoB,EAAY,GAAK,EAAQ,EAAI,GAAK,EAAQ,EAAI,IAAM,EACpD,EAAY,GAAK,EAAQ,EAAI,EAAI,GAAK,EAAQ,EAAI,EAAI,IAAM,EAC5D,EAAY,GAAK,EAAQ,EAAI,EAAI,GAAK,EAAQ,EAAI,EAAI,IAAM,GAE5D,IACA,EAAQ,GAAK,EAAI,EAAI,GAAK,EAAI,EAAI,IAAM,EACxC,EAAQ,GAAK,EAAI,EAAI,EAAI,GAAK,EAAI,EAAI,EAAI,IAAM,GAEpD,EAAK,GAAG,GAAG,KAAK,GAChB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,IAC1B,EAAK,GAAG,GAAG,KAAK,EAAU,OAAS,GACnC,EAAU,KAAiB,EAAU,EAAI,GAAK,EAAI,EAAc,EAChE,EAAU,KAAiB,EAAU,EAAI,EAAI,GAAK,EAAI,EAAc,EACpE,EAAU,KAAiB,EAAU,EAAI,EAAI,GAAK,EAAI,EAAc,EAChE,IACA,EAAQ,KAAgB,EAAQ,EAAI,GAAK,EAAI,EAAY,EACzD,EAAQ,KAAgB,EAAQ,EAAI,EAAI,GAAK,EAAI,EAAY,EAC7D,EAAQ,KAAgB,EAAQ,EAAI,EAAI,GAAK,EAAI,EAAY,GAE7D,IACA,EAAI,KAAW,EAAI,EAAI,GAAK,EAAI,EAAQ,EACxC,EAAI,KAAW,EAAI,EAAI,EAAI,GAAK,EAAI,EAAQ,G,kCAKpD,EAAM,EAAK,GAAG,GAAG,OACV,IAAK,IAAI,EAAW,EAAD,QACtB,EAAK,GAAG,GAAG,GAAO,EAAK,GAAG,GAAG,EAAM,EAAI,EAE/C,CAGJ,EAAY,GAAG,GAAK,EAAG,GACvB,EAAY,GAAG,GAAK,EAAK,EAAe,IAAI,EAAe,EAAI,IAAI,GACnE,EAAY,GAAG,GAAK,EAAK,EAAe,IAAI,EAAe,EAAI,IAAI,GACnE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,IAAK,CAC/B,EAAY,GAAG,GAAK,EAAK,EAAe,IAAI,EAAe,EAAI,IAAI,GACnE,EAAY,GAAG,GAAK,EAAK,EAAe,IAAI,EAAe,EAAI,IAAI,GACnE,EAAc,GAAK,EAAU,EAAI,EAAY,GAAG,IAAM,EAAU,EAAI,EAAY,GAAG,KAAO,EAC1F,EAAc,GAAK,EAAU,EAAI,EAAY,GAAG,GAAK,GAAK,EAAU,EAAI,EAAY,GAAG,GAAK,IAAM,EAClG,EAAc,GAAK,EAAU,EAAI,EAAY,GAAG,GAAK,GAAK,EAAU,EAAI,EAAY,GAAG,GAAK,IAAM,EAC9F,IACA,EAAY,GAAK,EAAQ,EAAI,EAAY,GAAG,IAAM,EAAQ,EAAI,EAAY,GAAG,KAAO,EACpF,EAAY,GAAK,EAAQ,EAAI,EAAY,GAAG,GAAK,GAAK,EAAQ,EAAI,EAAY,GAAG,GAAK,IAAM,EAC5F,EAAY,GAAK,EAAQ,EAAI,EAAY,GAAG,GAAK,GAAK,EAAQ,EAAI,EAAY,GAAG,GAAK,IAAM,GAE5F,IACA,EAAQ,GAAK,EAAI,EAAI,EAAY,GAAG,IAAM,EAAI,EAAI,EAAY,GAAG,KAAO,EACxE,EAAQ,GAAK,EAAI,EAAI,EAAY,GAAG,GAAK,GAAK,EAAI,EAAI,EAAY,GAAG,GAAK,IAAM,GAEpF,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,EAAY,GAAG,GAAK,EAAU,OAAS,EACvC,EAAU,KAAiB,EAAU,EAAI,EAAY,GAAG,IAAM,EAAI,EAAc,EAChF,EAAU,KAAiB,EAAU,EAAI,EAAY,GAAG,GAAK,GAAK,EAAI,EAAc,EACpF,EAAU,KAAiB,EAAU,EAAI,EAAY,GAAG,GAAK,GAAK,EAAI,EAAc,EAChF,IACA,EAAQ,KAAgB,EAAQ,EAAI,EAAY,GAAG,IAAM,EAAI,EAAY,EACzE,EAAQ,KAAgB,EAAQ,EAAI,EAAY,GAAG,GAAK,GAAK,EAAI,EAAY,EAC7E,EAAQ,KAAgB,EAAQ,EAAI,EAAY,GAAG,GAAK,GAAK,EAAI,EAAY,GAE7E,IACA,EAAI,KAAW,EAAI,EAAI,EAAY,GAAG,IAAM,EAAI,EAAQ,EACxD,EAAI,KAAW,EAAI,EAAI,EAAY,GAAG,GAAK,GAAK,EAAI,EAAQ,EAGxE,CACA,EAAY,GAAY,EAAK,EAAe,EAAI,IAAI,EAAe,EAAI,IAEvE,EAAQ,KAAK,EAAY,GAAG,GAAI,EAAY,GAAG,GAAI,EAAY,GAAG,IAClE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,IAAK,CAC/B,IAAI,EACJ,IAAK,EAAI,EAAG,EAAI,EAAG,IACf,EAAQ,KAAK,EAAY,GAAG,GAAI,EAAY,EAAI,GAAG,GAAI,EAAY,EAAI,GAAG,EAAI,IAC9E,EAAQ,KAAK,EAAY,GAAG,GAAI,EAAY,EAAI,GAAG,EAAI,GAAI,EAAY,GAAG,EAAI,IAElF,EAAQ,KAAK,EAAY,GAAG,GAAI,EAAY,EAAI,GAAG,GAAI,EAAY,EAAI,GAAG,EAAI,G,IAG1E,QAAU,E,EACV,YAAY,KAAM,KAAK,wBAAwB,EAAkF,EAAE,c,QA3I9E,EAAE,KAAK,gG,6BAoJtE,EAAc,EAAoF,EAAE,gBAAgB,MACpH,EAAa,EAAY,IACzB,EAAiB,EAAY,QAC7B,EAAmB,EAAY,UAC/B,EAAgB,EAAY,OAC5B,EAAuB,EAAY,gBACnC,EAAuB,EAAY,gBACnC,EAA4B,EAAY,qBACxC,EAA4B,EAAY,qBAC9C,QAAuB,IAAnB,QAAkD,IAArB,GAAkD,OAAnB,GAAgD,OAArB,EACvF,EAAiE,EAAE,KAAK,yCAEvE,CACD,MAAM,EAAY,IAAI,MAChB,EAAU,IAAI,MACd,EAAM,IAAI,MACV,EAAS,IAAI,MACb,EAAgB,IAAI,MACpB,EAAgB,IAAI,MACpB,EAAqB,IAAI,MACzB,EAAqB,IAAI,M,IAC3B,EAAU,IAAI,MACd,EAAW,E,MACT,EAAkB,CAAC,EACzB,IAAI,EACA,EACJ,IAAK,IAAI,EAAI,EAAG,EAAI,EAAe,OAAQ,GAAK,EAAG,CAC/C,EAAQ,CAAC,EAAe,GAAI,EAAe,EAAI,GAAI,EAAe,EAAI,IACtE,EAAU,IAAI,MACd,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CACxB,EAAQ,GAAK,GACb,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAEf,KAAK,IAAI,EAAiB,EAAI,EAAM,GAAK,IAAM,OAC/C,EAAiB,EAAI,EAAM,GAAK,GAAK,GAEzC,EAAQ,IAAM,EAAsB,EAAI,EAAM,GAAK,GAAK,GAEhE,CAGA,GAAM,EAAQ,IAAM,EAAQ,IAAM,EAAQ,IAAM,EAAQ,IAAM,EAAQ,IAAM,EAAQ,GAIhF,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAExB,GADA,EAAM,EAAgB,EAAQ,SAClB,IAAR,EAAmB,CACnB,EAAgB,EAAQ,IAAM,EAC9B,EAAM,IAEN,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,EAAU,KAAK,EAAiB,EAAI,EAAM,GAAK,IAEnD,GAAI,QACA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,EAAO,KAAK,EAAc,EAAI,EAAM,GAAK,IAGjD,GAAI,QACA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,EAAI,KAAK,EAAW,EAAI,EAAM,GAAK,IAG3C,GAAI,QACA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,EAAc,KAAK,EAAqB,EAAI,EAAM,GAAK,IAG/D,GAAI,QACA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,EAAc,KAAK,EAAqB,EAAI,EAAM,GAAK,IAG/D,GAAI,QACA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,EAAmB,KAAK,EAA0B,EAAI,EAAM,GAAK,IAGzE,GAAI,QACA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,EAAmB,KAAK,EAA0B,EAAI,EAAM,GAAK,GAG7E,CAEA,EAAQ,KAAK,EACjB,C,SAGQ,IAAI,M,EAC+D,EAAE,eAAe,EAAW,EAAS,G,EAE5G,UAAY,E,EACZ,QAAU,E,EACV,QAAU,EAClB,UACA,EAAY,IAAM,GAElB,UACA,EAAY,OAAS,GAErB,UACA,EAAY,gBAAkB,GAE9B,UACA,EAAY,gBAAkB,GAE9B,UACA,EAAY,qBAAuB,GAEnC,UACA,EAAY,qBAAuB,GAEvC,EAAY,YAAY,KAAM,KAAK,wBAAwB,EAAkF,EAAE,cACnJ,CACJ,C,6BAM6B,EAAM,GAC/B,MAAM,EAAG,EAAmE,GAAG,gB,+BAMrD,EAAO,EAAc,G,MACzC,EAAG,EAAmE,GAAG,kB,4BASnE,sBAAsB,EAAM,K,kCAQf,EAAG,EAAc,0BACrB,KAAK,UAAU,GACvB,iB,4BAWD,G,QACI,KAAK,a,EACH,KAAK,gBAAgB,EAAkF,EAAE,c,QACxG,E,oBAGK,IAAI,M,UACb,EAAG,EAAM,EAAU,OAAQ,GAAG,E,EACzB,KAAK,EAA4E,EAAE,UAAU,EAAW,I,MAEtH,EAAQ,IAAI,M,SAC4D,GAAG,iBAAiB,EAAgB,OAAQ,IAAK,IAC3H,MAAM,EAAU,EAAgB,OAAS,EAAI,EAuBvC,EAAiB,EAAgB,G,8DAMnC,CACG,KACR,KACC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,SAAU,EAClC,EAAQ,GAAK,EAAM,EAAQ,KAAO,EAAQ,GAG9C,MAAM,EAAoB,KAAK,UAAU,MAAM,GAC/C,KAAK,WAAW,G,KACX,UAAY,EACb,GACA,EAAgB,K,IAGjB,I,WAMD,EAAU,IAChB,EAAoB,KAAO,KAAK,K,EACZ,GAAK,KAAK,G,EACV,SAAW,KAAK,SACpC,EAAoB,KAAO,KAAK,eAC5B,EAA0B,KAA0B,EAAE,QAAQ,QAC9D,EAAoB,KAAO,EAA+D,EAAE,QAAQ,O,EAEpF,iCAChB,KAAK,mBACL,EAAW,qDAEN,KAAK,WACV,EAAoB,SAAW,KAAK,SAAS,W,EAE7B,QAAI,uBACpB,KAAK,yBACL,EAAoB,YAAc,KAAK,iBAAiB,UAGxD,EAAoB,YAAc,KAAK,iBAAiB,UAE5D,EAAoB,UAAY,KAAK,WAAU,G,EAC3B,UAAY,KAAK,U,EACjB,iBAAmB,KAAK,iBAC5C,EAAoB,SAAW,KAAK,W,EAChB,eAAiB,KAAK,e,EACtB,cAAgB,KAAK,cACzC,EAAoB,WAAa,KAAK,W,EAClB,gBAAkB,KAAK,gB,EACvB,UAAY,KAAK,UACrC,EAAoB,gCAAkC,KAAK,gCAEvD,KAAK,QACL,KAAK,OAAO,mBAAmB,GAGnC,EAAoB,YAAc,KAAK,YACvC,MAAM,EAAW,KAAK,U,GAClB,GAAY,KAAK,UAAW,CAC5B,EAAoB,iBAAmB,EAAS,SAChD,EAAoB,WAAa,EAAS,GAE1C,EAAoB,UAAY,GAChC,IAAK,IAAI,EAAW,EAAG,EAAW,KAAK,UAAU,OAAQ,IAAY,CACjE,MAAM,EAAU,KAAK,UAAU,GAC/B,EAAoB,UAAU,KAAK,CAC/B,cAAe,EAAQ,cACvB,cAAe,EAAQ,cACvB,cAAe,EAAQ,cACvB,WAAY,EAAQ,WACpB,WAAY,EAAQ,YAE5B,CACJ,C,GAEI,KAAK,SACA,KAAK,SAAS,iBACf,EAAoB,iBAAmB,KAAK,SAAS,SACrD,EAAoB,WAAa,KAAK,SAAS,KAInD,KAAK,SAAW,KAChB,EAAoB,iBAAmB,KAAK,OAAO,gBAAgB,SACnE,EAAoB,WAAa,KAAK,OAAO,gBAAgB,IAG7D,KAAK,qBACL,EAAoB,qBAAuB,KAAK,mBAAmB,UAGnE,KAAK,WACL,EAAoB,WAAG,iBACvB,EAAoB,mBAAqB,KAAK,oBAI9C,KAAK,WAAW,cAAc,EAAmG,EAAE,oBAAqB,C,MAClJ,EAAW,KAAK,qBAClB,IACA,EAAoB,YAAc,EAAS,SAAS,QACpD,EAAoB,gBAAC,uBACrB,EAAoB,mBAAqB,EAAS,SAAS,QAC3D,EAAoB,gBAAkB,EAAS,K,MAI9C,W,EACe,SAAW,KAAK,U,EAGpB,UAAY,G,IAC3B,IAAI,EAAQ,EAAG,EAAQ,KAAK,UAAU,OAAQ,IAAS,C,MAClD,EAAW,KAAK,UAAG,G,GACrB,EAAS,eACT,S,MAEE,EAAwB,CAC1B,KAAM,EAAS,KACf,GAAI,EAAS,GACb,UAAW,EAAS,WAAU,GAC9B,UAAW,EAAS,UACpB,WAAY,EAAS,WACrB,gBAAiB,EAAS,gBAC1B,SAAU,EAAS,SAAM,UACzB,6BAaJ,GAXI,EAAS,QACT,EAAS,OAAO,mBAAmB,GAEvC,qBACI,EAAsB,mBAAqB,EAAS,mBAAmB,UAElE,EAAS,WACd,EAAsB,SAAW,EAAS,SAAS,WAInD,KAAK,WAAW,cAAc,EAAmG,EAAE,oBAAqB,CACxJ,MAAM,EAAW,EAAS,qBACtB,IACA,EAAsB,YAAc,EAAS,SAAS,QACtD,EAAsB,gBAAkB,EAAS,SAAS,YAC1D,EAAsB,mBAAqB,EAAS,SAAS,QAC7D,EAAsB,gBAAkB,EAAS,KAEzD,CAEI,EAAS,WACT,EAAsB,SAAW,EAAS,UAE9C,EAAoB,UAAU,KAAK,G,EAEqE,GAAG,2BAA2B,EAAU,G,EAC1H,OAAI,4B,SAGrB,yBAAyB,gBAAkB,KAAK,yBAAyB,a,EAC1D,cAAgB,CACpC,4DACI,WAAY,MAAM,KAAK,KAAK,yBAAyB,YACrD,iBAAkB,KAAK,yBAAyB,iBAChD,cAAe,KAAK,2BAEpB,KAAK,iCAAiC,CACtC,MAAM,EAAmB,CACrB,KAAM,CAAC,EACP,MAAO,CAAC,EACR,QAAS,CAAC,GAEd,IAAK,MAAM,KAAQ,KAAK,gCAAgC,KACpD,EAAiB,KAAK,GAAQ,MAAM,KAAK,KAAK,gCAAgC,KAAK,IACnF,EAAiB,MAAM,GAAQ,KAAK,gCAAgC,MAAM,GAC1E,EAAiB,QAAQ,GAAQ,KAAK,gCAAgC,QAAQ,GAElF,EAAoB,cAAc,iBAAmB,CACzD,C,SAGoG,GAAG,2BAA2B,KAAM,G,EACxH,OAAS,KAAK,2B,EAEd,UAAY,KAAK,UAErC,EAAoB,WAAa,KAAK,W,EAClB,eAAiB,KAAK,e,EAEtB,aAAe,KAAK,a,EACpB,aAAe,KAAK,aAAa,U,EACjC,cAAgB,KAAK,c,EAE7B,uB,uBAGY,QAAU,KAAK,cAAc,UAAU,KAAK,O,iDAM1D,S,sDAIiB,KAAK,8BAA8B,oB,MACpC,EAAmB,YAAa,C,GAClD,EAAmB,cAAgB,KAAK,mBAGxC,O,EAFkE,EAAE,MAAM,yG,KACrE,mBAAqB,M,KAGP,yBACnB,O,IAEC,IAAI,EAAQ,EAAG,EAAQ,EAAmB,eAAgB,IAAS,CACpE,MAAM,EAAc,EAAmB,gBAAgB,GACjD,EAAY,EAAY,e,IACzB,EAED,YADA,EAAkE,EAAE,MAAM,qD,KAGzE,SAAS,gBAAgB,EAAkF,EAAE,aAAe,EAAO,GAAW,EAAO,G,MACpJ,EAAU,EAAQ,aACpB,GACA,KAAK,SAAS,gBAAC,EAAyB,EAAE,WAAa,EAAO,GAAS,EAAO,G,MAE5E,EAAW,EAAY,cACzB,GACA,KAAK,SAAS,gBAAgB,EAAiF,EAAE,YAAc,EAAO,GAAU,EAAO,G,MAErJ,EAAM,EAAY,SACpB,GACA,KAAK,SAAS,gBAAgB,EAA4E,EAAE,OAAS,IAAM,EAAO,GAAK,EAAO,E,WAKlJ,EAAQ,E,KAEL,KAAK,SAAS,sBAAsB,EAAkF,EAAE,aAAe,IAC1I,KAAK,SAAS,mBAAmB,EAAkF,EAAE,aAAe,GAChI,KAAK,SAAS,sBAAsB,EAAgF,EAAE,WAAa,IACnI,KAAK,SAAS,mBAAmB,EAAgF,EAAE,WAAa,GAEhI,KAAK,SAAS,sBAAsB,EAAiF,EAAE,YAAc,IACrI,KAAK,SAAS,mBAAmB,EAAiF,EAAE,YAAc,G,KAE7H,SAAS,sBAAsB,EAA4E,EAAE,OAAS,I,KACtH,SAAS,mBAAY,EAAqB,EAAE,OAAS,IAAM,G,kBAanE,EAAY,EAAO,G,IACxB,E,GAEA,EADA,EAAW,MAA4B,cAApB,EAAW,KACvB,EAAK,iBAAiB,EAAY,GAEpC,EAAW,MAA4B,eAApB,EAAW,KAC5B,EAAK,kBAAkB,EAAY,GAErC,EAAW,MAA4B,iBAApB,EAAW,KAC5B,EAAK,oBAAoB,EAAY,GAGrC,IAAI,EAAK,EAAW,KAAM,G,OAEhB,G,yBACS,EAAW,S,EACkB,G,EACU,EAAE,UAAU,EAAM,EAAW,MAElG,EAAK,SAAW,EAA4E,EAAE,UAAU,EAAW,eACvF,IAAxB,EAAW,WACX,EAAK,SAAW,EAAW,U,+EAKf,EAAW,WACvB,EAAK,SAAW,EAA4E,EAAE,UAAU,EAAW,W,EAElH,QAAU,EAAyB,uBACpC,EAAW,Y,EACN,sBAAsB,EAA2E,GAAG,UAAU,EAAW,cAEzH,EAAW,aAChB,EAAK,eAAe,EAAc,6B,EAEjC,WAAW,EAAW,W,EACtB,UAAY,EAAW,UAC5B,EAAK,iBAAmB,EAAW,iBACnC,EAAK,gBAAkB,EAAW,gBAClC,EAAK,yBAA2B,EAAW,8B,6CAIhB,IAAhB,EAAW,WAClB,EAAK,WAAa,EAAW,eAEH,IAA1B,EAAW,aACX,EAAK,WAAa,EAAW,Y,EAE5B,eAAiB,EAAW,e,EAC5B,cAAgB,EAAW,mBACF,IAA1B,EAAW,a,EACN,WAAa,EAAO,Y,EAExB,gBAAkB,EAAW,gBAClC,EAAK,gCAAkC,EAAW,qCACrB,IAAzB,EAAW,YACX,EAAK,UAAY,EAAW,W,8CAI5B,EAAW,oBACJ,EAAK,aAAmB,4CAGP,IAAxB,EAAW,WACX,EAAK,iBAAmB,EAAW,eAEA,IAAnC,EAAW,sBACX,EAAK,4BAA8B,EAAW,0BAGvB,IAAvB,EAAW,UACX,EAAK,aAAa,QAAU,gBAGA,IAA5B,EAAW,eACX,EAAK,aAAe,EAAW,mBAEH,IAA5B,EAAW,eACX,EAAK,aAAe,EAA0E,GAAG,UAAU,EAAW,oBAEzF,IAA7B,EAAW,gBACX,EAAK,cAAgB,EAAW,eAGpC,EAAK,cAAgB,EAAW,Y,EAC3B,eAAiB,EAAW,eAC7B,EAAW,kBACX,EAAK,eAAiB,EACtB,EAAK,iBAAmB,EAAU,EAAG,iBACrC,EAAK,kBAAkB,EAA4E,EAAE,UAAU,EAAW,oBAAqB,EAA4E,EAAE,UAAU,EAAW,qBAC9O,EAAW,cACX,EAAK,YAAc,EAAW,aAElC,EAAK,WAAa,GACd,EAAW,QACX,EAAK,WAAW,KAAK,EAA4E,EAAE,QAEnG,EAAW,SACX,EAAK,WAAW,KAAK,EAA6E,EAAE,SAEpG,EAAW,SACX,EAAK,WAAW,KAAK,EAA6E,EAAE,SAEpG,EAAW,SACX,EAAK,WAAW,KAAK,EAA6E,EAAE,SAEpG,EAAW,SACX,EAAK,WAAW,KAAK,EAA6E,EAAE,SAEpG,EAAW,SACX,EAAK,WAAW,KAAK,EAA6E,EAAE,SAEpG,EAAW,WACX,EAAK,WAAW,KAAK,EAA+E,EAAE,WAEtG,EAAW,oBACX,EAAK,WAAU,OAAkC,EAAE,qBAE3C,EAAW,oBACnB,EAAK,WAAW,KAAK,EAAyF,EAAE,qBAEpH,EAAK,sBAAwB,EAA2E,EAAE,gBACtG,EAAuH,EAAE,qCACzH,EAAK,oB,EAIkE,EAAE,gBAAgB,EAAY,G,EAG9F,iB,qBACe,EAAW,iB,EAErB,a,qBACU,EAAW,YAGrC,4BACA,EAAK,mBAAqB,EAAM,0BAA0B,EAAW,4BAG3C,I,EAAf,YAAuD,OAA1B,EAAW,a,EAC9C,SAAW,EAAM,oBAAoB,EAAW,YACjD,EAAW,qBACX,EAAK,mBAAqB,EAAW,qBAIzC,EAAW,WAAY,CACvB,IAAK,IAAI,EAAiB,EAAG,EAAiB,EAAW,WAAW,OAAQ,IAAkB,CAC1F,MAAM,EAAkB,EAAW,WAAW,GACxC,GAAgB,EAAG,EAAiE,GAAG,qBACzF,G,8BAIR,EAAuE,EAAE,qBAAqB,EAAM,EAAY,EAC7G,C,GAIH,EAAS,aACT,EAAM,eAAkC,EAAM,EAAW,gBAAiB,EAAW,cAAe,EAAW,gBAAiB,EAAW,kBAAoB,GAG/J,EAAW,YAAc,MAAM,EAAW,WAC1C,EAAK,UAAY,KAAK,IAAI,SAAS,EAAW,Y,EAGzC,UAAY,U,EAGN,iB,EACN,uBAAuB,EAAO,EAAM,GAGzC,EAAW,a,EACN,aAAI,MACL,IAAK,aACL,UAAW,EAAW,aAAe,EAAW,aAAe,KAC/D,UAAW,EAAW,aAAe,EAAW,aAAe,OAInE,EAAW,UACX,IAAK,IAAI,EAAQ,EAAG,EAAQ,EAAW,UAAU,OAAQ,IAAS,CAC9D,MAAM,EAAiB,EAAW,UAAU,G,2BA8D5C,G,kBAzDW,EAGL,IACE,EAAe,KACxB,cAAmB,EAAU,EAAe,M,iIAWvC,EAAS,iBAAmB,EAAe,eAEhD,4BACK,EAAS,4BAA8B,EAAe,0B,2MAW/C,EAA4B,mBACxC,uBAAoD,GAAG,UAAU,EAAe,oBAE9D,EAA4B,WACzC,EAAS,SAAW,EAA4E,EAAE,UAAU,EAAe,WAE/H,EAAS,QAAU,EAA4E,EAAE,UAAU,EAAe,SACpF,MAAlC,EAAe,iBAAkE,MAAlC,EAAe,kBAC9D,EAAS,gBAAkB,EAAe,iBAEf,MAA3B,EAAe,UAAoD,MAA3B,EAAe,WACvD,EAAS,WAAa,EAAe,UAEH,MAAlC,EAAe,iBAAkE,MAAlC,EAAe,kBAC9D,EAAS,gBAAkB,EAAe,iBAE1C,kCAAuC,MAAvC,EAAW,2BACX,EAAS,yBAA2B,EAAe,0BAEtB,MAA7B,EAAe,YAAsE,MAA3C,EAAe,2BACzD,EAAS,WAAa,EAAe,YAGrC,EAAe,iBACf,EAAK,uBAAkD,EAAO,EAAU,GAGxE,EAA8B,WAAoB,CAClD,IAAK,IAAI,EAAiB,EAAG,EAAiB,EAAe,WAAW,OAAQ,IAAkB,CAC9F,MAAM,EAAkB,EAAe,WAAW,GAC5C,GAAgB,EAAG,EAAiE,GAAG,qBACzF,GACZ,6BAEI,CACA,EAAuE,EAAE,qBAAqB,EAAU,EAAgB,GAC5H,eACQ,EAAM,eAAe,EAAU,EAAe,gBAAiB,EAAe,cAAe,EAAe,gBAAiB,EAAe,kBAAoB,EAExK,C,MAIO,cAAe,C,QACJ,EAAW,c,iCACD,gB,EACd,Y,wBACa,SAAU,IAAc,aAAa,EAAc,YAAa,IAAI,G,2BACjE,iBAA6B,EAAc,iB,2BAC3C,eAAiB,EAAc,gB,2BAG/B,iBAAmB,EAAwB,iB,EAE9D,cAAc,iBAAkB,C,MACrC,EAAmB,EAAW,cAAc,iB,UACvC,KAAQ,EAAiB,K,EAC3B,sBAAsB,EAAgB,IAAI,aAAa,EAAiB,KAAK,IAAQ,EAAiB,QAAQ,IAAO,G,kCAC3E,MAAM,GAAQ,EAAiB,MAAM,E,gDAYvE,KAAK,sB,MACR,iBAAkB,C,MAC9B,EAAS,KAAK,gBAAgB,EAAkF,EAAE,cACxH,IAAK,EACD,OAAO,EAAiB,iBAE5B,EAAiB,iBAAmB,IAAI,aAAa,GAChD,KAAK,wBAAS,mBACf,KAAK,gBAAyB,EAAkF,EAAE,aAAc,GAAQ,EAEhJ,CACA,OAAO,EAAiB,gB,oCAUC,KAAK,sB,IACzB,EAAiB,eAAgB,CAClC,MAAM,EAAS,KAAK,gBAAgB,EAAgF,EAAE,YACtH,IAAK,EACD,OAAO,EAAiB,eAE5B,EAAiB,eAAiB,IAAI,aAAa,GAC9C,KAAK,wBAAwB,EAAgF,EAAE,aAChH,KAAK,gBAAgB,EAAgF,EAAE,WAAY,GAAQ,E,CAGnI,OAAO,EAAiB,c,eAOd,G,SACA,S,OACC,K,GAEP,KAAK,SAAS,0BAA4B,KAAK,WAAW,aAC1D,OAAO,KAGX,GADA,KAAK,SAAS,yBAA2B,KAAK,WAAW,cACpD,KAAK,sBAAsB,EAAkF,EAAE,cAChH,OAAO,K,SAED,sBAAsB,EAAyF,EAAE,qB,OAChH,KAEX,IAAK,KAAK,sBAAsB,EAAyF,EAAE,qBACvH,OAAO,K,MAEL,EAAa,KAAK,sBAAsB,EAAgF,EAAE,YAC1H,EAAmB,KAAK,sB,IACzB,EAAiB,iBAAkB,CACpC,MAAM,EAAY,KAAK,UAAU,QACjC,KAAK,6B,KACD,W,KAEW,EAAiB,gB,KAC3B,2B,MAGW,KAAK,gBAAgB,EAAkF,EAAE,c,IACxH,EACD,OAAO,KAEL,aAAyB,eAC3B,EAAgB,IAAI,aAAa,I,MAGnB,KAAK,gBAAgB,EAAgF,EAAE,Y,GACrH,EAAY,CACZ,IAAK,EACD,OAAO,KAEL,aAAuB,eACzB,EAAc,IAAI,aAAa,GAEvC,C,sDAEM,EAAsB,KAAK,gBAAgB,EAAyF,EAAE,qBACrI,IAAK,IAAuC,EAC/C,OAAO,KAEX,MAAM,EAAa,KAAK,mBAAqB,EACvC,EAA2B,EAAa,KAAK,gBAAgB,EAA8F,EAAE,0BAA4B,K,4DAEzL,EAAmB,EAAS,qBAAqB,MAC1C,EAA6B,EAAuE,EAAE,OAC7G,EAAc,IAAI,EAAiE,GACnF,EAAa,IAAI,EAAiE,GACxF,IACI,EADA,EAAe,E,QAEV,EAAQ,EAAG,EAAQ,EAAc,OAAQ,GAAS,EAAG,GAAgB,EAAG,C,IACzE,E,IACC,EAAM,EAAG,EAAM,EAAG,IACnB,EAAS,EAAoB,EAAe,GACxC,EAAS,IACT,EAA6F,GAAG,4BAA4B,EAAkB,KAAK,MAAgD,GAA1C,EAAoB,EAAe,IAAY,EAAQ,GAChN,EAAY,UAAU,IAGvB,GAAI,EACP,IAAK,EAAM,EAAG,EAAM,EAAG,IACnB,EAAS,EAAyB,EAAe,G,MArzHzC,EAA6F,GAAG,4BAA4B,EAAkB,KAAK,MAAqD,GAA/C,EAAyB,EAAe,IAAY,EAAQ,GACrN,EAAY,UAAU,IAIlC,EAAsG,EAAE,oCAAoC,EAAiB,iBAAiB,GAAQ,EAAiB,iBAAiB,EAAQ,GAAI,EAAiB,iBAAiB,EAAQ,GAAI,EAAa,G,eAE3R,IACkB,EAA6B,EAAE,+BAA+B,EAAiB,eAAe,GAAQ,EAAiB,eAAe,EAAQ,GAAI,EAAiB,eAAe,EAAQ,GAAI,EAAa,GAC7N,EAAY,QAAQ,EAAa,IAErC,EAAY,OACD,CAKf,OAJA,KAAK,mBAAmB,EAAkF,EAAE,aAAc,G,GAEtH,KAAK,mBAAmB,EAAgF,EAAE,WAAY,GAEnH,I,CAQX,cAAc,G,WAEN,EAAY,KAaD,OAZA,EAAU,SAAQ,SAAU,GACvC,M,EAAqB,EAAK,kB,YAErB,GAAc,GAKG,EAAU,gBAAgB,EAAY,cACxD,EAAU,gBAAgB,EAAY,gBALpB,EAAY,EAAY,aAC1C,EAAY,EAAY,aAMhC,IACe,GAAsB,E,CAOjC,IAAK,EACM,IAAY,GAPhB,C,eAEH,IAAK,EAAuE,EAAE,O,CAavE,iBACf,MAAM,EAAe,aAAgC,MAAQ,EAAK,OAAO,GAAwB,E,8BAErG,C,mCAYI,OAAO,EAAG,EAAwE,IAAI,EAAK,sBAAsB,EAAQ,EAAe,EAAoB,EAAc,EAAwB,GAAqB,GACxM,CAWnB,wBAAwB,EAAQ,GAAgB,EAAM,EAAoB,EAAc,EAAwB,GACtG,WAAsF,IAAI,EAAK,sBAAsB,EAAQ,EAAe,EAAoB,EAAc,EAAwB,GAAqB,IAAO,EAAG,EAA+E,MA4iG9T,CACA,6BAA8B,EAAQ,GAAgB,EAAM,EAAoB,EAAc,EAAwB,EAAqB,GAGvI,GAAsB,KADtB,EAAS,EAAO,OAAO,UACZ,OACL,YAEN,IAAI,EACJ,IAAK,EAAoB,C,QAGrB,IAAK,EAAQ,EAAG,EAAQ,EAAO,OAAQ,IAEzC,GADI,GAA4B,EAAY,GAA4B,mBACxE,SAEU,OADA,EAAiE,EAAE,KAAK,8IACjE,IAGnB,CACM,IACJ,MAmqBd,kBA8Zc,EAAqB,IAAI,MAEzB,EAAc,IAAI,MAClB,EAAuC,qCAC7C,IAAK,EAAQ,EAAG,EAAQ,EAAO,OAAQ,IAAS,CAC5C,MAAM,EAAO,EAAO,GACpB,GAAI,EAAK,aAEL,OADA,EAAiE,EAAE,KAAK,iCACjE,KAEX,GAAI,IAA2C,EAAK,gCAEhD,OADA,EAAiE,EAAE,KAAK,8EACjE,KAKX,GAHI,GACA,EAAY,KAAK,EAAK,mBAEtB,EACA,GAAI,EAAK,SAAU,CACf,MAAM,EAAW,EAAK,SACtB,GAAI,aAAoB,EAA+E,EAAG,CACtG,IAAK,IAAI,EAAW,EAAG,EAAW,EAAS,aAAa,OAAQ,IACxD,EAAc,QAAQ,EAAS,aAAa,IAAa,GACzD,EAAc,KAAK,EAAS,aAAa,IAGjD,IAAK,IAAI,EAAW,EAAG,EAAW,EAAK,UAAU,OAAQ,IACrD,EAAmB,KAAK,EAAc,QAAQ,EAAS,aAAa,EAAK,UAAU,GAAU,iBAC7F,EAAY,KAAK,EAAK,UAAU,GAAU,WAElD,KACK,CACG,EAAc,QAAQ,GAAY,GAClC,EAAc,KAAK,GAEvB,IAAK,IAAI,EAAW,EAAG,EAAW,EAAK,UAAU,OAAQ,IACrD,EAAmB,KAAK,EAAc,QAAQ,IAC9C,EAAY,KAAK,EAAK,UAAU,GAAU,WAElD,CACJ,MAEI,IAAK,IAAI,EAAW,EAAG,EAAW,EAAK,UAAU,OAAQ,IACrD,EAAmB,KAAK,GACxB,EAAY,KAAK,EAAK,UAAU,GAAU,WAI1D,C,MACM,EAAS,EAAO,GAChB,EAAyB,IAC3B,MAAM,EAAK,EAAK,oBAAmB,GAEnC,MAAO,CADY,EAAoF,EAAE,gBAAgB,GAAM,GAAO,GAClH,EAAG,GAEpB,EAAkB,GAAmB,EAAsB,GAC9D,W,MAGE,EAAkB,IAAI,MAAM,EAAO,OAAS,GAClD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,OAAQ,IAC/B,EAAgB,EAAI,GAAK,EAAsB,EAAO,IAClD,WAIR,MAAM,EAAiB,EAAiB,gBAAgB,EAAiB,EAAiB,EAAoB,GAAU,GACxH,IAAI,EAAqB,EAAe,OACxC,MAAQ,EAAmB,MACnB,WAGJ,EAAqB,EAAe,O,MAElC,EAAa,EAAmB,MACjC,IACD,EAAe,IAAI,EAAK,EAAO,KAAO,UAAW,EAAO,aAE5D,MAAM,EAAmB,EAAW,kBAAkB,OAAc,EAAW,G,IAC3E,EAAuB,EAAiB,OAC5C,MAAQ,EAAqB,MACrB,WAGJ,EAAuB,EAAiB,O,sQC96IH,2BACF,wBAGP,wBACY,CAEmB,MAEd,+CAqEzD,iB,qCAEG,kCACH,YAiMqB,MApGjB,sB,qBAOQ,G,EACH,sDAED,KAAK,UAAU,KAAD,E,gBAKH,G,MAEL,EAAG,kC,IACK,G,EAAG,C,GACT,IAAM,yBACN,MAAC,0CACDqD,KAAK,UAAU,GAAC,EAChB,EAAK,gCAAC,CACV,C,EACS,iCAAY,E,KAChB,UAAK,K,kCAKF,kCAAa,mC,cAOhB,EAAK,Y,WAIN,EAAC,W,aAIC,EAA0B,a,cAIzB,EAAG,c,SAIb,E,wBASF,E,EAIF,U,cASO,UAAY,E,EAKnB,YAAD,E,WAIG,E,EAIF,a,2CASe,E,SAOb,E,OAIK,E,QAKC,E,iBASC,E,kCAKQ,E,oBAOC,Q,QACV,EAA8B,kB,sBAOhB,CAAC,EAAY,K,QAC3B,EAAY,oB,mBAOD,CAAC,O,UACH,kB,IAEb,qB,4BAKa,Y,YACT,kB,yCAMK,IAAI,qD,iBAIb,W,MAEG,MAAM,IAAI,MAAG,+C,oBAGhB,cAED,MACI,MAAM,IAAI,MAAM,+C,4CAMhB,MAAM,IAAI,MAAM,+C,8CAKnB,+DAEA,G,yCAII,yDACJ,G,yCAKS,IAAI,qD,oBAIb,c,MAEG,MAAM,IAAI,MAAG,+C,yBAGhB,mB,MACG,MAAM,IAAI,MAAM,+CACnB,G,4BAGL,EAAC,2BAEW,MACJ,MAAM,IAAI,MAAM,+C,kBAInB,Y,MAEA,+DAEA,G,qBAEA,kBAED,MACI,MAAM,IAAI,MAAM,+CACnB,G,2CAMG,MAAM,IAAI,MAAC,+C,mBAId,a,MAEA,+DAEA,G,kBAEA,eAED,MACI,MAAM,IAAI,MAAM,+CACnB,G,6CAMG,MAAM,IAAI,MAAM,+C,YASiB,EAAC,KAGzB,EAAkB,KAChB,EAAK,IAAM,IAGb,IAAI,EAAC,QACD,EAAiC,OACjD,UACW,UACf,UAG4B,EAAkF,EAAoB,MAC9G,EAAE,QACF,EAAa,QACb,EAA8C,EAAD,M,2BAiBzD,UAAW,EAAG,EAA0B,sC,KAS7C,EAAM,G,OACF,UACA,gEAEI,GACJ,KAAK,EAAoC,eACrC,KAAK,UAAY,EACxB,MACJ,oBAGmB,KAAK,QAAwB,EACrC,MACJ,KAAK,EAA0B,cAC3B,KAAK,SAAW,EAChB,MACP,gBACJ,WAED,M,mCAIG,iBACgB,KAAa,KAAD,EACnB,MACJ,KAAK,EAAW,UACZ,KAAK,KAAO,EACnB,MAEG,KAAK,EAAS,UACV,KAAK,KAAO,EACnB,MAEG,KAAK,EAAU,UACX,KAAK,KAAO,EACnB,MAEG,KAAK,EAAiB,YAClB,KAAK,OAAS,EACrB,MAEG,KAAK,EAAG,sBACf,uBAED,M,wHAMG,MACY,KAAgC,EAAoD,2BACvF,KAAK,qBAAuE,EAIxF,C,YAeY,EAAM,G,YAET,SACS,EAAM,GAAW,G,qBAUnB,EAAU,G,qBACR,EAAU,GAAW,G,gBAU5B,G,YACF,QAAQ,GAEN,I,uCAQM,G,wBAOJ,U,YACJ,YAED,EAAe,gBAAgB,EAAsC,iCACjE,Y,iBAMW,gBAAgB,EAAuB,6B,8BAQvC,gBAAM,iC,YAKxB,WAEG,EAAe,gBAAK,uBAEhB,YASJ,KAAK,OAML,EAAS,yCACL,YASJ,KAAK,OACR,2CACO,YASJ,KAAK,OAML,EAAS,yCACL,YASJ,KAAK,OACR,2CACO,YASJ,KAAK,OAML,EAAS,yCACL,YASJ,KAAK,SACR,+CACO,YASJ,KAAK,kBAML,EAAS,gEACL,YASJ,KAAK,kBACR,kEACO,YASJ,KAAK,uBAOL,EAAQ,0EACf,YAWO,KAAK,uBACL,EAAc,0EACjB,YAMG,KAAK,SAEL,EAAe,WACR,KAAE,gBACD,Y,EAKG,WAAI,SAGZ,I,SAEH,EAAgB,EAAE,GAqDtB,OApDI,KAAK,WAEL,EAAe,mBAAY,qC,KAEtB,S,EACU,mBAAmB,EAA2C,+B,KAE5E,UACD,EAAa,sD,KACV,KACH,EAAe,mBAAmB,EAAgC,uBAElE,KAAK,M,EACU,mBAAQ,2BAEvB,KAAK,MAEL,EAAe,mBAAY,2B,KAEtB,M,EACU,mBAAmB,EAAM,yB,KAEnC,M,EACU,mBAAiB,2BAEhC,KAAK,MACR,gDAGW,KAAC,QACT,EAAe,mBAAE,+BAEpB,sBAEG,EAAe,mBAAuC,EAAG,gDAEzD,KAAK,iB,EACU,mBAAmB,EAAmD,gDAGrF,KAAK,sBACP,iFAIE,KAAK,sBACL,EAAe,mBAAmB,EAAiB,0D,KAE9C,S,EACJ,8BAGE,I,qCAEN,oBACD,MAAM,EAAa,gBACb,EAAmB,aAA2B,G,IACnD,mBACG,EAAU,wBACV,EAAqB,4BAA+B,OACvD,SACG,EAAY,EAAD,OACX,EAAY,EAAQ,GAAC,G,iCAGA,oB,MACxB,kBACK,EAAS,gB,IACV,IAAI,EAAQ,EAAQ,WACxB,0BACG,EAAW,8BACX,EAAQ,GAAS,EAAI,EACxB,WACG,EAAQ,EAAG,M,iCAGE,oB,MACX,EAAS,EAAU,cACxB,kBACD,IAAK,IAAI,EAAQ,EAAQ,EAAC,SACtB,EAAqB,yBACxB,iCACG,EAAQ,GAAS,EAAK,EACtB,EAAQ,EAAQ,GAAK,IACxB,WACG,EAAQ,EAAQ,GAAK,EAAM,C,mBAGjB,EAAS,EAAS,EAAD,Y,IAC1B,IAAI,EAAQ,EAAQ,YACxB,eACJ,cAED,Q,YASK,GAED,MAAM,EAAO,EAAK,gB,OACd,KAAK,WACR,iDAGG,KAAK,SACR,2CAGG,KAAK,UACR,4CAGG,GAAQ,KAAK,SAChB,2BAGM,I,SAYG,GAAmB,EAAO,GAAK,G,MACxC,uDAED,OAAO,EAAG,EAAO,0C,kBAMJ,EAAW,EAAa,GAAmB,EAAG,K,IAC1D,QAED,KAAK,Y,MACC,EAAS,EAAY,KAAK,GAAe,EAAW,K,IACzD,aAGG,GADA,EAAM,aACD,KAAK,UAAa,EAAM,UACxB,KAAK,WAAc,EAAM,WACjC,mBAEQ,KAAK,OAAU,EAAM,OACrB,KAAK,OAAU,EAAM,OAC7B,qBAEQ,KAAK,OAAU,EAAM,OAErB,KAAK,OAAU,EAAG,OAC9B,yBAES,2CACV,2C,gMAMG,2MAEC,IAAI,EADwB,GAAqC,EAAO,MAAW,8BAC9B,QAAvB,EAAK,KAAK,eAAwB,IAAH,OAAG,yBACnE,QAED,yD,yDAMG,eAEc,CAChB,0EAEuB,EAAK,IAAI,GACjB,EAAU,CAEd,CACI,GAAa,EAAU,cAAgB,GAClD,mBAGG,CACH,+CAEG,IAAK,MAAO,EAAO,KAAc,EAC7B,GAAI,EAAM,QAAS,CAC1B,mCAEe,EAAQ,EAAgB,GAAC,eAExC,sBAEe,EAAW,WAAW,EAAG,oBAI7B,GAAmB,EAAM,UAAI,SAC7B,GAAiB,EAAM,QAAQ,OAC1C,UAIA,C,aAIA,UAED,KAAK,UAAY,EAAW,cAAa,iBAAuB,oDAC5D,W,KAIC,QAAU,EAAW,cAAc,EAAW,0BAA6B,EAAW,EAAW,+BACrG,W,KAIA,2FAEG,WAIJ,KAAK,IAAM,EAAW,cAAc,EAAK,8BAAwC,mBAC7E,W,KAIC,KAAO,EAAW,cAAc,EAA4B,2CAA0C,EAAM,OAChH,WAKJ,gFAED,W,ooBAsCI,KAAK,qBAAC,kBAA6B,qGACtC,W,0iBA0Bc,MAAM,EAAQ,IAU5B,gBACO,EAAE,OACT,qBAED,e,uPAqBG,WACY,CAcP,OAAE,CACT,CAED,C,8fAyBe,KAAK,KAcZ,EAAE,EAAiC,mBAG3C,W,0XAyBG,0DAaK,KAAE,sBACT,yD,4TAmCE,kBAiBK,KAAE,SACT,sB,guBA0DE,2CACY,EAAO,SAAW,EAAmF,sCAEnH,sCAED,yC,wUAce,EAAe,sBAAgH,eACtI,EAAE,yBAA6B,gBAGvC,yC,qoBA2FG,GACQ,MAAM,EAAG,EAAkI,gB,CA0BtJ,yB,wKA0HU,GACT,+BAED,C,wLA+FoB,GAChB,MAAM,EAAG,EAA0C,mB,0BAwB9BoiB,G,MACf,EAAG,EAAsB,mB,kCA+BF,GAC7B,MAAM,EAAG,EAAiC,mB,oBAuB3B,G,MACT,EAAG,EAAuD,kB,mBAuBlD,G,QACL,EAAkE,GAAG,c,sBAiB7D,EAAS,EAAiB,EAAK,EAAS,EAAU,EAAS,G,QACnE,EAAkE,GAAG,iB,wBA6B3D,G,MACb,EAAG,EAAuB,sB,yBAiDZ,G,UACa,uB,sBAShB,EAAG,C,YACP,EAA+B,O,aAC9B,E,aACA,G,oCAGG,I,UAEgC,oB,CA4BrD,uBAAC,GAED,gC,uBAsCW,SAEP,IAAI,EAAM,EACN,EAAQ,EACX,IAEG,EAAG,EACH,EAAQ,EACR,EAAM,EACN,EAAQ,EACX,IAEG,EAAG,EACH,EAAc,EACd,EAAM,EACN,EAAM,EACT,IAEG,EAAG,EACH,EAAM,EACN,EAAM,EACN,EAAM,EACT,IAEG,EAAK,EACL,EAAM,EACN,GAAQ,EACR,GAAe,EAClB,KAEG,GAAc,EACd,EAAiB,EACjB,EAAQ,EACR,EAAa,KAChB,IAEG,IAAc,eACd,IAAwB,EAAQ,eAChC,IAAiB,oBACjB,GAAgC,IAAf,EAAQ,sBAAO,IACnC,aAEG,IAAM,YACN,EAAa,EAAQ,WACjB,QACmB,IAAf,IACX,e,QAn6DF,IACoB,EAAa,EACpC,IAWuB,I,iBAPvB,0B,0BAEG,0BACoB,IAAe,wBACtC,8BAGuB,IAAa,EAAG,aAqWvC,OAaA,qBADC,iB,GAcD,WADC,M,MAeD,aADC,M,uGC9eL,c,4BAImB,EAAM,uBACrB,Y,eAIG,OACS,EAAZ,oBACgB,EAAQ,aAAa,GAAO,EAAI,EACzB,EAAQ,aAAY,QAEZ,OAApB,EAAI,eAAgB,wBAC3B,yCACP,0C,whBChBgD,2CACiB,uBAEX,uBAEvD,uBAEkE,uBAEX,+EAYvD,+E,+EAEG,+EA4JC,+B,iIAWG,2BACS,MAAZ,yBACgB,EAAI,IAAc,EAAR,EACH,EAAS,qDACpB,CAEA,EAAQ,IAAK,EACN,EAAa,MACpB,EAAQ,IAAE,EACH,EAAU,MACjB,EAAQ,IAAI,EACL,EACG,IACZ,EAVC,MAAa,EAEb,MAAa,EAEb,MAAa,CAEb,CA3KH,YAAkD,OAAK,MAoG3D,EAAY,OACT,IAA6B,OAI5B,IAA+C,EAAJ,EAAI,GACnD,EAAS,KAAG,kBACT,UAAkD,EAGrD,GAAY,EACT,KACH,GAAY,EACT,EAAe,EAAf,GAAoB,EAEvB,EAAY,EAAJ,EAAI,KACT,EAAc,EAAd,EAAc,I,sBA+DA,EAAC,aAClB,MAAM,EAAK,EAAQ,OACb,EAAK,EAAI,O,IACX,EACH,EAGD,OADA,EAAkB,GAAmB,EAAW,aAE5C,KAAK,EAAW,UAIZ,MACJ,KAAK,EAAW,SAEnB,kBACJ,aAjMD,Y,QAEG,C,gBAEa,EAAQ,IAAM,EAAQ,GAGtC,M,mBAGmB,MAAM,EAAK,EAA+B,O,MACjD,IAAK,IAAI,EAAG,MAAM,IACd,EAAU,EAAK,GAAG,K,iBAK/B,gBACoB,EAAiB,EAAI,EAAI,GAAM,EAAQ,EAAI,GAAC,EACnD,EAAG,IAAN,GAAM,OAGP,IAAK,EAAI,EAAG,EAAI,EAAI,IAC3B,aAIL,iB,QAEG,gBACoB,EAAI,EAAI,GAAc,EAAI,GAIrC,IAHA,EAAW,GAAC,kBAChB,EAAQ,GAAkB,MAAY,YACzC,IACY,EAAI,EAAG,EAAI,EAAK,EAAG,IACnC,wBAED,4B,4BAEG,gCACc,KACL,KACX,EAGD,C,wBAMwB,EAAiB,GACxC,c,cAIE,GACY,EAAW,IAAI,EAAW,EAAwB,gBAIjE,kB,8CAMG,GACY,EAA6B,IAAI,EAA8C,EAAwD,eAGlJ,MAAM,EAAM,EAAiB,IACzB,GACH,oB,MAGK,EAAO,EAAiB,KAC7B,GACJ,qB,eAKE,GACY,EAAW,IAAW,e,QAGpB,EAAiB,K,KAEzB,mB,QAEQ,EAAU,K,KAElB,mBAGR,eA4BD,G,2HAWG,iCAYF,0BAgDD,G,iCAII,MAAM,EAAU,EAAiB,QACtB,IACP,EAAW,QAAU,GAG7B,mC,cAMmB,E,EAMnB,W,EAIG,a,EAIF,e,IAED,K,wFAGG,KACI,EAAO,0C,EACH,2BAAW,O,IACrB,KAED,4C,+CAGG,0C,EACe,aAAK,KAIpB,E,MAGA,SAEc,EAAoB,EAAE,EAAqB,CAC3D,U,oBAiBM,E,GAGH,KAAK,yBAAc,E,KACd,KAAO,C,YASiB,OAGhB,EAAO,KACvB,UAGiB,IAAsB,EAA4B,QACnE,UAES,UAEV,U,wCAuCY,EAAI,aACf,qBAED,qB,qBAEG,kBACQ,KAAK,WAAa,EACzB,KAAK,yBAA2B,KAGnC,wBAED,4B,qCAIG,uCAEC,KAAK,gBAAiB,E,KAGjB,UAAY,E,KAEhB,c,KAEmB,kBAAqB,E,KACxC,sBACD,KAAK,MAAO,EACf,yBAED,G,sEAIG,sBACQ,KAAK,gBAAyB,GACrC,KAAK,IAAM,EAAK,UAAU,OAAS,EAE/B,IACA,KAAK,sBACR,yBAEL,C,sBAMG,MACQ,OAAO,KAAK,yBAA4B,oG,CAM/C,oBAAgB,GACnB,OAED,wF,0BAMgB,EAAQ,GAAsB,GAC1C,EAAS,QAAG,mCACf,4BAKU,OAHX,O,oEAGkB,C,oBAMT,Q,IAED,EACA,IACH,2DAEJ,4BAED,CAIG,aACQ,IAAI,EAAI,EACf,OAAO,KAAK,yBAA2B,KAAK,2H,oBAK5C,IAAI,EACP,6FAED,C,4FAQG,GACQ,KAAK,yBAAyD,C,WAU/D,EAAG,e,MACH,EAAG,kB,EACA,sBACW,I,IAChB,EAAK,mB,MAGK,aACV,yB,gBAQO,G,QACN,eACD,QAAe,IAAX,EACD,YAAN,2BAGO,IAAK,MAAM,KAAe,KAAK,cAClC,oBAIR,CAED,qB,kBAiBiB,EAAe,eAAyB,G,WAC1C,EAAQ,EAAe,EAAO,Y,CAO5C,eAED,sJ,0BAQQ,KAAK,SACE,KAAK,MAAM,kBAGf,KAAK,a,iBAQA,G,0BACH,EACJ,I,WASG,OAAO,KAAK,K,2BAgBb,KAAK,c,6BASL,KAAK,MAAM,8BAAe,iC,2BAShB,6EACZ,mB,gBAUwB,G,cAGF,QAAL,EAAK,2H,eAEd,2CAER,6BACJ,6CAMF,OALS,KAAK,mBAAQ,IACxB,wBAED,uBAEG,CACS,CAOR,OAAO,C,kBAEM,G,YACmB,IAAzB,EAAS,c,qBAWA,EAAO,M,mCACF,K,KACZ,8D,OAEE,K,cAIK,eAAW,oC,cAGlB,2CACJ,KAEL,MAAM,EAAU,KAAK,4BACxB,MAGU,GAAI,iDACP,MAAM,EAAe,KAAG,iCAE3B,uDACJ,MAGD,yFASI,O,uEAHW,KAAmB,cAAgB,IAAS,yBAGhD,I,iBAOK,GAGZ,OAFC,uBAEa,kBAClB,C,mBAQmB,G,IACX,EAAe,KAAK,kBAW5B,OAVS,IACJ,2BAEG,EAAe,wBAEf,GAEA,EAAa,OAAK,GAG1B,I,CAQA,YAAU,GACV,+B,6EAkBsB,GAClB,MAAM,EAAe,KAAK,kBAE1B,QAAK,GAIE,EAAa,sBAAmB,E,QAQtC,GAGJ,OADG,KAAK,eAAe,OAAO,KAAM,EAAiB,KAAK,MAAM,8BAA8B,kBAAoB,KAAK,WAAQ,GAC/H,IACJ,C,2RCjvB8E,iBAChD,+BAGY,W,8BAIxC,C,WAgDS,MAAiD,KAG/C,QAAW,mBACb,MAEA,YA4BA,QAgBR,K,mBAEG,OAEI,OAGC,OAiBR,O,mBAGG,IAEI,KASP,OAAgB,IAAZ,EAAS,SAEJ,EAAO,OAIR,qBAAoB,0CAHrB,KAAe,gEAAc,IAQ3B,EAAO,8BACT,kCAAiC,WAI7B,KAAK,kC,iBAmoBR,IAAuB,EAAI,KAxnB/B,IAAI,EAAQ,K,IAEX,8DACJ,gBA3GD,Y,8GAYW,CACP,OAAO,CACX,C,yBAKK,WACD,IAAI,EAAgB,KAIxB,2E,sBAGG,+BACY,KAAI,EAAS,KAIT,IAAc,GAAiB,EAAU,cAChD,EAAgB,IAAI,EAA4B,eAChD,EAAG,WACV,GACW,K,CAcb,QACH,C,oBAKoB,EAAK,EAAW,EAAM,S,IAClC,EAAO,KAGP,GAAU,EACjB,wEAgDD,I,sBAGG,SACY,GAAI,mBACP,GAAS,EACpB,QAED,C,aAEG,OACkB,EAAF,KAElB,cAEkB,SAEX,GAAI,IAAa,WACxB,S,0CAKE,gBACoB,SAEtB,oCAED,I,cAGG,KAGF,CAEU,CACP,OAAO,C,yCAOR,WAEC,IAAK,IAAI,EAAQ,KAAI,4DACxB,aAEoB,EAAK,EAAY,KACxB,EAAK,EAAU,EAAE,GACvB,GAAI,IAAa,WACxB,S,0CAKE,gBACoB,SAEtB,oCAEsB,EAAgB,EACvB,EAAc,OAAS,EAAG,EACtB,GACA,KAGZ,CACP,CAED,Q,CAGA,WACI,yBACI,KAAK,kBAAoB,KAGjC,C,WAUG,+GACQ,IAAK,eACZ,+BACI,IAAK,EACZ,S,gEAYO,KAAK,oBACL,KAAK,MAAG,8DACf,6B,2CAKE,iCACQ,KAAK,gB,CAOhB,eACW,MAAO,S,0BAiBb,gBAED,IAAI,EAAiB,OAAO,UACxB,GAAa,iB,MAGX,GAFL,MAE8B,a,IAC1B,IAAI,EAAQ,aAChB,aAEO,EAAI,IACf,KAGkB,EAAF,IACL,EAAW,EAGnB,CACA,OAAO,IAAI,EAAQ,EAAM,kB,IAQ7B,K,CACI,EAAkC,OAGtC,O,UAGG,cACyB,EAAF,QACL,EAAsB,QACtB,EAAY,OAChC,UAED,S,gCAaG,eACQ,MAAM,EAAM,GACnB,KAAK,SAAW,IAAI,EAAsB,SAC7C,wBAED,2B,kFAKG,wBACQ,KAAK,wBAAiD,KAC7DpiB,KAAK,mBAAoB,EACzBA,KAAK,eAAiB,EAAc,mBAEpCA,KAAK,qCAAiC,E,wBAKZ,E,KACrB,qBAKL,KAAK,yBAAO,E,kDAQL,KAAK,YAAK,KAEpB,8BAED,wB,uLAOG,6BAMC,KAAK,kCAAoC,E,KAKpC,4C,KACJ,sBAEG,GACA,KAAK,WAAW,iBAAiB,K,iCAkBzB,c,mBACD,G,KACF,iBAAmB,I,KAGvB,iB,CAKL,yCACA,OAAO,KAAK,mC,CAEf,0CAED,+CAGG,2CACI,CAIN,uBAED,6B,CAEG,wBACY,KAAK,oBAAU,IAI9B,yB,gBAOC,qBAED,CAIG,eACQ,OAAO,KAAK,S,cAEV,G,KACR,YACD,KAAK,UAAW,C,6BAOT,KAAK,e,uBAML,KAAK,S,CAEZ,aAAS,G,KACJ,UAAY,E,KACZ,oBAAsB,K,KACvB,W,sBAKH,a,CAGD,YAAQ,GACX,gBAED,gB,CAMI,yBACA,OAAO,KAAK,mB,CAEf,0BAED,2B,GAGG,yBAECA,KAAK,UAAW,C,CAMpB,c,uJAOI,SAEH,OADG,EAAY,uEACf,oBAID,C,gLAaiB,GAEb,OAAK,KAAK,a,iBAIO,SAAS,G,OAHtB,KAAK,YAAK,UACH,K,wBAWN,mB,KAAM,6B,KAEC,W,2BAKE,KAAK,O,aACV,iBAAmB,EAAM,eAAG,4C,EAG3B,oB,KAGL,mBAIR,yB,wBAOE,qF,CASH,a,wGAWC,uBAED,iC,uBAQW,OADR,uCACe,KAAK,gB,8CAMZ,kCACA,KAAK,2B,0EAkBD,EAAQ,GAAc,GAgBjC,OAdA,KAAK,aAAQ,Y,KACR,iBAAY,+B,KACZ,OAAO,oBAAa,E,KACpB,yBAAO,EACX,gCAEQ,KAAK,oB,wDACjB,yDAOU,I,kBASR,wBACI,C,qBAUJ,YACQ,MAAM,EAAQ,KAAK,MAAF,oDACpB,GACI,GACA,EAAK,Q,6EAOd,QACI,C,wCAUJ,GACgB,KAAK,UAAY,UACxB,KAAK,oBAAM,0CACX,EAAQ,iEACf,8BAIO,KAAK,aAAO,EACZ,KAAK,kBAAkB,eAAS,yEAChC,KAAK,6BAIhB,6BAED,6B,yEAaI,OAFD,6BACQ,KAAK,oBAAmC,GACxC,I,CAMP,0BACA,OAAO,KAAK,oB,mCAQR,qBACH,sB,qBASS,G,IACL,EACD,OAAO,KAEX,IAAI,EAEA,EACA,E,QACH,S,GAAM,mBACC,OAAO,KAGX,EAAoB,UAAK,GACzB,EAAoB,UAAS,GAE7B,EAAe,YAEnB,MAEC,MAEG,EAAQ,IACf,M,gBAKE,uBACY,KAAK,OAAO,iBAAC,eACpB,EAA2B,4DAClC,M,kBAIE,kBACY,KAAK,SAAS,EAAI,E,YAExB,kBAAY,YAChB,I,+BAYM,O,0BADR,uDACe,I,yCASb,qBACD,MAAM,EAAM,eAGhB,OAFC,iCAED,oC,kBAOiB,G,gCACW,G,KACnB,uDACE,I,QAWN,2BACD,MAAM,EAAK,EAAC,mBACf,yD,GAGD,qB,qJASG,uBACyB,KAAK,OAAe,iBAAU,0BAC9C,EAAS,SACT,EAAe,cAAO,KACtB,KAAK,mBAAmB,mBAAmB,EAC/C,KACH,CAEO,MAAO,EAAkB,EAAa,iBACtC,EAAiB,sCAAiC,GAClD,MAAM,EAAiB,EAAwD,aACtF,sBACO,MAAM,EAAO,eACb,KAAK,OAAO,iBAAiB,uBAAG,GAChC,EAAqB,SACrB,EAAO,mBACV,wBACG,EAAiB,iCACrB,CAEJ,OAAOA,IACX,C,mCAWG,O,4BAAA,CACI,C,kBAWW,EAAQ,GAGtB,OADA,EAA0B,yBAAwB,KAAE,oBAC7C,I,cAcE,EAAW,EAAS,EAAG,EAAW,OAC3C,MAAM,GAAO,KAAK,MAAM,EAAU,EAAG,EAAU,GAAK,KAAK,GAAK,EAExD,EAAM,2BACf,qBAUU,OARX,wB,8HAQkB,I,eAOb,eACW,GAAR,KAAK,WAAG,eACf,4B,0NAkBE,O,2BAAA,CACI,C,mBAKY,GAIf,O,EAHI,2B,EACH,2BACD,EAAO,GAAK,KAAK,aAAI,MACrB,I,CAMJ,wBAEA,mBAEG,O,mCAAA,CACO,C,8BAUN,OAFD,2BACQ,EAA8B,uDAC9B,I,aAQN,GAED,GAAI,KAAK,SACL,OAAO,KAKX,GAAI,KAAK,UACL,IAAK,MAAM,KAAS,KAAK,UACrB,EAAM,YAAY,GAI1B,OAAO,MAAM,YAAY,E,aAiBb,GAAsB,EAAO,GAAW,G,QACtC,KAAK,O,OACd,KAGL,MAAM,EAAI,mBACJ,EAAW,EAAgF,GAAG,QAAQ,GAEtG,EAAK,gBACL,EAAmB,eACzB,EAA8B,oB,MACxB,EAAiB,EAAuB,a,KACzC,oBAAmB,G,IACpB,EAAkB,KAAK,mB,aAEV,e,EACoC,oEAAkC,UAAU,EAAG,I,EAG/F,gDACJ,a,EAAM,oDAGN,IAEG,EAAK,oBAAC,kBACN,EAAe,cAAO,M,EAEtB,+BAEA,KAAK,mBACL,KAAK,mBAAkB,YAIvB,EAAa,mBAAmB,KAAK,U,KAGpC,QAAQ,SAAS,G,KACjB,SAAS,SAAS,G,YACT,E,GAGVA,KAAK,eAAe,EAAoE,eACrF,I,qCAOK,kB,+BAKH,G,iCAAM,I,wBAIW,G,kBAUX,G,8CAC0B,KAAK,O,6BACrC,E,YAEK,E,EACT,wB,EAAM,mC,KACF,qBAAuB,G,oBAQ/B,M,OAAM,aAOHA,KAAK,OAAO,iBAAiB,cAAgB,IAE7C,KAAK,qBAAoB,G,KAEzB,6BAGA,KAAK,OAFL,EAEc,KAAK,kCAGf,K,OAhBA,IACP,oDAGU,K,UA+BF,EAAQ,G,IAMb,E,KALC,YACJ,0BACG,KAAK,mBAAqB,KAAK,SAAK,e,KAC/B,SAAS,OAAO,IAGpB,GAAS,IAAU,EAAqC,QAKxD,CACD,gBACI,MAAM,EAAgB,eAEtB,KAAK,OAAO,iBAAiB,YAAK,GAClC,EAAO,EAA6D,sBACxE,CACA,EAAqB,EAA2B,+CAChD,gE,MAXA,EAAqB,EAAoB,+CACzC,KAAK,mBAAmB,cAAc,EAAO,yB,yBA6B5C,O,mBACG,qB,KACH,8FAED,KAAK,SAAS,OAAO,I,MAGnB,EAAY,EAA2C,cACvD,EAAa,EAAiB,cAE9B,EAAmB,EAAC,cACpB,EAAgB,EAAe,iBACpC,iBAEK,EAAU,eACV,EAAiB,EAAY,aAC7B,EAAc,EAAuC,a,uBACvC,KAAK,SAAU,G,EAC9B,mC,EAAgE,sC,EACkB,4B,EAClF,mB,EAAM,mB,EACC,UAAU,EAAY,EAAe,G,KAC5C,uB,EACJ,+DAAM,I,WAcD,EAAM,EAAU,G,MACrB,aAED,GAAK,GAAS,IAAU,U,gEAAA,CACpB,MAAM,EAAS,KAAK,mCAAmB,OAEvC,KAAK,2BAAgB,EAC5B,CAKE,WACI,C,cAiBM,K,MAER,wBACG,EAAqB,KAAK,oBAI1B,EAAqB,EAAU,iBAC/B,EAAyB,iF,MAE5B,qB,OACD,EAAoB,6BAAkB,SACzC,qBAEkB,KAAK,oBAExB,oC,2BAQI,OAAOA,KAAK,MAChB,CAOO,mBAAmB,GACtB,GAAI,KAAK,uBAAyB,KAAK,SACnC,OAAO,KAAC,aAGhB,sC,2HAKW,MAAM,EAAS,KAAK,WAA6B,aAClD,EAAO,sDACP,EAA2B,KAAK,iBAAY,+D,KACjD,eAED,MAAM,EAAC,YACV,wBAED,mC,2FAIG,uBACQ,KAAK,UAAW,EACvB,KAAK,UAAQ,Y,KACR,UAAkB,UAAW,E,KACjC,qBACD,MAAM,EAAS,KAAK,sBAGxB,gB,IAiBQ,E,wFAXL,mCACwB,EAA8B,EAAc,gBAC3D,EAAO,uDAAsC,EAAG,KAAK,UAAU,EAAI,EAAoB,EAE3F,CA2BG,G,EAvBC,eAAe,KAAK,SAAE,2GAI1B,KAAK,qBACL,KAAK,oBAAoB,UAAW,EACpC,EAAW,KAAK,oBACZ,KAAK,2CAEc,KAAK,2BAEvB,wHACJ,wC,uGAWM,KAAK,gBAAiB,CAC7B,MAAM,EAAc,EAAI,aACxB,EAA2C,+BAG3C,MAAK,iBACL,EAAS,iBAAI,GAEhB,kDAEG,EAA8D,gDAI1D,KAAK,0BAChB,4EAGD,uD,iDAMG,wBAKK,GAJW,GACP,EAAO,mBAAO,GAGd,EAAkB,CACzB,6BAAa,EAAO,iBAAiB,cAAM,8DAIhC,EAA4C,0CAKhD,MAAM,EAAc,EAAoB,cAClC,EAAQ,EAA4C,cACjE,qBAEO,EAAmD,8BACnD,EAA8E,GAAE,yCACvF,iCAEW,EAAS,gCAGzB,iD,4GAMuB,KAAK,yBACZ,KAA2B,aAAE,iDAC7B,EAAwD,6FAGxD,KAAG,iE,kCAOhB,8CAGC,GAAI,GAAoB,GAAU,KAAE,mBAEhC,MAAM,EAAU,gB,GAChB,KAAK,aAAa,oBAAoB,GAGtC,EAAiE,yCACjE,EAAgB,6C,EAC0C,0CACzD,+DACG,EAAyB,yDAChC,wBAEO,EAAwC,wCAEnC,KAAK,uDACN,EAAY,EAAI,IAEf,KAAK,cAAgB,EAAE,uCACxB,EAAY,EAAI,IAE3B,4DAEW,EAAY,EAAI,GAGhC,0D,sKAMG,MAEM,GAAI,GAAoC,0BACzC,MAAM,EAAkB,EAA8B,cAGtD,KAAK,aAAa,oBAAW,G,MAEvB,EAAiB,EAAO,e,KAC7B,yC,MAAO,EAAgB,EAAE,c,EACiB,gD,EAC7B,YAEjB,uCAES,EAAM,KAAK,KAAK,EAAc,EAAI,EAAc,EAAI,EAAc,EAAI,EAAQ,GAC9E,GAAS,KAAK,MAAM,EAAc,EAAG,GAG3C,GAFA,EAA2D,wDAEtD,KAAK,cAAU,4CAChB,MAAM,EAAE,gBACf,0CAEY,KAAK,cAAa,yCAEnB,EAAY,EAAI,IAGf,KAAK,cAAgB,EAAc,mBAAa,oBACjD,EAAY,EAAI,IACbA,KAAK,cAAgB,EAAY,uCACpC,EAAY,EAAI,GAE3B,0DAEG,MAGY,EAAmB,0DAG/BA,KAAK,aAAa,yBAAY,OAErC,kEAt+CS,iDACV,CA2Bc,OAzBX,6BAYA,uCAXW,wCAAuB,MACrC,uCAEG,wBACW,mCAAoB,sBAG/B,uCAMH,gCAEG,+GACW,wBAAmB,E,8DAG9B,mBACW,mBAAiC,8BAG5C,uCACW,iBAEC,CAUf,uB,GADC,0B,GAID,2BADC,4B,aAID,MADC,uB,UACwD,aAGzD,kDADC,UAA6B,iB,cACK,sBAMnC,qBADC,iCA6CA,gCAID,CADC,C,CAuBD,mCADC,oC,oCAMA,0B,0BACwD,e,2JC7GzD,iCAAiC,G,OACrC,0D,IAEG,C,yBAOsB,Q,OAChB,I,EAAc,KAAK,WAAI,cAEjB,EAAkE,oE,qBAMxE,QAGJ,OAFA,IAAS,EAAM,8BAEf,8DACJ,CASG,MAAM,EAAM,EAAsB,GAC9B,MAAM,EAA4B,EAAqF,8C,GACvH,EAAO,KAAO,EAEd,EAAO,GAAK,EACR,IACA,EAAO,OAAS,I,EAEK,CAExB,gC,IAAM,wBACC,MAAM,EAAQ,EAAkB,GAC5B,EAAM,OACjB,uBAER,CAEO,CACR,Q,WAcc,G,MACA,EAAmB,uB,SACL,KAAO,KAAK,e,EACZ,SAAW,KAAK,S,KACzB,Q,KACF,OAAO,mBAAmB,G,EAEf,YAAc,KAAK,iBAAiB,U,EACpC,UAAU,iB,eAYrB,EAAqB,EAAO,G,MAChC,0CAkBE,O,EAlBI,Y,EACO,sBAAoB,+BAG7B,EAAoB,a,EACX,eAAe,EAA2E,GAAG,UAAU,EAAoB,c,EAExI,wB,EACS,uBAAO,gBAGhB,IAAD,EAAC,WACZ,oCAGD,4B,qDAGsB,CAClB,CAcH,4BAEO,MAAM,EAAU,GAIT,OAHf,+B,2BAGsB,CAClB,C,wHAaD,2DACoB,GAAS,GAIhB,KAAc,iBAAI,2BAEtB,KAAK,iBAAmB,IAC9B,CAGN,GAFC,gDAED,G,kHAQG,C,mLCjMH,wB,sCAIG,8CACkB,EAAQ,sBAA7B,wBA8KY,GAAW,IAAX,EACA,OAAK,KA9Kb,Y,mEAIG,oCAEc,kBACL,KAAK,SAAS,SAAS,I,uCAOhC,yBACoB,KAAD,+EACd,KAAK,mBAAmB,E,+CAiBtB,gBAAkB,E,EAKlB,gBAAG,E,EAKZ,oB,mCASS,+BAAuB,E,EACvB,aAAe,EAAK,U,EACpB,YAAY,W,EACjB,2B,EAEK,mBAAa,e,EACb,mBAAK,U,IACd,MAED,EAAG,EAAH,iB,kEAIG,+B,IACwB,M,IACc,2B,EACxC,yC,IAED,M,0FAKG,oC,IAC6B,M,IACO,O,EAC1B,UAAQ,8B,IAChB,M,IACuB,yB,EACf,UAAK,6B,IACF,MAChB,EAAC,S,EAED,6C,oFAMU,E,QAGL,O,uCAwBF,OACY,EAAU,GAEX,EAAK,MAKlB,mBAED,e,OAEG,GAPK,EAAO,EAaf,C,MAHO,GACN,IAED,C,8BAWG,UACQ,MAAM,EAAqC,uBAChC,IAAd,GAA2B,EAAD,KAE1B,EAAY,EACf,iBACJ,WAED,I,qBAaS,W,MACJ,OACD,IAAI,EACP,YAIJ,O,8BCpLkB,E,GAMZ,SACiB,GAAM,UAIzB,wBAHW,EAAU,EAAW,EAAQ,QAP/B,Q,oBCH0C,SAAS,EAAiB,EAAW,GAGzF,IAAI,E,kMFoGY,OACf,SAED,S,2BAIG,SAC4B,U,sdGhHpB,EAC6C,C,+QCGpD,YACA,OAAO,KAAK,M,6FCLR,MAC8D,EAAM,EAAS,EADjE,KAAK,MAAM,IAGvB,GAAI,EACA,OAAO,C,wDCHgD,sBAE/D,MAAM,EAAS,KAAK,iB,OACpB,KAAK,mB,uBAQC,E,mECZC,++DCAR,EAGD,KACA,CAAE,EAAqC,EAAqB,K,oxDCJ3D,EAGD,KACA,CAAE,EAAqC,EAAqB,K,QCHmF,EAAE,qBAAyB,Y,07DAMzK,EAED,KACO,CAAE,EAAqC,EAAqB,K,olKCT4E,EAAE,qBAAyB,W,kmBCDzK,EAGD,KACA,CAAE,EAAqC,EAAqB,K,ouECA3D,E,iwCCDQ,gO,k6JCHT,KACwD,CAAE,EAAqC,EAAqB,K,4uBCE1C,EAAoB,M,83HCFtC,KAExD,CAAE,EAAqC,EAAqB,K,oifCkIrB,QAzD0C,gDA8DhF,uwE,OArDM,CAAE,EAAmC,OAGzC,QCjDT,2C,yoEAiTO,SAvQoD,QA2G/B,kDAnFjB,02B,QA8FP,EAAgB,OA4GA,QApOf,6CAyOE,muB,EAtLF,KAED,CAAW,EAAgB,OAQ3B,Q,+CAIW,stFAiKV,E,MAaE,SAG8D,QAYjE,2CAPA,2GAYC,E,cAoBsB,QAcvB,wC,yGAOS,K,CACL,EAAqC,EAAW,KAI/C,QAUA,sCALM,kJ,iBAkByC,Q,gDAMzC,sDAYV,E,eAOE,QAoBF,0C,qMASA,U,QA8CE,0CAtCF,sgC,EA+CC,KACO,CAAE,EAAiB,OAGvB,QAyBA,qDApBM,0R,OA8BF,CAAE,EAA0B,OAIrC,Q,gDAIG,qFAaO,E,QAGL,OAIA,QA0B6E,2DApB7D,ipB,OA6BZ,CAAE,EAAyB,OAGZ,QAoBO,sCAfpB,mV,EAwCT,I,kBAsFwC,mCA7E/B,+kC,EAqFF,K,CACL,EAAqC,EAAY,KAIxB,QAkBO,0CAbnC,wTAkBA,E,eAO4D,QA4CxD,qCAxCI,k2C,EAiDA,K,CACL,EAA+B,OAGV,QAiBiB,gDAb/B,wNAkBV,E,eAOwE,Q,0CAK9D,08H,qmBCn3B0D,gD,gGAMoB,EAGP,IACjC,UAMrC,QA+CqB,mDA5CzB,+tB,QA6EA,EAAsB,OAKyB,EAAM,MA6BlC,2CAzBnB,uL,QAiCJ,EAA6B,O,QA2uBmC,gDAnuBlD,y3yB,UA4uBT,OAIA,QA+BoC,uBAAwB,cA1B1D,wwB,UAkCM,OAEsC,QAU9C,8C,yDAMgC,EAAY,KAIM,QAU1C,6CANR,2HAYR,E,MAIE,SAG0C,QAsBxC,yC,gRAUA,OAGY,EAAoB,EAAE,EAAY,CAChC,EAAK,IAAM,I,+CAiB1B,KAAK,QAAU,IAAI,MAMpB,sB,KAIE,iB,KAKI,UAAY,IAAI,M,KAKhB,0BA1+BD,KAAK,WAAa,GAKZ,qBAAkB,IAAI,M,0FCrDsC,KAAK,WAAa,IAAI,MAaxC,KAAK,eAAiB,IAAI,MASnB,KAAK,eAAiB,IAAI,MAMpC,KAAK,SAAW,IAAI,MAItB,KAAK,oBAAsB,KAOxB,KAAK,cAAgB,IAAI,KA2D/E,CAKA,sBACI,KAAK,oBAAoB,GAAQ,CACrC,C,oBAOI,OAAI,KAAK,oBAAoB,GAClB,KAAQ,uB,gCAmCA,EAAM,GACtB,mCAA8B,GAAQ,C,4BAOtB,G,6CAEZ,KAAK,8BAA8B,GAEvC,I,2BAUF,MAAM,KAAc,KAAK,oBACvB,iBAAmB,yBAAO,oBAAqB,IA8B9C,KAAK,oBAAoB,GAAY,EAAU,EAAO,EAAW,E,CAmEjE,yBAaA,+B,gCAwCH,oBAAsB,C,gBAevB,EAAQ,IAAI,MAMT,OALA,wBACP,EAAQ,EAAM,OAAO,KAAK,Q,8DAGrB,UAAU,SAAS,GAAc,EAAQ,EAAM,OAAO,EAAS,SAC7D,C,uEAgB8B,EAAqB,KAE7C,EAAoB,EAAE,EAAqB,C,UAG3C,IAAI,EAA6C,EAAoB,MAC3E,EAAiE,EAAoB,KAC3E,EAAmD,EAAoB,MACvE,EAAmD,EAAoB,M,QAEvE,EAAiD,EAAoB,M,sBActF,KAAK,iBAAkB,E,yBAElB,sBAAwB,EACtB,mBACC,uBAAkB,EAQ1B,KAAK,UAAW,E,oDAEX,oBAAsB,IAAI,EAAmE,E,sBAqB1F,UAUR,KAAK,UAAW,E,8FAcX,kBAAoB,KAClB,yCAAiC,MAAgE,G,0DAOnG,QAAU,CAAC,E,uBAaX,kBAAoB,EAClB,wBASP,KAAK,gBAAkB,E,KAElB,iBAAmB,KAExB,KAAK,4BAA8B,K,KAE9B,uBAAyB,KAE9B,KAAK,OAAS,CAAC,E,2BAGV,UAAY,KAEjB,KAAK,aAAe,EAA0E,GAAG,W,+BAI1F,uCACP,KAAK,6BAA+B,K,KAE/B,SAAU,E,KAIV,oBAAsB,IAAI,EAAmE,GAC3F,6B,+BAGF,KAAO,EACL,UACP,KAAK,OAAU,GAAS,EAAyF,EAAE,iB,6CAE9G,Y,qCAQA,kBAAkB,GAAQ,C,kBAUlB,EAAM,EAAM,EAAO,G,yCAE3B,E,SACE,I,sBAOU,GACV,yBACP,KAAK,oCAAoC,gBAAgB,E,wBAGlD,6B,CAKP,qB,iDAII,KAAK,a,2DAMJ,iBAAiB,gBAAkB,C,uDAajC,cACP,GAAI,KAAK,cAAgB,E,aAGnB,EAAqB,KAAK,YAEhC,GAAI,KAAK,kBAA8C,IAA/B,KAAK,YAAY,WAA0D,OAA/B,KAAK,YAAY,UAAoB,C,yDAGjG,KAAK,YAAY,UAAU,OAAO,EAAO,GAExC,GAAW,KAAK,iBAAiB,a,2BAGnC,C,mBAIA,wBACgC,IAA/B,KAAK,YAAY,WAA0D,OAA/B,KAAK,YAAY,Y,sCAG9D,2BAA0B,KAAE,MAC1B,G,qFAQF,KAAK,W,yBAMQ,SAAW,KAAK,Q,yBAIgB,IAAhD,KAAK,iBAAiB,uBACnB,2CAA+B,sBAA8B,OAChE,KAAK,OAAO,UAAU,KAAK,M,6BAU/B,IAAoD,IAAhD,KAAK,iBAAiB,qBAA6B,CAChD,8BAcG,EAAU,EAAU,OAAS,E,mDAEnC,EAAU,KAAK,iBAAiB,sBAAsB,iBAAiB,qBAAuB,KAAK,iBAAiB,qBACjH,4BACH,KAAK,iBAAiB,sBAAwB,C,oCAO3C,yC,kCAaI,KAAK,OAAO,2B,CAIhB,gCAAuB,GAC9B,KAAK,6BAA+B,C,2CA2F1B,GACH,yBACH,KAAK,oBAAoB,OAAO,KAAK,oBAezC,KAAK,mBAAqB,KAAK,oBAAoB,IAAI,E,CA6B/C,sCAgBA,6BAAwB,gC,0BA0BzB,6BAAe,mB,YAOtB,OAAO,KAAK,M,wDAsBJ,EAAU,GAAoB,GAe9B,WAdA,gBAAyB,QAAQ,KAwEjC,SAcJ,KAAK,OAAO,YAAc,E,iDAGtB,EAAS,OAAO,KAAK,I,eAMtB,qBAAgB,IAlEf,I,gBAwFG,G,0CAEI,IAAX,IAGJ,KAAK,WAAW,GAAO,S,6BAFhB,I,iBAoBA,YAAO,U,0BAaT,MAAM,KAAY,KAAK,WACrB,YAAqB,EACpB,OAAO,E,OAGR,I,kBAeP,O,mDAFI,KAAK,qBAEF,KAAK,Y,qCAIL,sCAYC,qCAA8B,EAClC,KAAK,wBAA0B,KAAK,aAAa,e,6BAU9C,2BACP,OAAO,KAAK,Y,cASZ,KAAK,OAAS,CAAC,E,sCAYP,IACA,2BAGA,mBAAgB,KAAK,OACrB,oB,6BAKkB,EAAS,GAAe,GAC1C,mB,8CACG,I,cASF,GAAsB,C,kBAW/B,OAAO,C,uJAkCH,KAAK,YAAY,UAAY,KAAK,kBAAoB,KAAK,YAAY,gBAGpE,KAAK,YAAY,gB,yBAIpB,KAAK,OAAO,SAAW,KAAK,aACxB,mBAAoB,KAAwB,aA0CzC,K,qDAKJ,KAAK,iB,sBAQL,KAAK,iBAAiB,Q,aAOrB,G,+DAGD,I,8BAUI,KAAK,iBAAiB,aAE5B,KAAK,iBAAiB,YAGpB,KAAK,iBAAiB,gB,kHAKzB,KAAK,WACF,wBAAsB,IACrB,EAAE,yBAAyB,G,YAQ5B,GACA,mCAAyB,I,wCAI3B,0BACE,uDAA+B,mB,2BASlC,KAAK,SACF,iB,+CAUA,KAAgC,KACvC,GAAK,KAAK,U,IAGL,IAAI,EAAQ,EAAG,EAAQ,KAAK,UAAU,OAAQ,IAAS,CACrD,uBAAwB,GACtB,IAAa,EAAU,I,UAGvB,GACF,qBAA+B,I,iBAU3B,EAAuB,G,qDAG3B,C,4CAUF,gBAAgB,EAAS,GAAwB,KAC/C,GAAoB,YAA2C,IAA3C,oB,cAkEnB,KAAqE,G,OACtE,KAAK,eAAe,EAAuB,E,WAa5C,GACF,IAAU,KAAK,iBAAiB,WAszD7B,GAsQH,KAAK,SACF,mB,mCAtQH,KAAK,iBAAiB,UAAW,E,oBAsqC7B,GAoGR,IAAK,IAAI,EAAI,EAAG,EAAI,KAAK,WAAW,OAAQ,IAAK,C,yCAGzC,OAAO,CAloGX,CACA,OAAO,I,sBAQU,EAAM,EAAM,G,IAExB,KAAK,QAAQ,GAAO,CACrB,KAAK,QAAQ,GAAQ,EAAK,uBAAuB,EAAM,EAAM,G,IACxD,IAAI,EAAI,EAAG,EAAc,KAAK,WAAW,OAAQ,EAAI,EAAa,IAC/D,KAAK,WAAW,IAChB,KAAK,WAAW,GAAG,YAAY,EAAM,EAAM,EAGvD,C,sBAOiB,EAAM,GAAe,GACtC,IAAK,IAAI,EAAI,EAAG,EAAc,KAAK,WAAW,OAAQ,EAAI,EAAa,IACnE,oBACI,KAAK,WAAW,GAAG,YAAY,EAAM,GAG7C,KAAK,QAAQ,GAAQ,I,mBAOP,GACd,OAAO,KAAK,QAAQ,IAAS,IAhuCjC,CAKO,qBACH,MAAM,KACN,IAAI,EACJ,IAAK,KAAQ,KAAK,Q,wBAGlB,OAAO,CACJ,C,eA2CQ,EAAM,EAAM,EAAY,GACnC,MAAM,EAAQ,KAAK,kBAAkB,GACrC,OAAK,E,mFAUL,MAAM,EAAsB,GAC5B,IAAK,MAAM,KAAQ,KAAK,QAAS,CAU7B,MAAM,EAAa,KAAK,QAAQ,G,iDAOhC,EAAM,GAAK,EAAW,GACf,EAAoB,KAAK,EACpC,CACA,OAAO,CAEX,CAMA,mBAA0B,GAItB,OAHK,KAAK,eACN,KAAK,aAAe,EAA0E,GAAG,YAE9F,KAAK,Y,WAOM,GAA6B,G,QAC1C,iBAAiB,aAAc,G,EACjB,C,MACT,EAAQ,KAAK,gBAAe,G,IAC7B,MAAM,KAAQ,EACf,EAAK,QAAQ,EAAc,E,MAGzB,O,KAID,OAAS,K,KAHT,4BAOT,KAAK,oBAAoB,gBAAgB,M,iCAEzC,KAAK,gCAAgC,QAC9B,KAAK,mBAA4B,Q,IAEnC,MAAM,KAAY,KAAK,WACxB,EAAS,SAEbA,KAAK,WAAW,OAAS,EACzB,KAAK,SAAW,IACpB,C,4BAQ4B,EAAM,EAAY,G,GACtC,EAAW,OACX,IAAK,IAAI,EAAQ,EAAG,EAAQ,EAAW,OAAO,OAAQ,IAAS,CAC3D,MAAM,EAAO,EAAW,OAAO,GAC/B,EAAK,qBAAqB,EAAK,KAAM,EAAK,KAAM,EAAK,GAClD,CAEf,C,4BAQ4B,GAAqB,EAAM,EAAY,MAIxD,IAAI,EACP,EAHJA,KAAK,WAAW,oBAChB,KAAK,oBAAmB,GAGxB,MAAM,EAAmB,KA8BzB,GAAI,EAAiB,iBAAmB,EAAiB,UAAW,CAEhE,MAAM,EAAe,EAAiB,kBAC/B,EAAM,EAAa,YAAI,qBAC9B,EAAM,EAAa,YAAY,aAAa,OAChD,MAEI,EAAM,IAAI,EAAkE,EAAE,OAAO,UAAW,OAAO,UAAW,OAAO,WACzH,EAAM,IAAI,EAAkE,GAAG,OAAO,WAAY,OAAO,WAAY,OAAO,WAwDzH,GAAI,EAAgC,CACvC,MAAM,EAAc,KAAK,gBAAe,GACxC,IAAK,MAAM,KAAc,EAAa,CAClC,MAAM,EAAY,EAQlB,GAPA,EAAU,oBAAmB,GAOzB,IAAc,EAAU,GACjB,SAGX,IAAK,EAAU,iBAAoD,IAAjC,EAAU,mBACxC,SAEJ,MACM,EADoB,EAAU,kBACE,YAWhC,EAAS,EAAY,aACd,EAA+B,EAAY,aACxD,EAA+E,EAAE,aAAa,EAAQ,EAAK,GAC3G,EAA+E,EAAE,aAAa,EAAQ,EAAK,EAC/G,CACJ,C,MACO,CACH,IAAK,EACL,IAAK,EA2Bb,E,EAKC,uBAAyB,CAAC,EAAO,EAAO,KAOzC,MAAM,EAAG,EAAkE,GAAG,iBAAiB,E,oBAE1E,CAAC,G,IACsC,IAAI,E,IACK,O,EACjE,UAAW,YAAQ,I,IACqC,IAAI,EAmMhE,EAAG,EAAkE,O,8BAET,IAAI,EAChE,IAA8B,O,EAC1B,UAAW,gBAAY,I,IACiC,IAAI,EAChE,EAAG,EAAkE,O,iCAET,IAAI,EACzD,EAAG,EAAkE,O,EACxE,UAAW,gBAAY,E,EAKzB,K,YAKc,EAAE,EAAqB,C,EAC7B,IAAM,E,MACP,I,MAID,EAAoB,M,EAEZ,EAAoB,MAE7B,EAAa,EAA4B,MAEhD,EAAa,EAAoB,MAE1B,EAAmB,EAAoB,KAE9C,EAAO,EAAoB,M,EAEb,EAAoB,KAElC,EAAgB,EAAoB,M,sBAMtB,EAAoB,M,YAGb,EAAoB,M,EAEtB,EAAoB,M,EAEtB,EAAoB,M,EAErB,EAAoB,K,EAEtB,EAAoB,I,IAEH,M,EAEf,EAAoB,K,EAEzB,QAEX,EAAiB,EAAoB,M,UAI9B,EAAgB,O,sBA+BnB,KAAK,cAAe,EACb,KAAK,cAAe,EAC3B,KAAK,YAAa,EAClB,KAAK,SAAU,CAKnB,C,2CAII,kBACO,OAAO,KAAK,Y,CAEnB,gBACA,OAAO,KAAK,U,kCAKL,gBAAK,GACZ,KAAK,aAAe,CACxB,CACI,gBAAY,G,qCAIZ,KAAK,WAAa,CACf,CACH,WAAO,GACP,KAAK,QAAU,CAGnB,E,MAKA,E,YAKY,GAED,KAAK,kBAAK,EACjB,KAAK,kBAAmB,EACxB,KAAK,mBAAqB,KAE1B,KAAK,oBAAsB,K,0OAS3B,KAAK,qBAAuB,EACrB,KAAK,6BAAuC,EACnD,KAAK,iBAAmB,CAAC,E,KACpB,oBAAsB,CAAC,E,KACvB,iBAAmB,KACxBA,KAAK,qBAAuB,KAC5BA,KAAK,OAAS,GAAS,EAAM,mBACxB,KAAK,MAGd,CA6BI,uB,OACI,KAAK,mBASL,KAAK,iBAAiB,oBAEtBA,KAAK,iBAAmB,MAErB,KAAK,gB,CAQhB,+BAA+B,G,yCAO3B,0BACA,OAAO,IAAI,EAAkB,yDACjC,CAOW,eACP,OAAOA,KAAK,SAChB,CACW,aAAS,GAChB,KAAK,UAAY,C,uBAOV,KAAK,S,CAEZ,aAAS,GACT,KAAK,UAAY,CAGrB,CACA,uBAAuB,GACnB,MAAM,EAAa,KAAK,OAAO,YAAY,4BACtC,I,KAGA,UAAY,EAAI,QAAU,EAAW,K,KACrC,UAAY,EAAI,QAAU,EAAW,IAC1CA,KAAK,sBAAwB,KAAK,UAClCA,KAAK,sBAAwB,KAAK,UACtC,CAEA,oBAAoB,EAAY,GACrB,MAAM,EAAQ,KAAC,OAChB,EAAS,EAAM,YACf,EAAS,EAAO,kBAClB,IACA,EAAO,SAAW,EAAO,eAEpB,EAAM,qBACA,EAAO,MAAgB,OAAS,EAAM,gBAKrD,KAAK,6BAA6B,EAAY,EAAI,UAAW,G,oCAEzD,MAAM,KAAgB,aAA+C,EAAS,EAAW,YAClF,EAAa,EAAc,OAAO,KAAK,sBAAuB,KAAK,sBAAuB,EAAY,EAAc,EAC/H,C,MACM,EAAO,EAAI,YAAc,EAA0C,GAAG,aAAe,EAAI,YAAc,EAA0C,GAAG,YAAc,EAAkD,GAAG,aAAe,EAAiD,GAAG,Y,GAC5R,EAAM,cAAe,CAErB,MAAM,EAAK,GAAc,4BACzB,EAAM,cAAc,EAAK,EAAI,EAC1B,CACP,IAAI,EACA,GAkBA,EAAc,IAAI,EAA+B,GAAG,EAAM,EAAK,G,iCAI/D,EAAc,IAAI,EAA+B,GAAG,EAAM,EAAK,KAAM,MACrE,KAAK,iBAAmB,GAExB,EAAM,oBAAoB,gBAC1B,EAAM,oBAAmB,oBAEjC,CAeA,qBAAqB,EAAU,GACpB,MAAM,EAAQ,KAAK,OACtB,GAAY,EAAM,oBACb,EAAS,MACV,EAAS,IAAM,EAAM,iBAAiB,EAAM,QAAS,EAAM,QAAS,EAAiC,GAAG,WAAY,EAAM,eAGtI,CAiHA,2BAA2B,EAAY,EAAK,G,oBAElC,EAAK,IAAI,EAAkC,GAAG,EAAM,EAAK,KAAK,sBAAuB,KAAK,uBAqBhG,OApBW,IACP,EAAG,oBAAsB,EACzB,EAAG,IAAM,EAAW,IAahB,EAAW,a,iCAInB,EAAM,uBAAuB,gBAAgB,EAAI,KAC7C,EAAG,uB,oBAkCD,EAAQ,KAAK,OACb,EAAa,EAAM,KAAK,KAAK,sBAAuB,KAAK,sBAAuB,EAAM,sBAAsB,EAAO,EAAM,uBAAwB,EAAM,8BAE7J,O,KADK,6BAA6B,EAAY,EAAW,GAClD,CACX,C,4GAMQ,G,2CAAK,EAAM,oBAAsB,GAAU,KAAK,iBAAkB,CACvD,MAAM,EAAiC,KAAK,iBAAiB,8BAChE,GAAiB,EAAc,qBAC/B,EAAO,MAAM,OAAS,EAAc,aAAe,EAAM,YAEjE,OAGA,KAAK,mBAAmB,KAAM,EAAW,E,qBAS7B,EAAY,G,QAChB,IAAI,aAAa,cAAe,G,aAC3B,EAAmC,GAAG,KACnD,KAAK,2BAA2B,EAAY,EAAK,EAAiD,GAAG,cA+KzG,KAAK,oBAAoB,EAAY,E,0BAarC,MAAM,EAAM,IAAI,aAAa,cAAe,GACrC,EAAI,WAAa,EAAI,SACxB,KAAK,2BAA2B,EAAY,EAAK,EAAiD,GAAG,cAGzG,KAAK,oBAAoB,EAAY,EAKzC,C,yBAEI,MAAM,EAAQ,KAAK,OACZ,GAAI,GAAc,EAAyB,mBAC9C,KAAK,gBAAkB,EAAW,WAClC,MAAM,EAAgB,EAAW,WAAW,8BAC5C,GAAI,EAAe,CACf,GAAI,EAAc,gB,OACd,EAAc,eAAe,EAAG,EAAuC,EAAE,UAAU,EAAW,WAAY,I,mEAIlG,MACG,KAAK,EACR,EAAc,eAAe,EAAG,EAAuC,EAAE,UAAU,EAAW,WAAY,IAC1G,MACJ,KAAK,EACD,EAAc,eAAe,EAAG,EAAuC,EAAE,UAAU,EAAW,WAAY,IAIlH,EAAc,mBAAmB,IAC1B,OAAI,iBACP,MAAM,EAAa,EAAM,KAAK,KAAK,sBAAuB,KAAK,uBAAwB,GAAW,EAAK,YACnG,EAAK,WACL,EAAK,W,iBAEL,EAAK,cAAc,mBAAmB,IAC3C,uDACK,GAAc,EAAW,KAAO,EAAW,YAAc,GACtB,IAA/B,KAAK,uBAA+B,KAAK,MAAQ,KAAK,qBAAuB,EAAa,iBAAmB,KAAK,sBACnG,KAAK,qBAAuB,EAC3C,EAAc,eAAe,EAAG,EAAuC,EAAE,UAAU,EAAW,WAAY,IAElH,G,iBAGL,CACX,MAEW,IAAK,MAAc,KAAQ,EAAM,kBACpC,EAAa,EAAK,OAAO,KAAK,sBAAuB,KAAK,sBAAuB,EAAY,GAAK,G,+BAQtG,GAHI,EAAM,eACC,EAAM,cAAD,OAEZ,EAAM,oBAAoB,eAAgB,CAC1C,MAAM,EAAK,IAAI,EAA+B,GAAG,EAAM,EAAK,G,yEAGhE,CACG,C,qBAOA,OAAO,KAAK,U,mBASL,EAAY,EAAkB,GACrC,MAAM,EAAM,IAAI,aAAuB,YAAqB,GACnE,EAAI,WAAa,EAAmC,GAAG,KACvD,MAAM,EAAY,IAAI,EAClB,E,iBAIO,EAAC,eAER,KAAK,2BAA2B,EAAY,EAAK,EAA+C,GAAG,Y,8BAKpG,kBAAkB,EAAF,KACnB,MAAM,EAAQ,KAAK,OACnB,GAAI,GAAc,EAAW,KAAO,EAAW,WAAY,C,GACvD,KAAK,cAAgB,EAAW,W,6DAGxB,EAAM,cAAc,EAAK,GAEzB,EAAU,cAAgB,EAAU,QAAU,EAAM,oBAAoB,gBAAgB,CACxF,MAAM,EAAO,EAAiD,GAAG,YAC3D,EAAK,IAAI,EAA+B,GAAG,EAAM,EAAK,G,yEAGhE,CAEJ,MAAM,EAAgB,EAAW,WAAW,8BAC5C,GAAI,IAAkB,EAAU,OAAQ,CACpC,EAAc,eAAe,EAAG,EAAuC,EAAE,UAAU,EAAW,WAAY,EAAK,K,gFAIxG,MAAM,EAAe,4CACxB,EAAU,aAAe,GACzB,EAAyB,eAAe,EAAG,EAAuC,EAAE,UAAU,EAAW,WAAY,EAAK,G,OAK3H,IAAK,EAAK,OACb,IAAK,MAAM,KAAQ,EAAM,gBACrB,EAAa,EAAK,OAAO,KAAK,sBAAuB,KAAK,sBAAuB,EAAY,EAAK,EAAU,aAIxH,GAAI,KAAK,iBAAmB,KAAK,kBAAoB,KAAK,cAAe,CAC9D,MAAM,EAAgB,qDACzB,GACA,EAAwB,eAAe,GAAI,EAAuC,EAAE,UAAU,KAAK,gBAAiB,G,SAI5H,GAAI,EAAM,oBAAoB,eAAgB,CACnC,IAAK,EAAC,uBACL,EAAU,aAAe,EAAM,oBAAoB,gBAAgB,EAAgD,GAAG,YACtH,EAAO,EAAgD,GAAG,W,uGAKnD,GAAM,CACb,MAAM,EAAK,IAAI,EAA+B,GAAG,EAAM,EAAK,GAC5D,KAAK,qBAAqB,EAAY,GACtC,EAAM,oBAAoB,gBAAgB,EAAI,E,CAGtD,IAAK,EAAU,OAAQ,CACZ,EAAG,eACV,MAAM,EAAK,IAAI,EAA+B,GAAG,EAAM,EAAK,GAC5D,KAAK,qBAAqB,EAAY,GACtC,EAAM,oBAAoB,gBAAgB,EAAI,E,EAGlD,EAAM,cAAgB,EAAU,QACzB,EAAM,YAAG,MAExB,C,kBAMkB,EAAY,GAC1B,OAAO,KAAK,iBAAiB,EACjC,CAQO,cAAc,GAAG,oBACpB,MAAM,EAAQ,KAAK,OACb,EAAS,EAAM,YACR,IACT,EAAoB,EAAO,mBAE3B,KAAK,kB,oDAMT,KAAK,qBAAuB,IAAI,EAA6C,EAAE,GAE/EA,KAAK,mBAAsB,IACvB,IAAK,KAAK,iBAAkB,CACxB,MAAM,EAAa,EAAM,sBAAsD,IAA7B,EAAM,qBAA6B,EAAM,oBAAoB,eACzG,K,oNAMN,KAAK,kBAAmB,CACrB,CACP,OAAO,CAAG,EAEd,KAAK,oBAAsB,CAAC,EAAK,EAAW,M,uNASrC,KAAK,gBAAkB,CAAc,EAAM,EAAM,EAAK,KACzD,MAAM,EAAY,IAAI,EACtB,KAAK,mBAAqB,KAC1B,IAAI,EAAM,KACN,EAAe,EAAK,gBAAgB,EAAiD,GAAG,c,6GAIxF,EAAK,gBAAgB,EAAsD,GAAG,mBACvE,EAAK,gBAAc,wBACzB,GAAgB,EAAiD,IAClE,EAAM,KAAK,mBAAmB,EAAK,GAC/B,I,+BAKR,GAAI,EAAc,CACP,MAAM,EAAM,EAAI,OAEvB,GADA,EAAU,UAAY,KAAK,qBACtB,EAAU,UAAW,CACtB,IAAI,GAA+B,EAAa,yBACpC,IACR,GAA+B,EAAK,gBAAgB,EAAsD,GAAG,oBAAsB,EAAK,gBAAgB,EAAsD,GAAG,kBAC7M,IAAgC,EAAoE,EAAE,mBAAmB,KACzH,EAAM,KAAK,mBAAmB,EAAK,G,kCAMhC,GAEH,KAAK,MAAQ,KAAK,6BAA+B,EAAa,kBAAoB,IAAQ,KAAK,0BAC/F,EAAU,aAAc,EAChB,EAAG,EAAW,KAAK,oBAC3B,GAAmB,IAMvB,KAAK,mCAAqC,KAAK,2BAC/C,KAAK,2BAA6B,OAAO,WAAW,KAAK,oBAAoB,KAAK,KAAM,EAAK,EAAW,GAAK,EAAa,mBAE9H,IAAI,EAAmB,EAAK,gBAAgB,EAAsD,GAAG,mBAAqB,EAAK,gBAAgB,EAAsD,GAAG,mBACnM,GAAoB,EAAoE,EAAE,mBAAmB,KAC9G,EAAM,KAAK,mBAAmB,EAAK,GAC/B,IACA,EAAmB,EAAI,mBAAmB,KAG9C,IAEI,IAAQ,KAAK,wBAA0B,KAAK,MAAQ,KAAK,6BAA+B,EAAa,mBAAqB,KAAK,qBAE1H,EAAU,WAAc,KAAK,qBAa9B,KAAK,qBAAsB,EAC3B,KAAK,6BAA+B,KAAK,qBACzC,KAAK,iCAAiC,EAAI,KAAK,yBAAyB,EACxE,KAAK,iCAAiC,EAAI,KAAK,yBAAyB,EACxE,KAAK,uBAAyB,EAC1B,EAAa,0BACT,KAAK,oCACL,aAAa,KAAK,oCAEtB,KAAK,mCAAqC,KAAK,2BAC/C,EAAG,EAAW,KAAK,sBAGnB,EAAG,EAAW,KAAK,sBAzBvB,KAAK,6BAA+B,EACpC,KAAK,qBAAsB,EAC3B,EAAU,aAAc,EACxB,EAAU,QAAS,EACf,EAAa,0BAAoC,KAAK,oCACtD,aAAa,KAAK,oCAEtB,KAAK,mCAAqC,KAAK,2BAC/C,EAAG,EAAW,KAAK,qBAoBvB,GAAmB,IAInB,KAAK,qBAAsB,EAC3B,KAAK,6BAA+B,KAAK,qBACzC,KAAK,iCAAiC,EAAI,KAAK,yBAAyB,EACxE,KAAK,iCAAiC,EAAI,KAAK,yBAAyB,EACxE,KAAK,uBAAyB,GAG1C,CACJ,CACK,GACD,EAAG,EAAW,KAAK,mBACvB,EAEJ,KAAK,eAAkB,IAOnB,QALsB,IAAlB,EAAI,YACJ,EAAI,UAAY,G,KAEf,uBAAuB,GAExB,KAAK,2BAA2B,KAAM,EAAK,EAAI,YAAc,EAA0C,GAAG,aAAe,EAAI,YAAc,EAA0C,GAAG,YAAc,EAAkD,GAAG,aAAe,EAAiD,GAAG,aAC9T,OAEJ,IAAK,EAAM,yBAA2B,EAAM,aACxC,O,GAEA,EAAM,uBAEN,YADA,KAAK,oBAAoB,IAAI,EAA6B,EAAK,GAG9D,EAAM,uBACP,EAAM,qBAAwB,GAAS,EAAK,YACxC,EAAK,WACL,EAAK,WACL,EAAK,cACJ,EAAK,yBAA2B,EAAM,kCAA2E,OAAvC,EAAK,kCAC9E,EAAM,wBAAwF,IAA7D,EAAM,uBAAuB,UAAY,EAAK,aAGpF,KAAK,aAA4C,IAA9B,KAAK,sBACzB,KAAK,WACD,KAAK,IAAI,KAAK,yBAAyB,EAAI,KAAK,WAAa,EAAa,uBACtE,KAAK,IAAI,KAAK,yBAAyB,EAAI,KAAK,WAAa,EAAa,uB,MAEhF,EAAa,EAAM,mBAAqB,EAAI,KAAK,UAAU,EAAI,WAAa,K,KAC7E,oBAAoB,EAAY,EAAI,EAE7C,KAAK,eAAkB,IAoBnB,GAnBA,KAAK,wBACL,KAAK,gBAAkB,KAChB,KAAK,kBAAM,OAEI,IAAlB,EAAI,YACJ,EAAI,UAAY,GAEpB,KAAK,uBAAuB,I,kEAIjB,EAAM,6BAAmB,IAChC,EAAI,iBACJ,EAAkB,S,8FAItB,KAAK,qBAAuB,KAAK,MAE7B,KAAK,2BAA2B,KAAM,EAAK,EAAiD,GAAG,aAC/F,O,qDAiBJ,IAAI,EAZG,KAAK,iBAAuB,gBAC9B,EAAM,uBACP,EAAM,qBAAwB,GAClB,EAAK,Y,0BAGT,EAAK,eACI,EAAgB,8EAIrC,KAAK,gBAAkB,KAGnB,EADA,EAAM,wBAAwD,IAA7B,EAAM,qBAA6B,EAAM,oBAAoB,eACjF,IAAI,EAA6B,EAGjC,EAAM,KAAK,KAAK,sBAAuB,KAAK,sBAAuB,EAAM,sBAAsB,EAAO,EAAM,wBAE7H,KAAK,oBAAoB,EAAY,EAAI,E,uDAOlC,KAAK,wBACZ,KAAK,cAAgB,KACrB,KAAK,kBAAmB,OAEF,IAAlB,EAAI,YACJ,EAAI,UAAY,GAEpBA,KAAK,uBAAuB,GACxB,EAAM,2BAA6B,IACnC,EAAI,iBACJ,EAAkB,S,+EAIX,GAAI,EAAQ,wCACV,EAAU,OAAQ,CACnB,IAAK,EAAU,UAAW,CACtB,GAAI,EAAU,aAAe,EAAM,uBAAuB,gBAAgB,EAAgD,GAAG,a,+DAK7H,GAAI,EAAU,aAAe,EAAM,uBAAuB,gBAAgB,EAAsD,GAAG,mBAC3H,KAAK,2BAA2B,KAAM,EAAK,EAAsD,GAAG,kBACpG,MAGZ,CACA,GAAI,KAAK,2BAA2B,KAAM,EAAK,EAA+C,GAAG,WAM7F,YAJI,KAAK,sBAAwB,EAAI,SACjC,KAAK,YAAa,E,6BAK9B,CAEJ,KAAK,iBAAiB,EAAI,YAAa,G,4CAIlC,EAAM,qBACP,EAAM,mBAAsB,GAChB,EAAK,Y,2CAIP,EAAM,wBAAwF,IAA7D,EAAM,uBAAuB,UAAY,EAAK,cAIxF,KAAK,mBAAsB,EAAiD,GAAK,EAA6D,EAAE,aAAgB,EAAM,oBAAoB,iBAC3L,KAAK,mBAAmB,KAAM,GAE7B,IACD,EAAa,KAAK,oB,+EAIlB,KAAK,sBAAwB,EAAI,SAC1B,KAAK,YAAa,EACzB,KAAK,qBAAuB,GAChC,I,EAGR,KAAK,WAAc,IACf,MAAM,EAAO,EAA+C,GAAG,QAC/D,GAAI,EAAM,wBAAwB,eAAgB,C,sBAGvC,GADP,EAAM,wBAAwB,gBAAgB,EAAI,GACvC,EAAG,yBACV,MAER,CACA,GAAI,EAAM,qBAAqB,eAAgB,CAC3C,MAAM,EAAK,IAAI,EAAiC,GAAG,EAAM,GACzD,EAAM,qBAAqB,gBAAgB,EAAI,EACnD,CACI,EAAM,eACN,EAAM,cAAc,eAAe,GAAI,EAAgD,EAAE,mBAAmB,EAAO,GACvH,E,KAEC,SAAY,IACb,MAAM,EAAO,EAA6C,GAAG,MAC7D,GAAI,EAAM,wBAAwB,eAAgB,CAC9C,MAAM,EAAK,IAAI,EAAoC,GAAG,EAAM,GAE5D,GADA,EAAM,wBAAwB,gBAAgB,EAAI,GAC9C,EAAG,yBACH,M,CAGR,GAAI,EAAM,qBAAqB,eAAgB,CACpC,MAAG,gBACV,EAAM,qBAAqB,gBAAgB,EAAI,EACnD,CACI,EAAM,e,gEAKdA,KAAK,qBAAqB,qCAClB,EAAa,aAAe,EAAkC,GAAG,MACjE,EAAa,yBAAyB,KAAK,IACnC,EAAU,aAAe,EAAwC,GAAG,W,iEAGpE,EAAU,aAAe,EAA0C,GAAG,aACtE,mCACI,GAA8D,IAAhD,EAAa,SAAS,EAAU,YAC9C,KAAK,eAAe,G,sDAMnB,IACD,EAAU,aAAe,EAAmC,GAAG,KAC/D,KAAK,eAAe,G,iCAGpB,EAAU,aAAe,EAA0C,GAAG,aACrE,iCACD,KAAK,eAAe,GAE5B,I,8FAMQ,GAA8D,IAAhD,EAAa,SAAS,EAAU,YAC/B,KAAK,eAAgC,GAE/C,GAA4D,IAAhD,EAAa,SAAS,EAAU,aACjD,KAAK,aAAa,IAGtB,GAAc,EAAU,aAAe,EAAmC,GAAG,MAC7E,KAAK,eAAe,EACxB,IAGC,EAAa,aAAe,EAAqC,GAAG,UACzE,EAAa,yBAAyB,KAAK,IAChB,YAAnB,EAAU,KACV,KAAK,WAAW,GAEN,UAAL,EAAK,MACV,KAAK,SAAS,EAClB,GAER,I,KAEC,kBAAmB,C,iBAMpB,KAAK,mBACL,KAAK,qBAAqB,UAC1B,KAAK,qBAAuB,K,2DAGxB,KAAK,mBAAmB,MAAM,OAAS,KAAK,OAAO,eAEvD,KAAK,kBAAmB,EACxB,KAAK,mBAAqB,K,oBASf,EAAM,EAAY,EAAG,GACpC,KAAI,KAAK,oBAAoB,KAAe,GAAU,GAAS,EAAK,8BAA8B,gCAC9F,OAEJ,MAAM,EAAmB,KAAK,oBAAoB,GAClD,IAAI,E,wCAGI,GACO,EAA6B,eAAD,2CAGvC,GACA,KAAK,oBAAoB,GAAa,EACtC,KAAK,iBAAmB,E,sCAGpB,EAAc,eAAe,EAAG,EAAuC,EAAE,UAAU,OAAM,EAAW,CAAE,YAAW,yBAI9G,KAAK,oBAAoB,G,iDASpC,OAAO,KAAK,gB,iBAMA,GACR,KAAK,mBAAqB,I,KACrB,iBAAmB,MAExB,KAAK,kBAAoB,IACzB,KAAK,gBAAkB,M,0FAMnB,KAAK,oBAAoB,KAAe,UACZ,KAAK,oBAAc,E,IAMlD,sBAAwB,G,EAExB,eAAiB,I,EAEjB,iBAAmB,I,EAEnB,0BAA2B,E,IA+CpC,E,EA5Cc,EAAoB,M,EAErB,EAAoB,MAEjC,EAAe,EAAoB,M,UAI5B,EAAY,EAAoB,M,EAEtB,EAAoB,M,EAExB,EAAoB,O,SAiC1B,G,iDAIkB,EAAuC,aAAI,GAAK,e,EAEhD,EAAqC,WAAI,GAAK,Y,MAC3C,EAA2B,CAAC,I,gBAKxC,EAAiC,E,yBAU7C,KAAK,cAAgB,IAAI,EAAa,M,KAEjC,uBAAyB,K,KAEzB,UAAW,EAEhB,KAAK,wBAAyB,E,kBAQ9B,KAAK,0BAA2B,E,KAI3B,WAAa,IAAI,EAAuB,GAAG,GAAK,GAAK,GAAK,G,KAI1D,aAAe,IAAI,EAAuB,GAAG,EAAG,EAAG,GAOxD,KAAK,qBAAuB,E,oGAI5B,KAAK,mBAAoB,E,KAIpB,mBAAoB,E,KACpB,6BAA+B,KAKpC,KAAK,+BAAgC,E,uCAKG,EAIxC,KAAK,YAAc,U,mBAIE,GAIrBA,KAAK,oBAAqB,E,oCAU1B,KAAK,2BAA4B,EAKjC,KAAK,SAAW,K,4BAQhB,KAAK,oCAAsC,IAAI,MAI/C,KAAK,oBAAsB,IAAI,EAA2B,GAC1D,KAAK,mBAAqB,K,yEAS1B,KAAK,wBAA0B,IAAI,EAA2B,GAK9D,KAAK,8BAAgC,IAAI,EAA2B,GAC7D,KAAK,uBAAoC,K,KAI3C,6BAA+B,IAAI,EAA2B,G,0CAQ5D,KAAK,4BAAkC,S,KAIzC,2BAA6B,IAAI,EAA2B,GAIjE,KAAK,kBAAoB,IAAI,EAA2B,GAIxD,KAAK,+BAAiC,IAAI,EAA2B,GAC9D,KAAK,8BAAwB,K,mCAKC,IAAI,EAA2B,G,kCAChC,K,KAI/B,yCAA2C,IAAI,EAA2B,GAI/E,KAAK,wCAA0C,IAAI,EAA2B,GAK9E,KAAK,qCAAuC,IAAI,EAA2B,G,KAKtE,oCAAsC,IAAI,EAA2B,G,qCAQnE,KAAK,2BAA0B,S,KAIjC,0BAA4B,IAAI,EAA2B,GAIhE,KAAK,0BAA4B,IAAI,EAA2B,GAIzD,KAAK,yBAAe,SAI3BA,KAAK,6BAA+B,IAAI,EAA2B,G,KAI9D,4BAA8B,IAAI,EAA2B,G,uCAIzB,IAAI,EAA2B,GAIxEA,KAAK,iCAAmC,IAAI,EAA2B,GAIvE,KAAK,yBAA2B,IAAI,EAA2B,G,KAI1D,wBAA0B,IAAI,EAA2B,G,gDAQzD,4BAA8B,IAAI,EAA2B,GAIlE,KAAK,6BAA+B,IAAI,EAA2B,GAInE,KAAK,kCAAoC,IAAI,EAA2B,GAIjE,KAAK,4BAAwB,SAIpCA,KAAK,iCAAmC,IAAI,EAA2B,G,0CAQvE,KAAK,2BAA6B,IAAI,EAA2B,GAKjE,KAAK,sCAAwC,IAAI,EAA2B,GAK5E,KAAK,qCAAuC,IAAI,EAA2B,GAI3E,KAAK,uBAAyB,IAAI,EAA2B,GAI7D,KAAK,sBAAwB,IAAI,EAA2B,G,KAIvD,sBAAwB,IAAI,EAA2B,G,0CAUvD,iCAAmC,IAAI,EAA2B,G,mDAUlE,yBAA2B,IAAI,EAA2B,G,KAI1D,kCAAoC,IAAI,EAA2B,GAGxEA,KAAK,oCAAsC,IAAI,EAAsC,EAAE,K,+BAQvF,KAAK,wBAAyB,EAI9B,KAAK,sBAAuB,EAKrB,KAAK,uBAAwB,SAIpC,KAAK,oBAAsB,IAAI,EAA2B,G,sCAUnD,KAAK,qBAAuB,IAAwB,KAE3D,KAAK,uBAAwB,E,8CAI7B,KAAK,qBAAuB,EAE5B,KAAK,aAAc,E,KACd,SAAW,EAAM,a,iCAYtB,KAAK,WAAa,GAMlBA,KAAK,SAAW,E,gBAUT,KAAK,4BAAqB,EAEjC,KAAK,iBAAkB,E,KAClB,gBAAiB,E,KACjB,wBAA0B,KAE/B,KAAK,kBAAmB,E,4BAUnB,kBAAmB,EAKxB,KAAK,gBAAiB,E,+BAOjB,mBAAoB,EAMzB,KAAK,mBAAoB,EAKlB,KAAK,QAAU,IAAI,EAAe,c,KAKpC,sBAAuB,E,kCAUvB,uBAAwB,EAI7B,KAAK,oBAAsB,IAAI,M,mCAS/B,KAAK,eAAgB,E,KAChB,wBAA0B,IAAI,EAAsC,EAAE,K,KAKtE,2BAA4B,E,oBAEX,IAAI,EAA6B,E,KAElD,eAAiB,IAAI,EAA6B,EAEvD,KAAK,iBAAmB,IAAI,EAA6B,EAEzD,KAAK,aAAe,IAAI,EAA6B,E,2BAOhD,mBAAqB,E,eACT,E,KACZ,SAAW,E,KACX,2BAA6B,KAClC,KAAK,wBAAyB,EAC9B,KAAK,4BAA6B,EAClC,KAAK,iBAAmB,E,gEAIxB,KAAK,gBAAkB,IAAI,MAE3B,KAAK,aAAe,IAAI,M,KACnB,aAAc,EAKnB,KAAK,oCAAqC,EAC1C,KAAK,cAAgB,IAAI,EAA2B,EAAE,K,iHAK/C,KAAK,uBAAoB,aAChC,KAAK,iBAAmB,IAAI,EAAsC,EAAE,I,KAC/D,uBAAyB,IAAI,EAAsC,EAAE,I,KAErE,mBAAqB,IAAI,M,KACzB,iBAAmB,EAA6B,GAAG,O,iCAUnD,YAAc,GAKnB,KAAK,wBAA0B,G,2DASC,EAAiC,EAAE,SAKnE,KAAK,kBAAoB,EAAiC,EAAE,SAKrD,KAAK,8BAAmB,a,KAK1B,0BAA4B,EAAiC,EAAE,S,6DAU/D,qBAAuB,EAAiC,EAAE,S,KAK1D,+BAAiC,EAAiC,EAAE,S,wCAUzE,KAAK,oBAAsB,EAAiC,EAAE,S,kCAK1B,EAAiC,EAAE,SAKvE,KAAK,uBAAyB,EAAiC,EAAE,SAK1D,KAAK,6BAAkB,a,KAKzB,+BAAiC,EAAiC,EAAE,S,iDAUpE,yBAA2B,EAAiC,EAAE,SAKnE,KAAK,8BAAgC,EAAiC,EAAE,SAKxE,KAAK,sBAAwB,EAAiC,EAAE,S,KAK3D,6BAA+B,EAAiC,EAAE,S,8CAShE,KAAK,mCAAuB,a,KAK9B,kBAAoB,EAAiC,EAAE,S,yCAUvD,kBAAoB,EAAiC,EAAE,SAK5D,KAAK,gBAAkB,EAAiC,EAAE,S,KAIrD,sBAAwB,K,4BACC,C,KACpB,GACN,OAAQ,G,KAEP,0BAA4B,C,KACvB,G,OACE,G,KAEP,4CAA6C,EAElD,KAAK,qBAAsB,EAE3B,KAAK,oCAAqC,E,gFAO1C,KAAK,0BAA4B,IACtB,KAAK,QAAQ,cAGxBA,KAAK,mBAAqB,EAC1B,KAAK,8BAA+B,E,yBAMpC,KAAK,cAAgB,IAAI,MAClB,MAAM,EAAwB,CACjC,yBAAyB,EACzB,oBAAoB,EACpB,kBAAkB,EAClB,SAAS,K,QAGR,QAAU,GAAU,EAA+C,EAAE,kBACrE,EAAY,QAKb,KAAK,QAAQ,eAAe,KAAK,OAJjC,EAA+C,EAAE,kBAAoB,KACrE,KAAK,QAAQ,OAAO,KAAK,O,KAKxB,KAAO,K,KACP,kBAAoB,IAAI,EAAuC,EAAE,M,EACvB,I,KACtC,mBAAqB,IAAI,EAA2C,EAAE,Q,IAEjC,O,KACrC,gB,KAGJ,aAED,EAA+D,IAC/D,KAAK,8BAAgC,IAAI,EAA+D,GAE5G,KAAK,+BACD,EAAY,0B,+BAGhB,KAAK,mBAAqB,EAAY,mBAC/B,KAAK,iBAAI,mBACX,GAAY,EAAQ,SACrB,KAAK,QAAQ,0BAA0B,gBAAgB,K,+BAQjC,G,QACjB,EAA0B,GAAG,mB,kFActC,yBACA,OAAO,KAAK,mB,wBAOO,G,KACV,sBAAwB,IAGjC,KAAK,oBAAsB,EAC3B,KAAK,wBAAwB,GACjC,C,0CAUW,KAAK,6B,4DAQL,wBAA4B,GACnC,GAAI,IAAU,KAAK,qBAInB,OADA,KAAK,qBAAuB,EACpB,G,2GAIA,KAAK,wBAAyB,EACvB,KAAK,WAAiB,EAC7B,MACJ,KAAK,EAAyB,aAC1B,KAAK,qBAAsB,EAC3B,KAAK,kBAAkB,4BAA6B,EACpD,KAAK,wBAAyB,EAC9B,KAAK,WAAY,EACjB,MACJ,KAAK,EAAyB,W,gHAI1B,KAAK,WAAY,E,CAOzB,mBAAe,GACX,KAAK,kBAAoB,I,yDAMtB,qBACP,OAAO,KAAa,e,yBAKA,GAChB,KAAK,uBAAyB,I,KAG7B,qBAAuB,E,CAE5B,0B,OACO,KAAK,oB,sBAKK,G,KACR,oBAAsB,IAG/B,KAAK,kBAAoB,EACzB,KAAK,wBAAwB,IACjC,C,qDAOI,kC,OACO,KAAK,4B,CAEZ,gCAA4B,GAC5B,KAAK,6BAA+B,C,CAGpC,cAAU,GACN,KAAK,oBACL,KAAK,oBAAoB,OAAO,KAAK,oBAEzC,KAAK,mBAAqB,KAAK,oBAAoB,IAAI,E,kBAG1C,GACT,KAAK,yBACL,KAAK,yBAAyB,OAAO,KAAK,yBAE1C,IACA,KAAK,wBAA0B,KAAK,yBAAyB,IAAI,GAEzE,C,gDAIQ,KAAK,wBAAwB,OAAO,KAAK,wBAEzC,IACA,KAAK,uBAAyB,KAAK,wBAAwB,IAAI,G,CAInE,uBAAmB,GACf,KAAK,+BACL,KAAK,+BAA+B,OAAO,KAAK,+BAEpD,KAAK,8BAAgC,KAAK,+BAA+B,IAAI,E,CAG7E,sBAAkB,GACd,KAAK,8BACL,KAAK,8BAA8B,OAAO,KAAK,8BAEnD,KAAK,6BAA+B,KAAK,8BAA8B,IAAI,E,CAK3E,0BACA,OAAO,KAAK,cAAc,mB,CAKZ,mCACd,OAAO,EAAa,qB,kCAES,G,EAChB,sBAAwB,C,qDAQ9B,0BAAe,GACf,EAAa,eAAkB,C,CAK/B,8BACP,OAAO,EAAa,gBACxB,CACW,4BAAiB,G,qBAIjB,sCACA,OAAO,EAAmB,wB,CAE1B,oCAAyB,G,EACnB,yBAA2B,C,iBAS5B,EAAQ,EAAe,eAAgB,GAAY,GACxD,IAAI,EACX,MAAM,EAAc,KAAK,oBACnB,KAAK,oB,KACA,wBACD,KAAK,wBACuC,QAA3C,EAAK,KAAK,aAAa,sBAAmC,IAAP,EAAgB,EAAK,KAAK,aAAa,eAC/F,EAAe,KAAK,wBAA0D,MAAhC,KAAK,yB,OACzD,EAA0C,GAAG,QAAQ,GAAG,IAAI,EAAY,EAAG,EAAY,EAAG,EAAY,EAAG,GAAgB,EAAI,GACzH,I,uEAKW,EAAe,WAAD,oB,EAGgB,GAAG,QAAQ,E,sFAWxD,OAFA,EAAI,aAAa,eAAgB,EAAY,EAAG,EAAY,EAAG,EAAY,EAAG,EAAY,GACnF,EAAI,SACJ,C,CAKP,yBAAqB,GACjB,KAAK,wBAA0B,I,+DAM5B,2BACP,OAAO,KAAK,qB,CAOhB,UAAU,G,8CASM,c,CAOhB,kBACI,OAAO,KAAK,oB,gBAOD,GACP,KAAK,cAAgB,I,iBAGN,E,6BACU,I,kBAG7B,OAAO,KAAK,WAChB,C,YAWY,GACJ,KAAK,WAAa,IAGtB,KAAK,SAAW,E,gDAIhB,OAAO,KAAK,QACT,C,cAKH,QAAS,KAAK,iBAAmB,KAAK,gBAAgB,UAAU,OACpE,CAII,mBAAe,GACX,KAAK,kBAAoB,I,2HAYf,GACV,KAAK,iBAAmB,I,uDAM5B,oBACO,OAAO,KAAQ,c,qBAItB,OAAUA,KAAK,cACnB,CACI,kBAAc,G,iGAKV,IACO,KAAK,yBAAoD,EAAG,EAAoB,WACnF,KAAK,uBAAuB,gBAAgB,KAAK,KAGzD,KAAK,eAAoB,CAC7B,C,6CAKI,iBAAa,GACF,IAAU,KAAa,gBAG1B,KAAK,cAAyB,EACtC,KAAK,sBAAsB,gBAAgB,M,8BAItC,KAAK,mBACN,KAAK,iBAAmB,EAAM,uBAAuB,O,KAE7C,gB,qBAGI,G,sBACQ,C,qBAKR,GACZ,KAAK,mBAAqB,IAG9B,KAAK,iBAAmB,EACjB,KAAK,wBAAa,G,CAEzB,sBAEA,OAAO,KAAK,gB,CAKL,qBAAiB,GACpB,KAAK,oBAAsB,IAG/B,KAAK,kBAAoB,E,KACpB,wBAAwB,G,CAE7B,uB,OACO,KAAK,iB,CAGZ,2BAKO,OAJF,KAAK,wBACN,KAAK,sBAAwB,EAAM,8B,uCAGzB,KAAK,qB,CAKnB,uB,OACO,KAAK,iB,iCAMA,c,CAKhB,+BAEI,GAAI,KAAK,qBAAqB,OAAS,EAAG,CAC/B,IAAK,MAAM,+BACd,EAAU,WAEd,KAAK,qBAAqB,OAAS,CACvC,C,eASU,G,KACL,YAAY,KAAK,GACtB,KAAK,qBAAqB,KAAK,GAC/B,MAAM,EAAwB,EACnB,EAAkB,+BACzB,KAAK,wBAAwB,KAAK,EAuB1C,C,iBAQI,IAAK,MAAM,KAAa,KAAK,YAClB,GAAI,EAAU,OAAS,EAC1B,OAAO,E,iCAUR,O,6BAQP,O,KAFK,uBAAuB,KAAO,KAAK,O,KACnC,uBAAuB,OAAS,KAAK,OAAO,OAC1C,KAAK,sB,iCAQZ,OAFA,KAAK,0BAA0B,KAAO,EAAK,UACpC,KAAK,0BAAW,0BAChB,KAAK,yB,qCAQP,wBAA0B,KAAK,0BAA0B,KAAK,MACnEA,KAAK,2BAA6B,KAAK,6BAA6B,KAAK,MACzE,KAAK,iCAAmC,KAAK,6BAA6B,KAAK,MAC/E,KAAK,8BAAgC,KAAK,6BAA6B,KAAK,KACxE,C,uBAKJ,OAAO,KAAK,cAAc,gB,CAI1B,e,OACO,KAAK,cAAc,Q,cAEjB,G,mBACU,SAAW,C,uBAMvB,KAAK,cAAc,Q,CAE1B,aAAS,G,KACJ,cAAc,SAAW,C,4BAOvB,KAAK,e,0BAOL,KAAK,a,uBAOZ,OAAO,KAAK,iB,yBASQ,EAAU,EAAQ,EAAa,GACnD,OAAO,KAAK,gBAAkB,GAAU,KAAK,kBAAoB,GAAY,KAAK,oBAAsB,C,oBAOjG,KAAK,O,2BAOL,KAAK,eAAe,O,uCAOpB,KAAK,c,gCAOA,eAAe,O,iDAOf,c,kCAOA,iBAAiB,O,uFActB,KAAK,aAAa,O,0CAOb,Y,+BAOA,a,CAMR,oBACJ,YAAgC,IAAzB,KAAK,gBAAgC,KAAK,gBAAkB,C,sBAO5D,KAAK,S,qBAOL,KAAK,Q,0BAIP,WACT,CACA,a,gFAUoB,EAAY,G,YACvB,cAAc,oBAAoB,EAAY,GAC5C,I,qBASS,EAAY,G,YACvB,cAAc,oBAAoB,EAAY,GAC5C,I,CAUH,kBAAkB,EAA8B,EAAkB,GAEtE,OADA,KAAK,cAAc,kBAAkB,EAAY,EAAkB,GAC5D,I,mBAOO,EAAY,G,YACd,cAAc,kBAAkB,E,eAQlC,GAAW,EAAM,GAAa,EAAM,GAAa,G,mBACxC,cAAc,EAAU,EAAY,E,oCAIpC,e,eAUnB,GAAI,KAAK,YACL,OAAO,EAEX,IAAI,EACJ,MAAM,EAAS,KAAK,YACpB,IAAI,GAAU,E,IAEV,KAAK,aAAa,OAAS,IAC3B,GAAU,GAGV,IACA,KAAK,oBAAoB,QACzB,KAAK,wBAAwB,SAE5B,EAAQ,EAAG,EAAQ,KAAK,OAAO,OAAQ,IAAS,CACjD,MAAM,EAAO,KAAK,OAAO,G,IACpB,EAAK,WAAuC,IAA1B,EAAK,UAAU,OAClC,SAIJ,IAAK,EAAK,SAAQ,GAAO,CACrB,GAAU,EACV,Q,CAEJ,MAAM,EAA6B,EAAK,kBACZ,kBAAxB,EAAK,gBACmB,uBAAxB,EAAK,gBACJ,EAAO,UAAU,iBAAmB,EAAK,UAAU,OAAS,EAEjE,IAAK,MAAM,KAAQ,KAAK,qBACf,EAAK,OAAO,EAAM,KACnB,GAAU,GAGlB,IAAK,EACD,SAEJ,MAAM,EAAM,EAAK,UAAY,KAAK,gBAClC,GAAI,EACA,GAAI,EAAI,wBACJ,IAAK,MAAM,KAAW,EAAK,UAAW,CAClC,MAAM,EAAW,EAAQ,cACrB,GAAY,EAAS,yBAA+D,MAApC,EAAS,0BACL,IAAhD,KAAK,oBAAoB,QAAQ,KACjC,KAAK,oBAAoB,KAAK,GAC9B,KAAK,wBAAwB,sBAAsB,EAAS,2BAGxE,MAGI,EAAI,yBAA0D,MAA/B,EAAI,0BACY,IAA3C,KAAK,oBAAoB,QAAQ,KACjC,KAAK,oBAAoB,KAAK,GAC1C,qDAA6B,2B,sBAU7B,qB,OACG,E,SAIF,EAAQ,EAAG,EAAQ,KAAK,wBAAwB,SAAU,EAE3D,IADY,KAAK,wBAAwB,KAAK,GACrC,sBACL,OAAO,EAKnB,IAAK,EAAQ,EAAG,EAAQ,KAAK,WAAW,OAAQ,IAE5C,GAAgC,IADf,KAAK,WAAW,GACpB,eACT,OAAO,E,GAIX,KAAK,eAAiB,KAAK,cAAc,OAAS,GAClD,IAAK,MAAM,KAAU,KAAK,cACtB,IAAK,EAAO,SAAQ,GAChB,OAAO,OAId,GAAI,KAAK,eACL,KAAK,aAAa,SAAQ,GAC3B,OAAO,EAIf,IAAK,MAAM,KAAkB,KAAK,gBAC9B,IAAK,EAAe,UAChB,OAAO,E,OAGR,C,4BAIF,gBAAkB,KACvB,KAAK,cAAgB,KACrBA,KAAK,kBAAoB,I,sBAMR,G,KACZ,yBAAyB,IAAI,E,wBAMf,G,KACd,yBAAyB,eAAe,E,qBAM7B,G,KACX,wBAAwB,IAAI,E,CAM7B,sBAAmB,GACvB,KAAK,wBAAwB,eAAe,E,0BAEvB,G,QACJ,K,IAEb,YAAW,KACP,KAAK,uBAAgC,EAAS,G,4BAG5B,E,yBASN,EAAM,Q,kBAEX,K,8BACuB,EAAK,G,iCAIT,E,0CAQX,E,CAM3B,kBAAkB,GACd,MAAM,EAAa,KAAK,U,gCAET,IAAX,GACO,KAAK,aAAa,OAAe,EAAO,GAE/C,IAAe,KAAK,WAOpB,KAAK,uBAAuB,gBAAgB,K,+BAQzC,KAAK,aAAa,M,wBAMlB,KAAK,aAAa,OAAS,C,kBAOrB,EAAM,GAAqB,G,uBACjB,QAAQ,GACS,O,KAA/B,4B,mBAGU,E,gBAOR,GAAqB,G,OACzB,IAAI,SAAS,IAChBA,KAAK,kBAAiB,KAClB,GAAS,GACV,EAAmB,G,CAMtB,cAAM,M,OACV,KAAK,+BACDA,KAAK,QAAQ,IACb,KAAK,kBAAkB,gBAAgB,MACvC,KAAK,kBAAkB,aACf,KAAK,2BAA+C,OAE5D,KAAK,aACL,KAAK,kBAAkB,aACvB,gCAAM,Y,gCAGwB,YAAW,K,KAEpC,oB,KACA,cAAc,EAAmB,GACvC,KACP,CAII,kBACO,OAAO,KAAK,kB,+BAOnB,KAAK,mBAAqB,EAAqC,EAAE,GACrE,C,gBAMI,OAAO,KAAK,W,uBAOZ,OAAO,KAAK,iB,sBAOZ,OAAO,KAAK,gB,oBASG,EAAO,EAAa,EAAG,GAEjC,GAAU,IAAe,KAAK,qBAC/B,KAAK,mBAAmB,UACxBA,KAAK,mBAAqB,MAE1B,KAAK,kBAAoB,EAAM,YAAc,KAAK,wBAA0B,EAAY,a,KAGvF,gBAAkB,EAAM,WAC7B,KAAK,sBAAwB,EAAY,WACzC,KAAK,YAAc,E,KACd,kBAAoB,E,iBACR,cAAc,KAAK,kBAAmB,KAAK,kB,sBAMf,EAAE,eAAe,KAAK,iBAAkB,KAAK,gB,oBAHhE,EAAe,mC,yBAKV,KAAK,mBAAmB,O,KAC9C,oBAAoB,EAAO,GAE3B,KAAK,UAAU,S,KACf,UAAU,aAAa,iBAAkB,KAAK,kB,KAC9C,UAAU,aAAa,OAAQ,KAAK,a,eAC1B,aAAa,aAAc,KAAK,oB,yBAQnD,OAAO,KAAK,mBAAqB,KAAK,mBAAqB,KAAK,S,0BAO3C,G,MACf,EAAW,IAAI,EAAiC,EAAE,KAAK,aAAS,GAAW,EAAO,QAAmC,EAAO,S,SACzH,WAAW,iBAAkB,I,EAC7B,WAAW,OAAQ,I,aACR,aAAc,I,aACd,eAAgB,G,wBAOlB,G,eACD,E,sBACO,E,KACnB,uBAAyB,C,eAO9B,OAAO,EAAkD,EAAE,Q,SAOvD,EAAS,GAAY,GACrB,KAAK,yBAGT,KAAK,OAAO,KAAK,G,EACT,sBACH,EAAQ,QACT,EAAQ,uB,KAEP,yBAAyB,gBAAgB,G,KAElC,iBAAiB,SAAS,IAC9B,KAAK,QAAQ,EAAE,I,YAUhB,EAAU,GAAY,G,MACvB,EAAQ,KAAK,OAAO,QAAQ,G,OACnB,IAAX,IAEAA,KAAK,OAAO,GAAS,KAAK,OAAO,KAAK,OAAO,OAAS,GACtDA,KAAK,OAAO,MACP,EAAS,QACV,EAAS,6B,KAGZ,cAAc,gBAAgB,G,6BACN,gBAAgB,G,KAEhC,iBAAiB,SAAS,I,KAC1B,WAAW,EAAE,IAGnB,C,kBAMM,GACT,KAAK,wB,+DAOT,EAAiB,iCAAmC,KAAK,eAAe,O,KACnE,eAAe,KAAK,GACpB,EAAiB,QAClB,EAAiB,uB,2DASzB,oBAAoB,GAChB,MAAM,EAAQ,EAAS,iC,WAEnB,GAAI,IAAU,KAAK,eAAe,OAAS,EAAG,CACxC,0DACF,KAAK,eAAe,GAAS,EAC7B,EAAS,iCAAmC,CAChD,CACA,EAAS,kCAAoC,EAC7C,KAAK,eAAe,MACf,EAAS,QACV,EAAS,2BAEjB,CAEA,OADAA,KAAK,iCAAiC,gBAAgB,GAC/C,C,gBAOI,GACX,MAAM,EAAQ,KAAK,UAAU,QAAQ,GAQrC,OAPe,IAAX,IAEA,KAAK,UAAU,OAAO,EAAO,GAC7B,KAAK,4BAA4B,gBAAgB,GAEjD,KAAK,+BAA+B,KAAK,mBAEtC,C,0BAOc,GACrB,MAAM,EAAQ,KAAK,oBAAoB,QAAQ,G,OAChC,IAAX,GAEAA,KAAK,oBAAoB,OAAO,EAAO,GAEpC,C,aAOC,GACR,MAAM,EAAQ,KAAK,OAAO,QAAQ,GAClC,IAAe,IAAX,EAAc,CAEd,IAAK,MAAM,KAAQ,KAAK,OACpB,EAAK,mBAAmB,GAAU,GAGtC,KAAK,OAAO,OAAO,EAAO,GAC1B,KAAK,uBACA,EAAS,QACV,EAAS,2BAEjB,CAEA,OADAA,KAAK,yBAAyB,gBAAgB,GACvC,C,cAOE,GACT,MAAM,EAAQ,KAAK,QAAQ,QAAQ,GASnC,IARe,IAAX,IAEA,KAAK,QAAQ,OAAO,EAAO,GACtB,EAAS,QACV,EAAS,6BAIb,KAAK,cAAe,CACpB,MAAM,EAAS,KAAK,cAAc,QAAQ,IAC1B,IAAZ,GAEA,KAAK,cAAc,OAAO,EAAQ,EAE1C,CAWA,OATI,KAAK,eAAiB,IAClB,KAAK,QAAQ,OAAS,EACtB,KAAK,aAAe,KAAK,QAAQ,GAGjC,KAAK,aAAe,MAG5BA,KAAK,0BAA0B,gBAAgB,GACxC,C,sBAOU,GACjB,MAAM,EAAQ,KAAK,gBAAgB,QAAQ,G,OAC5B,IAAX,IACA,KAAK,gBAAgB,OAAO,EAAO,GAEnC,KAAK,+BAA+B,KAAK,yBAEtC,C,iBAOK,GACZ,MAAM,EAAQ,KAAK,WAAW,QAAQ,GAItC,OAHe,IAAX,GACA,KAAK,WAAW,OAAO,EAAO,GAE3B,C,eAQG,EAAQ,EAAe,G,sBAQhB,GACjB,MAAM,EAAQ,KAAK,gBAAgB,QAAQ,GAI3C,OAHe,IAAX,GACAA,KAAK,gBAAgB,OAAO,EAAO,GAEhC,C,qBAOS,G,MACV,EAAQ,KAAK,eAAe,QAAQ,G,OACtC,OACA,KAAK,eAAe,OAAO,EAAO,G,KAEjC,iCAAiC,gBAAgB,G,iBAQ3C,GACX,MAAM,EAAQ,EAAS,2BACvB,IAAe,IAAX,GAAgB,EAAQ,KAAK,UAAU,OAAQ,CAC/C,GAAI,IAAU,KAAK,UAAU,OAAS,EAAG,CAC7B,MAAkC,EAA8B,wCACxE,KAAK,UAAU,GAAS,EACxB,EAAW,4BACf,CACA,EAAS,4BAA8B,EACvC,KAAK,UAAU,KACnB,CAEA,OADA,KAAK,4BAA4B,gBAAgB,GAC1C,C,wBASP,MAAM,EAAQ,KAAK,eAAe,QAAQ,G,OACpB,IAAX,GACP,KAAK,eAAe,OAAO,EAAO,GAE/B,C,0DASQ,IAAX,GACO,KAAK,SAAS,OAAE,K,KAEtB,2BAAsC,gBAAgB,GACpD,C,8CAUP,KAAK,OAAO,KAAK,GACV,KAAK,uBAIP,EAAS,QACV,EAAS,uB,IAGR,MAAM,KAAQ,KAAK,QACyB,IAAzC,EAAK,aAAa,QAAQ,KAC1B,EAAK,aAAa,KAAK,GACvB,EAAK,uB,KAGR,0BAA0B,gBAAgB,E,yBAM3C,KAAK,qBACL,KAAK,OAAO,KAAK,EAAyD,EAAE,sBAEpF,C,2CASI,KAAK,QAAQ,KAAK,GACX,KAAK,2BAA+E,gBAAgB,GACtG,EAAC,QACF,EAAU,uB,8CAWd,KAAK,UAAU,KAAK,GACb,KAAK,6BAA+D,gBAAuC,G,mDAU3G,KAAK,gBAAgB,KAAK,E,8CAUjC,KAAK,WAAW,KAAK,EAClB,C,kBAKW,GACV,KAAK,wB,8CAWI,GACM,KAAa,yBAGhC,KAAK,eAAe,KAAK,GACzB,KAAK,kCAAkC,gBAAgB,G,gBAOnD,KAAK,wBAGL,EAAO,oBAAqD,IAArD,EAAqB,6B,gIAYpC,sBAAsB,G,0EAUZ,GACF,KAAK,yB,qKAoBb,WAAW,G,8BAIA,KAAK,SAAS,QACrB,KAAK,4BAA4B,gBAAgB,GACrD,C,mBAMmB,EAAW,GAAgB,GAC3B,KAAK,QAAQ,oBAIxBA,KAAK,cACL,KAAK,aAAa,gB,KAEjB,aAAe,EAChB,GACA,EAAU,gB,CAQlB,oBAAoB,GAChB,MAAM,EAAS,KAAK,cAAc,GAC3B,OAAI,GACP,KAAK,aAAe,EACb,GAEJ,IACX,C,sBAMsB,GAClB,MAAM,EAAS,KAAK,gBAAgB,GACpC,OAAI,GACA,KAAK,aAAe,EACb,G,6BASS,GACpB,IAAK,IAAI,EAAQ,EAAG,EAAQ,KAAK,gBAAgB,OAAQ,IACrD,GAAI,KAAK,gBAAgB,GAAO,OAAS,EACrC,OAAO,KAAK,gBAAgB,G,wIAgBpC,OAAO,IACX,C,gBAMgB,GACL,IAAK,IAAI,EAAQ,EAAG,EAAgB,KAA2B,qBAClE,GAAI,KAAK,UAAU,GAAO,KAAO,EAC7B,OAAO,KAAK,UAAU,G,wIAiB9B,GAAI,EACA,IAAK,IAAI,EAAQ,KAAK,eAAe,OAAS,EAAG,GAAS,EAAG,IACzD,GAAI,KAAK,eAAe,GAAO,KAAO,E,0CAYlD,kBAAkB,G,2MAgBN,OAAO,KAAK,SAAS,GAG7B,OAAO,IAEX,C,iBAMiB,G,IACR,IAAI,EAAQ,EAAG,EAAQ,KAAK,SAAS,OAAQ,IAC9C,GAAI,KAAK,SAAS,GAAO,OAAS,EAC9B,OAAO,KAAK,SAAS,G,OAGtB,IACX,CAMO,cAAc,GACjB,IAAK,IAAI,EAAQ,EAAG,EAAQ,KAAK,QAAQ,OAAQ,IAC7C,GAAI,KAAK,QAAQ,GAAO,KAAO,EAC3B,OAAO,KAAK,QAAQ,G,gCAUZ,GACT,IAAK,IAAI,EAAuB,EAAG,EAAoE,KAAK,QAAsC,OAAQ,IAC7J,GAAI,KAAK,QAAG,gBACR,OAAO,KAAK,QAAQ,GAG5B,OAAO,I,iBAOK,G,IACP,IAAI,EAAQ,EAAG,EAAQ,KAAK,QAAQ,OAAQ,I,GACzC,KAAK,QAAQ,GAAO,OAAS,EAC7B,OAAO,KAAK,QAAQ,GAG5B,OAAO,IACX,C,YAMY,GACR,IAAK,IAAI,EAAgB,EAAG,EAAgB,KAAK,UAAU,OAAQ,IAAiB,CAChF,MAAM,EAAW,KAAK,UAAU,GAChC,IAAK,IAAI,EAAY,EAAG,EAAY,EAAS,MAAM,OAAQ,IACvD,GAAI,EAAS,MAAM,GAAW,KAAO,EACjC,OAAO,EAAS,MAAM,EAGlC,CACO,OAAO,I,eAOJ,GACV,IAAK,IAAI,EAAgB,EAAG,EAAgB,KAAK,UAAU,OAAQ,IAAiB,CAChF,MAAM,EAAW,KAAK,UAAU,G,iCAE5B,GAAI,EAAS,MAAM,GAAW,OAAS,EACtB,OAAO,EAA+C,MAAmC,EAGlH,C,OACO,I,CAOJ,eAAe,GAClB,IAAK,IAAI,EAAQ,EAAG,EAAQ,KAAK,OAAO,OAAQ,IAC5C,GAAI,KAAK,OAAO,GAAO,OAAS,EAC5B,OAAO,KAAK,OAAO,G,OAGpB,I,CAYJ,aAAa,GAChB,IAAK,IAAC,kBAAc,OAAQ,IACxB,GAAI,KAAK,OAAO,GAAO,KAAO,E,sBAn1I9B,OAAO,IACQ,C,2DAQX,GAAI,KAAK,OAAO,GAAO,WAAa,EAClC,OAAiB,KAAK,OAAO,G,WAIvC,CAm+IJ,sBAAsB,GAClB,IAAK,IAAI,EAAQ,EAAG,EAAQ,KAAK,gBAAgB,OAAQ,IACrD,GAAI,KAAK,gBAAgB,GAAO,KAAe,EAC3C,OAAO,KAAK,gBAAgB,GAGpC,OAAO,IACX,CAMA,gBAAgB,GACZ,IAAK,IAAI,EAAQ,EAAG,EAAQ,KAAK,WAAW,OAAY,IACpD,GAAI,KAAK,WAAW,GAAO,KAAO,EAC9B,OAAO,KAAK,WAAW,GAG/B,OAAO,IACX,CACA,uBAAuB,GACnB,GAAI,KAAK,sBAAuB,CAC5B,MAAM,EAAQ,KAAK,sBAAsB,GACzC,QAAc,IAAV,EACA,OAAO,KAAK,WAAW,EAE/B,MAEI,IAAK,IAAI,EAAQ,EAAG,EAAQ,KAAK,WAAS,WACtC,GAAI,KAAK,WAAW,GAAO,WAAa,EACpC,OAAO,KAAK,WAAW,GAInC,OAAO,IACX,CAOA,aAAa,EAAU,GACnB,SAAK,GAAS,KAAK,uBAAuB,EAAU,YAGpD,KAAK,YAAY,GACjB,KAAK,6BAA6B,gBAAgB,GAC3C,GACX,CAMA,eAAe,GACX,IAAI,EACJ,GAAI,KAAK,uBAEL,GADA,EAAQ,KAAK,sBAAsB,EAAW,eAChC,IAAV,EACA,OAAO,O,oIC5pJvB,qB,wEAU2B,OALA,6BACA,2BAAe,EAAM,kBAErB,sBACA,iDAAiC,IACjC,CACA,CAKA,gBACA,sBACA,CAMA,eAEA,iCAAgC,IAEhC,yBAEA,sBAMA,WACA,CASA,iBACA,uCAEA,eACA,GAEA,CASA,wBAEA,kCAAgC,OAAC,IACjC,iCACA,8BAIA,WAEA,CASA,8BAEA,kCAA4B,WAC5B,qCAA4B,EAC5B,8B,WA0IxB,CAMC,sBAAsF,GAClF,OAAO,KAAW,eAAK,oBAC1B,eAED,G,CAQA,qB,0FAMW,OAAO,I,iBAOF,G,IACP,oCACJ,yBACO,OAAO,KAAK,OAAO,G","sources":["webpack://pro-racer/../lts/core/generated/Actions/abstractActionManager.ts","webpack://pro-racer/../lts/core/generated/Actions/actionEvent.ts","webpack://pro-racer/../lts/core/generated/Cameras/camera.ts","webpack://pro-racer/../lts/core/generated/Collisions/intersectionInfo.ts","webpack://pro-racer/../lts/core/generated/Collisions/meshCollisionData.ts","webpack://pro-racer/../lts/core/generated/Collisions/pickingInfo.ts","webpack://pro-racer/../lts/core/generated/Culling/boundingBox.ts","webpack://pro-racer/../lts/core/generated/Culling/boundingInfo.ts","webpack://pro-racer/../lts/core/generated/Culling/boundingSphere.ts","webpack://pro-racer/../lts/core/generated/DeviceInput/InputDevices/deviceEnums.ts","webpack://pro-racer/../lts/core/generated/DeviceInput/InputDevices/deviceSource.ts","webpack://pro-racer/../lts/core/generated/DeviceInput/eventFactory.ts","webpack://pro-racer/../lts/core/generated/DeviceInput/nativeDeviceInputSystem.ts","webpack://pro-racer/../lts/core/generated/DeviceInput/webDeviceInputSystem.ts","webpack://pro-racer/../lts/core/generated/DeviceInput/internalDeviceSourceManager.ts","webpack://pro-racer/../lts/core/generated/DeviceInput/InputDevices/deviceSourceManager.ts","webpack://pro-racer/../lts/core/generated/Events/deviceInputEvents.ts","webpack://pro-racer/../lts/core/generated/Events/keyboardEvents.ts","webpack://pro-racer/../lts/core/generated/Events/pointerEvents.ts","webpack://pro-racer/../lts/core/generated/Lights/lightConstants.ts","webpack://pro-racer/../lts/core/generated/Loading/sceneLoaderFlags.ts","webpack://pro-racer/../lts/core/generated/Materials/colorCurves.ts","webpack://pro-racer/../lts/core/generated/Materials/effectFallbacks.ts","webpack://pro-racer/../lts/core/generated/Materials/imageProcessingConfiguration.ts","webpack://pro-racer/../lts/core/generated/Materials/material.detailMapConfiguration.ts","webpack://pro-racer/../lts/core/generated/Materials/materialStencilState.ts","webpack://pro-racer/../lts/core/generated/Materials/material.ts","webpack://pro-racer/../lts/core/generated/Materials/materialDefines.ts","webpack://pro-racer/../lts/core/generated/Materials/materialFlags.ts","webpack://pro-racer/../lts/core/generated/Materials/materialHelper.ts","webpack://pro-racer/../lts/core/generated/Materials/materialPluginBase.ts","webpack://pro-racer/../lts/core/generated/Materials/materialPluginEvent.ts","webpack://pro-racer/../lts/core/generated/Materials/materialPluginManager.ts","webpack://pro-racer/../lts/core/generated/Materials/multiMaterial.ts","webpack://pro-racer/../lts/core/generated/Materials/prePassConfiguration.ts","webpack://pro-racer/../lts/core/generated/Materials/pushMaterial.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/defaultFragmentDeclaration.ts","webpack://pro-racer/../lts/core/generated/Shaders/default.fragment.ts","webpack://pro-racer/../lts/core/generated/Materials/standardMaterial.ts","webpack://pro-racer/../lts/core/generated/Materials/thinMaterialHelper.ts","webpack://pro-racer/../lts/core/generated/Maths/math.functions.ts","webpack://pro-racer/../lts/core/generated/Meshes/abstractMesh.ts","webpack://pro-racer/../lts/core/generated/Meshes/geometry.ts","webpack://pro-racer/../lts/core/generated/Meshes/mesh.ts","webpack://pro-racer/../lts/core/generated/Meshes/mesh.vertexData.ts","webpack://pro-racer/../lts/core/generated/Meshes/meshLODLevel.ts","webpack://pro-racer/../lts/core/generated/Meshes/subMesh.ts","webpack://pro-racer/../lts/core/generated/Meshes/transformNode.ts","webpack://pro-racer/../lts/core/generated/Misc/coroutine.ts","webpack://pro-racer/../lts/core/generated/Misc/stringDictionary.ts","webpack://pro-racer/../lts/core/generated/Misc/uniqueIdGenerator.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/bakedVertexAnimation.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/bumpFragment.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/bumpFragmentFunctions.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/bumpFragmentMainFunctions.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/bumpVertex.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/bumpVertexDeclaration.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/clipPlaneFragmentDeclaration.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/depthPrePass.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/fogVertex.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/instancesVertex.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/lightFragment.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/lightFragmentDeclaration.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/lightVxUboDeclaration.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/morphTargetsVertexDeclaration.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/morphTargetsVertexGlobalDeclaration.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/prePassVertexDeclaration.ts","webpack://pro-racer/../lts/core/generated/abstractScene.ts","webpack://pro-racer/../lts/core/generated/node.ts","webpack://pro-racer/../lts/core/generated/Inputs/scene.inputManager.ts","webpack://pro-racer/../lts/core/generated/scene.ts","webpack://pro-racer/../lts/core/generated/sceneComponent.ts"],"sourcesContent":["import type { IDisposable } from \"../scene\";\r\nimport type { IActionEvent } from \"./actionEvent\";\r\nimport type { IAction } from \"./action\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Abstract class used to decouple action Manager from scene and meshes.\r\n * Do not instantiate.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport abstract class AbstractActionManager implements IDisposable {\r\n    /** Gets the list of active triggers */\r\n    public static Triggers: { [key: string]: number } = {};\r\n\r\n    /** Gets the cursor to use when hovering items */\r\n    public hoverCursor: string = \"\";\r\n\r\n    /** Gets the list of actions */\r\n    public actions = new Array<IAction>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the manager is recursive meaning that it can trigger action from children\r\n     */\r\n    public isRecursive = false;\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public abstract dispose(): void;\r\n\r\n    /**\r\n     * Does this action manager has pointer triggers\r\n     */\r\n    public abstract get hasPointerTriggers(): boolean;\r\n\r\n    /**\r\n     * Does this action manager has pick triggers\r\n     */\r\n    public abstract get hasPickTriggers(): boolean;\r\n\r\n    /**\r\n     * Process a specific trigger\r\n     * @param trigger defines the trigger to process\r\n     * @param evt defines the event details to be processed\r\n     */\r\n    public abstract processTrigger(trigger: number, evt?: IActionEvent): void;\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers\r\n     * @param triggers defines the triggers to be tested\r\n     * @returns a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public abstract hasSpecificTriggers(triggers: number[]): boolean;\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers. This function takes two arguments for\r\n     * speed.\r\n     * @param triggerA defines the trigger to be tested\r\n     * @param triggerB defines the trigger to be tested\r\n     * @returns a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public abstract hasSpecificTriggers2(triggerA: number, triggerB: number): boolean;\r\n\r\n    /**\r\n     * Does this action manager handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @param parameterPredicate defines an optional predicate to filter triggers by parameter\r\n     * @returns whether the trigger is handled\r\n     */\r\n    public abstract hasSpecificTrigger(trigger: number, parameterPredicate?: (parameter: any) => boolean): boolean;\r\n\r\n    /**\r\n     * Serialize this manager to a JSON object\r\n     * @param name defines the property name to store this manager\r\n     * @returns a JSON representation of this manager\r\n     */\r\n    public abstract serialize(name: string): any;\r\n\r\n    /**\r\n     * Registers an action to this action manager\r\n     * @param action defines the action to be registered\r\n     * @returns the action amended (prepared) after registration\r\n     */\r\n    public abstract registerAction(action: IAction): Nullable<IAction>;\r\n\r\n    /**\r\n     * Unregisters an action to this action manager\r\n     * @param action defines the action to be unregistered\r\n     * @returns a boolean indicating whether the action has been unregistered\r\n     */\r\n    public abstract unregisterAction(action: IAction): Boolean;\r\n\r\n    /**\r\n     * Does exist one action manager with at least one trigger\r\n     **/\r\n    public static get HasTriggers(): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does exist one action manager with at least one pick trigger\r\n     **/\r\n    public static get HasPickTriggers(): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                const tAsInt = parseInt(t);\r\n                if (tAsInt >= Constants.ACTION_OnPickTrigger && tAsInt <= Constants.ACTION_OnPickUpTrigger) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does exist one action manager that handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @returns a boolean indicating whether the trigger is handled by at least one action manager\r\n     **/\r\n    public static HasSpecificTrigger(trigger: number): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                const tAsInt = parseInt(t);\r\n                if (tAsInt === trigger) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Sprite } from \"../Sprites/sprite\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * Interface used to define ActionEvent\r\n */\r\nexport interface IActionEvent {\r\n    /** The mesh or sprite that triggered the action */\r\n    source: any;\r\n    /** The X mouse cursor position at the time of the event */\r\n    pointerX: number;\r\n    /** The Y mouse cursor position at the time of the event */\r\n    pointerY: number;\r\n    /** The mesh that is currently pointed at (can be null) */\r\n    meshUnderPointer: Nullable<AbstractMesh>;\r\n    /** the original (browser) event that triggered the ActionEvent */\r\n    sourceEvent?: any;\r\n    /** additional data for the event */\r\n    additionalData?: any;\r\n}\r\n\r\n/**\r\n * ActionEvent is the event being sent when an action is triggered.\r\n */\r\nexport class ActionEvent implements IActionEvent {\r\n    /**\r\n     * Creates a new ActionEvent\r\n     * @param source The mesh or sprite that triggered the action\r\n     * @param pointerX The X mouse cursor position at the time of the event\r\n     * @param pointerY The Y mouse cursor position at the time of the event\r\n     * @param meshUnderPointer The mesh that is currently pointed at (can be null)\r\n     * @param sourceEvent the original (browser) event that triggered the ActionEvent\r\n     * @param additionalData additional data for the event\r\n     */\r\n    constructor(\r\n        /** The mesh or sprite that triggered the action */\r\n        public source: any,\r\n        /** The X mouse cursor position at the time of the event */\r\n        public pointerX: number,\r\n        /** The Y mouse cursor position at the time of the event */\r\n        public pointerY: number,\r\n        /** The mesh that is currently pointed at (can be null) */\r\n        public meshUnderPointer: Nullable<AbstractMesh>,\r\n        /** the original (browser) event that triggered the ActionEvent */\r\n        public sourceEvent?: any,\r\n        /** additional data for the event */\r\n        public additionalData?: any\r\n    ) {}\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source mesh.\r\n     * @param source The source mesh that triggered the event\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNew(source: AbstractMesh, evt?: any, additionalData?: any): ActionEvent {\r\n        const scene = source.getScene();\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer || source, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source sprite\r\n     * @param source The source sprite that triggered the event\r\n     * @param scene Scene associated with the sprite\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromSprite(source: Sprite, scene: Scene, evt?: any, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew\r\n     * @param scene the scene where the event occurred\r\n     * @param evt The original (browser) event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromScene(scene: Scene, evt: any): ActionEvent {\r\n        return new ActionEvent(null, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a primitive\r\n     * @param prim defines the target primitive\r\n     * @param pointerPos defines the pointer position\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromPrimitive(prim: any, pointerPos: Vector2, evt?: Event, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(prim, pointerPos.x, pointerPos.y, null, evt, additionalData);\r\n    }\r\n}\r\n","import { serialize, SerializationHelper, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { CameraInputsManager } from \"./cameraInputsManager\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3, Quaternion } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { Viewport } from \"../Maths/math.viewport\";\r\nimport { Frustum } from \"../Maths/math.frustum\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\ndeclare type PostProcess = import(\"../PostProcesses/postProcess\").PostProcess;\r\ndeclare type RenderTargetTexture = import(\"../Materials/Textures/renderTargetTexture\").RenderTargetTexture;\r\ndeclare type FreeCamera = import(\"./freeCamera\").FreeCamera;\r\ndeclare type TargetCamera = import(\"./targetCamera\").TargetCamera;\r\ndeclare type Ray = import(\"../Culling/ray\").Ray;\r\n\r\n/**\r\n * This is the base class of all the camera used in the application.\r\n * @see https://doc.babylonjs.com/features/cameras\r\n */\r\nexport class Camera extends Node {\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _CreateDefaultParsedCamera = (name: string, scene: Scene): Camera => {\r\n        throw _WarnImport(\"UniversalCamera\");\r\n    };\r\n\r\n    /**\r\n     * This is the default projection mode used by the cameras.\r\n     * It helps recreating a feeling of perspective and better appreciate depth.\r\n     * This is the best way to simulate real life cameras.\r\n     */\r\n    public static readonly PERSPECTIVE_CAMERA = Constants.PERSPECTIVE_CAMERA;\r\n    /**\r\n     * This helps creating camera with an orthographic mode.\r\n     * Orthographic is commonly used in engineering as a means to produce object specifications that communicate dimensions unambiguously, each line of 1 unit length (cm, meter..whatever) will appear to have the same length everywhere on the drawing. This allows the drafter to dimension only a subset of lines and let the reader know that other lines of that length on the drawing are also that length in reality. Every parallel line in the drawing is also parallel in the object.\r\n     */\r\n    public static readonly ORTHOGRAPHIC_CAMERA = Constants.ORTHOGRAPHIC_CAMERA;\r\n\r\n    /**\r\n     * This is the default FOV mode for perspective cameras.\r\n     * This setting aligns the upper and lower bounds of the viewport to the upper and lower bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_VERTICAL_FIXED = Constants.FOVMODE_VERTICAL_FIXED;\r\n    /**\r\n     * This setting aligns the left and right bounds of the viewport to the left and right bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_HORIZONTAL_FIXED = Constants.FOVMODE_HORIZONTAL_FIXED;\r\n\r\n    /**\r\n     * This specifies there is no need for a camera rig.\r\n     * Basically only one eye is rendered corresponding to the camera.\r\n     */\r\n    public static readonly RIG_MODE_NONE = Constants.RIG_MODE_NONE;\r\n    /**\r\n     * Simulates a camera Rig with one blue eye and one red eye.\r\n     * This can be use with 3d blue and red glasses.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_ANAGLYPH = Constants.RIG_MODE_STEREOSCOPIC_ANAGLYPH;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = Constants.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a none parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = Constants.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered over under each other.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_OVERUNDER = Constants.RIG_MODE_STEREOSCOPIC_OVERUNDER;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered on successive lines interlaced for passive 3d monitors.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_INTERLACED = Constants.RIG_MODE_STEREOSCOPIC_INTERLACED;\r\n    /**\r\n     * Defines that both eyes of the camera should be renderered in a VR mode (carbox).\r\n     */\r\n    public static readonly RIG_MODE_VR = Constants.RIG_MODE_VR;\r\n    /**\r\n     * Defines that both eyes of the camera should be renderered in a VR mode (webVR).\r\n     */\r\n    public static readonly RIG_MODE_WEBVR = Constants.RIG_MODE_WEBVR;\r\n    /**\r\n     * Custom rig mode allowing rig cameras to be populated manually with any number of cameras\r\n     */\r\n    public static readonly RIG_MODE_CUSTOM = Constants.RIG_MODE_CUSTOM;\r\n\r\n    /**\r\n     * Defines if by default attaching controls should prevent the default javascript event to continue.\r\n     */\r\n    public static ForceAttachControlToAlwaysPreventDefault = false;\r\n\r\n    /**\r\n     * Define the input manager associated with the camera.\r\n     */\r\n    public inputs: CameraInputsManager<Camera>;\r\n\r\n    /** @internal */\r\n    @serializeAsVector3(\"position\")\r\n    public _position = Vector3.Zero();\r\n\r\n    /**\r\n     * Define the current local position of the camera in the scene\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this._position = newPosition;\r\n    }\r\n\r\n    @serializeAsVector3(\"upVector\")\r\n    protected _upVector = Vector3.Up();\r\n\r\n    /**\r\n     * The vector the camera should consider as up.\r\n     * (default is Vector3(0, 1, 0) aka Vector3.Up())\r\n     */\r\n    public set upVector(vec: Vector3) {\r\n        this._upVector = vec;\r\n    }\r\n\r\n    public get upVector() {\r\n        return this._upVector;\r\n    }\r\n\r\n    /**\r\n     * The screen area in scene units squared\r\n     */\r\n    public get screenArea(): number {\r\n        let x = 0;\r\n        let y = 0;\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            if (this.fovMode === Camera.FOVMODE_VERTICAL_FIXED) {\r\n                y = this.minZ * 2 * Math.tan(this.fov / 2);\r\n                x = this.getEngine().getAspectRatio(this) * y;\r\n            } else {\r\n                x = this.minZ * 2 * Math.tan(this.fov / 2);\r\n                y = x / this.getEngine().getAspectRatio(this);\r\n            }\r\n        } else {\r\n            const halfWidth = this.getEngine().getRenderWidth() / 2.0;\r\n            const halfHeight = this.getEngine().getRenderHeight() / 2.0;\r\n\r\n            x = (this.orthoRight ?? halfWidth) - (this.orthoLeft ?? -halfWidth);\r\n            y = (this.orthoTop ?? halfHeight) - (this.orthoBottom ?? -halfHeight);\r\n        }\r\n\r\n        return x * y;\r\n    }\r\n\r\n    /**\r\n     * Define the current limit on the left side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    private _orthoLeft: Nullable<number> = null;\r\n\r\n    public set orthoLeft(value: Nullable<number>) {\r\n        this._orthoLeft = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoLeft = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoLeft(): Nullable<number> {\r\n        return this._orthoLeft;\r\n    }\r\n\r\n    /**\r\n     * Define the current limit on the right side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    private _orthoRight: Nullable<number> = null;\r\n\r\n    public set orthoRight(value: Nullable<number>) {\r\n        this._orthoRight = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoRight = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoRight(): Nullable<number> {\r\n        return this._orthoRight;\r\n    }\r\n\r\n    /**\r\n     * Define the current limit on the bottom side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    private _orthoBottom: Nullable<number> = null;\r\n\r\n    public set orthoBottom(value: Nullable<number>) {\r\n        this._orthoBottom = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoBottom = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoBottom(): Nullable<number> {\r\n        return this._orthoBottom;\r\n    }\r\n\r\n    /**\r\n     * Define the current limit on the top side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    private _orthoTop: Nullable<number> = null;\r\n\r\n    public set orthoTop(value: Nullable<number>) {\r\n        this._orthoTop = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoTop = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoTop(): Nullable<number> {\r\n        return this._orthoTop;\r\n    }\r\n\r\n    /**\r\n     * Field Of View is set in Radians. (default is 0.8)\r\n     */\r\n    @serialize()\r\n    public fov = 0.8;\r\n\r\n    /**\r\n     * Projection plane tilt around the X axis (horizontal), set in Radians. (default is 0)\r\n     * Can be used to make vertical lines in world space actually vertical on the screen.\r\n     * See https://forum.babylonjs.com/t/add-vertical-shift-to-3ds-max-exporter-babylon-cameras/17480\r\n     */\r\n    @serialize()\r\n    public projectionPlaneTilt = 0;\r\n\r\n    /**\r\n     * Define the minimum distance the camera can see from.\r\n     * This is important to note that the depth buffer are not infinite and the closer it starts\r\n     * the more your scene might encounter depth fighting issue.\r\n     */\r\n    @serialize()\r\n    public minZ = 1;\r\n\r\n    /**\r\n     * Define the maximum distance the camera can see to.\r\n     * This is important to note that the depth buffer are not infinite and the further it end\r\n     * the more your scene might encounter depth fighting issue.\r\n     */\r\n    @serialize()\r\n    public maxZ = 10000.0;\r\n\r\n    /**\r\n     * Define the default inertia of the camera.\r\n     * This helps giving a smooth feeling to the camera movement.\r\n     */\r\n    @serialize()\r\n    public inertia = 0.9;\r\n\r\n    /**\r\n     * Define the mode of the camera (Camera.PERSPECTIVE_CAMERA or Camera.ORTHOGRAPHIC_CAMERA)\r\n     */\r\n    private _mode = Camera.PERSPECTIVE_CAMERA;\r\n    set mode(mode: number) {\r\n        this._mode = mode;\r\n\r\n        // Pass the mode down to the rig cameras\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.mode = mode;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    get mode(): number {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Define whether the camera is intermediate.\r\n     * This is useful to not present the output directly to the screen in case of rig without post process for instance\r\n     */\r\n    public isIntermediate = false;\r\n\r\n    /**\r\n     * Define the viewport of the camera.\r\n     * This correspond to the portion of the screen the camera will render to in normalized 0 to 1 unit.\r\n     */\r\n    public viewport = new Viewport(0, 0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Restricts the camera to viewing objects with the same layerMask.\r\n     * A camera with a layerMask of 1 will render mesh.layerMask & camera.layerMask!== 0\r\n     */\r\n    @serialize()\r\n    public layerMask: number = 0x0fffffff;\r\n\r\n    /**\r\n     * fovMode sets the camera frustum bounds to the viewport bounds. (default is FOVMODE_VERTICAL_FIXED)\r\n     */\r\n    @serialize()\r\n    public fovMode: number = Camera.FOVMODE_VERTICAL_FIXED;\r\n\r\n    /**\r\n     * Rig mode of the camera.\r\n     * This is useful to create the camera with two \"eyes\" instead of one to create VR or stereoscopic scenes.\r\n     * This is normally controlled byt the camera themselves as internal use.\r\n     */\r\n    @serialize()\r\n    public cameraRigMode = Camera.RIG_MODE_NONE;\r\n\r\n    /**\r\n     * Defines the distance between both \"eyes\" in case of a RIG\r\n     */\r\n    @serialize()\r\n    public interaxialDistance: number;\r\n\r\n    /**\r\n     * Defines if stereoscopic rendering is done side by side or over under.\r\n     */\r\n    @serialize()\r\n    public isStereoscopicSideBySide: boolean;\r\n\r\n    /**\r\n     * Defines the list of custom render target which are rendered to and then used as the input to this camera's render. Eg. display another camera view on a TV in the main scene\r\n     * This is pretty helpful if you wish to make a camera render to a texture you could reuse somewhere\r\n     * else in the scene. (Eg. security camera)\r\n     *\r\n     * To change the final output target of the camera, camera.outputRenderTarget should be used instead (eg. webXR renders to a render target corresponding to an HMD)\r\n     */\r\n    public customRenderTargets = new Array<RenderTargetTexture>();\r\n    /**\r\n     * When set, the camera will render to this render target instead of the default canvas\r\n     *\r\n     * If the desire is to use the output of a camera as a texture in the scene consider using camera.customRenderTargets instead\r\n     */\r\n    public outputRenderTarget: Nullable<RenderTargetTexture> = null;\r\n\r\n    /**\r\n     * Observable triggered when the camera view matrix has changed.\r\n     */\r\n    public onViewMatrixChangedObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when the camera Projection matrix has changed.\r\n     */\r\n    public onProjectionMatrixChangedObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when the inputs have been processed.\r\n     */\r\n    public onAfterCheckInputsObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when reset has been called and applied to the camera.\r\n     */\r\n    public onRestoreStateObservable = new Observable<Camera>();\r\n\r\n    /**\r\n     * Is this camera a part of a rig system?\r\n     */\r\n    public isRigCamera: boolean = false;\r\n\r\n    /**\r\n     * If isRigCamera set to true this will be set with the parent camera.\r\n     * The parent camera is not (!) necessarily the .parent of this camera (like in the case of XR)\r\n     */\r\n    public rigParent?: Camera;\r\n\r\n    /**\r\n     * Render pass id used by the camera to render into the main framebuffer\r\n     */\r\n    public renderPassId: number;\r\n\r\n    /** @internal */\r\n    public _cameraRigParams: any;\r\n    /** @internal */\r\n    public _rigCameras = new Array<Camera>();\r\n    /** @internal */\r\n    public _rigPostProcess: Nullable<PostProcess>;\r\n\r\n    protected _webvrViewMatrix = Matrix.Identity();\r\n    /** @internal */\r\n    public _skipRendering = false;\r\n\r\n    /** @internal */\r\n    public _projectionMatrix = new Matrix();\r\n\r\n    /** @internal */\r\n    public _postProcesses = new Array<Nullable<PostProcess>>();\r\n\r\n    /** @internal */\r\n    public _activeMeshes = new SmartArray<AbstractMesh>(256);\r\n\r\n    protected _globalPosition = Vector3.Zero();\r\n\r\n    /** @internal */\r\n    public _computedViewMatrix = Matrix.Identity();\r\n    private _doNotComputeProjectionMatrix = false;\r\n    private _transformMatrix = Matrix.Zero();\r\n    private _frustumPlanes: Plane[];\r\n    private _refreshFrustumPlanes = true;\r\n    private _storedFov: number;\r\n    private _stateStored: boolean;\r\n    private _absoluteRotation: Quaternion = Quaternion.Identity();\r\n\r\n    /**\r\n     * Instantiates a new camera object.\r\n     * This should not be used directly but through the inherited cameras: ArcRotate, Free...\r\n     * @see https://doc.babylonjs.com/features/cameras\r\n     * @param name Defines the name of the camera in the scene\r\n     * @param position Defines the position of the camera\r\n     * @param scene Defines the scene the camera belongs too\r\n     * @param setActiveOnSceneIfNoneActive Defines if the camera should be set as active after creation if no other camera have been defined in the scene\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, setActiveOnSceneIfNoneActive = true) {\r\n        super(name, scene);\r\n\r\n        this.getScene().addCamera(this);\r\n\r\n        if (setActiveOnSceneIfNoneActive && !this.getScene().activeCamera) {\r\n            this.getScene().activeCamera = this;\r\n        }\r\n\r\n        this.position = position;\r\n        this.renderPassId = this.getScene().getEngine().createRenderPassId(`Camera ${name}`);\r\n    }\r\n\r\n    /**\r\n     * Store current camera state (fov, position, etc..)\r\n     * @returns the camera\r\n     */\r\n    public storeState(): Camera {\r\n        this._stateStored = true;\r\n        this._storedFov = this.fov;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Restores the camera state values if it has been stored. You must call storeState() first\r\n     */\r\n    protected _restoreStateValues(): boolean {\r\n        if (!this._stateStored) {\r\n            return false;\r\n        }\r\n\r\n        this.fov = this._storedFov;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Restored camera state. You must call storeState() first.\r\n     * @returns true if restored and false otherwise\r\n     */\r\n    public restoreState(): boolean {\r\n        if (this._restoreStateValues()) {\r\n            this.onRestoreStateObservable.notifyObservers(this);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the camera.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"Camera\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isCamera = true;\r\n\r\n    /**\r\n     * Gets a string representation of the camera useful for debug purpose.\r\n     * @param fullDetails Defines that a more verbose level of logging is required\r\n     * @returns the string representation\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name;\r\n        ret += \", type: \" + this.getClassName();\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Automatically tilts the projection plane, using `projectionPlaneTilt`, to correct the perspective effect on vertical lines.\r\n     */\r\n    public applyVerticalCorrection() {\r\n        const rot = this.absoluteRotation.toEulerAngles();\r\n\r\n        this.projectionPlaneTilt = this._scene.useRightHandedSystem ? -rot.x : rot.x;\r\n    }\r\n\r\n    /**\r\n     * Gets the current world space position of the camera.\r\n     */\r\n    public get globalPosition(): Vector3 {\r\n        return this._globalPosition;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of active meshes this frame (meshes no culled or excluded by lod s in the frame)\r\n     * @returns the active meshe list\r\n     */\r\n    public getActiveMeshes(): SmartArray<AbstractMesh> {\r\n        return this._activeMeshes;\r\n    }\r\n\r\n    /**\r\n     * Check whether a mesh is part of the current active mesh list of the camera\r\n     * @param mesh Defines the mesh to check\r\n     * @returns true if active, false otherwise\r\n     */\r\n    public isActiveMesh(mesh: Mesh): boolean {\r\n        return this._activeMeshes.indexOf(mesh) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Is this camera ready to be used/rendered\r\n     * @param completeCheck defines if a complete check (including post processes) has to be done (false by default)\r\n     * @returns true if the camera is ready\r\n     */\r\n    public isReady(completeCheck = false): boolean {\r\n        if (completeCheck) {\r\n            for (const pp of this._postProcesses) {\r\n                if (pp && !pp.isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return super.isReady(completeCheck);\r\n    }\r\n\r\n    /** @internal */\r\n    public _initCache() {\r\n        super._initCache();\r\n\r\n        this._cache.position = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cache.upVector = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\r\n        this._cache.mode = undefined;\r\n        this._cache.minZ = undefined;\r\n        this._cache.maxZ = undefined;\r\n\r\n        this._cache.fov = undefined;\r\n        this._cache.fovMode = undefined;\r\n        this._cache.aspectRatio = undefined;\r\n\r\n        this._cache.orthoLeft = undefined;\r\n        this._cache.orthoRight = undefined;\r\n        this._cache.orthoBottom = undefined;\r\n        this._cache.orthoTop = undefined;\r\n        this._cache.renderWidth = undefined;\r\n        this._cache.renderHeight = undefined;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateCache(ignoreParentClass?: boolean): void {\r\n        if (!ignoreParentClass) {\r\n            super._updateCache();\r\n        }\r\n\r\n        this._cache.position.copyFrom(this.position);\r\n        this._cache.upVector.copyFrom(this.upVector);\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        return this._isSynchronizedViewMatrix() && this._isSynchronizedProjectionMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronizedViewMatrix(): boolean {\r\n        if (!super._isSynchronized()) {\r\n            return false;\r\n        }\r\n\r\n        return this._cache.position.equals(this.position) && this._cache.upVector.equals(this.upVector) && this.isSynchronizedWithParent();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronizedProjectionMatrix(): boolean {\r\n        let check = this._cache.mode === this.mode && this._cache.minZ === this.minZ && this._cache.maxZ === this.maxZ;\r\n\r\n        if (!check) {\r\n            return false;\r\n        }\r\n\r\n        const engine = this.getEngine();\r\n\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            check =\r\n                this._cache.fov === this.fov &&\r\n                this._cache.fovMode === this.fovMode &&\r\n                this._cache.aspectRatio === engine.getAspectRatio(this) &&\r\n                this._cache.projectionPlaneTilt === this.projectionPlaneTilt;\r\n        } else {\r\n            check =\r\n                this._cache.orthoLeft === this.orthoLeft &&\r\n                this._cache.orthoRight === this.orthoRight &&\r\n                this._cache.orthoBottom === this.orthoBottom &&\r\n                this._cache.orthoTop === this.orthoTop &&\r\n                this._cache.renderWidth === engine.getRenderWidth() &&\r\n                this._cache.renderHeight === engine.getRenderHeight();\r\n        }\r\n\r\n        return check;\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     * BACK COMPAT SIGNATURE ONLY.\r\n     */\r\n    public attachControl(ignored: any, noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * This function is here because typescript removes the typing of the last function.\r\n     * @param _ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param _noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(_ignored?: any, _noPreventDefault?: boolean): void {}\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     */\r\n    public detachControl(ignored?: any): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * This function is here because typescript removes the typing of the last function.\r\n     * @param _ignored defines an ignored parameter kept for backward compatibility.\r\n     */\r\n    public detachControl(_ignored?: any): void {}\r\n\r\n    /**\r\n     * Update the camera state according to the different inputs gathered during the frame.\r\n     */\r\n    public update(): void {\r\n        this._checkInputs();\r\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            this._updateRigCameras();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkInputs(): void {\r\n        this.onAfterCheckInputsObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @internal */\r\n    public get rigCameras(): Camera[] {\r\n        return this._rigCameras;\r\n    }\r\n\r\n    /**\r\n     * Gets the post process used by the rig cameras\r\n     */\r\n    public get rigPostProcess(): Nullable<PostProcess> {\r\n        return this._rigPostProcess;\r\n    }\r\n\r\n    /**\r\n     * Internal, gets the first post process.\r\n     * @returns the first post process to be run on this camera.\r\n     */\r\n    public _getFirstPostProcess(): Nullable<PostProcess> {\r\n        for (let ppIndex = 0; ppIndex < this._postProcesses.length; ppIndex++) {\r\n            if (this._postProcesses[ppIndex] !== null) {\r\n                return this._postProcesses[ppIndex];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _cascadePostProcessesToRigCams(): void {\r\n        // invalidate framebuffer\r\n        const firstPostProcess = this._getFirstPostProcess();\r\n        if (firstPostProcess) {\r\n            firstPostProcess.markTextureDirty();\r\n        }\r\n\r\n        // glue the rigPostProcess to the end of the user postprocesses & assign to each sub-camera\r\n        for (let i = 0, len = this._rigCameras.length; i < len; i++) {\r\n            const cam = this._rigCameras[i];\r\n            const rigPostProcess = cam._rigPostProcess;\r\n\r\n            // for VR rig, there does not have to be a post process\r\n            if (rigPostProcess) {\r\n                const isPass = rigPostProcess.getEffectName() === \"pass\";\r\n                if (isPass) {\r\n                    // any rig which has a PassPostProcess for rig[0], cannot be isIntermediate when there are also user postProcesses\r\n                    cam.isIntermediate = this._postProcesses.length === 0;\r\n                }\r\n                cam._postProcesses = this._postProcesses.slice(0).concat(rigPostProcess);\r\n                rigPostProcess.markTextureDirty();\r\n            } else {\r\n                cam._postProcesses = this._postProcesses.slice(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach a post process to the camera.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#attach-postprocess\r\n     * @param postProcess The post process to attach to the camera\r\n     * @param insertAt The position of the post process in case several of them are in use in the scene\r\n     * @returns the position the post process has been inserted at\r\n     */\r\n    public attachPostProcess(postProcess: PostProcess, insertAt: Nullable<number> = null): number {\r\n        if (!postProcess.isReusable() && this._postProcesses.indexOf(postProcess) > -1) {\r\n            Logger.Error(\"You're trying to reuse a post process not defined as reusable.\");\r\n            return 0;\r\n        }\r\n\r\n        if (insertAt == null || insertAt < 0) {\r\n            this._postProcesses.push(postProcess);\r\n        } else if (this._postProcesses[insertAt] === null) {\r\n            this._postProcesses[insertAt] = postProcess;\r\n        } else {\r\n            this._postProcesses.splice(insertAt, 0, postProcess);\r\n        }\r\n        this._cascadePostProcessesToRigCams(); // also ensures framebuffer invalidated\r\n\r\n        // Update prePass\r\n        if (this._scene.prePassRenderer) {\r\n            this._scene.prePassRenderer.markAsDirty();\r\n        }\r\n\r\n        return this._postProcesses.indexOf(postProcess);\r\n    }\r\n\r\n    /**\r\n     * Detach a post process to the camera.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#attach-postprocess\r\n     * @param postProcess The post process to detach from the camera\r\n     */\r\n    public detachPostProcess(postProcess: PostProcess): void {\r\n        const idx = this._postProcesses.indexOf(postProcess);\r\n        if (idx !== -1) {\r\n            this._postProcesses[idx] = null;\r\n        }\r\n\r\n        // Update prePass\r\n        if (this._scene.prePassRenderer) {\r\n            this._scene.prePassRenderer.markAsDirty();\r\n        }\r\n\r\n        this._cascadePostProcessesToRigCams(); // also ensures framebuffer invalidated\r\n    }\r\n\r\n    /**\r\n     * Gets the current world matrix of the camera\r\n     */\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._isSynchronizedViewMatrix()) {\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        // Getting the the view matrix will also compute the world matrix.\r\n        this.getViewMatrix();\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getViewMatrix(): Matrix {\r\n        return Matrix.Identity();\r\n    }\r\n\r\n    /**\r\n     * Gets the current view matrix of the camera.\r\n     * @param force forces the camera to recompute the matrix without looking at the cached state\r\n     * @returns the view matrix\r\n     */\r\n    public getViewMatrix(force?: boolean): Matrix {\r\n        if (!force && this._isSynchronizedViewMatrix()) {\r\n            return this._computedViewMatrix;\r\n        }\r\n\r\n        this.updateCache();\r\n        this._computedViewMatrix = this._getViewMatrix();\r\n        this._currentRenderId = this.getScene().getRenderId();\r\n        this._childUpdateId++;\r\n\r\n        this._refreshFrustumPlanes = true;\r\n\r\n        if (this._cameraRigParams && this._cameraRigParams.vrPreViewMatrix) {\r\n            this._computedViewMatrix.multiplyToRef(this._cameraRigParams.vrPreViewMatrix, this._computedViewMatrix);\r\n        }\r\n\r\n        // Notify parent camera if rig camera is changed\r\n        if (this.parent && (this.parent as Camera).onViewMatrixChangedObservable) {\r\n            (this.parent as Camera).onViewMatrixChangedObservable.notifyObservers(this.parent as Camera);\r\n        }\r\n\r\n        this.onViewMatrixChangedObservable.notifyObservers(this);\r\n\r\n        this._computedViewMatrix.invertToRef(this._worldMatrix);\r\n\r\n        return this._computedViewMatrix;\r\n    }\r\n\r\n    /**\r\n     * Freeze the projection matrix.\r\n     * It will prevent the cache check of the camera projection compute and can speed up perf\r\n     * if no parameter of the camera are meant to change\r\n     * @param projection Defines manually a projection if necessary\r\n     */\r\n    public freezeProjectionMatrix(projection?: Matrix): void {\r\n        this._doNotComputeProjectionMatrix = true;\r\n        if (projection !== undefined) {\r\n            this._projectionMatrix = projection;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unfreeze the projection matrix if it has previously been freezed by freezeProjectionMatrix.\r\n     */\r\n    public unfreezeProjectionMatrix(): void {\r\n        this._doNotComputeProjectionMatrix = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the current projection matrix of the camera.\r\n     * @param force forces the camera to recompute the matrix without looking at the cached state\r\n     * @returns the projection matrix\r\n     */\r\n    public getProjectionMatrix(force?: boolean): Matrix {\r\n        if (this._doNotComputeProjectionMatrix || (!force && this._isSynchronizedProjectionMatrix())) {\r\n            return this._projectionMatrix;\r\n        }\r\n\r\n        // Cache\r\n        this._cache.mode = this.mode;\r\n        this._cache.minZ = this.minZ;\r\n        this._cache.maxZ = this.maxZ;\r\n\r\n        // Matrix\r\n        this._refreshFrustumPlanes = true;\r\n\r\n        const engine = this.getEngine();\r\n        const scene = this.getScene();\r\n        const reverseDepth = engine.useReverseDepthBuffer;\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            this._cache.fov = this.fov;\r\n            this._cache.fovMode = this.fovMode;\r\n            this._cache.aspectRatio = engine.getAspectRatio(this);\r\n            this._cache.projectionPlaneTilt = this.projectionPlaneTilt;\r\n\r\n            if (this.minZ <= 0) {\r\n                this.minZ = 0.1;\r\n            }\r\n\r\n            let getProjectionMatrix: (\r\n                fov: number,\r\n                aspect: number,\r\n                znear: number,\r\n                zfar: number,\r\n                result: Matrix,\r\n                isVerticalFovFixed: boolean,\r\n                halfZRange: boolean,\r\n                projectionPlaneTilt: number,\r\n                reverseDepthBufferMode: boolean\r\n            ) => void;\r\n            if (scene.useRightHandedSystem) {\r\n                getProjectionMatrix = Matrix.PerspectiveFovRHToRef;\r\n            } else {\r\n                getProjectionMatrix = Matrix.PerspectiveFovLHToRef;\r\n            }\r\n\r\n            getProjectionMatrix(\r\n                this.fov,\r\n                engine.getAspectRatio(this),\r\n                reverseDepth ? this.maxZ : this.minZ,\r\n                reverseDepth ? this.minZ : this.maxZ,\r\n                this._projectionMatrix,\r\n                this.fovMode === Camera.FOVMODE_VERTICAL_FIXED,\r\n                engine.isNDCHalfZRange,\r\n                this.projectionPlaneTilt,\r\n                reverseDepth\r\n            );\r\n        } else {\r\n            const halfWidth = engine.getRenderWidth() / 2.0;\r\n            const halfHeight = engine.getRenderHeight() / 2.0;\r\n            if (scene.useRightHandedSystem) {\r\n                Matrix.OrthoOffCenterRHToRef(\r\n                    this.orthoLeft ?? -halfWidth,\r\n                    this.orthoRight ?? halfWidth,\r\n                    this.orthoBottom ?? -halfHeight,\r\n                    this.orthoTop ?? halfHeight,\r\n                    reverseDepth ? this.maxZ : this.minZ,\r\n                    reverseDepth ? this.minZ : this.maxZ,\r\n                    this._projectionMatrix,\r\n                    engine.isNDCHalfZRange\r\n                );\r\n            } else {\r\n                Matrix.OrthoOffCenterLHToRef(\r\n                    this.orthoLeft ?? -halfWidth,\r\n                    this.orthoRight ?? halfWidth,\r\n                    this.orthoBottom ?? -halfHeight,\r\n                    this.orthoTop ?? halfHeight,\r\n                    reverseDepth ? this.maxZ : this.minZ,\r\n                    reverseDepth ? this.minZ : this.maxZ,\r\n                    this._projectionMatrix,\r\n                    engine.isNDCHalfZRange\r\n                );\r\n            }\r\n\r\n            this._cache.orthoLeft = this.orthoLeft;\r\n            this._cache.orthoRight = this.orthoRight;\r\n            this._cache.orthoBottom = this.orthoBottom;\r\n            this._cache.orthoTop = this.orthoTop;\r\n            this._cache.renderWidth = engine.getRenderWidth();\r\n            this._cache.renderHeight = engine.getRenderHeight();\r\n        }\r\n\r\n        this.onProjectionMatrixChangedObservable.notifyObservers(this);\r\n\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix (ie. the multiplication of view by projection matrices)\r\n     * @returns a Matrix\r\n     */\r\n    public getTransformationMatrix(): Matrix {\r\n        this._computedViewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    private _updateFrustumPlanes(): void {\r\n        if (!this._refreshFrustumPlanes) {\r\n            return;\r\n        }\r\n\r\n        this.getTransformationMatrix();\r\n\r\n        if (!this._frustumPlanes) {\r\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\r\n        } else {\r\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\r\n        }\r\n\r\n        this._refreshFrustumPlanes = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * This checks the bounding box center. See isCompletelyInFrustum for a full bounding check\r\n     * @param target The object to check\r\n     * @param checkRigCameras If the rig cameras should be checked (eg. with webVR camera both eyes should be checked) (Default: false)\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isInFrustum(target: ICullable, checkRigCameras = false): boolean {\r\n        this._updateFrustumPlanes();\r\n\r\n        if (checkRigCameras && this.rigCameras.length > 0) {\r\n            let result = false;\r\n            this.rigCameras.forEach((cam) => {\r\n                cam._updateFrustumPlanes();\r\n                result = result || target.isInFrustum(cam._frustumPlanes);\r\n            });\r\n            return result;\r\n        } else {\r\n            return target.isInFrustum(this._frustumPlanes);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param target The object to check\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isCompletelyInFrustum(target: ICullable): boolean {\r\n        this._updateFrustumPlanes();\r\n\r\n        return target.isCompletelyInFrustum(this._frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Gets a ray in the forward direction from the camera.\r\n     * @param length Defines the length of the ray to create\r\n     * @param transform Defines the transform to apply to the ray, by default the world matrix is used to create a workd space ray\r\n     * @param origin Defines the start point of the ray which defaults to the camera position\r\n     * @returns the forward ray\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getForwardRay(length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    /**\r\n     * Gets a ray in the forward direction from the camera.\r\n     * @param refRay the ray to (re)use when setting the values\r\n     * @param length Defines the length of the ray to create\r\n     * @param transform Defines the transform to apply to the ray, by default the world matrx is used to create a workd space ray\r\n     * @param origin Defines the start point of the ray which defaults to the camera position\r\n     * @returns the forward ray\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getForwardRayToRef(refRay: Ray, length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Observables\r\n        this.onViewMatrixChangedObservable.clear();\r\n        this.onProjectionMatrixChangedObservable.clear();\r\n        this.onAfterCheckInputsObservable.clear();\r\n        this.onRestoreStateObservable.clear();\r\n\r\n        // Inputs\r\n        if (this.inputs) {\r\n            this.inputs.clear();\r\n        }\r\n\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        // Remove from scene\r\n        this.getScene().removeCamera(this);\r\n        while (this._rigCameras.length > 0) {\r\n            const camera = this._rigCameras.pop();\r\n            if (camera) {\r\n                camera.dispose();\r\n            }\r\n        }\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.cameras.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.cameras.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        // Postprocesses\r\n        if (this._rigPostProcess) {\r\n            this._rigPostProcess.dispose(this);\r\n            this._rigPostProcess = null;\r\n            this._postProcesses.length = 0;\r\n        } else if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            this._rigPostProcess = null;\r\n            this._postProcesses.length = 0;\r\n        } else {\r\n            let i = this._postProcesses.length;\r\n            while (--i >= 0) {\r\n                const postProcess = this._postProcesses[i];\r\n                if (postProcess) {\r\n                    postProcess.dispose(this);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Render targets\r\n        let i = this.customRenderTargets.length;\r\n        while (--i >= 0) {\r\n            this.customRenderTargets[i].dispose();\r\n        }\r\n        this.customRenderTargets.length = 0;\r\n\r\n        // Active Meshes\r\n        this._activeMeshes.dispose();\r\n\r\n        this.getScene().getEngine().releaseRenderPassId(this.renderPassId);\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /** @internal */\r\n    public _isLeftCamera = false;\r\n    /**\r\n     * Gets the left camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get isLeftCamera(): boolean {\r\n        return this._isLeftCamera;\r\n    }\r\n\r\n    /** @internal */\r\n    public _isRightCamera = false;\r\n    /**\r\n     * Gets the right camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get isRightCamera(): boolean {\r\n        return this._isRightCamera;\r\n    }\r\n\r\n    /**\r\n     * Gets the left camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get leftCamera(): Nullable<FreeCamera> {\r\n        if (this._rigCameras.length < 1) {\r\n            return null;\r\n        }\r\n        return <FreeCamera>this._rigCameras[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get rightCamera(): Nullable<FreeCamera> {\r\n        if (this._rigCameras.length < 2) {\r\n            return null;\r\n        }\r\n        return <FreeCamera>this._rigCameras[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the left camera target of a rig setup in case of Rigged Camera\r\n     * @returns the target position\r\n     */\r\n    public getLeftTarget(): Nullable<Vector3> {\r\n        if (this._rigCameras.length < 1) {\r\n            return null;\r\n        }\r\n        return (<TargetCamera>this._rigCameras[0]).getTarget();\r\n    }\r\n\r\n    /**\r\n     * Gets the right camera target of a rig setup in case of Rigged Camera\r\n     * @returns the target position\r\n     */\r\n    public getRightTarget(): Nullable<Vector3> {\r\n        if (this._rigCameras.length < 2) {\r\n            return null;\r\n        }\r\n        return (<TargetCamera>this._rigCameras[1]).getTarget();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setCameraRigMode(mode: number, rigParams: any): void {\r\n        if (this.cameraRigMode === mode) {\r\n            return;\r\n        }\r\n\r\n        while (this._rigCameras.length > 0) {\r\n            const camera = this._rigCameras.pop();\r\n\r\n            if (camera) {\r\n                camera.dispose();\r\n            }\r\n        }\r\n        this.cameraRigMode = mode;\r\n        this._cameraRigParams = {};\r\n        //we have to implement stereo camera calcultating left and right viewpoints from interaxialDistance and target,\r\n        //not from a given angle as it is now, but until that complete code rewriting provisional stereoHalfAngle value is introduced\r\n        this._cameraRigParams.interaxialDistance = rigParams.interaxialDistance || 0.0637;\r\n        this._cameraRigParams.stereoHalfAngle = Tools.ToRadians(this._cameraRigParams.interaxialDistance / 0.0637);\r\n\r\n        // create the rig cameras, unless none\r\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            const leftCamera = this.createRigCamera(this.name + \"_L\", 0);\r\n            if (leftCamera) {\r\n                leftCamera._isLeftCamera = true;\r\n            }\r\n            const rightCamera = this.createRigCamera(this.name + \"_R\", 1);\r\n            if (rightCamera) {\r\n                rightCamera._isRightCamera = true;\r\n            }\r\n            if (leftCamera && rightCamera) {\r\n                this._rigCameras.push(leftCamera);\r\n                this._rigCameras.push(rightCamera);\r\n            }\r\n        }\r\n\r\n        this._setRigMode(rigParams);\r\n\r\n        this._cascadePostProcessesToRigCams();\r\n        this.update();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setRigMode(rigParams: any) {\r\n        // no-op\r\n    }\r\n\r\n    /** @internal */\r\n    public _getVRProjectionMatrix(): Matrix {\r\n        Matrix.PerspectiveFovLHToRef(\r\n            this._cameraRigParams.vrMetrics.aspectRatioFov,\r\n            this._cameraRigParams.vrMetrics.aspectRatio,\r\n            this.minZ,\r\n            this.maxZ,\r\n            this._cameraRigParams.vrWorkMatrix,\r\n            true,\r\n            this.getEngine().isNDCHalfZRange\r\n        );\r\n        this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrHMatrix, this._projectionMatrix);\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    protected _updateCameraRotationMatrix() {\r\n        //Here for WebVR\r\n    }\r\n\r\n    protected _updateWebVRCameraRotationMatrix() {\r\n        //Here for WebVR\r\n    }\r\n\r\n    /**\r\n     * This function MUST be overwritten by the different WebVR cameras available.\r\n     * The context in which it is running is the RIG camera. So 'this' is the TargetCamera, left or right.\r\n     * @internal\r\n     */\r\n    public _getWebVRProjectionMatrix(): Matrix {\r\n        return Matrix.Identity();\r\n    }\r\n\r\n    /**\r\n     * This function MUST be overwritten by the different WebVR cameras available.\r\n     * The context in which it is running is the RIG camera. So 'this' is the TargetCamera, left or right.\r\n     * @internal\r\n     */\r\n    public _getWebVRViewMatrix(): Matrix {\r\n        return Matrix.Identity();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setCameraRigParameter(name: string, value: any) {\r\n        if (!this._cameraRigParams) {\r\n            this._cameraRigParams = {};\r\n        }\r\n        this._cameraRigParams[name] = value;\r\n        //provisionnally:\r\n        if (name === \"interaxialDistance\") {\r\n            this._cameraRigParams.stereoHalfAngle = Tools.ToRadians(value / 0.0637);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * needs to be overridden by children so sub has required properties to be copied\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public createRigCamera(name: string, cameraIndex: number): Nullable<Camera> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * May need to be overridden by children\r\n     * @internal\r\n     */\r\n    public _updateRigCameras() {\r\n        for (let i = 0; i < this._rigCameras.length; i++) {\r\n            this._rigCameras[i].minZ = this.minZ;\r\n            this._rigCameras[i].maxZ = this.maxZ;\r\n            this._rigCameras[i].fov = this.fov;\r\n            this._rigCameras[i].upVector.copyFrom(this.upVector);\r\n        }\r\n\r\n        // only update viewport when ANAGLYPH\r\n        if (this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH) {\r\n            this._rigCameras[0].viewport = this._rigCameras[1].viewport = this.viewport;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _setupInputs() {}\r\n\r\n    /**\r\n     * Serialiaze the camera setup to a json representation\r\n     * @returns the JSON representation\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Type\r\n        serializationObject.type = this.getClassName();\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        if (this.inputs) {\r\n            this.inputs.serialize(serializationObject);\r\n        }\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Clones the current camera.\r\n     * @param name The cloned camera name\r\n     * @param newParent The cloned camera's new parent (none by default)\r\n     * @returns the cloned camera\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node> = null): Camera {\r\n        const camera = SerializationHelper.Clone(\r\n            Camera.GetConstructorFromName(this.getClassName(), name, this.getScene(), this.interaxialDistance, this.isStereoscopicSideBySide),\r\n            this\r\n        );\r\n        camera.name = name;\r\n        camera.parent = newParent;\r\n\r\n        this.onClonedObservable.notifyObservers(camera);\r\n\r\n        return camera;\r\n    }\r\n\r\n    /**\r\n     * Gets the direction of the camera relative to a given local axis.\r\n     * @param localAxis Defines the reference axis to provide a relative direction.\r\n     * @returns the direction\r\n     */\r\n    public getDirection(localAxis: Vector3): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getDirectionToRef(localAxis, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the current camera absolute rotation\r\n     */\r\n    public get absoluteRotation(): Quaternion {\r\n        this.getWorldMatrix().decompose(undefined, this._absoluteRotation);\r\n\r\n        return this._absoluteRotation;\r\n    }\r\n\r\n    /**\r\n     * Gets the direction of the camera relative to a given local axis into a passed vector.\r\n     * @param localAxis Defines the reference axis to provide a relative direction.\r\n     * @param result Defines the vector to store the result in\r\n     */\r\n    public getDirectionToRef(localAxis: Vector3, result: Vector3): void {\r\n        Vector3.TransformNormalToRef(localAxis, this.getWorldMatrix(), result);\r\n    }\r\n\r\n    /**\r\n     * Gets a camera constructor for a given camera type\r\n     * @param type The type of the camera to construct (should be equal to one of the camera class name)\r\n     * @param name The name of the camera the result will be able to instantiate\r\n     * @param scene The scene the result will construct the camera in\r\n     * @param interaxial_distance In case of stereoscopic setup, the distance between both eyes\r\n     * @param isStereoscopicSideBySide In case of stereoscopic setup, should the sereo be side b side\r\n     * @returns a factory method to construct the camera\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    static GetConstructorFromName(type: string, name: string, scene: Scene, interaxial_distance: number = 0, isStereoscopicSideBySide: boolean = true): () => Camera {\r\n        const constructorFunc = Node.Construct(type, name, scene, {\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            interaxial_distance: interaxial_distance,\r\n            isStereoscopicSideBySide: isStereoscopicSideBySide,\r\n        });\r\n\r\n        if (constructorFunc) {\r\n            return <() => Camera>constructorFunc;\r\n        }\r\n\r\n        // Default to universal camera\r\n        return () => Camera._CreateDefaultParsedCamera(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Compute the world  matrix of the camera.\r\n     * @returns the camera world matrix\r\n     */\r\n    public computeWorldMatrix(): Matrix {\r\n        return this.getWorldMatrix();\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON and creates the camera from the parsed information\r\n     * @param parsedCamera The JSON to parse\r\n     * @param scene The scene to instantiate the camera in\r\n     * @returns the newly constructed camera\r\n     */\r\n    public static Parse(parsedCamera: any, scene: Scene): Camera {\r\n        const type = parsedCamera.type;\r\n        const construct = Camera.GetConstructorFromName(type, parsedCamera.name, scene, parsedCamera.interaxial_distance, parsedCamera.isStereoscopicSideBySide);\r\n\r\n        const camera = SerializationHelper.Parse(construct, parsedCamera, scene);\r\n\r\n        // Parent\r\n        if (parsedCamera.parentId !== undefined) {\r\n            camera._waitingParentId = parsedCamera.parentId;\r\n        }\r\n\r\n        // Parent instance index\r\n        if (parsedCamera.parentInstanceIndex !== undefined) {\r\n            camera._waitingParentInstanceIndex = parsedCamera.parentInstanceIndex;\r\n        }\r\n\r\n        //If camera has an input manager, let it parse inputs settings\r\n        if (camera.inputs) {\r\n            camera.inputs.parse(parsedCamera);\r\n\r\n            camera._setupInputs();\r\n        }\r\n\r\n        if (parsedCamera.upVector) {\r\n            camera.upVector = Vector3.FromArray(parsedCamera.upVector); // need to force the upVector\r\n        }\r\n\r\n        if ((<any>camera).setPosition) {\r\n            // need to force position\r\n            camera.position.copyFromFloats(0, 0, 0);\r\n            (<any>camera).setPosition(Vector3.FromArray(parsedCamera.position));\r\n        }\r\n\r\n        // Target\r\n        if (parsedCamera.target) {\r\n            if ((<any>camera).setTarget) {\r\n                (<any>camera).setTarget(Vector3.FromArray(parsedCamera.target));\r\n            }\r\n        }\r\n\r\n        // Apply 3d rig, when found\r\n        if (parsedCamera.cameraRigMode) {\r\n            const rigParams = parsedCamera.interaxial_distance ? { interaxialDistance: parsedCamera.interaxial_distance } : {};\r\n            camera.setCameraRigMode(parsedCamera.cameraRigMode, rigParams);\r\n        }\r\n\r\n        // Animations\r\n        if (parsedCamera.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedCamera.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedCamera.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    camera.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(camera, parsedCamera, scene);\r\n        }\r\n\r\n        if (parsedCamera.autoAnimate) {\r\n            scene.beginAnimation(camera, parsedCamera.autoAnimateFrom, parsedCamera.autoAnimateTo, parsedCamera.autoAnimateLoop, parsedCamera.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Check if isEnabled is defined to be back compatible with prior serialized versions.\r\n        if (parsedCamera.isEnabled !== undefined) {\r\n            camera.setEnabled(parsedCamera.isEnabled);\r\n        }\r\n\r\n        return camera;\r\n    }\r\n}\r\n","import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class IntersectionInfo {\r\n    public faceId = 0;\r\n    public subMeshId = 0;\r\n\r\n    constructor(public bu: Nullable<number>, public bv: Nullable<number>, public distance: number) {}\r\n}\r\n","import type { Collider } from \"./collider\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\n\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _MeshCollisionData {\r\n    public _checkCollisions = false;\r\n    public _collisionMask = -1;\r\n    public _collisionGroup = -1;\r\n    public _surroundingMeshes: Nullable<AbstractMesh[]> = null;\r\n    public _collider: Nullable<Collider> = null;\r\n    public _oldPositionForCollisions = new Vector3(0, 0, 0);\r\n    public _diffPositionForCollisions = new Vector3(0, 0, 0);\r\n    public _onCollideObserver: Nullable<Observer<AbstractMesh>>;\r\n    public _onCollisionPositionChangeObserver: Nullable<Observer<Vector3>>;\r\n    public _collisionResponse = true;\r\n}\r\n","import type { Nullable, FloatArray } from \"../types\";\r\nimport { Vector3, Vector2, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { Sprite } from \"../Sprites/sprite\";\r\n\r\ndeclare type Ray = import(\"../Culling/ray\").Ray;\r\n\r\n/**\r\n * Information about the result of picking within a scene\r\n * @see https://doc.babylonjs.com/divingDeeper/mesh/interactions/picking_collisions\r\n */\r\nexport class PickingInfo {\r\n    /**\r\n     * If the pick collided with an object\r\n     */\r\n    public hit = false;\r\n    /**\r\n     * Distance away where the pick collided\r\n     */\r\n    public distance = 0;\r\n    /**\r\n     * The location of pick collision\r\n     */\r\n    public pickedPoint: Nullable<Vector3> = null;\r\n    /**\r\n     * The mesh corresponding the the pick collision\r\n     */\r\n    public pickedMesh: Nullable<AbstractMesh> = null;\r\n    /** (See getTextureCoordinates) The barycentric U coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bu = 0;\r\n    /** (See getTextureCoordinates) The barycentric V coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bv = 0;\r\n    /** The index of the face on the mesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public faceId = -1;\r\n    /** The index of the face on the subMesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public subMeshFaceId = -1;\r\n    /** Id of the the submesh that was picked */\r\n    public subMeshId = 0;\r\n    /** If a sprite was picked, this will be the sprite the pick collided with */\r\n    public pickedSprite: Nullable<Sprite> = null;\r\n    /** If we are picking a mesh with thin instance, this will give you the picked thin instance */\r\n    public thinInstanceIndex = -1;\r\n    /**\r\n     * The ray that was used to perform the picking.\r\n     */\r\n    public ray: Nullable<Ray> = null;\r\n    /**\r\n     * If a mesh was used to do the picking (eg. 6dof controller) as a \"near interaction\", this will be populated.\r\n     */\r\n    public originMesh: Nullable<AbstractMesh> = null;\r\n    /**\r\n     * The aim-space transform of the input used for picking, if it is an XR input source.\r\n     */\r\n    public aimTransform: Nullable<TransformNode> = null;\r\n    /**\r\n     * The grip-space transform of the input used for picking, if it is an XR input source.\r\n     * Some XR sources, such as input coming from head mounted displays, do not have this.\r\n     */\r\n    public gripTransform: Nullable<TransformNode> = null;\r\n\r\n    /**\r\n     * Gets the normal corresponding to the face the pick collided with\r\n     * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)\r\n     * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map\r\n     * @returns The normal corresponding to the face the pick collided with\r\n     * @remarks Note that the returned normal will always point towards the picking ray.\r\n     */\r\n    public getNormal(useWorldCoordinates = false, useVerticesNormals = true): Nullable<Vector3> {\r\n        if (!this.pickedMesh || (useVerticesNormals && !this.pickedMesh.isVerticesDataPresent(VertexBuffer.NormalKind))) {\r\n            return null;\r\n        }\r\n\r\n        const indices = this.pickedMesh.getIndices();\r\n\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n\r\n        let result: Vector3;\r\n\r\n        if (useVerticesNormals) {\r\n            const normals = <FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            let normal0 = Vector3.FromArray(normals, indices[this.faceId * 3] * 3);\r\n            let normal1 = Vector3.FromArray(normals, indices[this.faceId * 3 + 1] * 3);\r\n            let normal2 = Vector3.FromArray(normals, indices[this.faceId * 3 + 2] * 3);\r\n\r\n            normal0 = normal0.scale(this.bu);\r\n            normal1 = normal1.scale(this.bv);\r\n            normal2 = normal2.scale(1.0 - this.bu - this.bv);\r\n\r\n            result = new Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);\r\n        } else {\r\n            const positions = <FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n            const vertex1 = Vector3.FromArray(positions, indices[this.faceId * 3] * 3);\r\n            const vertex2 = Vector3.FromArray(positions, indices[this.faceId * 3 + 1] * 3);\r\n            const vertex3 = Vector3.FromArray(positions, indices[this.faceId * 3 + 2] * 3);\r\n\r\n            const p1p2 = vertex1.subtract(vertex2);\r\n            const p3p2 = vertex3.subtract(vertex2);\r\n\r\n            result = Vector3.Cross(p1p2, p3p2);\r\n        }\r\n\r\n        // Flip the normal if the picking ray is in the same direction.\r\n        if (this.ray && Vector3.Dot(result, this.ray.direction) > 0) {\r\n            result.negateInPlace();\r\n        }\r\n\r\n        if (useWorldCoordinates) {\r\n            let wm = this.pickedMesh.getWorldMatrix();\r\n\r\n            if (this.pickedMesh.nonUniformScaling) {\r\n                TmpVectors.Matrix[0].copyFrom(wm);\r\n                wm = TmpVectors.Matrix[0];\r\n                wm.setTranslationFromFloats(0, 0, 0);\r\n                wm.invert();\r\n                wm.transposeToRef(TmpVectors.Matrix[1]);\r\n\r\n                wm = TmpVectors.Matrix[1];\r\n            }\r\n\r\n            Vector3.TransformNormalToRef(result, wm, result);\r\n        }\r\n\r\n        result.normalize();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture coordinates of where the pick occurred\r\n     * @returns the vector containing the coordinates of the texture\r\n     */\r\n    public getTextureCoordinates(): Nullable<Vector2> {\r\n        if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            return null;\r\n        }\r\n\r\n        const indices = this.pickedMesh.getIndices();\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n\r\n        const uvs = this.pickedMesh.getVerticesData(VertexBuffer.UVKind);\r\n        if (!uvs) {\r\n            return null;\r\n        }\r\n\r\n        let uv0 = Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);\r\n        let uv1 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);\r\n        let uv2 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);\r\n\r\n        uv0 = uv0.scale(this.bu);\r\n        uv1 = uv1.scale(this.bv);\r\n        uv2 = uv2.scale(1.0 - this.bu - this.bv);\r\n\r\n        return new Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);\r\n    }\r\n}\r\n","import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { BoundingSphere } from \"../Culling/boundingSphere\";\r\n\r\nimport type { ICullable } from \"./boundingInfo\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\ndeclare type DrawWrapper = import(\"../Materials/drawWrapper\").DrawWrapper;\r\n\r\n/**\r\n * Class used to store bounding box information\r\n */\r\nexport class BoundingBox implements ICullable {\r\n    /**\r\n     * Gets the 8 vectors representing the bounding box in local space\r\n     */\r\n    public readonly vectors: Vector3[] = ArrayTools.BuildArray(8, Vector3.Zero);\r\n    /**\r\n     * Gets the center of the bounding box in local space\r\n     */\r\n    public readonly center: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the center of the bounding box in world space\r\n     */\r\n    public readonly centerWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the extend size in local space\r\n     */\r\n    public readonly extendSize: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the extend size in world space\r\n     */\r\n    public readonly extendSizeWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the OBB (object bounding box) directions\r\n     */\r\n    public readonly directions: Vector3[] = ArrayTools.BuildArray(3, Vector3.Zero);\r\n    /**\r\n     * Gets the 8 vectors representing the bounding box in world space\r\n     */\r\n    public readonly vectorsWorld: Vector3[] = ArrayTools.BuildArray(8, Vector3.Zero);\r\n    /**\r\n     * Gets the minimum vector in world space\r\n     */\r\n    public readonly minimumWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in world space\r\n     */\r\n    public readonly maximumWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum: Vector3 = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly _TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _tag: number;\r\n\r\n    /** @internal */\r\n    public _drawWrapperFront: Nullable<DrawWrapper> = null;\r\n    /** @internal */\r\n    public _drawWrapperBack: Nullable<DrawWrapper> = null;\r\n\r\n    /**\r\n     * Creates a new bounding box\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Recreates the entire bounding box from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        const vectors = this.vectors;\r\n\r\n        this.minimum.copyFromFloats(minX, minY, minZ);\r\n        this.maximum.copyFromFloats(maxX, maxY, maxZ);\r\n        vectors[0].copyFromFloats(minX, minY, minZ);\r\n        vectors[1].copyFromFloats(maxX, maxY, maxZ);\r\n        vectors[2].copyFromFloats(maxX, minY, minZ);\r\n        vectors[3].copyFromFloats(minX, maxY, minZ);\r\n        vectors[4].copyFromFloats(minX, minY, maxZ);\r\n        vectors[5].copyFromFloats(maxX, maxY, minZ);\r\n        vectors[6].copyFromFloats(minX, maxY, maxZ);\r\n        vectors[7].copyFromFloats(maxX, minY, maxZ);\r\n\r\n        // OBB\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        max.subtractToRef(min, this.extendSize).scaleInPlace(0.5);\r\n\r\n        this._worldMatrix = worldMatrix || Matrix.IdentityReadOnly;\r\n\r\n        this._update(this._worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding box by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingBox {\r\n        const tmpVectors = BoundingBox._TmpVector3;\r\n        const diff = this.maximum.subtractToRef(this.minimum, tmpVectors[0]);\r\n        const len = diff.length();\r\n        diff.normalizeFromLength(len);\r\n        const distance = len * factor;\r\n        const newRadius = diff.scaleInPlace(distance * 0.5);\r\n\r\n        const min = this.center.subtractToRef(newRadius, tmpVectors[1]);\r\n        const max = this.center.addToRef(newRadius, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _update(world: DeepImmutable<Matrix>): void {\r\n        const minWorld = this.minimumWorld;\r\n        const maxWorld = this.maximumWorld;\r\n        const directions = this.directions;\r\n        const vectorsWorld = this.vectorsWorld;\r\n        const vectors = this.vectors;\r\n\r\n        if (!world.isIdentity()) {\r\n            minWorld.setAll(Number.MAX_VALUE);\r\n            maxWorld.setAll(-Number.MAX_VALUE);\r\n\r\n            for (let index = 0; index < 8; ++index) {\r\n                const v = vectorsWorld[index];\r\n                Vector3.TransformCoordinatesToRef(vectors[index], world, v);\r\n                minWorld.minimizeInPlace(v);\r\n                maxWorld.maximizeInPlace(v);\r\n            }\r\n\r\n            // Extend\r\n            maxWorld.subtractToRef(minWorld, this.extendSizeWorld).scaleInPlace(0.5);\r\n            maxWorld.addToRef(minWorld, this.centerWorld).scaleInPlace(0.5);\r\n        } else {\r\n            minWorld.copyFrom(this.minimum);\r\n            maxWorld.copyFrom(this.maximum);\r\n            for (let index = 0; index < 8; ++index) {\r\n                vectorsWorld[index].copyFrom(vectors[index]);\r\n            }\r\n\r\n            // Extend\r\n            this.extendSizeWorld.copyFrom(this.extendSize);\r\n            this.centerWorld.copyFrom(this.center);\r\n        }\r\n\r\n        Vector3.FromArrayToRef(world.m, 0, directions[0]);\r\n        Vector3.FromArrayToRef(world.m, 4, directions[1]);\r\n        Vector3.FromArrayToRef(world.m, 8, directions[2]);\r\n\r\n        this._worldMatrix = world;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return BoundingBox.IsInFrustum(this.vectorsWorld, frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box is entirely inside the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an inclusion\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return BoundingBox.IsCompletelyInFrustum(this.vectorsWorld, frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding box\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding box\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const min = this.minimumWorld;\r\n        const max = this.maximumWorld;\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        const pointX = point.x,\r\n            pointY = point.y,\r\n            pointZ = point.z;\r\n        const delta = -Epsilon;\r\n\r\n        if (maxX - pointX < delta || delta > pointX - minX) {\r\n            return false;\r\n        }\r\n\r\n        if (maxY - pointY < delta || delta > pointY - minY) {\r\n            return false;\r\n        }\r\n\r\n        if (maxZ - pointZ < delta || delta > pointZ - minZ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box intersects with a bounding sphere\r\n     * @param sphere defines the sphere to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsSphere(sphere: DeepImmutable<BoundingSphere>): boolean {\r\n        return BoundingBox.IntersectsSphere(this.minimumWorld, this.maximumWorld, sphere.centerWorld, sphere.radiusWorld);\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box intersects with a box defined by a min and max vectors\r\n     * @param min defines the min vector to use\r\n     * @param max defines the max vector to use\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsMinMax(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>): boolean {\r\n        const myMin = this.minimumWorld;\r\n        const myMax = this.maximumWorld;\r\n        const myMinX = myMin.x,\r\n            myMinY = myMin.y,\r\n            myMinZ = myMin.z,\r\n            myMaxX = myMax.x,\r\n            myMaxY = myMax.y,\r\n            myMaxZ = myMax.z;\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        if (myMaxX < minX || myMinX > maxX) {\r\n            return false;\r\n        }\r\n\r\n        if (myMaxY < minY || myMinY > maxY) {\r\n            return false;\r\n        }\r\n\r\n        if (myMaxZ < minZ || myMinZ > maxZ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the class\r\n     */\r\n    public dispose(): void {\r\n        this._drawWrapperFront?.dispose();\r\n        this._drawWrapperBack?.dispose();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Tests if two bounding boxes are intersections\r\n     * @param box0 defines the first box to test\r\n     * @param box1 defines the second box to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static Intersects(box0: DeepImmutable<BoundingBox>, box1: DeepImmutable<BoundingBox>): boolean {\r\n        return box0.intersectsMinMax(box1.minimumWorld, box1.maximumWorld);\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defines by a min/max vectors intersects a sphere\r\n     * @param minPoint defines the minimum vector of the bounding box\r\n     * @param maxPoint defines the maximum vector of the bounding box\r\n     * @param sphereCenter defines the sphere center\r\n     * @param sphereRadius defines the sphere radius\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static IntersectsSphere(minPoint: DeepImmutable<Vector3>, maxPoint: DeepImmutable<Vector3>, sphereCenter: DeepImmutable<Vector3>, sphereRadius: number): boolean {\r\n        const vector = BoundingBox._TmpVector3[0];\r\n        Vector3.ClampToRef(sphereCenter, minPoint, maxPoint, vector);\r\n        const num = Vector3.DistanceSquared(sphereCenter, vector);\r\n        return num <= sphereRadius * sphereRadius;\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defined with 8 vectors is entirely inside frustum planes\r\n     * @param boundingVectors defines an array of 8 vectors representing a bounding box\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an inclusion\r\n     */\r\n    public static IsCompletelyInFrustum(boundingVectors: Array<DeepImmutable<Vector3>>, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let p = 0; p < 6; ++p) {\r\n            const frustumPlane = frustumPlanes[p];\r\n            for (let i = 0; i < 8; ++i) {\r\n                if (frustumPlane.dotCoordinate(boundingVectors[i]) < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defined with 8 vectors intersects frustum planes\r\n     * @param boundingVectors defines an array of 8 vectors representing a bounding box\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static IsInFrustum(boundingVectors: Array<DeepImmutable<Vector3>>, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let p = 0; p < 6; ++p) {\r\n            let canReturnFalse = true;\r\n            const frustumPlane = frustumPlanes[p];\r\n            for (let i = 0; i < 8; ++i) {\r\n                if (frustumPlane.dotCoordinate(boundingVectors[i]) >= 0) {\r\n                    canReturnFalse = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (canReturnFalse) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","import type { DeepImmutable } from \"../types\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { BoundingBox } from \"./boundingBox\";\r\nimport { BoundingSphere } from \"./boundingSphere\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\ndeclare type Collider = import(\"../Collisions/collider\").Collider;\r\n\r\nconst _result0 = { min: 0, max: 0 };\r\nconst _result1 = { min: 0, max: 0 };\r\nconst computeBoxExtents = (axis: DeepImmutable<Vector3>, box: DeepImmutable<BoundingBox>, result: { min: number; max: number }) => {\r\n    const p = Vector3.Dot(box.centerWorld, axis);\r\n\r\n    const r0 = Math.abs(Vector3.Dot(box.directions[0], axis)) * box.extendSize.x;\r\n    const r1 = Math.abs(Vector3.Dot(box.directions[1], axis)) * box.extendSize.y;\r\n    const r2 = Math.abs(Vector3.Dot(box.directions[2], axis)) * box.extendSize.z;\r\n\r\n    const r = r0 + r1 + r2;\r\n    result.min = p - r;\r\n    result.max = p + r;\r\n};\r\n\r\nconst axisOverlap = (axis: DeepImmutable<Vector3>, box0: DeepImmutable<BoundingBox>, box1: DeepImmutable<BoundingBox>): boolean => {\r\n    computeBoxExtents(axis, box0, _result0);\r\n    computeBoxExtents(axis, box1, _result1);\r\n    return !(_result0.min > _result1.max || _result1.min > _result0.max);\r\n};\r\n\r\n/**\r\n * Interface for cullable objects\r\n * @see https://doc.babylonjs.com/babylon101/materials#back-face-culling\r\n */\r\nexport interface ICullable {\r\n    /**\r\n     * Checks if the object or part of the object is in the frustum\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    isInFrustum(frustumPlanes: Plane[]): boolean;\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    isCompletelyInFrustum(frustumPlanes: Plane[]): boolean;\r\n}\r\n\r\n/**\r\n * Info for a bounding data of a mesh\r\n */\r\nexport class BoundingInfo implements ICullable {\r\n    /**\r\n     * Bounding box for the mesh\r\n     */\r\n    public readonly boundingBox: BoundingBox;\r\n    /**\r\n     * Bounding sphere for the mesh\r\n     */\r\n    public readonly boundingSphere: BoundingSphere;\r\n\r\n    private _isLocked = false;\r\n\r\n    private static readonly _TmpVector3 = ArrayTools.BuildArray(2, Vector3.Zero);\r\n\r\n    /**\r\n     * Constructs bounding info\r\n     * @param minimum min vector of the bounding box/sphere\r\n     * @param maximum max vector of the bounding box/sphere\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(minimum: DeepImmutable<Vector3>, maximum: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.boundingBox = new BoundingBox(minimum, maximum, worldMatrix);\r\n        this.boundingSphere = new BoundingSphere(minimum, maximum, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding info from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.boundingBox.reConstruct(min, max, worldMatrix);\r\n        this.boundingSphere.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * min vector of the bounding box/sphere\r\n     */\r\n    public get minimum(): Vector3 {\r\n        return this.boundingBox.minimum;\r\n    }\r\n\r\n    /**\r\n     * max vector of the bounding box/sphere\r\n     */\r\n    public get maximum(): Vector3 {\r\n        return this.boundingBox.maximum;\r\n    }\r\n\r\n    /**\r\n     * If the info is locked and won't be updated to avoid perf overhead\r\n     */\r\n    public get isLocked(): boolean {\r\n        return this._isLocked;\r\n    }\r\n\r\n    public set isLocked(value: boolean) {\r\n        this._isLocked = value;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Updates the bounding sphere and box\r\n     * @param world world matrix to be used to update\r\n     */\r\n    public update(world: DeepImmutable<Matrix>) {\r\n        if (this._isLocked) {\r\n            return;\r\n        }\r\n        this.boundingBox._update(world);\r\n        this.boundingSphere._update(world);\r\n    }\r\n\r\n    /**\r\n     * Recreate the bounding info to be centered around a specific point given a specific extend.\r\n     * @param center New center of the bounding info\r\n     * @param extend New extend of the bounding info\r\n     * @returns the current bounding info\r\n     */\r\n    public centerOn(center: DeepImmutable<Vector3>, extend: DeepImmutable<Vector3>): BoundingInfo {\r\n        const minimum = BoundingInfo._TmpVector3[0].copyFrom(center).subtractInPlace(extend);\r\n        const maximum = BoundingInfo._TmpVector3[1].copyFrom(center).addInPlace(extend);\r\n\r\n        this.boundingBox.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n        this.boundingSphere.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Grows the bounding info to include the given point.\r\n     * @param point The point that will be included in the current bounding info\r\n     * @returns the current bounding info\r\n     */\r\n    public encapsulate(point: Vector3): BoundingInfo {\r\n        const minimum = Vector3.Minimize(this.minimum, point);\r\n        const maximum = Vector3.Maximize(this.maximum, point);\r\n        this.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Grows the bounding info to encapsulate the given bounding info.\r\n     * @param toEncapsulate The bounding info that will be encapsulated in the current bounding info\r\n     * @returns the current bounding info\r\n     */\r\n    public encapsulateBoundingInfo(toEncapsulate: BoundingInfo): BoundingInfo {\r\n        this.encapsulate(toEncapsulate.boundingBox.centerWorld.subtract(toEncapsulate.boundingBox.extendSizeWorld));\r\n        this.encapsulate(toEncapsulate.boundingBox.centerWorld.add(toEncapsulate.boundingBox.extendSizeWorld));\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding info by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding info\r\n     */\r\n    public scale(factor: number): BoundingInfo {\r\n        this.boundingBox.scale(factor);\r\n        this.boundingSphere.scale(factor);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the bounding info is within the frustum defined by the passed array of planes.\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @param strategy defines the strategy to use for the culling (default is BABYLON.AbstractMesh.CULLINGSTRATEGY_STANDARD)\r\n     * @returns true if the bounding info is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>, strategy: number = Constants.MESHES_CULLINGSTRATEGY_STANDARD): boolean {\r\n        const inclusionTest =\r\n            strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION || strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n        if (inclusionTest) {\r\n            if (this.boundingSphere.isCenterInFrustum(frustumPlanes)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.boundingSphere.isInFrustum(frustumPlanes)) {\r\n            return false;\r\n        }\r\n\r\n        const bSphereOnlyTest =\r\n            strategy === Constants.MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY || strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n        if (bSphereOnlyTest) {\r\n            return true;\r\n        }\r\n\r\n        return this.boundingBox.isInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Gets the world distance between the min and max points of the bounding box\r\n     */\r\n    public get diagonalLength(): number {\r\n        const boundingBox = this.boundingBox;\r\n        const diag = boundingBox.maximumWorld.subtractToRef(boundingBox.minimumWorld, BoundingInfo._TmpVector3[0]);\r\n        return diag.length();\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return this.boundingBox.isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): boolean {\r\n        return collider._canDoCollision(this.boundingSphere.centerWorld, this.boundingSphere.radiusWorld, this.boundingBox.minimumWorld, this.boundingBox.maximumWorld);\r\n    }\r\n\r\n    /**\r\n     * Checks if a point is inside the bounding box and bounding sphere or the mesh\r\n     * @see https://doc.babylonjs.com/babylon101/intersect_collisions_-_mesh\r\n     * @param point the point to check intersection with\r\n     * @returns if the point intersects\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        if (!this.boundingSphere.centerWorld) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.boundingSphere.intersectsPoint(point)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.boundingBox.intersectsPoint(point)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if another bounding info intersects the bounding box and bounding sphere or the mesh\r\n     * @see https://doc.babylonjs.com/babylon101/intersect_collisions_-_mesh\r\n     * @param boundingInfo the bounding info to check intersection with\r\n     * @param precise if the intersection should be done using OBB\r\n     * @returns if the bounding info intersects\r\n     */\r\n    public intersects(boundingInfo: DeepImmutable<BoundingInfo>, precise: boolean): boolean {\r\n        if (!BoundingSphere.Intersects(this.boundingSphere, boundingInfo.boundingSphere)) {\r\n            return false;\r\n        }\r\n\r\n        if (!BoundingBox.Intersects(this.boundingBox, boundingInfo.boundingBox)) {\r\n            return false;\r\n        }\r\n\r\n        if (!precise) {\r\n            return true;\r\n        }\r\n\r\n        const box0 = this.boundingBox;\r\n        const box1 = boundingInfo.boundingBox;\r\n\r\n        if (!axisOverlap(box0.directions[0], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box0.directions[1], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box0.directions[2], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box1.directions[0], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box1.directions[1], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box1.directions[2], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import type { DeepImmutable } from \"../types\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\n/**\r\n * Class used to store bounding sphere information\r\n */\r\nexport class BoundingSphere {\r\n    /**\r\n     * Gets the center of the bounding sphere in local space\r\n     */\r\n    public readonly center = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in local space\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Gets the center of the bounding sphere in world space\r\n     */\r\n    public readonly centerWorld = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in world space\r\n     */\r\n    public radiusWorld: number;\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly _TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * Creates a new bounding sphere\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding sphere from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.minimum.copyFrom(min);\r\n        this.maximum.copyFrom(max);\r\n\r\n        const distance = Vector3.Distance(min, max);\r\n\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        this.radius = distance * 0.5;\r\n\r\n        this._update(worldMatrix || Matrix.IdentityReadOnly);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding sphere by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingSphere {\r\n        const newRadius = this.radius * factor;\r\n        const tmpVectors = BoundingSphere._TmpVector3;\r\n        const tempRadiusVector = tmpVectors[0].setAll(newRadius);\r\n        const min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\r\n        const max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * @internal\r\n     */\r\n    public _update(worldMatrix: DeepImmutable<Matrix>): void {\r\n        if (!worldMatrix.isIdentity()) {\r\n            Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\r\n            const tempVector = BoundingSphere._TmpVector3[0];\r\n            Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\r\n            this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\r\n        } else {\r\n            this.centerWorld.copyFrom(this.center);\r\n            this.radiusWorld = this.radius;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        const radius = this.radiusWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere center is in between the frustum planes.\r\n     * Used for optimistic fast inclusion.\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if the sphere center is in between the frustum planes\r\n     */\r\n    public isCenterInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding sphere\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding sphere\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\r\n        if (this.radiusWorld * this.radiusWorld < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Checks if two sphere intersect\r\n     * @param sphere0 sphere 0\r\n     * @param sphere1 sphere 1\r\n     * @returns true if the spheres intersect\r\n     */\r\n    public static Intersects(sphere0: DeepImmutable<BoundingSphere>, sphere1: DeepImmutable<BoundingSphere>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\r\n        const radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\r\n\r\n        if (radiusSum * radiusSum < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere from a center and a radius\r\n     * @param center The center\r\n     * @param radius radius\r\n     * @param matrix Optional worldMatrix\r\n     * @returns The sphere\r\n     */\r\n    public static CreateFromCenterAndRadius(center: DeepImmutable<Vector3>, radius: number, matrix?: DeepImmutable<Matrix>): BoundingSphere {\r\n        this._TmpVector3[0].copyFrom(center);\r\n        this._TmpVector3[1].copyFromFloats(0, 0, radius);\r\n        this._TmpVector3[2].copyFrom(center);\r\n        this._TmpVector3[0].addInPlace(this._TmpVector3[1]);\r\n        this._TmpVector3[2].subtractInPlace(this._TmpVector3[1]);\r\n\r\n        const sphere = new BoundingSphere(this._TmpVector3[0], this._TmpVector3[2]);\r\n\r\n        if (matrix) {\r\n            sphere._worldMatrix = matrix;\r\n        } else {\r\n            sphere._worldMatrix = Matrix.Identity();\r\n        }\r\n\r\n        return sphere;\r\n    }\r\n}\r\n","/**\r\n * Enum for Device Types\r\n */\r\nexport enum DeviceType {\r\n    /** Generic */\r\n    Generic = 0,\r\n    /** Keyboard */\r\n    Keyboard = 1,\r\n    /** Mouse */\r\n    Mouse = 2,\r\n    /** Touch Pointers */\r\n    Touch = 3,\r\n    /** PS4 Dual Shock */\r\n    DualShock = 4,\r\n    /** Xbox */\r\n    Xbox = 5,\r\n    /** Switch Controller */\r\n    Switch = 6,\r\n    /** PS5 DualSense */\r\n    DualSense = 7,\r\n}\r\n\r\n// Device Enums\r\n/**\r\n * Enum for All Pointers (Touch/Mouse)\r\n */\r\nexport enum PointerInput {\r\n    /** Horizontal Axis (Not used in events/observables; only in polling) */\r\n    Horizontal = 0,\r\n    /** Vertical Axis (Not used in events/observables; only in polling) */\r\n    Vertical = 1,\r\n    /** Left Click or Touch */\r\n    LeftClick = 2,\r\n    /** Middle Click */\r\n    MiddleClick = 3,\r\n    /** Right Click */\r\n    RightClick = 4,\r\n    /** Browser Back */\r\n    BrowserBack = 5,\r\n    /** Browser Forward */\r\n    BrowserForward = 6,\r\n    /** Mouse Wheel X */\r\n    MouseWheelX = 7,\r\n    /** Mouse Wheel Y */\r\n    MouseWheelY = 8,\r\n    /** Mouse Wheel Z */\r\n    MouseWheelZ = 9,\r\n    /** Used in events/observables to identify if x/y changes occurred */\r\n    Move = 12,\r\n}\r\n\r\n/** @internal */\r\nexport enum NativePointerInput {\r\n    /** Horizontal Axis */\r\n    Horizontal = PointerInput.Horizontal,\r\n    /** Vertical Axis */\r\n    Vertical = 1,\r\n    /** Left Click or Touch */\r\n    LeftClick = 2,\r\n    /** Middle Click */\r\n    MiddleClick = 3,\r\n    /** Right Click */\r\n    RightClick = 4,\r\n    /** Browser Back */\r\n    BrowserBack = 5,\r\n    /** Browser Forward */\r\n    BrowserForward = 6,\r\n    /** Mouse Wheel X */\r\n    MouseWheelX = 7,\r\n    /** Mouse Wheel Y */\r\n    MouseWheelY = 8,\r\n    /** Mouse Wheel Z */\r\n    MouseWheelZ = 9,\r\n    /** Delta X */\r\n    DeltaHorizontal = 10,\r\n    /** Delta Y */\r\n    DeltaVertical = 11,\r\n}\r\n\r\n/**\r\n * Enum for Dual Shock Gamepad\r\n */\r\nexport enum DualShockInput {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** L2 */\r\n    L2 = 6,\r\n    /** R2 */\r\n    R2 = 7,\r\n    /** Share */\r\n    Share = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** L3 */\r\n    L3 = 10,\r\n    /** R3 */\r\n    R3 = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** TouchPad */\r\n    TouchPad = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n\r\n/**\r\n * Enum for Dual Sense Gamepad\r\n */\r\nexport enum DualSenseInput {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** L2 */\r\n    L2 = 6,\r\n    /** R2 */\r\n    R2 = 7,\r\n    /** Create */\r\n    Create = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** L3 */\r\n    L3 = 10,\r\n    /** R3 */\r\n    R3 = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** TouchPad */\r\n    TouchPad = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n\r\n/**\r\n * Enum for Xbox Gamepad\r\n */\r\nexport enum XboxInput {\r\n    /** A */\r\n    A = 0,\r\n    /** B */\r\n    B = 1,\r\n    /** X */\r\n    X = 2,\r\n    /** Y */\r\n    Y = 3,\r\n    /** LB */\r\n    LB = 4,\r\n    /** RB */\r\n    RB = 5,\r\n    /** LT */\r\n    LT = 6,\r\n    /** RT */\r\n    RT = 7,\r\n    /** Back */\r\n    Back = 8,\r\n    /** Start */\r\n    Start = 9,\r\n    /** LS */\r\n    LS = 10,\r\n    /** RS */\r\n    RS = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 17,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 18,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 19,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 20,\r\n}\r\n\r\n/**\r\n * Enum for Switch (Pro/JoyCon L+R) Gamepad\r\n */\r\nexport enum SwitchInput {\r\n    /** B */\r\n    B = 0,\r\n    /** A */\r\n    A = 1,\r\n    /** Y */\r\n    Y = 2,\r\n    /** X */\r\n    X = 3,\r\n    /** L */\r\n    L = 4,\r\n    /** R */\r\n    R = 5,\r\n    /** ZL */\r\n    ZL = 6,\r\n    /** ZR */\r\n    ZR = 7,\r\n    /** Minus */\r\n    Minus = 8,\r\n    /** Plus */\r\n    Plus = 9,\r\n    /** LS */\r\n    LS = 10,\r\n    /** RS */\r\n    RS = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** Capture */\r\n    Capture = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n","import type { DeviceType } from \"./deviceEnums\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { DeviceInput } from \"./deviceTypes\";\r\nimport type { IDeviceInputSystem } from \"../inputInterfaces\";\r\nimport type { IKeyboardEvent, IPointerEvent, IWheelEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Subset of DeviceInput that only handles pointers and keyboard\r\n */\r\nexport type DeviceSourceEvent<T extends DeviceType> = T extends DeviceType.Keyboard\r\n    ? IKeyboardEvent\r\n    : T extends DeviceType.Mouse\r\n    ? IWheelEvent | IPointerEvent\r\n    : T extends DeviceType.Touch\r\n    ? IPointerEvent\r\n    : never;\r\n\r\n/**\r\n * Class that handles all input for a specific device\r\n */\r\nexport class DeviceSource<T extends DeviceType> {\r\n    // Public Members\r\n    /**\r\n     * Observable to handle device input changes per device\r\n     */\r\n    public readonly onInputChangedObservable = new Observable<DeviceSourceEvent<T>>();\r\n\r\n    // Private Members\r\n    private readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    /**\r\n     * Default Constructor\r\n     * @param deviceInputSystem - Reference to DeviceInputSystem\r\n     * @param deviceType - Type of device\r\n     * @param deviceSlot - \"Slot\" or index that device is referenced in\r\n     */\r\n    constructor(\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        /** Type of device */\r\n        public readonly deviceType: T,\r\n        /** \"Slot\" or index that device is referenced in */\r\n        public readonly deviceSlot: number = 0\r\n    ) {\r\n        this._deviceInputSystem = deviceInputSystem;\r\n    }\r\n\r\n    /**\r\n     * Get input for specific input\r\n     * @param inputIndex - index of specific input on device\r\n     * @returns Input value from DeviceInputSystem\r\n     */\r\n    public getInput(inputIndex: DeviceInput<T>): number {\r\n        return this._deviceInputSystem.pollInput(this.deviceType, this.deviceSlot, inputIndex);\r\n    }\r\n}\r\n","import { Constants } from \"../Engines/constants\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../Events/deviceInputEvents\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceType, NativePointerInput, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n/**\r\n * Class to wrap DeviceInputSystem data into an event object\r\n */\r\nexport class DeviceEventFactory {\r\n    /**\r\n     * Create device input events based on provided type and slot\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object\r\n     */\r\n    public static CreateDeviceEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): IUIEvent {\r\n        switch (deviceType) {\r\n            case DeviceType.Keyboard:\r\n                return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            case DeviceType.Mouse:\r\n                if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\r\n                    return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n                }\r\n            // eslint-disable-next-line no-fallthrough\r\n            case DeviceType.Touch:\r\n                return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            default:\r\n                throw `Unable to generate event for device ${DeviceType[deviceType]}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates pointer event\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Pointer)\r\n     */\r\n    private static _CreatePointerEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        if (deviceType === DeviceType.Mouse) {\r\n            evt.deviceType = DeviceType.Mouse;\r\n            evt.pointerId = 1;\r\n            evt.pointerType = \"mouse\";\r\n        } else {\r\n            evt.deviceType = DeviceType.Touch;\r\n            evt.pointerId = deviceSlot;\r\n            evt.pointerType = \"touch\";\r\n        }\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            evt.type = \"pointermove\";\r\n        } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\r\n            evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\r\n            evt.button = inputIndex - 2;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Wheel Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Wheel)\r\n     */\r\n    private static _CreateWheelEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        evt.type = \"wheel\";\r\n        evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\r\n        evt.deltaX = 0;\r\n        evt.deltaY = 0;\r\n        evt.deltaZ = 0;\r\n\r\n        switch (inputIndex) {\r\n            case PointerInput.MouseWheelX:\r\n                evt.deltaX = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelY:\r\n                evt.deltaY = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelZ:\r\n                evt.deltaZ = currentState;\r\n                break;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Mouse)\r\n     */\r\n    private static _CreateMouseEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\r\n        const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\r\n\r\n        // Handle offsets/deltas based on existence of HTMLElement\r\n        if (elementToAttachTo) {\r\n            evt.movementX = 0;\r\n            evt.movementY = 0;\r\n            evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\r\n            evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\r\n        } else {\r\n            evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\r\n            evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\r\n            evt.offsetX = 0;\r\n            evt.offsetY = 0;\r\n        }\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n\r\n        evt.clientX = pointerX;\r\n        evt.clientY = pointerY;\r\n        evt.x = pointerX;\r\n        evt.y = pointerY;\r\n\r\n        evt.deviceType = deviceType;\r\n        evt.deviceSlot = deviceSlot;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Keyboard Event\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IEvent object (Keyboard)\r\n     */\r\n    private static _CreateKeyboardEvent(inputIndex: number, currentState: Nullable<number>, deviceInputSystem: IDeviceInputSystem, elementToAttachTo?: any): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n        evt.deviceType = DeviceType.Keyboard;\r\n        evt.deviceSlot = 0;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\r\n        evt.key = String.fromCharCode(inputIndex);\r\n        evt.keyCode = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\r\n     * @param evt Event object to add parameters to\r\n     * @param deviceInputSystem DeviceInputSystem to pull values from\r\n     */\r\n    private static _CheckNonCharacterKeys(evt: any, deviceInputSystem: IDeviceInputSystem): void {\r\n        const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\r\n        const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_ALT_KEY) === 1;\r\n        const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_CTRL_KEY) === 1;\r\n        const metaKey =\r\n            isKeyboardActive &&\r\n            (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY1) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY2) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY3) === 1);\r\n        const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_SHIFT_KEY) === 1;\r\n\r\n        evt.altKey = altKey;\r\n        evt.ctrlKey = ctrlKey;\r\n        evt.metaKey = metaKey;\r\n        evt.shiftKey = shiftKey;\r\n    }\r\n\r\n    /**\r\n     * Create base event object\r\n     * @param elementToAttachTo Value to use as event target\r\n     * @returns\r\n     */\r\n    private static _CreateEvent(elementToAttachTo: any): any {\r\n        const evt: { [k: string]: any } = {};\r\n        evt.preventDefault = () => {};\r\n        evt.target = elementToAttachTo;\r\n\r\n        return evt;\r\n    }\r\n}\r\n","import type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { DeviceEventFactory } from \"./eventFactory\";\r\nimport { DeviceType } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\ndeclare const _native: INative;\r\n\r\n/** @internal */\r\nexport class NativeDeviceInputSystem implements IDeviceInputSystem {\r\n    private readonly _nativeInput: IDeviceInputSystem;\r\n\r\n    public constructor(\r\n        onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void\r\n    ) {\r\n        this._nativeInput = _native.DeviceInputSystem\r\n            ? new _native.DeviceInputSystem(onDeviceConnected, onDeviceDisconnected, (deviceType, deviceSlot, inputIndex, currentState) => {\r\n                  const evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, this);\r\n\r\n                  onInputChanged(deviceType, deviceSlot, evt);\r\n              })\r\n            : this._createDummyNativeInput();\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType): boolean {\r\n        //TODO: FIx native side first\r\n        return deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the observables\r\n     */\r\n    public dispose(): void {\r\n        this._nativeInput.dispose();\r\n    }\r\n\r\n    /**\r\n     * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version\r\n     * @returns Object with dummy functions\r\n     */\r\n    private _createDummyNativeInput() {\r\n        const nativeInput = {\r\n            pollInput: () => {\r\n                return 0;\r\n            },\r\n            isDeviceAvailable: () => {\r\n                return false;\r\n            },\r\n            dispose: () => {},\r\n        };\r\n\r\n        return nativeInput;\r\n    }\r\n}\r\n","import type { Engine } from \"../Engines/engine\";\r\nimport type { IPointerEvent, IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { DomManagement } from \"../Misc/domManagement\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceEventFactory } from \"./eventFactory\";\r\nimport { DeviceType, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst MAX_KEYCODES = 255;\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst MAX_POINTER_INPUTS = Object.keys(PointerInput).length / 2;\r\n\r\n/** @internal */\r\nexport class WebDeviceInputSystem implements IDeviceInputSystem {\r\n    // Private Members\r\n    private _inputs: Array<{ [deviceSlot: number]: Array<number> }> = [];\r\n    private _gamepads: Array<DeviceType>;\r\n    private _keyboardActive: boolean = false;\r\n    private _pointerActive: boolean = false;\r\n    private _elementToAttachTo: HTMLElement;\r\n    private _metaKeys: Array<number>;\r\n    private readonly _engine: Engine;\r\n    private readonly _usingSafari: boolean = Tools.IsSafari();\r\n    // Found solution for determining if MacOS is being used here:\r\n    // https://stackoverflow.com/questions/10527983/best-way-to-detect-mac-os-x-or-windows-computers-with-javascript-or-jquery\r\n    private readonly _usingMacOS: boolean = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\r\n\r\n    private _onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void;\r\n    private _onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void;\r\n    private _onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardDownEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardUpEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardBlurEvent = (evt: any) => {};\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerMoveEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerDownEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerUpEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerCancelEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerWheelEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerBlurEvent = (evt: any) => {};\r\n    private _wheelEventName: string;\r\n    private _eventsAttached: boolean = false;\r\n\r\n    private _mouseId = -1;\r\n    private readonly _isUsingFirefox = DomManagement.IsNavigatorAvailable() && navigator.userAgent && navigator.userAgent.indexOf(\"Firefox\") !== -1;\r\n\r\n    // Array to store active Pointer ID values; prevents issues with negative pointerIds\r\n    private _activeTouchIds: Array<number>;\r\n    private _maxTouchPoints: number = 0;\r\n\r\n    private _pointerInputClearObserver: Nullable<Observer<Engine>> = null;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _gamepadConnectedEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _gamepadDisconnectedEvent = (evt: any) => {};\r\n\r\n    private _eventPrefix: string;\r\n\r\n    constructor(\r\n        engine: Engine,\r\n        onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void\r\n    ) {\r\n        this._eventPrefix = Tools.GetPointerPrefix(engine);\r\n        this._engine = engine;\r\n\r\n        this._onDeviceConnected = onDeviceConnected;\r\n        this._onDeviceDisconnected = onDeviceDisconnected;\r\n        this._onInputChanged = onInputChanged;\r\n\r\n        this._enableEvents();\r\n\r\n        if (this._usingMacOS) {\r\n            this._metaKeys = [];\r\n        }\r\n\r\n        // Set callback to enable event handler switching when inputElement changes\r\n        if (!this._engine._onEngineViewChanged) {\r\n            this._engine._onEngineViewChanged = () => {\r\n                this._enableEvents();\r\n            };\r\n        }\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        const device = this._inputs[deviceType][deviceSlot];\r\n\r\n        if (!device) {\r\n            throw `Unable to find device ${DeviceType[deviceType]}`;\r\n        }\r\n\r\n        if (deviceType >= DeviceType.DualShock && deviceType <= DeviceType.DualSense) {\r\n            this._updateDevice(deviceType, deviceSlot, inputIndex);\r\n        }\r\n\r\n        const currentValue = device[inputIndex];\r\n        if (currentValue === undefined) {\r\n            throw `Unable to find input ${inputIndex} for device ${DeviceType[deviceType]} in slot ${deviceSlot}`;\r\n        }\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            Tools.Warn(`Unable to provide information for PointerInput.Move.  Try using PointerInput.Horizontal or PointerInput.Vertical for move data.`);\r\n        }\r\n\r\n        return currentValue;\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType): boolean {\r\n        return this._inputs[deviceType] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the eventlisteners\r\n     */\r\n    public dispose(): void {\r\n        // Callbacks\r\n        this._onDeviceConnected = () => {};\r\n        this._onDeviceDisconnected = () => {};\r\n        this._onInputChanged = () => {};\r\n        delete this._engine._onEngineViewChanged;\r\n\r\n        if (this._elementToAttachTo) {\r\n            this._disableEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable listening for user input events\r\n     */\r\n    private _enableEvents(): void {\r\n        const inputElement = this?._engine.getInputElement();\r\n        if (inputElement && (!this._eventsAttached || this._elementToAttachTo !== inputElement)) {\r\n            // Remove events before adding to avoid double events or simultaneous events on multiple canvases\r\n            this._disableEvents();\r\n\r\n            // If the inputs array has already been created, zero it out to before setting up events\r\n            if (this._inputs) {\r\n                for (const inputs of this._inputs) {\r\n                    if (inputs) {\r\n                        for (const deviceSlotKey in inputs) {\r\n                            const deviceSlot = +deviceSlotKey;\r\n                            const device = inputs[deviceSlot];\r\n                            if (device) {\r\n                                for (let inputIndex = 0; inputIndex < device.length; inputIndex++) {\r\n                                    device[inputIndex] = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._elementToAttachTo = inputElement;\r\n            // Set tab index for the inputElement to the engine's canvasTabIndex, if and only if the element's tab index is -1\r\n            this._elementToAttachTo.tabIndex = this._elementToAttachTo.tabIndex !== -1 ? this._elementToAttachTo.tabIndex : this._engine.canvasTabIndex;\r\n            this._handleKeyActions();\r\n            this._handlePointerActions();\r\n            this._handleGamepadActions();\r\n            this._eventsAttached = true;\r\n\r\n            // Check for devices that are already connected but aren't registered. Currently, only checks for gamepads and mouse\r\n            this._checkForConnectedDevices();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disable listening for user input events\r\n     */\r\n    private _disableEvents(): void {\r\n        if (this._elementToAttachTo) {\r\n            // Blur Events\r\n            this._elementToAttachTo.removeEventListener(\"blur\", this._keyboardBlurEvent);\r\n            this._elementToAttachTo.removeEventListener(\"blur\", this._pointerBlurEvent);\r\n\r\n            // Keyboard Events\r\n            this._elementToAttachTo.removeEventListener(\"keydown\", this._keyboardDownEvent);\r\n            this._elementToAttachTo.removeEventListener(\"keyup\", this._keyboardUpEvent);\r\n\r\n            // Pointer Events\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\r\n            this._elementToAttachTo.removeEventListener(this._wheelEventName, this._pointerWheelEvent);\r\n\r\n            // Gamepad Events\r\n            window.removeEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\r\n            window.removeEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\r\n        }\r\n\r\n        if (this._pointerInputClearObserver) {\r\n            this._engine.onEndFrameObservable.remove(this._pointerInputClearObserver);\r\n        }\r\n\r\n        this._eventsAttached = false;\r\n    }\r\n\r\n    /**\r\n     * Checks for existing connections to devices and register them, if necessary\r\n     * Currently handles gamepads and mouse\r\n     */\r\n    private _checkForConnectedDevices(): void {\r\n        if (navigator.getGamepads) {\r\n            const gamepads = navigator.getGamepads();\r\n\r\n            for (const gamepad of gamepads) {\r\n                if (gamepad) {\r\n                    this._addGamePad(gamepad);\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the device in use has mouse capabilities, pre-register mouse\r\n        if (typeof matchMedia === \"function\" && matchMedia(\"(pointer:fine)\").matches) {\r\n            // This will provide a dummy value for the cursor position and is expected to be overridden when the first mouse event happens.\r\n            // There isn't any good way to get the current position outside of a pointer event so that's why this was done.\r\n            this._addPointerDevice(DeviceType.Mouse, 0, 0, 0);\r\n        }\r\n    }\r\n\r\n    // Private functions\r\n    /**\r\n     * Add a gamepad to the DeviceInputSystem\r\n     * @param gamepad A single DOM Gamepad object\r\n     */\r\n    private _addGamePad(gamepad: any): void {\r\n        const deviceType = this._getGamepadDeviceType(gamepad.id);\r\n        const deviceSlot = gamepad.index;\r\n\r\n        this._gamepads = this._gamepads || new Array<DeviceType>(gamepad.index + 1);\r\n        this._registerDevice(deviceType, deviceSlot, gamepad.buttons.length + gamepad.axes.length);\r\n\r\n        this._gamepads[deviceSlot] = deviceType;\r\n    }\r\n\r\n    /**\r\n     * Add pointer device to DeviceInputSystem\r\n     * @param deviceType Type of Pointer to add\r\n     * @param deviceSlot Pointer ID (0 for mouse, pointerId for Touch)\r\n     * @param currentX Current X at point of adding\r\n     * @param currentY Current Y at point of adding\r\n     */\r\n    private _addPointerDevice(deviceType: DeviceType, deviceSlot: number, currentX: number, currentY: number): void {\r\n        if (!this._pointerActive) {\r\n            this._pointerActive = true;\r\n        }\r\n        this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\r\n        const pointer = this._inputs[deviceType][deviceSlot]; /* initialize our pointer position immediately after registration */\r\n        pointer[0] = currentX;\r\n        pointer[1] = currentY;\r\n    }\r\n\r\n    /**\r\n     * Add device and inputs to device array\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param numberOfInputs Number of input entries to create for given device\r\n     */\r\n    private _registerDevice(deviceType: DeviceType, deviceSlot: number, numberOfInputs: number): void {\r\n        if (deviceSlot === undefined) {\r\n            throw `Unable to register device ${DeviceType[deviceType]} to undefined slot.`;\r\n        }\r\n\r\n        if (!this._inputs[deviceType]) {\r\n            this._inputs[deviceType] = {};\r\n        }\r\n\r\n        if (!this._inputs[deviceType][deviceSlot]) {\r\n            const device = new Array<number>(numberOfInputs);\r\n\r\n            device.fill(0);\r\n\r\n            this._inputs[deviceType][deviceSlot] = device;\r\n            this._onDeviceConnected(deviceType, deviceSlot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a specific device name, remove that device from the device map\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    private _unregisterDevice(deviceType: DeviceType, deviceSlot: number): void {\r\n        if (this._inputs[deviceType][deviceSlot]) {\r\n            delete this._inputs[deviceType][deviceSlot];\r\n            this._onDeviceDisconnected(deviceType, deviceSlot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from keyboard interaction\r\n     */\r\n    private _handleKeyActions(): void {\r\n        this._keyboardDownEvent = (evt) => {\r\n            if (!this._keyboardActive) {\r\n                this._keyboardActive = true;\r\n                this._registerDevice(DeviceType.Keyboard, 0, MAX_KEYCODES);\r\n            }\r\n\r\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n            if (kbKey) {\r\n                kbKey[evt.keyCode] = 1;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                deviceEvent.inputIndex = evt.keyCode;\r\n\r\n                if (this._usingMacOS && evt.metaKey && evt.key !== \"Meta\") {\r\n                    if (!this._metaKeys.includes(evt.keyCode)) {\r\n                        this._metaKeys.push(evt.keyCode);\r\n                    }\r\n                }\r\n\r\n                this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n            }\r\n        };\r\n\r\n        this._keyboardUpEvent = (evt) => {\r\n            if (!this._keyboardActive) {\r\n                this._keyboardActive = true;\r\n                this._registerDevice(DeviceType.Keyboard, 0, MAX_KEYCODES);\r\n            }\r\n\r\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n            if (kbKey) {\r\n                kbKey[evt.keyCode] = 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                deviceEvent.inputIndex = evt.keyCode;\r\n\r\n                if (this._usingMacOS && evt.key === \"Meta\" && this._metaKeys.length > 0) {\r\n                    for (const keyCode of this._metaKeys) {\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Keyboard, 0, keyCode, 0, this, this._elementToAttachTo);\r\n                        kbKey[keyCode] = 0;\r\n                        this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n                    }\r\n                    this._metaKeys.splice(0, this._metaKeys.length);\r\n                }\r\n\r\n                this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n            }\r\n        };\r\n\r\n        this._keyboardBlurEvent = () => {\r\n            if (this._keyboardActive) {\r\n                const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n\r\n                for (let i = 0; i < kbKey.length; i++) {\r\n                    if (kbKey[i] !== 0) {\r\n                        kbKey[i] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Keyboard, 0, i, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n                    }\r\n                }\r\n                if (this._usingMacOS) {\r\n                    this._metaKeys.splice(0, this._metaKeys.length);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._elementToAttachTo.addEventListener(\"keydown\", this._keyboardDownEvent);\r\n        this._elementToAttachTo.addEventListener(\"keyup\", this._keyboardUpEvent);\r\n        this._elementToAttachTo.addEventListener(\"blur\", this._keyboardBlurEvent);\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from pointer interaction\r\n     */\r\n    private _handlePointerActions(): void {\r\n        // If maxTouchPoints is defined, use that value.  Otherwise, allow for a minimum for supported gestures like pinch\r\n        this._maxTouchPoints = (DomManagement.IsNavigatorAvailable() && navigator.maxTouchPoints) || 2;\r\n        if (!this._activeTouchIds) {\r\n            this._activeTouchIds = new Array<number>(this._maxTouchPoints);\r\n        }\r\n\r\n        for (let i = 0; i < this._maxTouchPoints; i++) {\r\n            this._activeTouchIds[i] = -1;\r\n        }\r\n\r\n        this._pointerMoveEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            const deviceSlot = deviceType === DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = {};\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                const deviceEvent = evt as IPointerEvent;\r\n                deviceEvent.inputIndex = PointerInput.Move;\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                // Lets Propagate the event for move with same position.\r\n                if (!this._usingSafari && evt.button !== -1) {\r\n                    deviceEvent.inputIndex = evt.button + 2;\r\n                    pointer[evt.button + 2] = pointer[evt.button + 2] ? 0 : 1; // Reverse state of button if evt.button has value\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerDownEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            let deviceSlot = deviceType === DeviceType.Mouse ? 0 : evt.pointerId;\r\n\r\n            if (deviceType === DeviceType.Touch) {\r\n                const idx = this._activeTouchIds.indexOf(-1);\r\n\r\n                if (idx >= 0) {\r\n                    deviceSlot = idx;\r\n                    this._activeTouchIds[idx] = evt.pointerId;\r\n                } else {\r\n                    // We can't find an open slot to store new pointer so just return (can only support max number of touches)\r\n                    Tools.Warn(`Max number of touches exceeded.  Ignoring touches in excess of ${this._maxTouchPoints}`);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = {};\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\r\n            } else if (deviceType === DeviceType.Touch) {\r\n                this._onDeviceConnected(deviceType, deviceSlot);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                const previousHorizontal = pointer[PointerInput.Horizontal];\r\n                const previousVertical = pointer[PointerInput.Vertical];\r\n\r\n                if (deviceType === DeviceType.Mouse) {\r\n                    // Mouse; Among supported browsers, value is either 1 or 0 for mouse\r\n                    if (this._mouseId === -1) {\r\n                        if (evt.pointerId === undefined) {\r\n                            // If there is no pointerId (eg. manually dispatched MouseEvent)\r\n                            this._mouseId = this._isUsingFirefox ? 0 : 1;\r\n                        } else {\r\n                            this._mouseId = evt.pointerId;\r\n                        }\r\n                    }\r\n\r\n                    if (!document.pointerLockElement) {\r\n                        try {\r\n                            this._elementToAttachTo.setPointerCapture(this._mouseId);\r\n                        } catch (e) {\r\n                            // DO NOTHING\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Touch; Since touches are dynamically assigned, only set capture if we have an id\r\n                    if (evt.pointerId && !document.pointerLockElement) {\r\n                        try {\r\n                            this._elementToAttachTo.setPointerCapture(evt.pointerId);\r\n                        } catch (e) {\r\n                            // DO NOTHING\r\n                        }\r\n                    }\r\n                }\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n                pointer[evt.button + 2] = 1;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n\r\n                // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\r\n                // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\r\n                // EG. ([X, Y, Left-click], Middle-click, etc...)\r\n                deviceEvent.inputIndex = evt.button + 2;\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\r\n                    deviceEvent.inputIndex = PointerInput.Move;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerUpEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            const deviceSlot = deviceType === DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\r\n\r\n            if (deviceType === DeviceType.Touch) {\r\n                if (deviceSlot === -1) {\r\n                    return;\r\n                } else {\r\n                    this._activeTouchIds[deviceSlot] = -1;\r\n                }\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType]?.[deviceSlot];\r\n            if (pointer && pointer[evt.button + 2] !== 0) {\r\n                const previousHorizontal = pointer[PointerInput.Horizontal];\r\n                const previousVertical = pointer[PointerInput.Vertical];\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n                pointer[evt.button + 2] = 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n\r\n                if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\r\n                    deviceEvent.inputIndex = PointerInput.Move;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n\r\n                // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\r\n                // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\r\n                // EG. ([X, Y, Left-click], Middle-click, etc...)\r\n                deviceEvent.inputIndex = evt.button + 2;\r\n\r\n                if (deviceType === DeviceType.Mouse && this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                } else if (evt.pointerId && this._elementToAttachTo.hasPointerCapture?.(evt.pointerId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(evt.pointerId);\r\n                }\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                if (deviceType === DeviceType.Touch) {\r\n                    this._onDeviceDisconnected(deviceType, deviceSlot);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerCancelEvent = (evt) => {\r\n            if (evt.pointerType === \"mouse\") {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n\r\n                if (this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                }\r\n\r\n                for (let inputIndex = PointerInput.LeftClick; inputIndex <= PointerInput.BrowserForward; inputIndex++) {\r\n                    if (pointer[inputIndex] === 1) {\r\n                        pointer[inputIndex] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Mouse, 0, deviceEvent);\r\n                    }\r\n                }\r\n            } else {\r\n                const deviceSlot = this._activeTouchIds.indexOf(evt.pointerId);\r\n\r\n                if (this._elementToAttachTo.hasPointerCapture?.(evt.pointerId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(evt.pointerId);\r\n                }\r\n\r\n                this._inputs[DeviceType.Touch][deviceSlot][PointerInput.LeftClick] = 0;\r\n\r\n                const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Touch, deviceSlot, PointerInput.LeftClick, 0, this, this._elementToAttachTo);\r\n\r\n                this._onInputChanged(DeviceType.Touch, deviceSlot, deviceEvent);\r\n\r\n                this._activeTouchIds[deviceSlot] = -1;\r\n                this._onDeviceDisconnected(DeviceType.Touch, deviceSlot);\r\n            }\r\n        };\r\n\r\n        // Set Wheel Event Name, code originally from scene.inputManager\r\n        this._wheelEventName =\r\n            \"onwheel\" in document.createElement(\"div\")\r\n                ? \"wheel\" // Modern browsers support \"wheel\"\r\n                : (<any>document).onmousewheel !== undefined\r\n                ? \"mousewheel\" // Webkit and IE support at least \"mousewheel\"\r\n                : \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\r\n\r\n        // Code originally in scene.inputManager.ts\r\n        // Chrome reports warning in console if wheel listener doesn't set an explicit passive option.\r\n        // IE11 only supports captureEvent:boolean, not options:object, and it defaults to false.\r\n        // Feature detection technique copied from: https://github.com/github/eventlistener-polyfill (MIT license)\r\n        let passiveSupported = false;\r\n        const noop = function () {};\r\n\r\n        try {\r\n            const options = Object.defineProperty({}, \"passive\", {\r\n                get: function () {\r\n                    passiveSupported = true;\r\n                },\r\n            });\r\n\r\n            this._elementToAttachTo.addEventListener(\"test\", noop, options);\r\n            this._elementToAttachTo.removeEventListener(\"test\", noop, options);\r\n        } catch (e) {\r\n            /* */\r\n        }\r\n\r\n        this._pointerBlurEvent = () => {\r\n            // Handle mouse buttons\r\n            if (this.isDeviceAvailable(DeviceType.Mouse)) {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n\r\n                if (this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                }\r\n\r\n                for (let inputIndex = PointerInput.LeftClick; inputIndex <= PointerInput.BrowserForward; inputIndex++) {\r\n                    if (pointer[inputIndex] === 1) {\r\n                        pointer[inputIndex] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Mouse, 0, deviceEvent);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Handle Active Touches\r\n            if (this.isDeviceAvailable(DeviceType.Touch)) {\r\n                const pointer = this._inputs[DeviceType.Touch];\r\n\r\n                for (let deviceSlot = 0; deviceSlot < this._activeTouchIds.length; deviceSlot++) {\r\n                    const pointerId = this._activeTouchIds[deviceSlot];\r\n\r\n                    if (this._elementToAttachTo.hasPointerCapture?.(pointerId)) {\r\n                        this._elementToAttachTo.releasePointerCapture(pointerId);\r\n                    }\r\n\r\n                    if (pointerId !== -1 && pointer[deviceSlot]?.[PointerInput.LeftClick] === 1) {\r\n                        pointer[deviceSlot][PointerInput.LeftClick] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Touch, deviceSlot, PointerInput.LeftClick, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Touch, deviceSlot, deviceEvent);\r\n\r\n                        this._activeTouchIds[deviceSlot] = -1;\r\n                        this._onDeviceDisconnected(DeviceType.Touch, deviceSlot);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerWheelEvent = (evt) => {\r\n            const deviceType = DeviceType.Mouse;\r\n            const deviceSlot = 0;\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = [];\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._pointerActive = true;\r\n                this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                pointer[PointerInput.MouseWheelX] = evt.deltaX || 0;\r\n                pointer[PointerInput.MouseWheelY] = evt.deltaY || evt.wheelDelta || 0;\r\n                pointer[PointerInput.MouseWheelZ] = evt.deltaZ || 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n\r\n                if (pointer[PointerInput.MouseWheelX] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelX;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n                if (pointer[PointerInput.MouseWheelY] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelY;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n                if (pointer[PointerInput.MouseWheelZ] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelZ;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\r\n        this._elementToAttachTo.addEventListener(\"blur\", this._pointerBlurEvent);\r\n        this._elementToAttachTo.addEventListener(this._wheelEventName, this._pointerWheelEvent, passiveSupported ? { passive: false } : false);\r\n\r\n        // Since there's no up or down event for mouse wheel or delta x/y, clear mouse values at end of frame\r\n        this._pointerInputClearObserver = this._engine.onEndFrameObservable.add(() => {\r\n            if (this.isDeviceAvailable(DeviceType.Mouse)) {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n                pointer[PointerInput.MouseWheelX] = 0;\r\n                pointer[PointerInput.MouseWheelY] = 0;\r\n                pointer[PointerInput.MouseWheelZ] = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from gamepad interaction\r\n     */\r\n    private _handleGamepadActions(): void {\r\n        this._gamepadConnectedEvent = (evt: any) => {\r\n            this._addGamePad(evt.gamepad);\r\n        };\r\n\r\n        this._gamepadDisconnectedEvent = (evt: any) => {\r\n            if (this._gamepads) {\r\n                const deviceType = this._getGamepadDeviceType(evt.gamepad.id);\r\n                const deviceSlot = evt.gamepad.index;\r\n\r\n                this._unregisterDevice(deviceType, deviceSlot);\r\n                delete this._gamepads[deviceSlot];\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\r\n        window.addEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\r\n    }\r\n\r\n    /**\r\n     * Update all non-event based devices with each frame\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     */\r\n    private _updateDevice(deviceType: DeviceType, deviceSlot: number, inputIndex: number): void {\r\n        // Gamepads\r\n        const gp = navigator.getGamepads()[deviceSlot];\r\n\r\n        if (gp && deviceType === this._gamepads[deviceSlot]) {\r\n            const device = this._inputs[deviceType][deviceSlot];\r\n\r\n            if (inputIndex >= gp.buttons.length) {\r\n                device[inputIndex] = gp.axes[inputIndex - gp.buttons.length].valueOf();\r\n            } else {\r\n                device[inputIndex] = gp.buttons[inputIndex].value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets DeviceType from the device name\r\n     * @param deviceName Name of Device from DeviceInputSystem\r\n     * @returns DeviceType enum value\r\n     */\r\n    private _getGamepadDeviceType(deviceName: string): DeviceType {\r\n        if (deviceName.indexOf(\"054c\") !== -1) {\r\n            // DualShock 4 Gamepad\r\n            return deviceName.indexOf(\"0ce6\") !== -1 ? DeviceType.DualSense : DeviceType.DualShock;\r\n        } else if (deviceName.indexOf(\"Xbox One\") !== -1 || deviceName.search(\"Xbox 360\") !== -1 || deviceName.search(\"xinput\") !== -1) {\r\n            // Xbox Gamepad\r\n            return DeviceType.Xbox;\r\n        } else if (deviceName.indexOf(\"057e\") !== -1) {\r\n            // Switch Gamepad\r\n            return DeviceType.Switch;\r\n        }\r\n\r\n        return DeviceType.Generic;\r\n    }\r\n\r\n    /**\r\n     * Get DeviceType from a given pointer/mouse/touch event.\r\n     * @param evt PointerEvent to evaluate\r\n     * @returns DeviceType interpreted from event\r\n     */\r\n    private _getPointerType(evt: any): DeviceType {\r\n        let deviceType = DeviceType.Mouse;\r\n\r\n        if (evt.pointerType === \"touch\" || evt.pointerType === \"pen\" || evt.touches) {\r\n            deviceType = DeviceType.Touch;\r\n        }\r\n\r\n        return deviceType;\r\n    }\r\n}\r\n","import type { IDisposable } from \"../scene\";\r\nimport { DeviceType } from \"./InputDevices/deviceEnums\";\r\nimport type { Observable } from \"../Misc/observable\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\nimport { NativeDeviceInputSystem } from \"./nativeDeviceInputSystem\";\r\nimport { WebDeviceInputSystem } from \"./webDeviceInputSystem\";\r\nimport { DeviceSource } from \"./InputDevices/deviceSource\";\r\nimport type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\n\r\ntype Distribute<T> = T extends DeviceType ? DeviceSource<T> : never;\r\n\r\nexport type DeviceSourceType = Distribute<DeviceType>;\r\n\r\ndeclare const _native: INative;\r\n\r\ndeclare module \"../Engines/engine\" {\r\n    interface Engine {\r\n        /** @internal */\r\n        _deviceSourceManager?: InternalDeviceSourceManager;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport interface IObservableManager {\r\n    onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n    onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Functions\r\n    _onInputChanged(deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent): void;\r\n    _addDevice(deviceSource: DeviceSource<DeviceType>): void;\r\n    _removeDevice(deviceType: DeviceType, deviceSlot: number): void;\r\n}\r\n\r\n/** @internal */\r\nexport class InternalDeviceSourceManager implements IDisposable {\r\n    // Public Members\r\n    public readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    // Private Members\r\n    // This is a master list of all device type/slot combos\r\n    private readonly _devices: Array<Array<number>>;\r\n\r\n    private readonly _registeredManagers = new Array<IObservableManager>();\r\n\r\n    public _refCount = 0;\r\n\r\n    public constructor(engine: Engine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array<Array<number>>(numberOfDeviceTypes);\r\n\r\n        const onDeviceConnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (!this._devices[deviceType]) {\r\n                this._devices[deviceType] = new Array<number>();\r\n            }\r\n\r\n            if (!this._devices[deviceType][deviceSlot]) {\r\n                this._devices[deviceType][deviceSlot] = deviceSlot;\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                const deviceSource = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\r\n                manager._addDevice(deviceSource);\r\n            }\r\n        };\r\n\r\n        const onDeviceDisconnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (this._devices[deviceType]?.[deviceSlot]) {\r\n                delete this._devices[deviceType][deviceSlot];\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                manager._removeDevice(deviceType, deviceSlot);\r\n            }\r\n        };\r\n\r\n        const onInputChanged = (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => {\r\n            if (eventData) {\r\n                for (const manager of this._registeredManagers) {\r\n                    manager._onInputChanged(deviceType, deviceSlot, eventData);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeof _native !== \"undefined\") {\r\n            this._deviceInputSystem = new NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        } else {\r\n            this._deviceInputSystem = new WebDeviceInputSystem(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        }\r\n    }\r\n\r\n    // Public Functions\r\n    public readonly registerManager = (manager: IObservableManager): void => {\r\n        for (let deviceType = 0; deviceType < this._devices.length; deviceType++) {\r\n            const device = this._devices[deviceType];\r\n            for (const deviceSlotKey in device) {\r\n                const deviceSlot = +deviceSlotKey;\r\n                manager._addDevice(new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot));\r\n            }\r\n        }\r\n        this._registeredManagers.push(manager);\r\n    };\r\n\r\n    public readonly unregisterManager = (manager: IObservableManager): void => {\r\n        const idx = this._registeredManagers.indexOf(manager);\r\n\r\n        if (idx > -1) {\r\n            this._registeredManagers.splice(idx, 1);\r\n        }\r\n    };\r\n\r\n    public dispose(): void {\r\n        this._deviceInputSystem.dispose();\r\n    }\r\n}\r\n","import type { Engine } from \"../../Engines/engine\";\r\nimport { DeviceType } from \"./deviceEnums\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { DeviceSource } from \"./deviceSource\";\r\nimport type { IObservableManager, DeviceSourceType } from \"../internalDeviceSourceManager\";\r\nimport { InternalDeviceSourceManager } from \"../internalDeviceSourceManager\";\r\nimport type { IDisposable } from \"../../scene\";\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { IKeyboardEvent, IPointerEvent, IUIEvent, IWheelEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class to keep track of devices\r\n */\r\nexport class DeviceSourceManager implements IDisposable, IObservableManager {\r\n    // Public Members\r\n    /**\r\n     * Observable to be triggered when after a device is connected, any new observers added will be triggered against already connected devices\r\n     */\r\n    public readonly onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    /**\r\n     * Observable to be triggered when after a device is disconnected\r\n     */\r\n    public readonly onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Private Members\r\n    private _engine: Engine;\r\n    private _onDisposeObserver: Nullable<Observer<ThinEngine>>;\r\n    private readonly _devices: Array<Array<DeviceSource<DeviceType>>>;\r\n    private readonly _firstDevice: Array<number>;\r\n\r\n    // Public Functions\r\n    /**\r\n     * Gets a DeviceSource, given a type and slot\r\n     * @param deviceType - Type of Device\r\n     * @param deviceSlot - Slot or ID of device\r\n     * @returns DeviceSource\r\n     */\r\n    public getDeviceSource<T extends DeviceType>(deviceType: T, deviceSlot?: number): Nullable<DeviceSource<T>> {\r\n        if (deviceSlot === undefined) {\r\n            if (this._firstDevice[deviceType] === undefined) {\r\n                return null;\r\n            }\r\n\r\n            deviceSlot = this._firstDevice[deviceType];\r\n        }\r\n\r\n        if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\r\n            return null;\r\n        }\r\n\r\n        return this._devices[deviceType][deviceSlot] as DeviceSource<T>;\r\n    }\r\n    /**\r\n     * Gets an array of DeviceSource objects for a given device type\r\n     * @param deviceType - Type of Device\r\n     * @returns All available DeviceSources of a given type\r\n     */\r\n    public getDeviceSources<T extends DeviceType>(deviceType: T): ReadonlyArray<DeviceSource<T>> {\r\n        // If device type hasn't had any devices connected yet, return empty array.\r\n        if (!this._devices[deviceType]) {\r\n            return [];\r\n        }\r\n        return this._devices[deviceType].filter((source) => {\r\n            return !!source;\r\n        }) as Array<DeviceSource<T>>;\r\n    }\r\n\r\n    /**\r\n     * Default constructor\r\n     * @param engine - Used to get canvas (if applicable)\r\n     */\r\n    constructor(engine: Engine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array(numberOfDeviceTypes);\r\n        this._firstDevice = new Array(numberOfDeviceTypes);\r\n        this._engine = engine;\r\n\r\n        if (!this._engine._deviceSourceManager) {\r\n            this._engine._deviceSourceManager = new InternalDeviceSourceManager(engine);\r\n        }\r\n        this._engine._deviceSourceManager._refCount++;\r\n\r\n        // Observables\r\n        this.onDeviceConnectedObservable = new Observable((observer) => {\r\n            for (const devices of this._devices) {\r\n                if (devices) {\r\n                    for (const device of devices) {\r\n                        if (device) {\r\n                            this.onDeviceConnectedObservable.notifyObserver(observer, device as DeviceSourceType);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.onDeviceDisconnectedObservable = new Observable();\r\n\r\n        this._engine._deviceSourceManager.registerManager(this);\r\n\r\n        this._onDisposeObserver = engine.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose of DeviceSourceManager\r\n     */\r\n    public dispose(): void {\r\n        // Null out observable refs\r\n        this.onDeviceConnectedObservable.clear();\r\n        this.onDeviceDisconnectedObservable.clear();\r\n\r\n        if (this._engine._deviceSourceManager) {\r\n            this._engine._deviceSourceManager.unregisterManager(this);\r\n            if (--this._engine._deviceSourceManager._refCount < 1) {\r\n                this._engine._deviceSourceManager.dispose();\r\n                delete this._engine._deviceSourceManager;\r\n            }\r\n        }\r\n        this._engine.onDisposeObservable.remove(this._onDisposeObserver);\r\n    }\r\n\r\n    // Hidden Functions\r\n    /**\r\n     * @param deviceSource - Source to add\r\n     * @internal\r\n     */\r\n    public _addDevice(deviceSource: DeviceSourceType): void {\r\n        if (!this._devices[deviceSource.deviceType]) {\r\n            this._devices[deviceSource.deviceType] = new Array();\r\n        }\r\n\r\n        if (!this._devices[deviceSource.deviceType][deviceSource.deviceSlot]) {\r\n            this._devices[deviceSource.deviceType][deviceSource.deviceSlot] = deviceSource;\r\n            this._updateFirstDevices(deviceSource.deviceType);\r\n        }\r\n\r\n        this.onDeviceConnectedObservable.notifyObservers(deviceSource);\r\n    }\r\n\r\n    /**\r\n     * @param deviceType - DeviceType\r\n     * @param deviceSlot - DeviceSlot\r\n     * @internal\r\n     */\r\n    public _removeDevice(deviceType: DeviceType, deviceSlot: number): void {\r\n        const deviceSource = this._devices[deviceType]?.[deviceSlot]; // Grab local reference to use before removing from devices\r\n        this.onDeviceDisconnectedObservable.notifyObservers(deviceSource as DeviceSourceType);\r\n        if (this._devices[deviceType]?.[deviceSlot]) {\r\n            delete this._devices[deviceType][deviceSlot];\r\n        }\r\n        // Even if we don't delete a device, we should still check for the first device as things may have gotten out of sync.\r\n        this._updateFirstDevices(deviceType);\r\n    }\r\n\r\n    /**\r\n     * @param deviceType - DeviceType\r\n     * @param deviceSlot - DeviceSlot\r\n     * @param eventData - Event\r\n     * @internal\r\n     */\r\n    public _onInputChanged<T extends DeviceType>(deviceType: T, deviceSlot: number, eventData: IUIEvent): void {\r\n        this._devices[deviceType]?.[deviceSlot]?.onInputChangedObservable.notifyObservers(eventData as IKeyboardEvent | IWheelEvent | IPointerEvent);\r\n    }\r\n\r\n    // Private Functions\r\n    private _updateFirstDevices(type: DeviceType): void {\r\n        switch (type) {\r\n            case DeviceType.Keyboard:\r\n            case DeviceType.Mouse:\r\n                this._firstDevice[type] = 0;\r\n                break;\r\n            case DeviceType.Touch:\r\n            case DeviceType.DualSense:\r\n            case DeviceType.DualShock:\r\n            case DeviceType.Xbox:\r\n            case DeviceType.Switch:\r\n            case DeviceType.Generic: {\r\n                delete this._firstDevice[type];\r\n                // eslint-disable-next-line no-case-declarations\r\n                const devices = this._devices[type];\r\n                if (devices) {\r\n                    for (let i = 0; i < devices.length; i++) {\r\n                        if (devices[i]) {\r\n                            this._firstDevice[type] = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import type { PointerInput } from \"../DeviceInput/InputDevices/deviceEnums\";\r\n\r\n/**\r\n * Event Types\r\n */\r\nexport enum DeviceInputEventType {\r\n    // Pointers\r\n    /** PointerMove */\r\n    PointerMove,\r\n    /** PointerDown */\r\n    PointerDown,\r\n    /** PointerUp */\r\n    PointerUp,\r\n}\r\n\r\n/**\r\n * Native friendly interface for Event Object\r\n */\r\nexport interface IUIEvent {\r\n    /**\r\n     * Input array index\r\n     */\r\n    inputIndex: number;\r\n\r\n    /**\r\n     * Current target for an event\r\n     */\r\n    currentTarget?: any;\r\n\r\n    /**\r\n     * Alias for target\r\n     * @deprecated Use target instead\r\n     */\r\n    srcElement?: any;\r\n\r\n    /**\r\n     * Type of event\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Reference to object where object was dispatched\r\n     */\r\n    target: any;\r\n\r\n    /**\r\n     * Tells user agent what to do when not explicitly handled\r\n     */\r\n    preventDefault: () => void;\r\n}\r\n\r\n/**\r\n * Native friendly interface for KeyboardEvent Object\r\n */\r\nexport interface IKeyboardEvent extends IUIEvent {\r\n    /**\r\n     * Status of Alt key being pressed\r\n     */\r\n    altKey: boolean;\r\n\r\n    /**\r\n     * Unicode value of character pressed\r\n     * @deprecated Required for event, use keyCode instead.\r\n     */\r\n    charCode?: number;\r\n\r\n    /**\r\n     * Code for key based on layout\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * Status of Ctrl key being pressed\r\n     */\r\n    ctrlKey: boolean;\r\n\r\n    /**\r\n     * String representation of key\r\n     */\r\n    key: string;\r\n    /**\r\n     * ASCII value of key\r\n     * @deprecated Used with DeviceSourceManager\r\n     */\r\n    keyCode: number;\r\n\r\n    /**\r\n     * Status of Meta key (eg. Windows key) being pressed\r\n     */\r\n    metaKey: boolean;\r\n\r\n    /**\r\n     * Status of Shift key being pressed\r\n     */\r\n    shiftKey: boolean;\r\n}\r\n\r\n/**\r\n * Native friendly interface for MouseEvent Object\r\n */\r\nexport interface IMouseEvent extends IUIEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events, excluding ones that CANNOT be in events organically\r\n     */\r\n    inputIndex: Exclude<PointerInput, PointerInput.Horizontal | PointerInput.Vertical>;\r\n\r\n    /**\r\n     * Status of Alt key being pressed\r\n     */\r\n    altKey: boolean;\r\n\r\n    /**\r\n     * Value of single mouse button pressed\r\n     */\r\n    button: number;\r\n\r\n    /**\r\n     * Value of all mouse buttons pressed\r\n     */\r\n    buttons: number;\r\n\r\n    /**\r\n     * Current X coordinate\r\n     */\r\n    clientX: number;\r\n\r\n    /**\r\n     * Current Y coordinate\r\n     */\r\n    clientY: number;\r\n\r\n    /**\r\n     * Status of Ctrl key being pressed\r\n     */\r\n    ctrlKey: boolean;\r\n\r\n    /**\r\n     * Provides current click count\r\n     */\r\n    detail?: number;\r\n\r\n    /**\r\n     * Status of Meta key (eg. Windows key) being pressed\r\n     */\r\n    metaKey: boolean;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     */\r\n    movementX: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     */\r\n    movementY: number;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    mozMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    mozMovementY?: number;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    msMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    msMovementY?: number;\r\n\r\n    /**\r\n     * Current coordinate of X within container\r\n     */\r\n    offsetX: number;\r\n\r\n    /**\r\n     * Current coordinate of Y within container\r\n     */\r\n    offsetY: number;\r\n\r\n    /**\r\n     * Horizontal coordinate of event\r\n     */\r\n    pageX: number;\r\n\r\n    /**\r\n     * Vertical coordinate of event\r\n     */\r\n    pageY: number;\r\n\r\n    /**\r\n     * Status of Shift key being pressed\r\n     */\r\n    shiftKey: boolean;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    webkitMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    webkitMovementY?: number;\r\n\r\n    /**\r\n     * Alias of clientX\r\n     */\r\n    x: number;\r\n\r\n    /**\r\n     * Alias of clientY\r\n     */\r\n    y: number;\r\n}\r\n\r\n/**\r\n * Native friendly interface for PointerEvent Object\r\n */\r\nexport interface IPointerEvent extends IMouseEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events, excluding ones that CANNOT be in events organically and mouse wheel values\r\n     */\r\n    inputIndex: Exclude<PointerInput, PointerInput.Horizontal | PointerInput.Vertical | PointerInput.MouseWheelX | PointerInput.MouseWheelY | PointerInput.MouseWheelZ>;\r\n\r\n    /**\r\n     * Pointer Event ID\r\n     */\r\n    pointerId: number;\r\n\r\n    /**\r\n     * Type of pointer\r\n     */\r\n    pointerType: string;\r\n}\r\n\r\n/**\r\n * Native friendly interface for WheelEvent Object\r\n */\r\nexport interface IWheelEvent extends IMouseEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events that can only be used with mouse wheel\r\n     */\r\n    inputIndex: PointerInput.MouseWheelX | PointerInput.MouseWheelY | PointerInput.MouseWheelZ;\r\n\r\n    /**\r\n     * Units for delta value\r\n     */\r\n    deltaMode: number;\r\n\r\n    /**\r\n     * Horizontal scroll delta\r\n     */\r\n    deltaX: number;\r\n\r\n    /**\r\n     * Vertical scroll delta\r\n     */\r\n    deltaY: number;\r\n\r\n    /**\r\n     * Z-Axis scroll delta\r\n     */\r\n    deltaZ: number;\r\n\r\n    /**\r\n     * WheelDelta (From MouseWheel Event)\r\n     * @deprecated\r\n     */\r\n    wheelDelta?: number;\r\n}\r\n\r\n/**\r\n * Constants used for Events\r\n */\r\nexport class EventConstants {\r\n    /**\r\n     * Pixel delta for Wheel Events (Default)\r\n     */\r\n    public static DOM_DELTA_PIXEL = 0x00;\r\n\r\n    /**\r\n     * Line delta for Wheel Events\r\n     */\r\n    public static DOM_DELTA_LINE = 0x01;\r\n\r\n    /**\r\n     * Page delta for Wheel Events\r\n     */\r\n    public static DOM_DELTA_PAGE = 0x02;\r\n}\r\n","import type { IKeyboardEvent } from \"./deviceInputEvents\";\r\n\r\n/**\r\n * Gather the list of keyboard event types as constants.\r\n */\r\nexport class KeyboardEventTypes {\r\n    /**\r\n     * The keydown event is fired when a key becomes active (pressed).\r\n     */\r\n    public static readonly KEYDOWN = 0x01;\r\n    /**\r\n     * The keyup event is fired when a key has been released.\r\n     */\r\n    public static readonly KEYUP = 0x02;\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n */\r\nexport class KeyboardInfo {\r\n    /**\r\n     * Instantiates a new keyboard info.\r\n     * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IKeyboardEvent\r\n    ) {}\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\r\n */\r\nexport class KeyboardInfoPre extends KeyboardInfo {\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     */\r\n    public skipOnKeyboardObservable: boolean;\r\n\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     * @deprecated use skipOnKeyboardObservable property instead\r\n     */\r\n    public get skipOnPointerObservable() {\r\n        return this.skipOnKeyboardObservable;\r\n    }\r\n    public set skipOnPointerObservable(value) {\r\n        this.skipOnKeyboardObservable = value;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new keyboard pre info.\r\n     * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IKeyboardEvent\r\n    ) {\r\n        super(type, event);\r\n        this.skipOnKeyboardObservable = false;\r\n    }\r\n}\r\n","import type { Nullable } from \"../types\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport type { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport type { IMouseEvent, IPointerEvent } from \"./deviceInputEvents\";\r\nimport type { InputManager } from \"../Inputs/scene.inputManager\";\r\n\r\ndeclare type Ray = import(\"../Culling/ray\").Ray;\r\n\r\n/**\r\n * Gather the list of pointer event types as constants.\r\n */\r\nexport class PointerEventTypes {\r\n    /**\r\n     * The pointerdown event is fired when a pointer becomes active. For mouse, it is fired when the device transitions from no buttons depressed to at least one button depressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer.\r\n     */\r\n    public static readonly POINTERDOWN = 0x01;\r\n    /**\r\n     * The pointerup event is fired when a pointer is no longer active.\r\n     */\r\n    public static readonly POINTERUP = 0x02;\r\n    /**\r\n     * The pointermove event is fired when a pointer changes coordinates.\r\n     */\r\n    public static readonly POINTERMOVE = 0x04;\r\n    /**\r\n     * The pointerwheel event is fired when a mouse wheel has been rotated.\r\n     */\r\n    public static readonly POINTERWHEEL = 0x08;\r\n    /**\r\n     * The pointerpick event is fired when a mesh or sprite has been picked by the pointer.\r\n     */\r\n    public static readonly POINTERPICK = 0x10;\r\n    /**\r\n     * The pointertap event is fired when a the object has been touched and released without drag.\r\n     */\r\n    public static readonly POINTERTAP = 0x20;\r\n    /**\r\n     * The pointerdoubletap event is fired when a the object has been touched and released twice without drag.\r\n     */\r\n    public static readonly POINTERDOUBLETAP = 0x40;\r\n}\r\n\r\n/**\r\n * Base class of pointer info types.\r\n */\r\nexport class PointerInfoBase {\r\n    /**\r\n     * Instantiates the base class of pointers info.\r\n     * @param type Defines the type of event (PointerEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (PointerEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IMouseEvent\r\n    ) {}\r\n}\r\n\r\n/**\r\n * This class is used to store pointer related info for the onPrePointerObservable event.\r\n * Set the skipOnPointerObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onPointerObservable\r\n */\r\nexport class PointerInfoPre extends PointerInfoBase {\r\n    /**\r\n     * Ray from a pointer if available (eg. 6dof controller)\r\n     */\r\n    public ray: Nullable<Ray> = null;\r\n\r\n    /**\r\n     * Defines picking info coming from a near interaction (proximity instead of ray-based picking)\r\n     */\r\n    public nearInteractionPickingInfo: Nullable<PickingInfo>;\r\n\r\n    /**\r\n     * The original picking info that was used to trigger the pointer event\r\n     */\r\n    public originalPickingInfo: Nullable<PickingInfo> = null;\r\n\r\n    /**\r\n     * Defines the local position of the pointer on the canvas.\r\n     */\r\n    public localPosition: Vector2;\r\n\r\n    /**\r\n     * Defines whether the engine should skip the next OnPointerObservable associated to this pre.\r\n     */\r\n    public skipOnPointerObservable: boolean;\r\n\r\n    /**\r\n     * Instantiates a PointerInfoPre to store pointer related info to the onPrePointerObservable event.\r\n     * @param type Defines the type of event (PointerEventTypes)\r\n     * @param event Defines the related dom event\r\n     * @param localX Defines the local x coordinates of the pointer when the event occured\r\n     * @param localY Defines the local y coordinates of the pointer when the event occured\r\n     */\r\n    constructor(type: number, event: IMouseEvent, localX: number, localY: number) {\r\n        super(type, event);\r\n        this.skipOnPointerObservable = false;\r\n        this.localPosition = new Vector2(localX, localY);\r\n    }\r\n}\r\n\r\n/**\r\n * This type contains all the data related to a pointer event in Babylon.js.\r\n * The event member is an instance of PointerEvent for all types except PointerWheel and is of type MouseWheelEvent when type equals PointerWheel. The different event types can be found in the PointerEventTypes class.\r\n */\r\nexport class PointerInfo extends PointerInfoBase {\r\n    private _pickInfo: Nullable<PickingInfo>;\r\n    private _inputManager: Nullable<InputManager>;\r\n\r\n    /**\r\n     * Defines the picking info associated with this PointerInfo object (if applicable)\r\n     */\r\n    public get pickInfo(): Nullable<PickingInfo> {\r\n        if (!this._pickInfo) {\r\n            this._generatePickInfo();\r\n        }\r\n\r\n        return this._pickInfo;\r\n    }\r\n    /**\r\n     * Instantiates a PointerInfo to store pointer related info to the onPointerObservable event.\r\n     * @param type Defines the type of event (PointerEventTypes)\r\n     * @param event Defines the related dom event\r\n     * @param pickInfo Defines the picking info associated to the info (if any)\r\n     * @param inputManager Defines the InputManager to use if there is no pickInfo\r\n     */\r\n    constructor(type: number, event: IMouseEvent, pickInfo: Nullable<PickingInfo>, inputManager: Nullable<InputManager> = null) {\r\n        super(type, event);\r\n        this._pickInfo = pickInfo;\r\n        this._inputManager = inputManager;\r\n    }\r\n\r\n    /**\r\n     * Generates the picking info if needed\r\n     */\r\n    /** @internal */\r\n    public _generatePickInfo(): void {\r\n        if (this._inputManager) {\r\n            this._pickInfo = this._inputManager._pickMove((this.event as IPointerEvent).pointerId);\r\n            this._inputManager._setRayOnPointerInfo(this._pickInfo, this.event);\r\n            this._inputManager = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Data relating to a touch event on the screen.\r\n */\r\nexport interface PointerTouch {\r\n    /**\r\n     * X coordinate of touch.\r\n     */\r\n    x: number;\r\n    /**\r\n     * Y coordinate of touch.\r\n     */\r\n    y: number;\r\n    /**\r\n     * Id of touch. Unique for each finger.\r\n     */\r\n    pointerId: number;\r\n    /**\r\n     * Event type passed from DOM.\r\n     */\r\n    type: any;\r\n}\r\n","/** Defines the cross module constantsused by lights to avoid circular dependencies */\r\nexport class LightConstants {\r\n    /**\r\n     * Falloff Default: light is falling off following the material specification:\r\n     * standard material is using standard falloff whereas pbr material can request special falloff per materials.\r\n     */\r\n    public static readonly FALLOFF_DEFAULT = 0;\r\n\r\n    /**\r\n     * Falloff Physical: light is falling off following the inverse squared distance law.\r\n     */\r\n    public static readonly FALLOFF_PHYSICAL = 1;\r\n\r\n    /**\r\n     * Falloff gltf: light is falling off as described in the gltf moving to PBR document\r\n     * to enhance interoperability with other engines.\r\n     */\r\n    public static readonly FALLOFF_GLTF = 2;\r\n\r\n    /**\r\n     * Falloff Standard: light is falling off like in the standard material\r\n     * to enhance interoperability with other materials.\r\n     */\r\n    public static readonly FALLOFF_STANDARD = 3;\r\n\r\n    //lightmapMode Consts\r\n    /**\r\n     * If every light affecting the material is in this lightmapMode,\r\n     * material.lightmapTexture adds or multiplies\r\n     * (depends on material.useLightmapAsShadowmap)\r\n     * after every other light calculations.\r\n     */\r\n    public static readonly LIGHTMAP_DEFAULT = 0;\r\n    /**\r\n     * material.lightmapTexture as only diffuse lighting from this light\r\n     * adds only specular lighting from this light\r\n     * adds dynamic shadows\r\n     */\r\n    public static readonly LIGHTMAP_SPECULAR = 1;\r\n    /**\r\n     * material.lightmapTexture as only lighting\r\n     * no light calculation from this light\r\n     * only adds dynamic shadows from this light\r\n     */\r\n    public static readonly LIGHTMAP_SHADOWSONLY = 2;\r\n\r\n    // Intensity Mode Consts\r\n    /**\r\n     * Each light type uses the default quantity according to its type:\r\n     *      point/spot lights use luminous intensity\r\n     *      directional lights use illuminance\r\n     */\r\n    public static readonly INTENSITYMODE_AUTOMATIC = 0;\r\n    /**\r\n     * lumen (lm)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINOUSPOWER = 1;\r\n    /**\r\n     * candela (lm/sr)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINOUSINTENSITY = 2;\r\n    /**\r\n     * lux (lm/m^2)\r\n     */\r\n    public static readonly INTENSITYMODE_ILLUMINANCE = 3;\r\n    /**\r\n     * nit (cd/m^2)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINANCE = 4;\r\n\r\n    // Light types ids const.\r\n    /**\r\n     * Light type const id of the point light.\r\n     */\r\n    public static readonly LIGHTTYPEID_POINTLIGHT = 0;\r\n    /**\r\n     * Light type const id of the directional light.\r\n     */\r\n    public static readonly LIGHTTYPEID_DIRECTIONALLIGHT = 1;\r\n    /**\r\n     * Light type const id of the spot light.\r\n     */\r\n    public static readonly LIGHTTYPEID_SPOTLIGHT = 2;\r\n    /**\r\n     * Light type const id of the hemispheric light.\r\n     */\r\n    public static readonly LIGHTTYPEID_HEMISPHERICLIGHT = 3;\r\n\r\n    /**\r\n     * Sort function to order lights for rendering.\r\n     * @param a First Light object to compare to second.\r\n     * @param b Second Light object to compare first.\r\n     * @returns -1 to reduce's a's index relative to be, 0 for no change, 1 to increase a's index relative to b.\r\n     */\r\n    public static CompareLightsPriority(a: ISortableLight, b: ISortableLight): number {\r\n        //shadow-casting lights have priority over non-shadow-casting lights\r\n        //the renderPriority is a secondary sort criterion\r\n        if (a.shadowEnabled !== b.shadowEnabled) {\r\n            return (b.shadowEnabled ? 1 : 0) - (a.shadowEnabled ? 1 : 0);\r\n        }\r\n        return b.renderPriority - a.renderPriority;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the common interface of sortable lights\r\n */\r\nexport interface ISortableLight {\r\n    /**\r\n     * Gets or sets whether or not the shadows are enabled for this light. This can help turning off/on shadow without detaching\r\n     * the current shadow generator.\r\n     */\r\n    shadowEnabled: boolean;\r\n    /**\r\n     * Defines the rendering priority of the lights. It can help in case of fallback or number of lights\r\n     * exceeding the number allowed of the materials.\r\n     */\r\n    renderPriority: number;\r\n}\r\n","import { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Class used to represent data loading progression\r\n */\r\nexport class SceneLoaderFlags {\r\n    // Flags\r\n    private static _ForceFullSceneLoadingForIncremental = false;\r\n    private static _ShowLoadingScreen = true;\r\n    private static _CleanBoneMatrixWeights = false;\r\n    private static _LoggingLevel = Constants.SCENELOADER_NO_LOGGING;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if entire scene must be loaded even if scene contains incremental data\r\n     */\r\n    public static get ForceFullSceneLoadingForIncremental() {\r\n        return SceneLoaderFlags._ForceFullSceneLoadingForIncremental;\r\n    }\r\n\r\n    public static set ForceFullSceneLoadingForIncremental(value: boolean) {\r\n        SceneLoaderFlags._ForceFullSceneLoadingForIncremental = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if loading screen must be displayed while loading a scene\r\n     */\r\n    public static get ShowLoadingScreen(): boolean {\r\n        return SceneLoaderFlags._ShowLoadingScreen;\r\n    }\r\n\r\n    public static set ShowLoadingScreen(value: boolean) {\r\n        SceneLoaderFlags._ShowLoadingScreen = value;\r\n    }\r\n\r\n    /**\r\n     * Defines the current logging level (while loading the scene)\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static get loggingLevel(): number {\r\n        return SceneLoaderFlags._LoggingLevel;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static set loggingLevel(value: number) {\r\n        SceneLoaderFlags._LoggingLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set a boolean indicating if matrix weights must be cleaned upon loading\r\n     */\r\n    public static get CleanBoneMatrixWeights(): boolean {\r\n        return SceneLoaderFlags._CleanBoneMatrixWeights;\r\n    }\r\n\r\n    public static set CleanBoneMatrixWeights(value: boolean) {\r\n        SceneLoaderFlags._CleanBoneMatrixWeights = value;\r\n    }\r\n}\r\n","import { SerializationHelper, serialize } from \"../Misc/decorators\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Effect } from \"../Materials/effect\";\r\n\r\n/**\r\n * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\r\n * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n */\r\nexport class ColorCurves {\r\n    private _dirty = true;\r\n\r\n    private _tempColor = new Color4(0, 0, 0, 0);\r\n\r\n    private _globalCurve = new Color4(0, 0, 0, 0);\r\n    private _highlightsCurve = new Color4(0, 0, 0, 0);\r\n    private _midtonesCurve = new Color4(0, 0, 0, 0);\r\n    private _shadowsCurve = new Color4(0, 0, 0, 0);\r\n\r\n    private _positiveCurve = new Color4(0, 0, 0, 0);\r\n    private _negativeCurve = new Color4(0, 0, 0, 0);\r\n\r\n    @serialize()\r\n    private _globalHue = 30;\r\n\r\n    @serialize()\r\n    private _globalDensity = 0;\r\n\r\n    @serialize()\r\n    private _globalSaturation = 0;\r\n\r\n    @serialize()\r\n    private _globalExposure = 0;\r\n\r\n    /**\r\n     * Gets the global Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get globalHue(): number {\r\n        return this._globalHue;\r\n    }\r\n    /**\r\n     * Sets the global Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set globalHue(value: number) {\r\n        this._globalHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the global Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get globalDensity(): number {\r\n        return this._globalDensity;\r\n    }\r\n    /**\r\n     * Sets the global Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set globalDensity(value: number) {\r\n        this._globalDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the global Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get globalSaturation(): number {\r\n        return this._globalSaturation;\r\n    }\r\n    /**\r\n     * Sets the global Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set globalSaturation(value: number) {\r\n        this._globalSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the global Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get globalExposure(): number {\r\n        return this._globalExposure;\r\n    }\r\n    /**\r\n     * Sets the global Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set globalExposure(value: number) {\r\n        this._globalExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    @serialize()\r\n    private _highlightsHue = 30;\r\n\r\n    @serialize()\r\n    private _highlightsDensity = 0;\r\n\r\n    @serialize()\r\n    private _highlightsSaturation = 0;\r\n\r\n    @serialize()\r\n    private _highlightsExposure = 0;\r\n\r\n    /**\r\n     * Gets the highlights Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get highlightsHue(): number {\r\n        return this._highlightsHue;\r\n    }\r\n    /**\r\n     * Sets the highlights Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set highlightsHue(value: number) {\r\n        this._highlightsHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get highlightsDensity(): number {\r\n        return this._highlightsDensity;\r\n    }\r\n    /**\r\n     * Sets the highlights Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set highlightsDensity(value: number) {\r\n        this._highlightsDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get highlightsSaturation(): number {\r\n        return this._highlightsSaturation;\r\n    }\r\n    /**\r\n     * Sets the highlights Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set highlightsSaturation(value: number) {\r\n        this._highlightsSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get highlightsExposure(): number {\r\n        return this._highlightsExposure;\r\n    }\r\n    /**\r\n     * Sets the highlights Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set highlightsExposure(value: number) {\r\n        this._highlightsExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    @serialize()\r\n    private _midtonesHue = 30;\r\n\r\n    @serialize()\r\n    private _midtonesDensity = 0;\r\n\r\n    @serialize()\r\n    private _midtonesSaturation = 0;\r\n\r\n    @serialize()\r\n    private _midtonesExposure = 0;\r\n\r\n    /**\r\n     * Gets the midtones Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get midtonesHue(): number {\r\n        return this._midtonesHue;\r\n    }\r\n    /**\r\n     * Sets the midtones Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set midtonesHue(value: number) {\r\n        this._midtonesHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get midtonesDensity(): number {\r\n        return this._midtonesDensity;\r\n    }\r\n    /**\r\n     * Sets the midtones Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set midtonesDensity(value: number) {\r\n        this._midtonesDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get midtonesSaturation(): number {\r\n        return this._midtonesSaturation;\r\n    }\r\n    /**\r\n     * Sets the midtones Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set midtonesSaturation(value: number) {\r\n        this._midtonesSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get midtonesExposure(): number {\r\n        return this._midtonesExposure;\r\n    }\r\n    /**\r\n     * Sets the midtones Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set midtonesExposure(value: number) {\r\n        this._midtonesExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    private _shadowsHue = 30;\r\n    private _shadowsDensity = 0;\r\n    private _shadowsSaturation = 0;\r\n    private _shadowsExposure = 0;\r\n\r\n    /**\r\n     * Gets the shadows Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get shadowsHue(): number {\r\n        return this._shadowsHue;\r\n    }\r\n    /**\r\n     * Sets the shadows Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set shadowsHue(value: number) {\r\n        this._shadowsHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get shadowsDensity(): number {\r\n        return this._shadowsDensity;\r\n    }\r\n    /**\r\n     * Sets the shadows Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set shadowsDensity(value: number) {\r\n        this._shadowsDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get shadowsSaturation(): number {\r\n        return this._shadowsSaturation;\r\n    }\r\n    /**\r\n     * Sets the shadows Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set shadowsSaturation(value: number) {\r\n        this._shadowsSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get shadowsExposure(): number {\r\n        return this._shadowsExposure;\r\n    }\r\n    /**\r\n     * Sets the shadows Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set shadowsExposure(value: number) {\r\n        this._shadowsExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Returns the class name\r\n     * @returns The class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ColorCurves\";\r\n    }\r\n\r\n    /**\r\n     * Binds the color curves to the shader.\r\n     * @param colorCurves The color curve to bind\r\n     * @param effect The effect to bind to\r\n     * @param positiveUniform The positive uniform shader parameter\r\n     * @param neutralUniform The neutral uniform shader parameter\r\n     * @param negativeUniform The negative uniform shader parameter\r\n     */\r\n    public static Bind(\r\n        colorCurves: ColorCurves,\r\n        effect: Effect,\r\n        positiveUniform = \"vCameraColorCurvePositive\",\r\n        neutralUniform = \"vCameraColorCurveNeutral\",\r\n        negativeUniform = \"vCameraColorCurveNegative\"\r\n    ): void {\r\n        if (colorCurves._dirty) {\r\n            colorCurves._dirty = false;\r\n\r\n            // Fill in global info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._globalHue,\r\n                colorCurves._globalDensity,\r\n                colorCurves._globalSaturation,\r\n                colorCurves._globalExposure,\r\n                colorCurves._globalCurve\r\n            );\r\n\r\n            // Compute highlights info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._highlightsHue,\r\n                colorCurves._highlightsDensity,\r\n                colorCurves._highlightsSaturation,\r\n                colorCurves._highlightsExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._highlightsCurve);\r\n\r\n            // Compute midtones info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._midtonesHue,\r\n                colorCurves._midtonesDensity,\r\n                colorCurves._midtonesSaturation,\r\n                colorCurves._midtonesExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._midtonesCurve);\r\n\r\n            // Compute shadows info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._shadowsHue,\r\n                colorCurves._shadowsDensity,\r\n                colorCurves._shadowsSaturation,\r\n                colorCurves._shadowsExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._shadowsCurve);\r\n\r\n            // Compute deltas (neutral is midtones).\r\n            colorCurves._highlightsCurve.subtractToRef(colorCurves._midtonesCurve, colorCurves._positiveCurve);\r\n            colorCurves._midtonesCurve.subtractToRef(colorCurves._shadowsCurve, colorCurves._negativeCurve);\r\n        }\r\n\r\n        if (effect) {\r\n            effect.setFloat4(positiveUniform, colorCurves._positiveCurve.r, colorCurves._positiveCurve.g, colorCurves._positiveCurve.b, colorCurves._positiveCurve.a);\r\n            effect.setFloat4(neutralUniform, colorCurves._midtonesCurve.r, colorCurves._midtonesCurve.g, colorCurves._midtonesCurve.b, colorCurves._midtonesCurve.a);\r\n            effect.setFloat4(negativeUniform, colorCurves._negativeCurve.r, colorCurves._negativeCurve.g, colorCurves._negativeCurve.b, colorCurves._negativeCurve.a);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the ColorCurves effects.\r\n     * @param uniformsList The list of uniforms used in the effect\r\n     */\r\n    public static PrepareUniforms(uniformsList: string[]): void {\r\n        uniformsList.push(\"vCameraColorCurveNeutral\", \"vCameraColorCurvePositive\", \"vCameraColorCurveNegative\");\r\n    }\r\n\r\n    /**\r\n     * Returns color grading data based on a hue, density, saturation and exposure value.\r\n     * @param hue\r\n     * @param density\r\n     * @param saturation The saturation.\r\n     * @param exposure The exposure.\r\n     * @param result The result data container.\r\n     */\r\n    private _getColorGradingDataToRef(hue: number, density: number, saturation: number, exposure: number, result: Color4): void {\r\n        if (hue == null) {\r\n            return;\r\n        }\r\n\r\n        hue = ColorCurves._Clamp(hue, 0, 360);\r\n        density = ColorCurves._Clamp(density, -100, 100);\r\n        saturation = ColorCurves._Clamp(saturation, -100, 100);\r\n        exposure = ColorCurves._Clamp(exposure, -100, 100);\r\n\r\n        // Remap the slider/config filter density with non-linear mapping and also scale by half\r\n        // so that the maximum filter density is only 50% control. This provides fine control\r\n        // for small values and reasonable range.\r\n        density = ColorCurves._ApplyColorGradingSliderNonlinear(density);\r\n        density *= 0.5;\r\n\r\n        exposure = ColorCurves._ApplyColorGradingSliderNonlinear(exposure);\r\n\r\n        if (density < 0) {\r\n            density *= -1;\r\n            hue = (hue + 180) % 360;\r\n        }\r\n\r\n        ColorCurves._FromHSBToRef(hue, density, 50 + 0.25 * exposure, result);\r\n        result.scaleToRef(2, result);\r\n        result.a = 1 + 0.01 * saturation;\r\n    }\r\n\r\n    /**\r\n     * Takes an input slider value and returns an adjusted value that provides extra control near the centre.\r\n     * @param value The input slider value in range [-100,100].\r\n     * @returns Adjusted value.\r\n     */\r\n    private static _ApplyColorGradingSliderNonlinear(value: number): number {\r\n        value /= 100;\r\n\r\n        let x: number = Math.abs(value);\r\n        x = Math.pow(x, 2);\r\n\r\n        if (value < 0) {\r\n            x *= -1;\r\n        }\r\n\r\n        x *= 100;\r\n\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Returns an RGBA Color4 based on Hue, Saturation and Brightness (also referred to as value, HSV).\r\n     * @param hue The hue (H) input.\r\n     * @param saturation The saturation (S) input.\r\n     * @param brightness The brightness (B) input.\r\n     * @param result\r\n     * @result An RGBA color represented as Vector4.\r\n     */\r\n    private static _FromHSBToRef(hue: number, saturation: number, brightness: number, result: Color4): void {\r\n        let h: number = ColorCurves._Clamp(hue, 0, 360);\r\n        const s: number = ColorCurves._Clamp(saturation / 100, 0, 1);\r\n        const v: number = ColorCurves._Clamp(brightness / 100, 0, 1);\r\n\r\n        if (s === 0) {\r\n            result.r = v;\r\n            result.g = v;\r\n            result.b = v;\r\n        } else {\r\n            // sector 0 to 5\r\n            h /= 60;\r\n            const i = Math.floor(h);\r\n\r\n            // fractional part of h\r\n            const f = h - i;\r\n            const p = v * (1 - s);\r\n            const q = v * (1 - s * f);\r\n            const t = v * (1 - s * (1 - f));\r\n\r\n            switch (i) {\r\n                case 0:\r\n                    result.r = v;\r\n                    result.g = t;\r\n                    result.b = p;\r\n                    break;\r\n                case 1:\r\n                    result.r = q;\r\n                    result.g = v;\r\n                    result.b = p;\r\n                    break;\r\n                case 2:\r\n                    result.r = p;\r\n                    result.g = v;\r\n                    result.b = t;\r\n                    break;\r\n                case 3:\r\n                    result.r = p;\r\n                    result.g = q;\r\n                    result.b = v;\r\n                    break;\r\n                case 4:\r\n                    result.r = t;\r\n                    result.g = p;\r\n                    result.b = v;\r\n                    break;\r\n                default:\r\n                    // case 5:\r\n                    result.r = v;\r\n                    result.g = p;\r\n                    result.b = q;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        result.a = 1;\r\n    }\r\n\r\n    /**\r\n     * Returns a value clamped between min and max\r\n     * @param value The value to clamp\r\n     * @param min The minimum of value\r\n     * @param max The maximum of value\r\n     * @returns The clamped value.\r\n     */\r\n    private static _Clamp(value: number, min: number, max: number): number {\r\n        return Math.min(Math.max(value, min), max);\r\n    }\r\n\r\n    /**\r\n     * Clones the current color curve instance.\r\n     * @returns The cloned curves\r\n     */\r\n    public clone(): ColorCurves {\r\n        return SerializationHelper.Clone(() => new ColorCurves(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current color curve instance to a json representation.\r\n     * @returns a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the color curve from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @returns The parsed curves\r\n     */\r\n    public static Parse(source: any): ColorCurves {\r\n        return SerializationHelper.Parse(() => new ColorCurves(), source, null, null);\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ColorCurvesParser = ColorCurves.Parse;\r\n","import type { Nullable } from \"../types\";\r\nimport type { IEffectFallbacks } from \"./iEffectFallbacks\";\r\n\r\ndeclare type Effect = import(\"./effect\").Effect;\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\n\r\n/**\r\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\r\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\r\n */\r\nexport class EffectFallbacks implements IEffectFallbacks {\r\n    private _defines: { [key: string]: Array<String> } = {};\r\n\r\n    private _currentRank = 32;\r\n    private _maxRank = -1;\r\n\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    /**\r\n     * Removes the fallback from the bound mesh.\r\n     */\r\n    public unBindMesh() {\r\n        this._mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Adds a fallback on the specified property.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param define The name of the define in the shader\r\n     */\r\n    public addFallback(rank: number, define: string): void {\r\n        if (!this._defines[rank]) {\r\n            if (rank < this._currentRank) {\r\n                this._currentRank = rank;\r\n            }\r\n\r\n            if (rank > this._maxRank) {\r\n                this._maxRank = rank;\r\n            }\r\n\r\n            this._defines[rank] = new Array<String>();\r\n        }\r\n\r\n        this._defines[rank].push(define);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to use CPU skinning when needing to fallback.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param mesh The mesh to use the fallbacks.\r\n     */\r\n    public addCPUSkinningFallback(rank: number, mesh: AbstractMesh) {\r\n        this._mesh = mesh;\r\n\r\n        if (rank < this._currentRank) {\r\n            this._currentRank = rank;\r\n        }\r\n        if (rank > this._maxRank) {\r\n            this._maxRank = rank;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to see if more fallbacks are still available.\r\n     */\r\n    public get hasMoreFallbacks(): boolean {\r\n        return this._currentRank <= this._maxRank;\r\n    }\r\n\r\n    /**\r\n     * Removes the defines that should be removed when falling back.\r\n     * @param currentDefines defines the current define statements for the shader.\r\n     * @param effect defines the current effect we try to compile\r\n     * @returns The resulting defines with defines of the current rank removed.\r\n     */\r\n    public reduce(currentDefines: string, effect: Effect): string {\r\n        // First we try to switch to CPU skinning\r\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\r\n            this._mesh.computeBonesUsingShaders = false;\r\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\r\n            effect._bonesComputationForcedToCPU = true;\r\n\r\n            const scene = this._mesh.getScene();\r\n            for (let index = 0; index < scene.meshes.length; index++) {\r\n                const otherMesh = scene.meshes[index];\r\n\r\n                if (!otherMesh.material) {\r\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\r\n                        otherMesh.computeBonesUsingShaders = false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (otherMesh.material.getEffect() === effect) {\r\n                    otherMesh.computeBonesUsingShaders = false;\r\n                } else if (otherMesh.subMeshes) {\r\n                    for (const subMesh of otherMesh.subMeshes) {\r\n                        const subMeshEffect = subMesh.effect;\r\n\r\n                        if (subMeshEffect === effect) {\r\n                            otherMesh.computeBonesUsingShaders = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const currentFallbacks = this._defines[this._currentRank];\r\n            if (currentFallbacks) {\r\n                for (let index = 0; index < currentFallbacks.length; index++) {\r\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\r\n                }\r\n            }\r\n\r\n            this._currentRank++;\r\n        }\r\n\r\n        return currentDefines;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, SerializationHelper, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport { ColorCurves } from \"../Materials/colorCurves\";\r\n\r\ndeclare type BaseTexture = import(\"../Materials/Textures/baseTexture\").BaseTexture;\r\ndeclare type Effect = import(\"../Materials/effect\").Effect;\r\n\r\n/**\r\n * Interface to follow in your material defines to integrate easily the\r\n * Image processing functions.\r\n * @internal\r\n */\r\nexport interface IImageProcessingConfigurationDefines {\r\n    IMAGEPROCESSING: boolean;\r\n    VIGNETTE: boolean;\r\n    VIGNETTEBLENDMODEMULTIPLY: boolean;\r\n    VIGNETTEBLENDMODEOPAQUE: boolean;\r\n    TONEMAPPING: boolean;\r\n    TONEMAPPING_ACES: boolean;\r\n    CONTRAST: boolean;\r\n    EXPOSURE: boolean;\r\n    COLORCURVES: boolean;\r\n    COLORGRADING: boolean;\r\n    COLORGRADING3D: boolean;\r\n    SAMPLER3DGREENDEPTH: boolean;\r\n    SAMPLER3DBGRMAP: boolean;\r\n    DITHER: boolean;\r\n    IMAGEPROCESSINGPOSTPROCESS: boolean;\r\n    SKIPFINALCOLORCLAMP: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ImageProcessingConfigurationDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public DITHER = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public EXPOSURE = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * This groups together the common properties used for image processing either in direct forward pass\r\n * or through post processing effect depending on the use of the image processing pipeline in your scene\r\n * or not.\r\n */\r\nexport class ImageProcessingConfiguration {\r\n    /**\r\n     * Default tone mapping applied in BabylonJS.\r\n     */\r\n    public static readonly TONEMAPPING_STANDARD = 0;\r\n\r\n    /**\r\n     * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\r\n     * to other engines rendering to increase portability.\r\n     */\r\n    public static readonly TONEMAPPING_ACES = 1;\r\n\r\n    /**\r\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\r\n     */\r\n    @serializeAsColorCurves()\r\n    public colorCurves: Nullable<ColorCurves> = new ColorCurves();\r\n\r\n    @serialize()\r\n    private _colorCurvesEnabled = false;\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this._colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        if (this._colorCurvesEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorCurvesEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serializeAsTexture(\"colorGradingTexture\")\r\n    private _colorGradingTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._colorGradingTexture;\r\n    }\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        if (this._colorGradingTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingTexture = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingEnabled = false;\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this._colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        if (this._colorGradingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingWithGreenDepth = true;\r\n    /**\r\n     * Gets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public get colorGradingWithGreenDepth(): boolean {\r\n        return this._colorGradingWithGreenDepth;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public set colorGradingWithGreenDepth(value: boolean) {\r\n        if (this._colorGradingWithGreenDepth === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingWithGreenDepth = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingBGR = true;\r\n    /**\r\n     * Gets whether the color grading texture contains BGR values.\r\n     */\r\n    public get colorGradingBGR(): boolean {\r\n        return this._colorGradingBGR;\r\n    }\r\n    /**\r\n     * Sets whether the color grading texture contains BGR values.\r\n     */\r\n    public set colorGradingBGR(value: boolean) {\r\n        if (this._colorGradingBGR === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingBGR = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _exposure = 1.0;\r\n    /**\r\n     * Gets the Exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this._exposure;\r\n    }\r\n    /**\r\n     * Sets the Exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        if (this._exposure === value) {\r\n            return;\r\n        }\r\n\r\n        this._exposure = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingEnabled = false;\r\n    /**\r\n     * Gets whether the tone mapping effect is enabled.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the tone mapping effect is enabled.\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        if (this._toneMappingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect used in BabylonJS.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        if (this._toneMappingType === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingType = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    protected _contrast = 1.0;\r\n    /**\r\n     * Gets the contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this._contrast;\r\n    }\r\n    /**\r\n     * Sets the contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        if (this._contrast === value) {\r\n            return;\r\n        }\r\n\r\n        this._contrast = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Vignette stretch size.\r\n     */\r\n    @serialize()\r\n    public vignetteStretch = 0;\r\n\r\n    /**\r\n     * Vignette centre X Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCentreX = 0;\r\n\r\n    /**\r\n     * Vignette centre Y Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCentreY = 0;\r\n\r\n    /**\r\n     * Vignette weight or intensity of the vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteWeight = 1.5;\r\n\r\n    /**\r\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    @serializeAsColor4()\r\n    public vignetteColor: Color4 = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Camera field of view used by the Vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteCameraFov = 0.5;\r\n\r\n    @serialize()\r\n    private _vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this._vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        if (this._vignetteBlendMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteBlendMode = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _vignetteEnabled = false;\r\n    /**\r\n     * Gets whether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this._vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        if (this._vignetteEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _ditheringEnabled = false;\r\n    /**\r\n     * Gets whether the dithering effect is enabled.\r\n     * The dithering effect can be used to reduce banding.\r\n     */\r\n    public get ditheringEnabled(): boolean {\r\n        return this._ditheringEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the dithering effect is enabled.\r\n     * The dithering effect can be used to reduce banding.\r\n     */\r\n    public set ditheringEnabled(value: boolean) {\r\n        if (this._ditheringEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ditheringEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _ditheringIntensity = 1.0 / 255.0;\r\n    /**\r\n     * Gets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\r\n     */\r\n    public get ditheringIntensity(): number {\r\n        return this._ditheringIntensity;\r\n    }\r\n    /**\r\n     * Sets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\r\n     */\r\n    public set ditheringIntensity(value: number) {\r\n        if (this._ditheringIntensity === value) {\r\n            return;\r\n        }\r\n\r\n        this._ditheringIntensity = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _skipFinalColorClamp = false;\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public get skipFinalColorClamp(): boolean {\r\n        return this._skipFinalColorClamp;\r\n    }\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public set skipFinalColorClamp(value: boolean) {\r\n        if (this._skipFinalColorClamp === value) {\r\n            return;\r\n        }\r\n\r\n        this._skipFinalColorClamp = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _applyByPostProcess = false;\r\n    /**\r\n     * Gets whether the image processing is applied through a post process or not.\r\n     */\r\n    public get applyByPostProcess(): boolean {\r\n        return this._applyByPostProcess;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is applied through a post process or not.\r\n     */\r\n    public set applyByPostProcess(value: boolean) {\r\n        if (this._applyByPostProcess === value) {\r\n            return;\r\n        }\r\n\r\n        this._applyByPostProcess = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _isEnabled = true;\r\n    /**\r\n     * Gets whether the image processing is enabled or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is enabled or not.\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the configuration changes and requires Shader to Update some parameters.\r\n     */\r\n    public onUpdateParameters = new Observable<ImageProcessingConfiguration>();\r\n\r\n    /**\r\n     * Method called each time the image processing information changes requires to recompile the effect.\r\n     */\r\n    protected _updateParameters(): void {\r\n        this.onUpdateParameters.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name.\r\n     * @returns \"ImageProcessingConfiguration\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ImageProcessingConfiguration\";\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the Image Processing effects.\r\n     * @param uniforms The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareUniforms(uniforms: string[], defines: IImageProcessingConfigurationDefines): void {\r\n        if (defines.EXPOSURE) {\r\n            uniforms.push(\"exposureLinear\");\r\n        }\r\n        if (defines.CONTRAST) {\r\n            uniforms.push(\"contrast\");\r\n        }\r\n        if (defines.COLORGRADING) {\r\n            uniforms.push(\"colorTransformSettings\");\r\n        }\r\n        if (defines.VIGNETTE || defines.DITHER) {\r\n            uniforms.push(\"vInverseScreenSize\");\r\n        }\r\n        if (defines.VIGNETTE) {\r\n            uniforms.push(\"vignetteSettings1\");\r\n            uniforms.push(\"vignetteSettings2\");\r\n        }\r\n        if (defines.COLORCURVES) {\r\n            ColorCurves.PrepareUniforms(uniforms);\r\n        }\r\n        if (defines.DITHER) {\r\n            uniforms.push(\"ditherIntensity\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of samplers associated with the Image Processing effects.\r\n     * @param samplersList The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareSamplers(samplersList: string[], defines: IImageProcessingConfigurationDefines): void {\r\n        if (defines.COLORGRADING) {\r\n            samplersList.push(\"txColorTransform\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of defines associated to the shader.\r\n     * @param defines the list of defines to complete\r\n     * @param forPostProcess Define if we are currently in post process mode or not\r\n     */\r\n    public prepareDefines(defines: IImageProcessingConfigurationDefines, forPostProcess = false): void {\r\n        if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\r\n            defines.VIGNETTE = false;\r\n            defines.TONEMAPPING = false;\r\n            defines.TONEMAPPING_ACES = false;\r\n            defines.CONTRAST = false;\r\n            defines.EXPOSURE = false;\r\n            defines.COLORCURVES = false;\r\n            defines.COLORGRADING = false;\r\n            defines.COLORGRADING3D = false;\r\n            defines.DITHER = false;\r\n            defines.IMAGEPROCESSING = false;\r\n            defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\r\n            return;\r\n        }\r\n\r\n        defines.VIGNETTE = this.vignetteEnabled;\r\n        defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\r\n        defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\r\n\r\n        defines.TONEMAPPING = this.toneMappingEnabled;\r\n        switch (this._toneMappingType) {\r\n            case ImageProcessingConfiguration.TONEMAPPING_ACES:\r\n                defines.TONEMAPPING_ACES = true;\r\n                break;\r\n            default:\r\n                defines.TONEMAPPING_ACES = false;\r\n                break;\r\n        }\r\n\r\n        defines.CONTRAST = this.contrast !== 1.0;\r\n        defines.EXPOSURE = this.exposure !== 1.0;\r\n        defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\r\n        defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\r\n        if (defines.COLORGRADING) {\r\n            defines.COLORGRADING3D = this.colorGradingTexture!.is3D;\r\n        } else {\r\n            defines.COLORGRADING3D = false;\r\n        }\r\n        defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\r\n        defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\r\n        defines.DITHER = this._ditheringEnabled;\r\n        defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\r\n        defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n        defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING || defines.DITHER;\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the image processing information are ready.\r\n     * @returns True if ready, otherwise, false\r\n     */\r\n    public isReady() {\r\n        // Color Grading texture can not be none blocking.\r\n        return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\r\n    }\r\n\r\n    /**\r\n     * Binds the image processing to the shader.\r\n     * @param effect The effect to bind to\r\n     * @param overrideAspectRatio Override the aspect ratio of the effect\r\n     */\r\n    public bind(effect: Effect, overrideAspectRatio?: number): void {\r\n        // Color Curves\r\n        if (this._colorCurvesEnabled && this.colorCurves) {\r\n            ColorCurves.Bind(this.colorCurves, effect);\r\n        }\r\n\r\n        // Vignette and dither handled together due to common uniform.\r\n        if (this._vignetteEnabled || this._ditheringEnabled) {\r\n            const inverseWidth = 1 / effect.getEngine().getRenderWidth();\r\n            const inverseHeight = 1 / effect.getEngine().getRenderHeight();\r\n            effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\r\n\r\n            if (this._ditheringEnabled) {\r\n                effect.setFloat(\"ditherIntensity\", 0.5 * this._ditheringIntensity);\r\n            }\r\n\r\n            if (this._vignetteEnabled) {\r\n                const aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\r\n\r\n                let vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\r\n                let vignetteScaleX = vignetteScaleY * aspectRatio;\r\n\r\n                const vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\r\n                vignetteScaleX = Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\r\n                vignetteScaleY = Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\r\n\r\n                effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCentreX, -vignetteScaleY * this.vignetteCentreY);\r\n\r\n                const vignettePower = -2.0 * this.vignetteWeight;\r\n                effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\r\n            }\r\n        }\r\n\r\n        // Exposure\r\n        effect.setFloat(\"exposureLinear\", this.exposure);\r\n\r\n        // Contrast\r\n        effect.setFloat(\"contrast\", this.contrast);\r\n\r\n        // Color transform settings\r\n        if (this.colorGradingTexture) {\r\n            effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\r\n            const textureSize = this.colorGradingTexture.getSize().height;\r\n\r\n            effect.setFloat4(\r\n                \"colorTransformSettings\",\r\n                (textureSize - 1) / textureSize, // textureScale\r\n                0.5 / textureSize, // textureOffset\r\n                textureSize, // textureSize\r\n                this.colorGradingTexture.level // weight\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current image processing instance.\r\n     * @returns The cloned image processing\r\n     */\r\n    public clone(): ImageProcessingConfiguration {\r\n        return SerializationHelper.Clone(() => new ImageProcessingConfiguration(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current image processing instance to a json representation.\r\n     * @returns a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the image processing from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @returns The parsed image processing\r\n     */\r\n    public static Parse(source: any): ImageProcessingConfiguration {\r\n        return SerializationHelper.Parse(() => new ImageProcessingConfiguration(), source, null, null);\r\n    }\r\n\r\n    // Static constants associated to the image processing.\r\n    private static _VIGNETTEMODE_MULTIPLY = 0;\r\n    private static _VIGNETTEMODE_OPAQUE = 1;\r\n\r\n    /**\r\n     * Used to apply the vignette as a mix with the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_MULTIPLY(): number {\r\n        return this._VIGNETTEMODE_MULTIPLY;\r\n    }\r\n\r\n    /**\r\n     * Used to apply the vignette as a replacement of the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_OPAQUE(): number {\r\n        return this._VIGNETTEMODE_OPAQUE;\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\nimport { MaterialHelper } from \"./materialHelper\";\r\nimport type { BaseTexture } from \"./Textures/baseTexture\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { MaterialDefines } from \"./materialDefines\";\r\nimport { MaterialPluginBase } from \"./materialPluginBase\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type StandardMaterial = import(\"./standardMaterial\").StandardMaterial;\r\ndeclare type PBRBaseMaterial = import(\"./PBR/pbrBaseMaterial\").PBRBaseMaterial;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialDetailMapDefines extends MaterialDefines {\r\n    DETAIL = false;\r\n    DETAILDIRECTUV = 0;\r\n    DETAIL_NORMALBLENDMETHOD = 0;\r\n}\r\n\r\n/**\r\n * Plugin that implements the detail map component of a material\r\n *\r\n * Inspired from:\r\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\r\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\r\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\r\n */\r\nexport class DetailMapConfiguration extends MaterialPluginBase {\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The detail texture of the material.\r\n     */\r\n    @serializeAsTexture(\"detailTexture\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\r\n     * Bigger values mean stronger blending\r\n     */\r\n    @serialize()\r\n    public diffuseBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strongly the detail roughness channel is blended with the regular roughness value\r\n     * Bigger values mean stronger blending. Only used with PBR materials\r\n     */\r\n    @serialize()\r\n    public roughnessBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strong the bump effect from the detail map is\r\n     * Bigger values mean stronger effect\r\n     */\r\n    @serialize()\r\n    public bumpLevel = 1;\r\n\r\n    private _normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\r\n    /**\r\n     * The method used to blend the bump and detail normals together\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalBlendMethod: number;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Enable or disable the detail map on this material\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial | StandardMaterial, addToPluginList = true) {\r\n        super(material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialDetailMapDefines, scene: Scene, engine: Engine): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty && scene.texturesEnabled) {\r\n            if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                // Detail texture cannot be not blocking.\r\n                if (!this._texture.isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefines(defines: MaterialDetailMapDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n\r\n            const engine = scene.getEngine();\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\r\n                    defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n                } else {\r\n                    defines.DETAIL = false;\r\n                }\r\n            }\r\n        } else {\r\n            defines.DETAIL = false;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\r\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.setTexture(\"detailSampler\", this._texture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"DetailMapConfiguration\";\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"detailSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vDetailInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"detailMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import { Constants } from \"../Engines/constants\";\r\nimport { SerializationHelper, serialize } from \"../Misc/decorators\";\r\nimport type { IStencilState } from \"../States/IStencilState\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Class that holds the different stencil states of a material\r\n * Usage example: https://playground.babylonjs.com/#CW5PRI#10\r\n */\r\nexport class MaterialStencilState implements IStencilState {\r\n    /**\r\n     * Creates a material stencil state instance\r\n     */\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Resets all the stencil states to default values\r\n     */\r\n    public reset() {\r\n        this.enabled = false;\r\n        this.mask = 0xff;\r\n\r\n        this.func = Constants.ALWAYS;\r\n        this.funcRef = 1;\r\n        this.funcMask = 0xff;\r\n\r\n        this.opStencilFail = Constants.KEEP;\r\n        this.opDepthFail = Constants.KEEP;\r\n        this.opStencilDepthPass = Constants.REPLACE;\r\n    }\r\n\r\n    private _func: number;\r\n    /**\r\n     * Gets or sets the stencil function\r\n     */\r\n    @serialize()\r\n    public get func(): number {\r\n        return this._func;\r\n    }\r\n\r\n    public set func(value: number) {\r\n        this._func = value;\r\n    }\r\n\r\n    private _funcRef: number;\r\n    /**\r\n     * Gets or sets the stencil function reference\r\n     */\r\n    @serialize()\r\n    public get funcRef(): number {\r\n        return this._funcRef;\r\n    }\r\n\r\n    public set funcRef(value: number) {\r\n        this._funcRef = value;\r\n    }\r\n\r\n    private _funcMask: number;\r\n    /**\r\n     * Gets or sets the stencil function mask\r\n     */\r\n    @serialize()\r\n    public get funcMask(): number {\r\n        return this._funcMask;\r\n    }\r\n\r\n    public set funcMask(value: number) {\r\n        this._funcMask = value;\r\n    }\r\n\r\n    private _opStencilFail: number;\r\n    /**\r\n     * Gets or sets the operation when the stencil test fails\r\n     */\r\n    @serialize()\r\n    public get opStencilFail(): number {\r\n        return this._opStencilFail;\r\n    }\r\n\r\n    public set opStencilFail(value: number) {\r\n        this._opStencilFail = value;\r\n    }\r\n\r\n    private _opDepthFail: number;\r\n    /**\r\n     * Gets or sets the operation when the depth test fails\r\n     */\r\n    @serialize()\r\n    public get opDepthFail(): number {\r\n        return this._opDepthFail;\r\n    }\r\n\r\n    public set opDepthFail(value: number) {\r\n        this._opDepthFail = value;\r\n    }\r\n\r\n    private _opStencilDepthPass: number;\r\n    /**\r\n     * Gets or sets the operation when the stencil+depth test succeeds\r\n     */\r\n    @serialize()\r\n    public get opStencilDepthPass(): number {\r\n        return this._opStencilDepthPass;\r\n    }\r\n\r\n    public set opStencilDepthPass(value: number) {\r\n        this._opStencilDepthPass = value;\r\n    }\r\n\r\n    private _mask: number;\r\n    /**\r\n     * Gets or sets the stencil mask\r\n     */\r\n    @serialize()\r\n    public get mask(): number {\r\n        return this._mask;\r\n    }\r\n\r\n    public set mask(value: number) {\r\n        this._mask = value;\r\n    }\r\n\r\n    private _enabled: boolean;\r\n    /**\r\n     * Enables or disables the stencil test\r\n     */\r\n    @serialize()\r\n    public get enabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public set enabled(value: boolean) {\r\n        this._enabled = value;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name, useful for serialization or dynamic coding.\r\n     * @returns \"MaterialStencilState\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"MaterialStencilState\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param stencilState defines stencil state where to copy the info\r\n     */\r\n    public copyTo(stencilState: MaterialStencilState): void {\r\n        SerializationHelper.Clone(() => stencilState, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this stencil configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a stencil state configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n","import { serialize, SerializationHelper } from \"../Misc/decorators\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { Geometry } from \"../Meshes/geometry\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { Effect } from \"./effect\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { MaterialDefines } from \"./materialDefines\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { IInspectable } from \"../Misc/iInspectable\";\r\nimport { Plane } from \"../Maths/math.plane\";\r\nimport type { ShadowDepthWrapper } from \"./shadowDepthWrapper\";\r\nimport { MaterialHelper } from \"./materialHelper\";\r\nimport type { IMaterialContext } from \"../Engines/IMaterialContext\";\r\nimport { DrawWrapper } from \"./drawWrapper\";\r\nimport { MaterialStencilState } from \"./materialStencilState\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractScene } from \"../abstractScene\";\r\nimport type {\r\n    MaterialPluginDisposed,\r\n    MaterialPluginIsReadyForSubMesh,\r\n    MaterialPluginGetDefineNames,\r\n    MaterialPluginBindForSubMesh,\r\n    MaterialPluginGetActiveTextures,\r\n    MaterialPluginHasTexture,\r\n    MaterialPluginGetAnimatables,\r\n    MaterialPluginPrepareDefines,\r\n    MaterialPluginPrepareEffect,\r\n    MaterialPluginPrepareUniformBuffer,\r\n    MaterialPluginCreated,\r\n    MaterialPluginFillRenderTargetTextures,\r\n    MaterialPluginHasRenderTargetTextures,\r\n    MaterialPluginHardBindForSubMesh,\r\n} from \"./materialPluginEvent\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport type { ShaderCustomProcessingFunction } from \"../Engines/Processors/shaderProcessingOptions\";\r\n\r\ndeclare type PrePassRenderer = import(\"../Rendering/prePassRenderer\").PrePassRenderer;\r\ndeclare type Mesh = import(\"../Meshes/mesh\").Mesh;\r\ndeclare type Animation = import(\"../Animations/animation\").Animation;\r\ndeclare type InstancedMesh = import(\"../Meshes/instancedMesh\").InstancedMesh;\r\n\r\ndeclare let BABYLON: any;\r\n\r\n/**\r\n * Options for compiling materials.\r\n */\r\nexport interface IMaterialCompilationOptions {\r\n    /**\r\n     * Defines whether clip planes are enabled.\r\n     */\r\n    clipPlane: boolean;\r\n\r\n    /**\r\n     * Defines whether instances are enabled.\r\n     */\r\n    useInstances: boolean;\r\n}\r\n\r\n/**\r\n * Options passed when calling customShaderNameResolve\r\n */\r\nexport interface ICustomShaderNameResolveOptions {\r\n    /**\r\n     * If provided, will be called two times with the vertex and fragment code so that this code can be updated before it is compiled by the GPU\r\n     */\r\n    processFinalCode?: Nullable<ShaderCustomProcessingFunction>;\r\n}\r\n\r\n/**\r\n * Base class for the main features of a material in Babylon.js\r\n */\r\nexport class Material implements IAnimatable {\r\n    /**\r\n     * Returns the triangle fill mode\r\n     */\r\n    public static readonly TriangleFillMode = Constants.MATERIAL_TriangleFillMode;\r\n    /**\r\n     * Returns the wireframe mode\r\n     */\r\n    public static readonly WireFrameFillMode = Constants.MATERIAL_WireFrameFillMode;\r\n    /**\r\n     * Returns the point fill mode\r\n     */\r\n    public static readonly PointFillMode = Constants.MATERIAL_PointFillMode;\r\n    /**\r\n     * Returns the point list draw mode\r\n     */\r\n    public static readonly PointListDrawMode = Constants.MATERIAL_PointListDrawMode;\r\n    /**\r\n     * Returns the line list draw mode\r\n     */\r\n    public static readonly LineListDrawMode = Constants.MATERIAL_LineListDrawMode;\r\n    /**\r\n     * Returns the line loop draw mode\r\n     */\r\n    public static readonly LineLoopDrawMode = Constants.MATERIAL_LineLoopDrawMode;\r\n    /**\r\n     * Returns the line strip draw mode\r\n     */\r\n    public static readonly LineStripDrawMode = Constants.MATERIAL_LineStripDrawMode;\r\n    /**\r\n     * Returns the triangle strip draw mode\r\n     */\r\n    public static readonly TriangleStripDrawMode = Constants.MATERIAL_TriangleStripDrawMode;\r\n    /**\r\n     * Returns the triangle fan draw mode\r\n     */\r\n    public static readonly TriangleFanDrawMode = Constants.MATERIAL_TriangleFanDrawMode;\r\n\r\n    /**\r\n     * Stores the clock-wise side orientation\r\n     */\r\n    public static readonly ClockWiseSideOrientation = Constants.MATERIAL_ClockWiseSideOrientation;\r\n\r\n    /**\r\n     * Stores the counter clock-wise side orientation\r\n     */\r\n    public static readonly CounterClockWiseSideOrientation = Constants.MATERIAL_CounterClockWiseSideOrientation;\r\n\r\n    /**\r\n     * The dirty texture flag value\r\n     */\r\n    public static readonly TextureDirtyFlag = Constants.MATERIAL_TextureDirtyFlag;\r\n\r\n    /**\r\n     * The dirty light flag value\r\n     */\r\n    public static readonly LightDirtyFlag = Constants.MATERIAL_LightDirtyFlag;\r\n\r\n    /**\r\n     * The dirty fresnel flag value\r\n     */\r\n    public static readonly FresnelDirtyFlag = Constants.MATERIAL_FresnelDirtyFlag;\r\n\r\n    /**\r\n     * The dirty attribute flag value\r\n     */\r\n    public static readonly AttributesDirtyFlag = Constants.MATERIAL_AttributesDirtyFlag;\r\n\r\n    /**\r\n     * The dirty misc flag value\r\n     */\r\n    public static readonly MiscDirtyFlag = Constants.MATERIAL_MiscDirtyFlag;\r\n\r\n    /**\r\n     * The dirty prepass flag value\r\n     */\r\n    public static readonly PrePassDirtyFlag = Constants.MATERIAL_PrePassDirtyFlag;\r\n\r\n    /**\r\n     * The all dirty flag value\r\n     */\r\n    public static readonly AllDirtyFlag = Constants.MATERIAL_AllDirtyFlag;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: No transparency mode, Alpha channel is not use.\r\n     */\r\n    public static readonly MATERIAL_OPAQUE = 0;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\r\n     */\r\n    public static readonly MATERIAL_ALPHATEST = 1;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     */\r\n    public static readonly MATERIAL_ALPHABLEND = 2;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     * They are also discarded below the alpha cutoff threshold to improve performances.\r\n     */\r\n    public static readonly MATERIAL_ALPHATESTANDBLEND = 3;\r\n\r\n    /**\r\n     * The Whiteout method is used to blend normals.\r\n     * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\r\n     */\r\n    public static readonly MATERIAL_NORMALBLENDMETHOD_WHITEOUT = 0;\r\n\r\n    /**\r\n     * The Reoriented Normal Mapping method is used to blend normals.\r\n     * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\r\n     */\r\n    public static readonly MATERIAL_NORMALBLENDMETHOD_RNM = 1;\r\n\r\n    /**\r\n     * Event observable which raises global events common to all materials (like MaterialPluginEvent.Created)\r\n     */\r\n    public static OnEventObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * Custom callback helping to override the default shader used in the material.\r\n     */\r\n    public customShaderNameResolve: (\r\n        shaderName: string,\r\n        uniforms: string[],\r\n        uniformBuffers: string[],\r\n        samplers: string[],\r\n        defines: MaterialDefines | string[],\r\n        attributes?: string[],\r\n        options?: ICustomShaderNameResolveOptions\r\n    ) => string;\r\n\r\n    /**\r\n     * Custom shadow depth material to use for shadow rendering instead of the in-built one\r\n     */\r\n    public shadowDepthWrapper: Nullable<ShadowDepthWrapper> = null;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the material is allowed (if supported) to do shader hot swapping.\r\n     * This means that the material can keep using a previous shader while a new one is being compiled.\r\n     * This is mostly used when shader parallel compilation is supported (true by default)\r\n     */\r\n    public allowShaderHotSwapping = true;\r\n\r\n    /**\r\n     * The ID of the material\r\n     */\r\n    @serialize()\r\n    public id: string;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the material\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /** @internal */\r\n    public _loadedUniqueId: string;\r\n\r\n    /**\r\n     * The name of the material\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets user defined metadata\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    /**\r\n     * Specifies if the ready state should be checked on each call\r\n     */\r\n    @serialize()\r\n    public checkReadyOnEveryCall = false;\r\n\r\n    /**\r\n     * Specifies if the ready state should be checked once\r\n     */\r\n    @serialize()\r\n    public checkReadyOnlyOnce = false;\r\n\r\n    /**\r\n     * The state of the material\r\n     */\r\n    @serialize()\r\n    public state = \"\";\r\n\r\n    /**\r\n     * If the material can be rendered to several textures with MRT extension\r\n     */\r\n    public get canRenderToMRT(): boolean {\r\n        // By default, shaders are not compatible with MRTs\r\n        // Base classes should override that if their shader supports MRT\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * The alpha value of the material\r\n     */\r\n    @serialize(\"alpha\")\r\n    protected _alpha = 1.0;\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/how_to/debug_layer#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * Sets the alpha value of the material\r\n     */\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n\r\n        const oldValue = this._alpha;\r\n        this._alpha = value;\r\n\r\n        // Only call dirty when there is a state change (no alpha / alpha)\r\n        if (oldValue === 1 || value === 1) {\r\n            this.markAsDirty(Material.MiscDirtyFlag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the alpha value of the material\r\n     */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    /**\r\n     * Specifies if back face culling is enabled\r\n     */\r\n    @serialize(\"backFaceCulling\")\r\n    protected _backFaceCulling = true;\r\n\r\n    /**\r\n     * Sets the culling state (true to enable culling, false to disable)\r\n     */\r\n    public set backFaceCulling(value: boolean) {\r\n        if (this._backFaceCulling === value) {\r\n            return;\r\n        }\r\n        this._backFaceCulling = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the culling state\r\n     */\r\n    public get backFaceCulling(): boolean {\r\n        return this._backFaceCulling;\r\n    }\r\n\r\n    /**\r\n     * Specifies if back or front faces should be culled (when culling is enabled)\r\n     */\r\n    @serialize(\"cullBackFaces\")\r\n    protected _cullBackFaces = true;\r\n\r\n    /**\r\n     * Sets the type of faces that should be culled (true for back faces, false for front faces)\r\n     */\r\n    public set cullBackFaces(value: boolean) {\r\n        if (this._cullBackFaces === value) {\r\n            return;\r\n        }\r\n        this._cullBackFaces = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the type of faces that should be culled\r\n     */\r\n    public get cullBackFaces(): boolean {\r\n        return this._cullBackFaces;\r\n    }\r\n\r\n    private _blockDirtyMechanism = false;\r\n\r\n    /**\r\n     * Block the dirty-mechanism for this specific material\r\n     * When set to false after being true the material will be marked as dirty.\r\n     */\r\n    public get blockDirtyMechanism(): boolean {\r\n        return this._blockDirtyMechanism;\r\n    }\r\n\r\n    public set blockDirtyMechanism(value: boolean) {\r\n        if (this._blockDirtyMechanism === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockDirtyMechanism = value;\r\n\r\n        if (!value) {\r\n            this.markDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This allows you to modify the material without marking it as dirty after every change.\r\n     * This function should be used if you need to make more than one dirty-enabling change to the material - adding a texture, setting a new fill mode and so on.\r\n     * The callback will pass the material as an argument, so you can make your changes to it.\r\n     * @param callback the callback to be executed that will update the material\r\n     */\r\n    public atomicMaterialsUpdate(callback: (material: this) => void): void {\r\n        this.blockDirtyMechanism = true;\r\n        try {\r\n            callback(this);\r\n        } finally {\r\n            this.blockDirtyMechanism = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores the value for side orientation\r\n     */\r\n    @serialize()\r\n    public sideOrientation: number;\r\n\r\n    /**\r\n     * Callback triggered when the material is compiled\r\n     */\r\n    public onCompiled: Nullable<(effect: Effect) => void> = null;\r\n\r\n    /**\r\n     * Callback triggered when an error occurs\r\n     */\r\n    public onError: Nullable<(effect: Effect, errors: string) => void> = null;\r\n\r\n    /**\r\n     * Callback triggered to get the render target textures\r\n     */\r\n    public getRenderTargetTextures: Nullable<() => SmartArray<RenderTargetTexture>> = null;\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        this._eventInfo.hasRenderTargetTextures = false;\r\n        this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n        return this._eventInfo.hasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material should be serialized\r\n     */\r\n    public doNotSerialize = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _storeEffectOnSubMeshes = false;\r\n\r\n    /**\r\n     * Stores the animations for the material\r\n     */\r\n    public animations: Nullable<Array<Animation>> = null;\r\n\r\n    /**\r\n     * An event triggered when the material is disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * An observer which watches for dispose events\r\n     */\r\n    private _onDisposeObserver: Nullable<Observer<Material>> = null;\r\n    private _onUnBindObservable: Nullable<Observable<Material>> = null;\r\n\r\n    /**\r\n     * Called during a dispose event\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    private _onBindObservable: Nullable<Observable<AbstractMesh>>;\r\n\r\n    /**\r\n     * An event triggered when the material is bound\r\n     */\r\n    public get onBindObservable(): Observable<AbstractMesh> {\r\n        if (!this._onBindObservable) {\r\n            this._onBindObservable = new Observable<AbstractMesh>();\r\n        }\r\n\r\n        return this._onBindObservable;\r\n    }\r\n\r\n    /**\r\n     * An observer which watches for bind events\r\n     */\r\n    private _onBindObserver: Nullable<Observer<AbstractMesh>> = null;\r\n\r\n    /**\r\n     * Called during a bind event\r\n     */\r\n    public set onBind(callback: (Mesh: AbstractMesh) => void) {\r\n        if (this._onBindObserver) {\r\n            this.onBindObservable.remove(this._onBindObserver);\r\n        }\r\n        this._onBindObserver = this.onBindObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the material is unbound\r\n     */\r\n    public get onUnBindObservable(): Observable<Material> {\r\n        if (!this._onUnBindObservable) {\r\n            this._onUnBindObservable = new Observable<Material>();\r\n        }\r\n\r\n        return this._onUnBindObservable;\r\n    }\r\n\r\n    protected _onEffectCreatedObservable: Nullable<Observable<{ effect: Effect; subMesh: Nullable<SubMesh> }>>;\r\n\r\n    /**\r\n     * An event triggered when the effect is (re)created\r\n     */\r\n    public get onEffectCreatedObservable(): Observable<{ effect: Effect; subMesh: Nullable<SubMesh> }> {\r\n        if (!this._onEffectCreatedObservable) {\r\n            this._onEffectCreatedObservable = new Observable<{ effect: Effect; subMesh: Nullable<SubMesh> }>();\r\n        }\r\n\r\n        return this._onEffectCreatedObservable;\r\n    }\r\n\r\n    /**\r\n     * Stores the value of the alpha mode\r\n     */\r\n    @serialize(\"alphaMode\")\r\n    private _alphaMode: number = Constants.ALPHA_COMBINE;\r\n\r\n    /**\r\n     * Sets the value of the alpha mode.\r\n     *\r\n     * | Value | Type | Description |\r\n     * | --- | --- | --- |\r\n     * | 0 | ALPHA_DISABLE |   |\r\n     * | 1 | ALPHA_ADD |   |\r\n     * | 2 | ALPHA_COMBINE |   |\r\n     * | 3 | ALPHA_SUBTRACT |   |\r\n     * | 4 | ALPHA_MULTIPLY |   |\r\n     * | 5 | ALPHA_MAXIMIZED |   |\r\n     * | 6 | ALPHA_ONEONE |   |\r\n     * | 7 | ALPHA_PREMULTIPLIED |   |\r\n     * | 8 | ALPHA_PREMULTIPLIED_PORTERDUFF |   |\r\n     * | 9 | ALPHA_INTERPOLATE |   |\r\n     * | 10 | ALPHA_SCREENMODE |   |\r\n     *\r\n     */\r\n    public set alphaMode(value: number) {\r\n        if (this._alphaMode === value) {\r\n            return;\r\n        }\r\n        this._alphaMode = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the alpha mode\r\n     */\r\n    public get alphaMode(): number {\r\n        return this._alphaMode;\r\n    }\r\n\r\n    /**\r\n     * Stores the state of the need depth pre-pass value\r\n     */\r\n    @serialize()\r\n    private _needDepthPrePass = false;\r\n\r\n    /**\r\n     * Sets the need depth pre-pass value\r\n     */\r\n    public set needDepthPrePass(value: boolean) {\r\n        if (this._needDepthPrePass === value) {\r\n            return;\r\n        }\r\n        this._needDepthPrePass = value;\r\n        if (this._needDepthPrePass) {\r\n            this.checkReadyOnEveryCall = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the depth pre-pass value\r\n     */\r\n    public get needDepthPrePass(): boolean {\r\n        return this._needDepthPrePass;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public get isPrePassCapable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if depth writing should be disabled\r\n     */\r\n    @serialize()\r\n    public disableDepthWrite = false;\r\n\r\n    /**\r\n     * Specifies if color writing should be disabled\r\n     */\r\n    @serialize()\r\n    public disableColorWrite = false;\r\n\r\n    /**\r\n     * Specifies if depth writing should be forced\r\n     */\r\n    @serialize()\r\n    public forceDepthWrite = false;\r\n\r\n    /**\r\n     * Specifies the depth function that should be used. 0 means the default engine function\r\n     */\r\n    @serialize()\r\n    public depthFunction = 0;\r\n\r\n    /**\r\n     * Specifies if there should be a separate pass for culling\r\n     */\r\n    @serialize()\r\n    public separateCullingPass = false;\r\n\r\n    /**\r\n     * Stores the state specifying if fog should be enabled\r\n     */\r\n    @serialize(\"fogEnabled\")\r\n    private _fogEnabled = true;\r\n\r\n    /**\r\n     * Sets the state for enabling fog\r\n     */\r\n    public set fogEnabled(value: boolean) {\r\n        if (this._fogEnabled === value) {\r\n            return;\r\n        }\r\n        this._fogEnabled = value;\r\n        this.markAsDirty(Material.MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the fog enabled state\r\n     */\r\n    public get fogEnabled(): boolean {\r\n        return this._fogEnabled;\r\n    }\r\n\r\n    /**\r\n     * Stores the size of points\r\n     */\r\n    @serialize()\r\n    public pointSize = 1.0;\r\n\r\n    /**\r\n     * Stores the z offset Factor value\r\n     */\r\n    @serialize()\r\n    public zOffset = 0;\r\n\r\n    /**\r\n     * Stores the z offset Units value\r\n     */\r\n    @serialize()\r\n    public zOffsetUnits = 0;\r\n\r\n    public get wireframe(): boolean {\r\n        switch (this._fillMode) {\r\n            case Material.WireFrameFillMode:\r\n            case Material.LineListDrawMode:\r\n            case Material.LineLoopDrawMode:\r\n            case Material.LineStripDrawMode:\r\n                return true;\r\n        }\r\n\r\n        return this._scene.forceWireframe;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of wireframe mode\r\n     */\r\n    public set wireframe(value: boolean) {\r\n        this.fillMode = value ? Material.WireFrameFillMode : Material.TriangleFillMode;\r\n    }\r\n\r\n    /**\r\n     * Gets the value specifying if point clouds are enabled\r\n     */\r\n    @serialize()\r\n    public get pointsCloud(): boolean {\r\n        switch (this._fillMode) {\r\n            case Material.PointFillMode:\r\n            case Material.PointListDrawMode:\r\n                return true;\r\n        }\r\n\r\n        return this._scene.forcePointsCloud;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of point cloud mode\r\n     */\r\n    public set pointsCloud(value: boolean) {\r\n        this.fillMode = value ? Material.PointFillMode : Material.TriangleFillMode;\r\n    }\r\n\r\n    /**\r\n     * Gets the material fill mode\r\n     */\r\n    @serialize()\r\n    public get fillMode(): number {\r\n        return this._fillMode;\r\n    }\r\n\r\n    /**\r\n     * Sets the material fill mode\r\n     */\r\n    public set fillMode(value: number) {\r\n        if (this._fillMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._fillMode = value;\r\n        this.markAsDirty(Material.MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gives access to the stencil properties of the material\r\n     */\r\n    public readonly stencil = new MaterialStencilState();\r\n\r\n    /**\r\n     * @internal\r\n     * Stores the effects for the material\r\n     */\r\n    protected _materialContext: IMaterialContext | undefined;\r\n\r\n    protected _drawWrapper: DrawWrapper;\r\n    /** @internal */\r\n    public _getDrawWrapper(): DrawWrapper {\r\n        return this._drawWrapper;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setDrawWrapper(drawWrapper: DrawWrapper) {\r\n        this._drawWrapper = drawWrapper;\r\n    }\r\n\r\n    /**\r\n     * Specifies if uniform buffers should be used\r\n     */\r\n    private _useUBO: boolean = false;\r\n\r\n    /**\r\n     * Stores a reference to the scene\r\n     */\r\n    private _scene: Scene;\r\n    protected _needToBindSceneUbo: boolean;\r\n\r\n    /**\r\n     * Stores the fill mode state\r\n     */\r\n    private _fillMode = Material.TriangleFillMode;\r\n\r\n    /**\r\n     * Specifies if the depth write state should be cached\r\n     */\r\n    private _cachedDepthWriteState: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the color write state should be cached\r\n     */\r\n    private _cachedColorWriteState: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the depth function state should be cached\r\n     */\r\n    private _cachedDepthFunctionState: number = 0;\r\n\r\n    /**\r\n     * Stores the uniform buffer\r\n     * @internal\r\n     */\r\n    public _uniformBuffer: UniformBuffer;\r\n\r\n    /** @internal */\r\n    public _indexInSceneMaterialArray = -1;\r\n\r\n    /** @internal */\r\n    public meshMap: Nullable<{ [id: string]: AbstractMesh | undefined }> = null;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /** @internal */\r\n    public _dirtyCallbacks: { [code: number]: () => void };\r\n\r\n    /** @internal */\r\n    public _uniformBufferLayoutBuilt = false;\r\n\r\n    protected _eventInfo: MaterialPluginCreated &\r\n        MaterialPluginDisposed &\r\n        MaterialPluginHasTexture &\r\n        MaterialPluginIsReadyForSubMesh &\r\n        MaterialPluginGetDefineNames &\r\n        MaterialPluginPrepareEffect &\r\n        MaterialPluginPrepareDefines &\r\n        MaterialPluginPrepareUniformBuffer &\r\n        MaterialPluginBindForSubMesh &\r\n        MaterialPluginGetAnimatables &\r\n        MaterialPluginGetActiveTextures &\r\n        MaterialPluginFillRenderTargetTextures &\r\n        MaterialPluginHasRenderTargetTextures &\r\n        MaterialPluginHardBindForSubMesh = {} as any; // will be initialized before each event notification\r\n\r\n    /** @internal */\r\n    public _callbackPluginEventGeneric: (\r\n        id: number,\r\n        info:\r\n            | MaterialPluginGetActiveTextures\r\n            | MaterialPluginGetAnimatables\r\n            | MaterialPluginHasTexture\r\n            | MaterialPluginDisposed\r\n            | MaterialPluginGetDefineNames\r\n            | MaterialPluginPrepareEffect\r\n            | MaterialPluginPrepareUniformBuffer\r\n    ) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventIsReadyForSubMesh: (eventData: MaterialPluginIsReadyForSubMesh) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventPrepareDefines: (eventData: MaterialPluginPrepareDefines) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventPrepareDefinesBeforeAttributes: (eventData: MaterialPluginPrepareDefines) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventHardBindForSubMesh: (eventData: MaterialPluginHardBindForSubMesh) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventBindForSubMesh: (eventData: MaterialPluginBindForSubMesh) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventHasRenderTargetTextures: (eventData: MaterialPluginHasRenderTargetTextures) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventFillRenderTargetTextures: (eventData: MaterialPluginFillRenderTargetTextures) => void = () => void 0;\r\n\r\n    /**\r\n     * Creates a material instance\r\n     * @param name defines the name of the material\r\n     * @param scene defines the scene to reference\r\n     * @param doNotAdd specifies if the material should be added to the scene\r\n     */\r\n    constructor(name: string, scene?: Nullable<Scene>, doNotAdd?: boolean) {\r\n        this.name = name;\r\n        const setScene = scene || EngineStore.LastCreatedScene;\r\n        if (!setScene) {\r\n            return;\r\n        }\r\n        this._scene = setScene;\r\n        this._dirtyCallbacks = {};\r\n\r\n        this._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag] = this._markAllSubMeshesAsTexturesDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_LightDirtyFlag] = this._markAllSubMeshesAsLightsDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_FresnelDirtyFlag] = this._markAllSubMeshesAsFresnelDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_AttributesDirtyFlag] = this._markAllSubMeshesAsAttributesDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_MiscDirtyFlag] = this._markAllSubMeshesAsMiscDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_PrePassDirtyFlag] = this._markAllSubMeshesAsPrePassDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_AllDirtyFlag] = this._markAllSubMeshesAsAllDirty.bind(this);\r\n\r\n        this.id = name || Tools.RandomId();\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._materialContext = this._scene.getEngine().createMaterialContext();\r\n        this._drawWrapper = new DrawWrapper(this._scene.getEngine(), false);\r\n        this._drawWrapper.materialContext = this._materialContext;\r\n\r\n        if (this._scene.useRightHandedSystem) {\r\n            this.sideOrientation = Material.ClockWiseSideOrientation;\r\n        } else {\r\n            this.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n        }\r\n\r\n        this._uniformBuffer = new UniformBuffer(this._scene.getEngine(), undefined, undefined, name);\r\n        this._useUBO = this.getScene().getEngine().supportsUniformBuffers;\r\n\r\n        if (!doNotAdd) {\r\n            this._scene.addMaterial(this);\r\n        }\r\n\r\n        if (this._scene.useMaterialMeshMap) {\r\n            this.meshMap = {};\r\n        }\r\n\r\n        Material.OnEventObservable.notifyObservers(this, MaterialPluginEvent.Created);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the current material\r\n     * @param fullDetails defines a boolean indicating which levels of logging is desired\r\n     * @returns a string with material information\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public toString(fullDetails?: boolean): string {\r\n        const ret = \"Name: \" + this.name;\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the material\r\n     * @returns a string with the class name of the material\r\n     */\r\n    public getClassName(): string {\r\n        return \"Material\";\r\n    }\r\n\r\n    /**\r\n     * Specifies if updates for the material been locked\r\n     */\r\n    public get isFrozen(): boolean {\r\n        return this.checkReadyOnlyOnce;\r\n    }\r\n\r\n    /**\r\n     * Locks updates for the material\r\n     */\r\n    public freeze(): void {\r\n        this.markDirty();\r\n        this.checkReadyOnlyOnce = true;\r\n    }\r\n\r\n    /**\r\n     * Unlocks updates for the material\r\n     */\r\n    public unfreeze(): void {\r\n        this.markDirty();\r\n        this.checkReadyOnlyOnce = false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param useInstances specifies if instances should be used\r\n     * @returns a boolean indicating if the material is ready to be used\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isReady(mesh?: AbstractMesh, useInstances?: boolean): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        const defines = subMesh.materialDefines;\r\n        if (!defines) {\r\n            return false;\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        return this._eventInfo.isReadyForSubMesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the material effect\r\n     * @returns the effect associated with the material\r\n     */\r\n    public getEffect(): Nullable<Effect> {\r\n        return this._drawWrapper.effect;\r\n    }\r\n\r\n    /**\r\n     * Returns the current scene\r\n     * @returns a Scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\r\n     */\r\n    protected _forceAlphaTest = false;\r\n\r\n    /**\r\n     * The transparency mode of the material.\r\n     */\r\n    protected _transparencyMode: Nullable<number> = null;\r\n\r\n    /**\r\n     * Gets the current transparency mode.\r\n     */\r\n    @serialize()\r\n    public get transparencyMode(): Nullable<number> {\r\n        return this._transparencyMode;\r\n    }\r\n\r\n    /**\r\n     * Sets the transparency mode of the material.\r\n     *\r\n     * | Value | Type                                | Description |\r\n     * | ----- | ----------------------------------- | ----------- |\r\n     * | 0     | OPAQUE                              |             |\r\n     * | 1     | ALPHATEST                           |             |\r\n     * | 2     | ALPHABLEND                          |             |\r\n     * | 3     | ALPHATESTANDBLEND                   |             |\r\n     *\r\n     */\r\n    public set transparencyMode(value: Nullable<number>) {\r\n        if (this._transparencyMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._transparencyMode = value;\r\n\r\n        this._forceAlphaTest = value === Material.MATERIAL_ALPHATESTANDBLEND;\r\n\r\n        this._markAllSubMeshesAsTexturesAndMiscDirty();\r\n    }\r\n\r\n    /**\r\n     * Returns true if alpha blending should be disabled.\r\n     */\r\n    protected get _disableAlphaBlending(): boolean {\r\n        return this._transparencyMode === Material.MATERIAL_OPAQUE || this._transparencyMode === Material.MATERIAL_ALPHATEST;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha blend mode.\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the mesh will require alpha blending\r\n     * @param mesh defines the mesh to check\r\n     * @returns a boolean specifying if alpha blending is needed for the mesh\r\n     */\r\n    public needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\r\n        if (mesh.visibility < 1.0) {\r\n            return true;\r\n        }\r\n\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return mesh.hasVertexAlpha || this.needAlphaBlending();\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha test mode.\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._forceAlphaTest) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if material alpha testing should be turned on for the mesh\r\n     * @param mesh defines the mesh to check\r\n     */\r\n    protected _shouldTurnAlphaTestOn(mesh: AbstractMesh): boolean {\r\n        return !this.needAlphaBlendingForMesh(mesh) && this.needAlphaTesting();\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used for the alpha test\r\n     * @returns the texture to use for alpha testing\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     */\r\n    public markDirty(): void {\r\n        const meshes = this.getScene().meshes;\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (const subMesh of mesh.subMeshes) {\r\n                if (subMesh.getMaterial() !== this) {\r\n                    continue;\r\n                }\r\n\r\n                if (!subMesh.effect) {\r\n                    continue;\r\n                }\r\n\r\n                subMesh.effect._wasPreviouslyReady = false;\r\n                subMesh.effect._wasPreviouslyUsingInstances = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preBind(effect?: Effect | DrawWrapper, overrideOrientation: Nullable<number> = null): boolean {\r\n        const engine = this._scene.getEngine();\r\n\r\n        const orientation = overrideOrientation == null ? this.sideOrientation : overrideOrientation;\r\n        const reverse = orientation === Material.ClockWiseSideOrientation;\r\n\r\n        engine.enableEffect(effect ? effect : this._getDrawWrapper());\r\n        engine.setState(this.backFaceCulling, this.zOffset, false, reverse, this.cullBackFaces, this.stencil, this.zOffsetUnits);\r\n\r\n        return reverse;\r\n    }\r\n\r\n    /**\r\n     * Binds the material to the mesh\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh to bind the material to\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bind(world: Matrix, mesh?: Mesh): void {}\r\n\r\n    /**\r\n     * Initializes the uniform buffer layout for the shader.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        const ubo = this._uniformBuffer;\r\n\r\n        this._eventInfo.ubo = ubo;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareUniformBuffer, this._eventInfo);\r\n\r\n        ubo.create();\r\n\r\n        this._uniformBufferLayoutBuilt = true;\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to the material\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n    }\r\n\r\n    /**\r\n     * Binds the world matrix to the material\r\n     * @param world defines the world transformation matrix\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bindOnlyWorldMatrix(world: Matrix): void {}\r\n\r\n    /**\r\n     * Binds the view matrix to the effect\r\n     * @param effect defines the effect to bind the view matrix to\r\n     */\r\n    public bindView(effect: Effect): void {\r\n        if (!this._useUBO) {\r\n            effect.setMatrix(\"view\", this.getScene().getViewMatrix());\r\n        } else {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the view projection and projection matrices to the effect\r\n     * @param effect defines the effect to bind the view projection and projection matrices to\r\n     */\r\n    public bindViewProjection(effect: Effect): void {\r\n        if (!this._useUBO) {\r\n            effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n            effect.setMatrix(\"projection\", this.getScene().getProjectionMatrix());\r\n        } else {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the view matrix to the effect\r\n     * @param effect defines the effect to bind the view matrix to\r\n     * @param variableName name of the shader variable that will hold the eye position\r\n     */\r\n    public bindEyePosition(effect: Effect, variableName?: string): void {\r\n        if (!this._useUBO) {\r\n            this._scene.bindEyePosition(effect, variableName);\r\n        } else {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes to execute after binding the material to a mesh\r\n     * @param mesh defines the rendered mesh\r\n     * @param effect\r\n     */\r\n    protected _afterBind(mesh?: Mesh, effect: Nullable<Effect> = null): void {\r\n        this._scene._cachedMaterial = this;\r\n        if (this._needToBindSceneUbo) {\r\n            if (effect) {\r\n                this._needToBindSceneUbo = false;\r\n                MaterialHelper.BindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\r\n                this._scene.finalizeSceneUbo();\r\n            }\r\n        }\r\n        if (mesh) {\r\n            this._scene._cachedVisibility = mesh.visibility;\r\n        } else {\r\n            this._scene._cachedVisibility = 1;\r\n        }\r\n\r\n        if (this._onBindObservable && mesh) {\r\n            this._onBindObservable.notifyObservers(mesh);\r\n        }\r\n\r\n        if (this.disableDepthWrite) {\r\n            const engine = this._scene.getEngine();\r\n            this._cachedDepthWriteState = engine.getDepthWrite();\r\n            engine.setDepthWrite(false);\r\n        }\r\n\r\n        if (this.disableColorWrite) {\r\n            const engine = this._scene.getEngine();\r\n            this._cachedColorWriteState = engine.getColorWrite();\r\n            engine.setColorWrite(false);\r\n        }\r\n\r\n        if (this.depthFunction !== 0) {\r\n            const engine = this._scene.getEngine();\r\n            this._cachedDepthFunctionState = engine.getDepthFunction() || 0;\r\n            engine.setDepthFunction(this.depthFunction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unbinds the material from the mesh\r\n     */\r\n    public unbind(): void {\r\n        if (this._onUnBindObservable) {\r\n            this._onUnBindObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.depthFunction !== 0) {\r\n            const engine = this._scene.getEngine();\r\n            engine.setDepthFunction(this._cachedDepthFunctionState);\r\n        }\r\n\r\n        if (this.disableDepthWrite) {\r\n            const engine = this._scene.getEngine();\r\n            engine.setDepthWrite(this._cachedDepthWriteState);\r\n        }\r\n\r\n        if (this.disableColorWrite) {\r\n            const engine = this._scene.getEngine();\r\n            engine.setColorWrite(this._cachedColorWriteState);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * @returns - Array of animatable textures.\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        this._eventInfo.animatables = [];\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetAnimatables, this._eventInfo);\r\n        return this._eventInfo.animatables;\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        this._eventInfo.activeTextures = [];\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetActiveTextures, this._eventInfo);\r\n        return this._eventInfo.activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        this._eventInfo.hasTexture = false;\r\n        this._eventInfo.texture = texture;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.HasTexture, this._eventInfo);\r\n        return this._eventInfo.hasTexture;\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public clone(name: string): Nullable<Material> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the meshes bound to the material\r\n     * @returns an array of meshes bound to the material\r\n     */\r\n    public getBindedMeshes(): AbstractMesh[] {\r\n        if (this.meshMap) {\r\n            const result = new Array<AbstractMesh>();\r\n            for (const meshId in this.meshMap) {\r\n                const mesh = this.meshMap[meshId];\r\n                if (mesh) {\r\n                    result.push(mesh);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            const meshes = this._scene.meshes;\r\n            return meshes.filter((mesh) => mesh.material === this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh defines the mesh associated with this material\r\n     * @param onCompiled defines a function to execute once the material is compiled\r\n     * @param options defines the options to configure the compilation\r\n     * @param onError defines a function to execute if the material fails compiling\r\n     */\r\n    public forceCompilation(\r\n        mesh: AbstractMesh,\r\n        onCompiled?: (material: Material) => void,\r\n        options?: Partial<IMaterialCompilationOptions>,\r\n        onError?: (reason: string) => void\r\n    ): void {\r\n        const localOptions = {\r\n            clipPlane: false,\r\n            useInstances: false,\r\n            ...options,\r\n        };\r\n\r\n        const scene = this.getScene();\r\n        const currentHotSwapingState = this.allowShaderHotSwapping;\r\n        this.allowShaderHotSwapping = false; // Turned off to let us evaluate the real compilation state\r\n\r\n        const checkReady = () => {\r\n            if (!this._scene || !this._scene.getEngine()) {\r\n                return;\r\n            }\r\n\r\n            const clipPlaneState = scene.clipPlane;\r\n\r\n            if (localOptions.clipPlane) {\r\n                scene.clipPlane = new Plane(0, 0, 0, 1);\r\n            }\r\n\r\n            if (this._storeEffectOnSubMeshes) {\r\n                let allDone = true,\r\n                    lastError = null;\r\n                if (mesh.subMeshes) {\r\n                    const tempSubMesh = new SubMesh(0, 0, 0, 0, 0, mesh, undefined, false, false);\r\n                    if (tempSubMesh.materialDefines) {\r\n                        tempSubMesh.materialDefines._renderId = -1;\r\n                    }\r\n                    if (!this.isReadyForSubMesh(mesh, tempSubMesh, localOptions.useInstances)) {\r\n                        if (tempSubMesh.effect && tempSubMesh.effect.getCompilationError() && tempSubMesh.effect.allFallbacksProcessed()) {\r\n                            lastError = tempSubMesh.effect.getCompilationError();\r\n                        } else {\r\n                            allDone = false;\r\n                            setTimeout(checkReady, 16);\r\n                        }\r\n                    }\r\n                }\r\n                if (allDone) {\r\n                    this.allowShaderHotSwapping = currentHotSwapingState;\r\n                    if (lastError) {\r\n                        if (onError) {\r\n                            onError(lastError);\r\n                        }\r\n                    }\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isReady()) {\r\n                    this.allowShaderHotSwapping = currentHotSwapingState;\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                } else {\r\n                    setTimeout(checkReady, 16);\r\n                }\r\n            }\r\n\r\n            if (localOptions.clipPlane) {\r\n                scene.clipPlane = clipPlaneState;\r\n            }\r\n        };\r\n\r\n        checkReady();\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh defines the mesh that will use this material\r\n     * @param options defines additional options for compiling the shaders\r\n     * @returns a promise that resolves when the compilation completes\r\n     */\r\n    public forceCompilationAsync(mesh: AbstractMesh, options?: Partial<IMaterialCompilationOptions>): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.forceCompilation(\r\n                mesh,\r\n                () => {\r\n                    resolve();\r\n                },\r\n                options,\r\n                (reason) => {\r\n                    reject(reason);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    private static readonly _AllDirtyCallBack = (defines: MaterialDefines) => defines.markAllAsDirty();\r\n    private static readonly _ImageProcessingDirtyCallBack = (defines: MaterialDefines) => defines.markAsImageProcessingDirty();\r\n    private static readonly _TextureDirtyCallBack = (defines: MaterialDefines) => defines.markAsTexturesDirty();\r\n    private static readonly _FresnelDirtyCallBack = (defines: MaterialDefines) => defines.markAsFresnelDirty();\r\n    private static readonly _MiscDirtyCallBack = (defines: MaterialDefines) => defines.markAsMiscDirty();\r\n    private static readonly _PrePassDirtyCallBack = (defines: MaterialDefines) => defines.markAsPrePassDirty();\r\n    private static readonly _LightsDirtyCallBack = (defines: MaterialDefines) => defines.markAsLightDirty();\r\n    private static readonly _AttributeDirtyCallBack = (defines: MaterialDefines) => defines.markAsAttributesDirty();\r\n\r\n    private static _FresnelAndMiscDirtyCallBack = (defines: MaterialDefines) => {\r\n        Material._FresnelDirtyCallBack(defines);\r\n        Material._MiscDirtyCallBack(defines);\r\n    };\r\n\r\n    private static _TextureAndMiscDirtyCallBack = (defines: MaterialDefines) => {\r\n        Material._TextureDirtyCallBack(defines);\r\n        Material._MiscDirtyCallBack(defines);\r\n    };\r\n\r\n    private static readonly _DirtyCallbackArray: Array<(defines: MaterialDefines) => void> = [];\r\n    private static readonly _RunDirtyCallBacks = (defines: MaterialDefines) => {\r\n        for (const cb of Material._DirtyCallbackArray) {\r\n            cb(defines);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Marks a define in the material to indicate that it needs to be re-computed\r\n     * @param flag defines a flag used to determine which parts of the material have to be marked as dirty\r\n     */\r\n    public markAsDirty(flag: number): void {\r\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        Material._DirtyCallbackArray.length = 0;\r\n\r\n        if (flag & Material.TextureDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._TextureDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.LightDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._LightsDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.FresnelDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._FresnelDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.AttributesDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._AttributeDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.MiscDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._MiscDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.PrePassDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._PrePassDirtyCallBack);\r\n        }\r\n\r\n        if (Material._DirtyCallbackArray.length) {\r\n            this._markAllSubMeshesAsDirty(Material._RunDirtyCallBacks);\r\n        }\r\n\r\n        this.getScene().resetCachedMaterial();\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache for all submeshes that are using this material\r\n     */\r\n    public resetDrawCache(): void {\r\n        const meshes = this.getScene().meshes;\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (const subMesh of mesh.subMeshes) {\r\n                if (subMesh.getMaterial() !== this) {\r\n                    continue;\r\n                }\r\n\r\n                subMesh.resetDrawCache();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks all submeshes of a material to indicate that their material defines need to be re-calculated\r\n     * @param func defines a function which checks material defines against the submeshes\r\n     */\r\n    protected _markAllSubMeshesAsDirty(func: (defines: MaterialDefines) => void) {\r\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        const meshes = this.getScene().meshes;\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (const subMesh of mesh.subMeshes) {\r\n                // We want to skip the submeshes which are not using this material or which have not yet rendered at least once\r\n                if (subMesh.getMaterial(false) !== this) {\r\n                    continue;\r\n                }\r\n\r\n                for (const drawWrapper of subMesh._drawWrappers) {\r\n                    if (!drawWrapper || !drawWrapper.defines || !(drawWrapper.defines as MaterialDefines).markAllAsDirty) {\r\n                        continue;\r\n                    }\r\n                    if (this._materialContext === drawWrapper.materialContext) {\r\n                        func(drawWrapper.defines as MaterialDefines);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates that the scene should check if the rendering now needs a prepass\r\n     */\r\n    protected _markScenePrePassDirty() {\r\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        const prePassRenderer = this.getScene().enablePrePassRenderer();\r\n        if (prePassRenderer) {\r\n            prePassRenderer.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates that we need to re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsAllDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._AllDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that image processing needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsImageProcessingDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._ImageProcessingDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that textures need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsTexturesDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._TextureDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that fresnel needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsFresnelDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._FresnelDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that fresnel and misc need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsFresnelAndMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._FresnelAndMiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that lights need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsLightsDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._LightsDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that attributes need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsAttributesDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._AttributeDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that misc needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that prepass needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsPrePassDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that textures and misc need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsTexturesAndMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._TextureAndMiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * @param prePassRenderer defines the prepass renderer to setup.\r\n     * @returns true if the pre pass is needed.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setPrePassRenderer(prePassRenderer: PrePassRenderer): boolean {\r\n        // Do Nothing by default\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean): void {\r\n        const scene = this.getScene();\r\n        // Animations\r\n        scene.stopAnimation(this);\r\n        scene.freeProcessedMaterials();\r\n\r\n        // Remove from scene\r\n        scene.removeMaterial(this);\r\n\r\n        this._eventInfo.forceDisposeTextures = forceDisposeTextures;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.Disposed, this._eventInfo);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.materials.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.materials.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        if (notBoundToMesh !== true) {\r\n            // Remove from meshes\r\n            if (this.meshMap) {\r\n                for (const meshId in this.meshMap) {\r\n                    const mesh = this.meshMap[meshId];\r\n                    if (mesh) {\r\n                        mesh.material = null; // will set the entry in the map to undefined\r\n                        this.releaseVertexArrayObject(mesh, forceDisposeEffect);\r\n                    }\r\n                }\r\n            } else {\r\n                const meshes = scene.meshes;\r\n                for (const mesh of meshes) {\r\n                    if (mesh.material === this && !(mesh as InstancedMesh).sourceMesh) {\r\n                        mesh.material = null;\r\n                        this.releaseVertexArrayObject(mesh, forceDisposeEffect);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        // Shader are kept in cache for further use but we can get rid of this by using forceDisposeEffect\r\n        if (forceDisposeEffect && this._drawWrapper.effect) {\r\n            if (!this._storeEffectOnSubMeshes) {\r\n                this._drawWrapper.effect.dispose();\r\n            }\r\n\r\n            this._drawWrapper.effect = null;\r\n        }\r\n\r\n        this.metadata = null;\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n\r\n        this.onDisposeObservable.clear();\r\n        if (this._onBindObservable) {\r\n            this._onBindObservable.clear();\r\n        }\r\n\r\n        if (this._onUnBindObservable) {\r\n            this._onUnBindObservable.clear();\r\n        }\r\n\r\n        if (this._onEffectCreatedObservable) {\r\n            this._onEffectCreatedObservable.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private releaseVertexArrayObject(mesh: AbstractMesh, forceDisposeEffect?: boolean) {\r\n        if ((<Mesh>mesh).geometry) {\r\n            const geometry = <Geometry>(<Mesh>mesh).geometry;\r\n            if (this._storeEffectOnSubMeshes) {\r\n                for (const subMesh of mesh.subMeshes) {\r\n                    geometry._releaseVertexArrayObject(subMesh.effect);\r\n                    if (forceDisposeEffect && subMesh.effect) {\r\n                        subMesh.effect.dispose();\r\n                    }\r\n                }\r\n            } else {\r\n                geometry._releaseVertexArrayObject(this._drawWrapper.effect);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes this material\r\n     * @returns the serialized material object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n\r\n        serializationObject.stencil = this.stencil.serialize();\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a material from parsed material data\r\n     * @param parsedMaterial defines parsed material data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns a new material\r\n     */\r\n    public static Parse(parsedMaterial: any, scene: Scene, rootUrl: string): Nullable<Material> {\r\n        if (!parsedMaterial.customType) {\r\n            parsedMaterial.customType = \"BABYLON.StandardMaterial\";\r\n        } else if (parsedMaterial.customType === \"BABYLON.PBRMaterial\" && parsedMaterial.overloadedAlbedo) {\r\n            parsedMaterial.customType = \"BABYLON.LegacyPBRMaterial\";\r\n            if (!BABYLON.LegacyPBRMaterial) {\r\n                Logger.Error(\"Your scene is trying to load a legacy version of the PBRMaterial, please, include it from the materials library.\");\r\n                return null;\r\n            }\r\n        }\r\n\r\n        const materialType = Tools.Instantiate(parsedMaterial.customType);\r\n        const material = materialType.Parse(parsedMaterial, scene, rootUrl);\r\n        material._loadedUniqueId = parsedMaterial.uniqueId;\r\n        return material;\r\n    }\r\n}\r\n","/**\r\n * Manages the defines for the Material\r\n */\r\nexport class MaterialDefines {\r\n    /** @internal */\r\n    protected _keys: string[] = [];\r\n    private _isDirty = true;\r\n    /** @internal */\r\n    public _renderId: number;\r\n\r\n    /** @internal */\r\n    public _areLightsDirty = true;\r\n    /** @internal */\r\n    public _areLightsDisposed = false;\r\n    /** @internal */\r\n    public _areAttributesDirty = true;\r\n    /** @internal */\r\n    public _areTexturesDirty = true;\r\n    /** @internal */\r\n    public _areFresnelDirty = true;\r\n    /** @internal */\r\n    public _areMiscDirty = true;\r\n    /** @internal */\r\n    public _arePrePassDirty = true;\r\n    /** @internal */\r\n    public _areImageProcessingDirty = true;\r\n\r\n    /** @internal */\r\n    public _normals = false;\r\n    /** @internal */\r\n    public _uvs = false;\r\n\r\n    /** @internal */\r\n    public _needNormals = false;\r\n    /** @internal */\r\n    public _needUVs = false;\r\n\r\n    protected _externalProperties?: { [name: string]: { type: string; default: any } };\r\n\r\n    [id: string]: any;\r\n\r\n    /**\r\n     * Creates a new instance\r\n     * @param externalProperties list of external properties to inject into the object\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        this._externalProperties = externalProperties;\r\n\r\n        // Initialize External Properties\r\n        if (externalProperties) {\r\n            for (const prop in externalProperties) {\r\n                if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {\r\n                    this._setDefaultValue(prop);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material needs to be re-calculated\r\n     */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it has been re-calculated\r\n     */\r\n    public markAsProcessed() {\r\n        this._isDirty = false;\r\n        this._areAttributesDirty = false;\r\n        this._areTexturesDirty = false;\r\n        this._areFresnelDirty = false;\r\n        this._areLightsDirty = false;\r\n        this._areLightsDisposed = false;\r\n        this._areMiscDirty = false;\r\n        this._arePrePassDirty = false;\r\n        this._areImageProcessingDirty = false;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     */\r\n    public markAsUnprocessed() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate all of its defines need to be re-calculated\r\n     */\r\n    public markAllAsDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._areAttributesDirty = true;\r\n        this._areLightsDirty = true;\r\n        this._areFresnelDirty = true;\r\n        this._areMiscDirty = true;\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that image processing needs to be re-calculated\r\n     */\r\n    public markAsImageProcessingDirty() {\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate the lights need to be re-calculated\r\n     * @param disposed Defines whether the light is dirty due to dispose or not\r\n     */\r\n    public markAsLightDirty(disposed = false) {\r\n        this._areLightsDirty = true;\r\n        this._areLightsDisposed = this._areLightsDisposed || disposed;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the attribute state as changed\r\n     */\r\n    public markAsAttributesDirty() {\r\n        this._areAttributesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the texture state as changed\r\n     */\r\n    public markAsTexturesDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the fresnel state as changed\r\n     */\r\n    public markAsFresnelDirty() {\r\n        this._areFresnelDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the misc state as changed\r\n     */\r\n    public markAsMiscDirty() {\r\n        this._areMiscDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the prepass state as changed\r\n     */\r\n    public markAsPrePassDirty() {\r\n        this._arePrePassDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the material defines\r\n     */\r\n    public rebuild() {\r\n        this._keys.length = 0;\r\n\r\n        for (const key of Object.keys(this)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            this._keys.push(key);\r\n        }\r\n\r\n        if (this._externalProperties) {\r\n            for (const name in this._externalProperties) {\r\n                if (this._keys.indexOf(name) === -1) {\r\n                    this._keys.push(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if two material defines are equal\r\n     * @param other - A material define instance to compare to\r\n     * @returns - Boolean indicating if the material defines are equal (true) or not (false)\r\n     */\r\n    public isEqual(other: MaterialDefines): boolean {\r\n        if (this._keys.length !== other._keys.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            if ((<any>this)[prop] !== (<any>other)[prop]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones this instance's defines to another instance\r\n     * @param other - material defines to clone values to\r\n     */\r\n    public cloneTo(other: MaterialDefines): void {\r\n        if (this._keys.length !== other._keys.length) {\r\n            other._keys = this._keys.slice(0);\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            (<any>other)[prop] = (<any>this)[prop];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the material define values\r\n     */\r\n    public reset(): void {\r\n        this._keys.forEach((prop) => this._setDefaultValue(prop));\r\n    }\r\n\r\n    private _setDefaultValue(prop: string): void {\r\n        const type = this._externalProperties?.[prop]?.type ?? typeof (<any>this)[prop];\r\n        const defValue = this._externalProperties?.[prop]?.default;\r\n\r\n        switch (type) {\r\n            case \"number\":\r\n                (<any>this)[prop] = defValue ?? 0;\r\n                break;\r\n            case \"string\":\r\n                (<any>this)[prop] = defValue ?? \"\";\r\n                break;\r\n            default:\r\n                (<any>this)[prop] = defValue ?? false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the material define values to a string\r\n     * @returns - String of material define information\r\n     */\r\n    public toString(): string {\r\n        let result = \"\";\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n            const value = (<any>this)[prop];\r\n            const type = typeof value;\r\n\r\n            switch (type) {\r\n                case \"number\":\r\n                case \"string\":\r\n                    result += \"#define \" + prop + \" \" + value + \"\\n\";\r\n                    break;\r\n                default:\r\n                    if (value) {\r\n                        result += \"#define \" + prop + \"\\n\";\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * This groups all the flags used to control the materials channel.\r\n */\r\nexport class MaterialFlags {\r\n    // Flags used to enable or disable a type of texture for all Standard Materials\r\n    private static _DiffuseTextureEnabled = true;\r\n    /**\r\n     * Are diffuse textures enabled in the application.\r\n     */\r\n    public static get DiffuseTextureEnabled(): boolean {\r\n        return this._DiffuseTextureEnabled;\r\n    }\r\n    public static set DiffuseTextureEnabled(value: boolean) {\r\n        if (this._DiffuseTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DiffuseTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _DetailTextureEnabled = true;\r\n    /**\r\n     * Are detail textures enabled in the application.\r\n     */\r\n    public static get DetailTextureEnabled(): boolean {\r\n        return this._DetailTextureEnabled;\r\n    }\r\n    public static set DetailTextureEnabled(value: boolean) {\r\n        if (this._DetailTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DetailTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _AmbientTextureEnabled = true;\r\n    /**\r\n     * Are ambient textures enabled in the application.\r\n     */\r\n    public static get AmbientTextureEnabled(): boolean {\r\n        return this._AmbientTextureEnabled;\r\n    }\r\n    public static set AmbientTextureEnabled(value: boolean) {\r\n        if (this._AmbientTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._AmbientTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _OpacityTextureEnabled = true;\r\n    /**\r\n     * Are opacity textures enabled in the application.\r\n     */\r\n    public static get OpacityTextureEnabled(): boolean {\r\n        return this._OpacityTextureEnabled;\r\n    }\r\n    public static set OpacityTextureEnabled(value: boolean) {\r\n        if (this._OpacityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._OpacityTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ReflectionTextureEnabled = true;\r\n    /**\r\n     * Are reflection textures enabled in the application.\r\n     */\r\n    public static get ReflectionTextureEnabled(): boolean {\r\n        return this._ReflectionTextureEnabled;\r\n    }\r\n    public static set ReflectionTextureEnabled(value: boolean) {\r\n        if (this._ReflectionTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ReflectionTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _EmissiveTextureEnabled = true;\r\n    /**\r\n     * Are emissive textures enabled in the application.\r\n     */\r\n    public static get EmissiveTextureEnabled(): boolean {\r\n        return this._EmissiveTextureEnabled;\r\n    }\r\n    public static set EmissiveTextureEnabled(value: boolean) {\r\n        if (this._EmissiveTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._EmissiveTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _SpecularTextureEnabled = true;\r\n    /**\r\n     * Are specular textures enabled in the application.\r\n     */\r\n    public static get SpecularTextureEnabled(): boolean {\r\n        return this._SpecularTextureEnabled;\r\n    }\r\n    public static set SpecularTextureEnabled(value: boolean) {\r\n        if (this._SpecularTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._SpecularTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _BumpTextureEnabled = true;\r\n    /**\r\n     * Are bump textures enabled in the application.\r\n     */\r\n    public static get BumpTextureEnabled(): boolean {\r\n        return this._BumpTextureEnabled;\r\n    }\r\n    public static set BumpTextureEnabled(value: boolean) {\r\n        if (this._BumpTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._BumpTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _LightmapTextureEnabled = true;\r\n    /**\r\n     * Are lightmap textures enabled in the application.\r\n     */\r\n    public static get LightmapTextureEnabled(): boolean {\r\n        return this._LightmapTextureEnabled;\r\n    }\r\n    public static set LightmapTextureEnabled(value: boolean) {\r\n        if (this._LightmapTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._LightmapTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _RefractionTextureEnabled = true;\r\n    /**\r\n     * Are refraction textures enabled in the application.\r\n     */\r\n    public static get RefractionTextureEnabled(): boolean {\r\n        return this._RefractionTextureEnabled;\r\n    }\r\n    public static set RefractionTextureEnabled(value: boolean) {\r\n        if (this._RefractionTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._RefractionTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ColorGradingTextureEnabled = true;\r\n    /**\r\n     * Are color grading textures enabled in the application.\r\n     */\r\n    public static get ColorGradingTextureEnabled(): boolean {\r\n        return this._ColorGradingTextureEnabled;\r\n    }\r\n    public static set ColorGradingTextureEnabled(value: boolean) {\r\n        if (this._ColorGradingTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ColorGradingTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _FresnelEnabled = true;\r\n    /**\r\n     * Are fresnels enabled in the application.\r\n     */\r\n    public static get FresnelEnabled(): boolean {\r\n        return this._FresnelEnabled;\r\n    }\r\n    public static set FresnelEnabled(value: boolean) {\r\n        if (this._FresnelEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._FresnelEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_FresnelDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatTextureEnabled = true;\r\n    /**\r\n     * Are clear coat textures enabled in the application.\r\n     */\r\n    public static get ClearCoatTextureEnabled(): boolean {\r\n        return this._ClearCoatTextureEnabled;\r\n    }\r\n    public static set ClearCoatTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatBumpTextureEnabled = true;\r\n    /**\r\n     * Are clear coat bump textures enabled in the application.\r\n     */\r\n    public static get ClearCoatBumpTextureEnabled(): boolean {\r\n        return this._ClearCoatBumpTextureEnabled;\r\n    }\r\n    public static set ClearCoatBumpTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatBumpTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatBumpTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatTintTextureEnabled = true;\r\n    /**\r\n     * Are clear coat tint textures enabled in the application.\r\n     */\r\n    public static get ClearCoatTintTextureEnabled(): boolean {\r\n        return this._ClearCoatTintTextureEnabled;\r\n    }\r\n    public static set ClearCoatTintTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatTintTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatTintTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _SheenTextureEnabled = true;\r\n    /**\r\n     * Are sheen textures enabled in the application.\r\n     */\r\n    public static get SheenTextureEnabled(): boolean {\r\n        return this._SheenTextureEnabled;\r\n    }\r\n    public static set SheenTextureEnabled(value: boolean) {\r\n        if (this._SheenTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._SheenTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _AnisotropicTextureEnabled = true;\r\n    /**\r\n     * Are anisotropic textures enabled in the application.\r\n     */\r\n    public static get AnisotropicTextureEnabled(): boolean {\r\n        return this._AnisotropicTextureEnabled;\r\n    }\r\n    public static set AnisotropicTextureEnabled(value: boolean) {\r\n        if (this._AnisotropicTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._AnisotropicTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ThicknessTextureEnabled = true;\r\n    /**\r\n     * Are thickness textures enabled in the application.\r\n     */\r\n    public static get ThicknessTextureEnabled(): boolean {\r\n        return this._ThicknessTextureEnabled;\r\n    }\r\n    public static set ThicknessTextureEnabled(value: boolean) {\r\n        if (this._ThicknessTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ThicknessTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _RefractionIntensityTextureEnabled = true;\r\n    /**\r\n     * Are refraction intensity textures enabled in the application.\r\n     */\r\n    public static get RefractionIntensityTextureEnabled(): boolean {\r\n        return this._ThicknessTextureEnabled;\r\n    }\r\n    public static set RefractionIntensityTextureEnabled(value: boolean) {\r\n        if (this._RefractionIntensityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._RefractionIntensityTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _TranslucencyIntensityTextureEnabled = true;\r\n    /**\r\n     * Are translucency intensity textures enabled in the application.\r\n     */\r\n    public static get TranslucencyIntensityTextureEnabled(): boolean {\r\n        return this._ThicknessTextureEnabled;\r\n    }\r\n    public static set TranslucencyIntensityTextureEnabled(value: boolean) {\r\n        if (this._TranslucencyIntensityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._TranslucencyIntensityTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _IridescenceTextureEnabled = true;\r\n    /**\r\n     * Are translucency intensity textures enabled in the application.\r\n     */\r\n    public static get IridescenceTextureEnabled(): boolean {\r\n        return this._IridescenceTextureEnabled;\r\n    }\r\n    public static set IridescenceTextureEnabled(value: boolean) {\r\n        if (this._IridescenceTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._IridescenceTextureEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n}\r\n","import { Logger } from \"../Misc/logger\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Scene } from \"../scene\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport { LightConstants } from \"../Lights/lightConstants\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { PrePassConfiguration } from \"../Materials/prePassConfiguration\";\r\n\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { Effect, IEffectCreationOptions } from \"./effect\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { MaterialDefines } from \"./materialDefines\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport type { EffectFallbacks } from \"./effectFallbacks\";\r\nimport { ThinMaterialHelper } from \"./thinMaterialHelper\";\r\n\r\n/**\r\n * \"Static Class\" containing the most commonly used helper while dealing with material for rendering purpose.\r\n *\r\n * It contains the basic tools to help defining defines, binding uniform for the common part of the materials.\r\n *\r\n * This works by convention in BabylonJS but is meant to be use only with shader following the in place naming rules and conventions.\r\n */\r\nexport class MaterialHelper {\r\n    /**\r\n     * Binds the scene's uniform buffer to the effect.\r\n     * @param effect defines the effect to bind to the scene uniform buffer\r\n     * @param sceneUbo defines the uniform buffer storing scene data\r\n     */\r\n    public static BindSceneUniformBuffer(effect: Effect, sceneUbo: UniformBuffer): void {\r\n        sceneUbo.bindToEffect(effect, \"Scene\");\r\n    }\r\n\r\n    /**\r\n     * Helps preparing the defines values about the UVs in used in the effect.\r\n     * UVs are shared as much as we can across channels in the shaders.\r\n     * @param texture The texture we are preparing the UVs for\r\n     * @param defines The defines to update\r\n     * @param key The channel key \"diffuse\", \"specular\"... used in the shader\r\n     */\r\n    public static PrepareDefinesForMergedUV(texture: BaseTexture, defines: any, key: string): void {\r\n        defines._needUVs = true;\r\n        defines[key] = true;\r\n        if (texture.optimizeUVAllocation && texture.getTextureMatrix().isIdentityAs3x2()) {\r\n            defines[key + \"DIRECTUV\"] = texture.coordinatesIndex + 1;\r\n            defines[\"MAINUV\" + (texture.coordinatesIndex + 1)] = true;\r\n        } else {\r\n            defines[key + \"DIRECTUV\"] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds a texture matrix value to its corresponding uniform\r\n     * @param texture The texture to bind the matrix for\r\n     * @param uniformBuffer The uniform buffer receiving the data\r\n     * @param key The channel key \"diffuse\", \"specular\"... used in the shader\r\n     */\r\n    public static BindTextureMatrix(texture: BaseTexture, uniformBuffer: UniformBuffer, key: string): void {\r\n        const matrix = texture.getTextureMatrix();\r\n\r\n        uniformBuffer.updateMatrix(key + \"Matrix\", matrix);\r\n    }\r\n\r\n    /**\r\n     * Gets the current status of the fog (should it be enabled?)\r\n     * @param mesh defines the mesh to evaluate for fog support\r\n     * @param scene defines the hosting scene\r\n     * @returns true if fog must be enabled\r\n     */\r\n    public static GetFogState(mesh: AbstractMesh, scene: Scene) {\r\n        return scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE;\r\n    }\r\n\r\n    /**\r\n     * Helper used to prepare the list of defines associated with misc. values for shader compilation\r\n     * @param mesh defines the current mesh\r\n     * @param scene defines the current scene\r\n     * @param useLogarithmicDepth defines if logarithmic depth has to be turned on\r\n     * @param pointsCloud defines if point cloud rendering has to be turned on\r\n     * @param fogEnabled defines if fog has to be turned on\r\n     * @param alphaTest defines if alpha testing has to be turned on\r\n     * @param defines defines the current list of defines\r\n     */\r\n    public static PrepareDefinesForMisc(\r\n        mesh: AbstractMesh,\r\n        scene: Scene,\r\n        useLogarithmicDepth: boolean,\r\n        pointsCloud: boolean,\r\n        fogEnabled: boolean,\r\n        alphaTest: boolean,\r\n        defines: any\r\n    ): void {\r\n        if (defines._areMiscDirty) {\r\n            defines[\"LOGARITHMICDEPTH\"] = useLogarithmicDepth;\r\n            defines[\"POINTSIZE\"] = pointsCloud;\r\n            defines[\"FOG\"] = fogEnabled && this.GetFogState(mesh, scene);\r\n            defines[\"NONUNIFORMSCALING\"] = mesh.nonUniformScaling;\r\n            defines[\"ALPHATEST\"] = alphaTest;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper used to prepare the list of defines associated with frame values for shader compilation\r\n     * @param scene defines the current scene\r\n     * @param engine defines the current engine\r\n     * @param defines specifies the list of active defines\r\n     * @param useInstances defines if instances have to be turned on\r\n     * @param useClipPlane defines if clip plane have to be turned on\r\n     * @param useThinInstances defines if thin instances have to be turned on\r\n     */\r\n    public static PrepareDefinesForFrameBoundValues(\r\n        scene: Scene,\r\n        engine: Engine,\r\n        defines: any,\r\n        useInstances: boolean,\r\n        useClipPlane: Nullable<boolean> = null,\r\n        useThinInstances: boolean = false\r\n    ): void {\r\n        let changed = false;\r\n        let useClipPlane1 = false;\r\n        let useClipPlane2 = false;\r\n        let useClipPlane3 = false;\r\n        let useClipPlane4 = false;\r\n        let useClipPlane5 = false;\r\n        let useClipPlane6 = false;\r\n\r\n        useClipPlane1 = useClipPlane == null ? scene.clipPlane !== undefined && scene.clipPlane !== null : useClipPlane;\r\n        useClipPlane2 = useClipPlane == null ? scene.clipPlane2 !== undefined && scene.clipPlane2 !== null : useClipPlane;\r\n        useClipPlane3 = useClipPlane == null ? scene.clipPlane3 !== undefined && scene.clipPlane3 !== null : useClipPlane;\r\n        useClipPlane4 = useClipPlane == null ? scene.clipPlane4 !== undefined && scene.clipPlane4 !== null : useClipPlane;\r\n        useClipPlane5 = useClipPlane == null ? scene.clipPlane5 !== undefined && scene.clipPlane5 !== null : useClipPlane;\r\n        useClipPlane6 = useClipPlane == null ? scene.clipPlane6 !== undefined && scene.clipPlane6 !== null : useClipPlane;\r\n\r\n        if (defines[\"CLIPPLANE\"] !== useClipPlane1) {\r\n            defines[\"CLIPPLANE\"] = useClipPlane1;\r\n            changed = true;\r\n        }\r\n\r\n        if (defines[\"CLIPPLANE2\"] !== useClipPlane2) {\r\n            defines[\"CLIPPLANE2\"] = useClipPlane2;\r\n            changed = true;\r\n        }\r\n\r\n        if (defines[\"CLIPPLANE3\"] !== useClipPlane3) {\r\n            defines[\"CLIPPLANE3\"] = useClipPlane3;\r\n            changed = true;\r\n        }\r\n\r\n        if (defines[\"CLIPPLANE4\"] !== useClipPlane4) {\r\n            defines[\"CLIPPLANE4\"] = useClipPlane4;\r\n            changed = true;\r\n        }\r\n\r\n        if (defines[\"CLIPPLANE5\"] !== useClipPlane5) {\r\n            defines[\"CLIPPLANE5\"] = useClipPlane5;\r\n            changed = true;\r\n        }\r\n\r\n        if (defines[\"CLIPPLANE6\"] !== useClipPlane6) {\r\n            defines[\"CLIPPLANE6\"] = useClipPlane6;\r\n            changed = true;\r\n        }\r\n\r\n        if (defines[\"DEPTHPREPASS\"] !== !engine.getColorWrite()) {\r\n            defines[\"DEPTHPREPASS\"] = !defines[\"DEPTHPREPASS\"];\r\n            changed = true;\r\n        }\r\n\r\n        if (defines[\"INSTANCES\"] !== useInstances) {\r\n            defines[\"INSTANCES\"] = useInstances;\r\n            changed = true;\r\n        }\r\n\r\n        if (defines[\"THIN_INSTANCES\"] !== useThinInstances) {\r\n            defines[\"THIN_INSTANCES\"] = useThinInstances;\r\n            changed = true;\r\n        }\r\n\r\n        if (changed) {\r\n            defines.markAsUnprocessed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares the defines for bones\r\n     * @param mesh The mesh containing the geometry data we will draw\r\n     * @param defines The defines to update\r\n     */\r\n    public static PrepareDefinesForBones(mesh: AbstractMesh, defines: any) {\r\n        if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            defines[\"NUM_BONE_INFLUENCERS\"] = mesh.numBoneInfluencers;\r\n\r\n            const materialSupportsBoneTexture = defines[\"BONETEXTURE\"] !== undefined;\r\n\r\n            if (mesh.skeleton.isUsingTextureForMatrices && materialSupportsBoneTexture) {\r\n                defines[\"BONETEXTURE\"] = true;\r\n            } else {\r\n                defines[\"BonesPerMesh\"] = mesh.skeleton.bones.length + 1;\r\n                defines[\"BONETEXTURE\"] = materialSupportsBoneTexture ? false : undefined;\r\n\r\n                const prePassRenderer = mesh.getScene().prePassRenderer;\r\n                if (prePassRenderer && prePassRenderer.enabled) {\r\n                    const nonExcluded = prePassRenderer.excludedSkinnedMesh.indexOf(mesh) === -1;\r\n                    defines[\"BONES_VELOCITY_ENABLED\"] = nonExcluded;\r\n                }\r\n            }\r\n        } else {\r\n            defines[\"NUM_BONE_INFLUENCERS\"] = 0;\r\n            defines[\"BonesPerMesh\"] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares the defines for morph targets\r\n     * @param mesh The mesh containing the geometry data we will draw\r\n     * @param defines The defines to update\r\n     */\r\n    public static PrepareDefinesForMorphTargets(mesh: AbstractMesh, defines: any) {\r\n        const manager = (<Mesh>mesh).morphTargetManager;\r\n        if (manager) {\r\n            defines[\"MORPHTARGETS_UV\"] = manager.supportsUVs && defines[\"UV1\"];\r\n            defines[\"MORPHTARGETS_TANGENT\"] = manager.supportsTangents && defines[\"TANGENT\"];\r\n            defines[\"MORPHTARGETS_NORMAL\"] = manager.supportsNormals && defines[\"NORMAL\"];\r\n            defines[\"MORPHTARGETS\"] = manager.numInfluencers > 0;\r\n            defines[\"NUM_MORPH_INFLUENCERS\"] = manager.numInfluencers;\r\n\r\n            defines[\"MORPHTARGETS_TEXTURE\"] = manager.isUsingTextureForTargets;\r\n        } else {\r\n            defines[\"MORPHTARGETS_UV\"] = false;\r\n            defines[\"MORPHTARGETS_TANGENT\"] = false;\r\n            defines[\"MORPHTARGETS_NORMAL\"] = false;\r\n            defines[\"MORPHTARGETS\"] = false;\r\n            defines[\"NUM_MORPH_INFLUENCERS\"] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares the defines for baked vertex animation\r\n     * @param mesh The mesh containing the geometry data we will draw\r\n     * @param defines The defines to update\r\n     */\r\n    public static PrepareDefinesForBakedVertexAnimation(mesh: AbstractMesh, defines: any) {\r\n        const manager = (<Mesh>mesh).bakedVertexAnimationManager;\r\n        defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"] = manager && manager.isEnabled ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Prepares the defines used in the shader depending on the attributes data available in the mesh\r\n     * @param mesh The mesh containing the geometry data we will draw\r\n     * @param defines The defines to update\r\n     * @param useVertexColor Precise whether vertex colors should be used or not (override mesh info)\r\n     * @param useBones Precise whether bones should be used or not (override mesh info)\r\n     * @param useMorphTargets Precise whether morph targets should be used or not (override mesh info)\r\n     * @param useVertexAlpha Precise whether vertex alpha should be used or not (override mesh info)\r\n     * @param useBakedVertexAnimation Precise whether baked vertex animation should be used or not (override mesh info)\r\n     * @returns false if defines are considered not dirty and have not been checked\r\n     */\r\n    public static PrepareDefinesForAttributes(\r\n        mesh: AbstractMesh,\r\n        defines: any,\r\n        useVertexColor: boolean,\r\n        useBones: boolean,\r\n        useMorphTargets = false,\r\n        useVertexAlpha = true,\r\n        useBakedVertexAnimation = true\r\n    ): boolean {\r\n        if (!defines._areAttributesDirty && defines._needNormals === defines._normals && defines._needUVs === defines._uvs) {\r\n            return false;\r\n        }\r\n\r\n        defines._normals = defines._needNormals;\r\n        defines._uvs = defines._needUVs;\r\n\r\n        defines[\"NORMAL\"] = defines._needNormals && mesh.isVerticesDataPresent(VertexBuffer.NormalKind);\r\n\r\n        if (defines._needNormals && mesh.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            defines[\"TANGENT\"] = true;\r\n        }\r\n\r\n        for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n            defines[\"UV\" + i] = defines._needUVs ? mesh.isVerticesDataPresent(`uv${i === 1 ? \"\" : i}`) : false;\r\n        }\r\n\r\n        if (useVertexColor) {\r\n            const hasVertexColors = mesh.useVertexColors && mesh.isVerticesDataPresent(VertexBuffer.ColorKind);\r\n            defines[\"VERTEXCOLOR\"] = hasVertexColors;\r\n            defines[\"VERTEXALPHA\"] = mesh.hasVertexAlpha && hasVertexColors && useVertexAlpha;\r\n        }\r\n\r\n        if (mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind) && (mesh.hasInstances || mesh.hasThinInstances)) {\r\n            defines[\"INSTANCESCOLOR\"] = true;\r\n        }\r\n\r\n        if (useBones) {\r\n            this.PrepareDefinesForBones(mesh, defines);\r\n        }\r\n\r\n        if (useMorphTargets) {\r\n            this.PrepareDefinesForMorphTargets(mesh, defines);\r\n        }\r\n\r\n        if (useBakedVertexAnimation) {\r\n            this.PrepareDefinesForBakedVertexAnimation(mesh, defines);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prepares the defines related to multiview\r\n     * @param scene The scene we are intending to draw\r\n     * @param defines The defines to update\r\n     */\r\n    public static PrepareDefinesForMultiview(scene: Scene, defines: any) {\r\n        if (scene.activeCamera) {\r\n            const previousMultiview = defines.MULTIVIEW;\r\n            defines.MULTIVIEW = scene.activeCamera.outputRenderTarget !== null && scene.activeCamera.outputRenderTarget.getViewCount() > 1;\r\n            if (defines.MULTIVIEW != previousMultiview) {\r\n                defines.markAsUnprocessed();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares the defines related to order independant transparency\r\n     * @param scene The scene we are intending to draw\r\n     * @param defines The defines to update\r\n     * @param needAlphaBlending Determines if the material needs alpha blending\r\n     */\r\n    public static PrepareDefinesForOIT(scene: Scene, defines: any, needAlphaBlending: boolean) {\r\n        const previousDefine = defines.ORDER_INDEPENDENT_TRANSPARENCY;\r\n        const previousDefine16Bits = defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS;\r\n\r\n        defines.ORDER_INDEPENDENT_TRANSPARENCY = scene.useOrderIndependentTransparency && needAlphaBlending;\r\n        defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = !scene.getEngine().getCaps().textureFloatLinearFiltering;\r\n\r\n        if (previousDefine !== defines.ORDER_INDEPENDENT_TRANSPARENCY || previousDefine16Bits !== defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS) {\r\n            defines.markAsUnprocessed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares the defines related to the prepass\r\n     * @param scene The scene we are intending to draw\r\n     * @param defines The defines to update\r\n     * @param canRenderToMRT Indicates if this material renders to several textures in the prepass\r\n     */\r\n    public static PrepareDefinesForPrePass(scene: Scene, defines: any, canRenderToMRT: boolean) {\r\n        const previousPrePass = defines.PREPASS;\r\n\r\n        if (!defines._arePrePassDirty) {\r\n            return;\r\n        }\r\n\r\n        const texturesList = [\r\n            {\r\n                type: Constants.PREPASS_POSITION_TEXTURE_TYPE,\r\n                define: \"PREPASS_POSITION\",\r\n                index: \"PREPASS_POSITION_INDEX\",\r\n            },\r\n            {\r\n                type: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\r\n                define: \"PREPASS_VELOCITY\",\r\n                index: \"PREPASS_VELOCITY_INDEX\",\r\n            },\r\n            {\r\n                type: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\r\n                define: \"PREPASS_REFLECTIVITY\",\r\n                index: \"PREPASS_REFLECTIVITY_INDEX\",\r\n            },\r\n            {\r\n                type: Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE,\r\n                define: \"PREPASS_IRRADIANCE\",\r\n                index: \"PREPASS_IRRADIANCE_INDEX\",\r\n            },\r\n            {\r\n                type: Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE,\r\n                define: \"PREPASS_ALBEDO_SQRT\",\r\n                index: \"PREPASS_ALBEDO_SQRT_INDEX\",\r\n            },\r\n            {\r\n                type: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n                define: \"PREPASS_DEPTH\",\r\n                index: \"PREPASS_DEPTH_INDEX\",\r\n            },\r\n            {\r\n                type: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\r\n                define: \"PREPASS_NORMAL\",\r\n                index: \"PREPASS_NORMAL_INDEX\",\r\n            },\r\n        ];\r\n\r\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && canRenderToMRT) {\r\n            defines.PREPASS = true;\r\n            defines.SCENE_MRT_COUNT = scene.prePassRenderer.mrtCount;\r\n\r\n            for (let i = 0; i < texturesList.length; i++) {\r\n                const index = scene.prePassRenderer.getIndex(texturesList[i].type);\r\n                if (index !== -1) {\r\n                    defines[texturesList[i].define] = true;\r\n                    defines[texturesList[i].index] = index;\r\n                } else {\r\n                    defines[texturesList[i].define] = false;\r\n                }\r\n            }\r\n        } else {\r\n            defines.PREPASS = false;\r\n            for (let i = 0; i < texturesList.length; i++) {\r\n                defines[texturesList[i].define] = false;\r\n            }\r\n        }\r\n\r\n        if (defines.PREPASS != previousPrePass) {\r\n            defines.markAsUnprocessed();\r\n            defines.markAsImageProcessingDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares the defines related to the light information passed in parameter\r\n     * @param scene The scene we are intending to draw\r\n     * @param mesh The mesh the effect is compiling for\r\n     * @param light The light the effect is compiling for\r\n     * @param lightIndex The index of the light\r\n     * @param defines The defines to update\r\n     * @param specularSupported Specifies whether specular is supported or not (override lights data)\r\n     * @param state Defines the current state regarding what is needed (normals, etc...)\r\n     * @param state.needNormals\r\n     * @param state.needRebuild\r\n     * @param state.shadowEnabled\r\n     * @param state.specularEnabled\r\n     * @param state.lightmapMode\r\n     */\r\n    public static PrepareDefinesForLight(\r\n        scene: Scene,\r\n        mesh: AbstractMesh,\r\n        light: Light,\r\n        lightIndex: number,\r\n        defines: any,\r\n        specularSupported: boolean,\r\n        state: {\r\n            needNormals: boolean;\r\n            needRebuild: boolean;\r\n            shadowEnabled: boolean;\r\n            specularEnabled: boolean;\r\n            lightmapMode: boolean;\r\n        }\r\n    ) {\r\n        state.needNormals = true;\r\n\r\n        if (defines[\"LIGHT\" + lightIndex] === undefined) {\r\n            state.needRebuild = true;\r\n        }\r\n\r\n        defines[\"LIGHT\" + lightIndex] = true;\r\n\r\n        defines[\"SPOTLIGHT\" + lightIndex] = false;\r\n        defines[\"HEMILIGHT\" + lightIndex] = false;\r\n        defines[\"POINTLIGHT\" + lightIndex] = false;\r\n        defines[\"DIRLIGHT\" + lightIndex] = false;\r\n\r\n        light.prepareLightSpecificDefines(defines, lightIndex);\r\n\r\n        // FallOff.\r\n        defines[\"LIGHT_FALLOFF_PHYSICAL\" + lightIndex] = false;\r\n        defines[\"LIGHT_FALLOFF_GLTF\" + lightIndex] = false;\r\n        defines[\"LIGHT_FALLOFF_STANDARD\" + lightIndex] = false;\r\n\r\n        switch (light.falloffType) {\r\n            case LightConstants.FALLOFF_GLTF:\r\n                defines[\"LIGHT_FALLOFF_GLTF\" + lightIndex] = true;\r\n                break;\r\n            case LightConstants.FALLOFF_PHYSICAL:\r\n                defines[\"LIGHT_FALLOFF_PHYSICAL\" + lightIndex] = true;\r\n                break;\r\n            case LightConstants.FALLOFF_STANDARD:\r\n                defines[\"LIGHT_FALLOFF_STANDARD\" + lightIndex] = true;\r\n                break;\r\n        }\r\n\r\n        // Specular\r\n        if (specularSupported && !light.specular.equalsFloats(0, 0, 0)) {\r\n            state.specularEnabled = true;\r\n        }\r\n\r\n        // Shadows\r\n        defines[\"SHADOW\" + lightIndex] = false;\r\n        defines[\"SHADOWCSM\" + lightIndex] = false;\r\n        defines[\"SHADOWCSMDEBUG\" + lightIndex] = false;\r\n        defines[\"SHADOWCSMNUM_CASCADES\" + lightIndex] = false;\r\n        defines[\"SHADOWCSMUSESHADOWMAXZ\" + lightIndex] = false;\r\n        defines[\"SHADOWCSMNOBLEND\" + lightIndex] = false;\r\n        defines[\"SHADOWCSM_RIGHTHANDED\" + lightIndex] = false;\r\n        defines[\"SHADOWPCF\" + lightIndex] = false;\r\n        defines[\"SHADOWPCSS\" + lightIndex] = false;\r\n        defines[\"SHADOWPOISSON\" + lightIndex] = false;\r\n        defines[\"SHADOWESM\" + lightIndex] = false;\r\n        defines[\"SHADOWCLOSEESM\" + lightIndex] = false;\r\n        defines[\"SHADOWCUBE\" + lightIndex] = false;\r\n        defines[\"SHADOWLOWQUALITY\" + lightIndex] = false;\r\n        defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = false;\r\n\r\n        if (mesh && mesh.receiveShadows && scene.shadowsEnabled && light.shadowEnabled) {\r\n            const shadowGenerator = light.getShadowGenerator();\r\n            if (shadowGenerator) {\r\n                const shadowMap = shadowGenerator.getShadowMap();\r\n                if (shadowMap) {\r\n                    if (shadowMap.renderList && shadowMap.renderList.length > 0) {\r\n                        state.shadowEnabled = true;\r\n                        shadowGenerator.prepareDefines(defines, lightIndex);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (light.lightmapMode != LightConstants.LIGHTMAP_DEFAULT) {\r\n            state.lightmapMode = true;\r\n            defines[\"LIGHTMAPEXCLUDED\" + lightIndex] = true;\r\n            defines[\"LIGHTMAPNOSPECULAR\" + lightIndex] = light.lightmapMode == LightConstants.LIGHTMAP_SHADOWSONLY;\r\n        } else {\r\n            defines[\"LIGHTMAPEXCLUDED\" + lightIndex] = false;\r\n            defines[\"LIGHTMAPNOSPECULAR\" + lightIndex] = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares the defines related to the light information passed in parameter\r\n     * @param scene The scene we are intending to draw\r\n     * @param mesh The mesh the effect is compiling for\r\n     * @param defines The defines to update\r\n     * @param specularSupported Specifies whether specular is supported or not (override lights data)\r\n     * @param maxSimultaneousLights Specifies how manuy lights can be added to the effect at max\r\n     * @param disableLighting Specifies whether the lighting is disabled (override scene and light)\r\n     * @returns true if normals will be required for the rest of the effect\r\n     */\r\n    public static PrepareDefinesForLights(scene: Scene, mesh: AbstractMesh, defines: any, specularSupported: boolean, maxSimultaneousLights = 4, disableLighting = false): boolean {\r\n        if (!defines._areLightsDirty) {\r\n            return defines._needNormals;\r\n        }\r\n\r\n        let lightIndex = 0;\r\n        const state = {\r\n            needNormals: defines._needNormals, // prevents overriding previous reflection or other needs for normals\r\n            needRebuild: false,\r\n            lightmapMode: false,\r\n            shadowEnabled: false,\r\n            specularEnabled: false,\r\n        };\r\n\r\n        if (scene.lightsEnabled && !disableLighting) {\r\n            for (const light of mesh.lightSources) {\r\n                this.PrepareDefinesForLight(scene, mesh, light, lightIndex, defines, specularSupported, state);\r\n\r\n                lightIndex++;\r\n                if (lightIndex === maxSimultaneousLights) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        defines[\"SPECULARTERM\"] = state.specularEnabled;\r\n        defines[\"SHADOWS\"] = state.shadowEnabled;\r\n\r\n        // Resetting all other lights if any\r\n        for (let index = lightIndex; index < maxSimultaneousLights; index++) {\r\n            if (defines[\"LIGHT\" + index] !== undefined) {\r\n                defines[\"LIGHT\" + index] = false;\r\n                defines[\"HEMILIGHT\" + index] = false;\r\n                defines[\"POINTLIGHT\" + index] = false;\r\n                defines[\"DIRLIGHT\" + index] = false;\r\n                defines[\"SPOTLIGHT\" + index] = false;\r\n                defines[\"SHADOW\" + index] = false;\r\n                defines[\"SHADOWCSM\" + index] = false;\r\n                defines[\"SHADOWCSMDEBUG\" + index] = false;\r\n                defines[\"SHADOWCSMNUM_CASCADES\" + index] = false;\r\n                defines[\"SHADOWCSMUSESHADOWMAXZ\" + index] = false;\r\n                defines[\"SHADOWCSMNOBLEND\" + index] = false;\r\n                defines[\"SHADOWCSM_RIGHTHANDED\" + index] = false;\r\n                defines[\"SHADOWPCF\" + index] = false;\r\n                defines[\"SHADOWPCSS\" + index] = false;\r\n                defines[\"SHADOWPOISSON\" + index] = false;\r\n                defines[\"SHADOWESM\" + index] = false;\r\n                defines[\"SHADOWCLOSEESM\" + index] = false;\r\n                defines[\"SHADOWCUBE\" + index] = false;\r\n                defines[\"SHADOWLOWQUALITY\" + index] = false;\r\n                defines[\"SHADOWMEDIUMQUALITY\" + index] = false;\r\n            }\r\n        }\r\n\r\n        const caps = scene.getEngine().getCaps();\r\n\r\n        if (defines[\"SHADOWFLOAT\"] === undefined) {\r\n            state.needRebuild = true;\r\n        }\r\n\r\n        defines[\"SHADOWFLOAT\"] =\r\n            state.shadowEnabled && ((caps.textureFloatRender && caps.textureFloatLinearFiltering) || (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering));\r\n        defines[\"LIGHTMAPEXCLUDED\"] = state.lightmapMode;\r\n\r\n        if (state.needRebuild) {\r\n            defines.rebuild();\r\n        }\r\n\r\n        return state.needNormals;\r\n    }\r\n\r\n    /**\r\n     * Prepares the uniforms and samplers list to be used in the effect (for a specific light)\r\n     * @param lightIndex defines the light index\r\n     * @param uniformsList The uniform list\r\n     * @param samplersList The sampler list\r\n     * @param projectedLightTexture defines if projected texture must be used\r\n     * @param uniformBuffersList defines an optional list of uniform buffers\r\n     * @param updateOnlyBuffersList True to only update the uniformBuffersList array\r\n     */\r\n    public static PrepareUniformsAndSamplersForLight(\r\n        lightIndex: number,\r\n        uniformsList: string[],\r\n        samplersList: string[],\r\n        projectedLightTexture?: any,\r\n        uniformBuffersList: Nullable<string[]> = null,\r\n        updateOnlyBuffersList = false\r\n    ) {\r\n        if (uniformBuffersList) {\r\n            uniformBuffersList.push(\"Light\" + lightIndex);\r\n        }\r\n\r\n        if (updateOnlyBuffersList) {\r\n            return;\r\n        }\r\n\r\n        uniformsList.push(\r\n            \"vLightData\" + lightIndex,\r\n            \"vLightDiffuse\" + lightIndex,\r\n            \"vLightSpecular\" + lightIndex,\r\n            \"vLightDirection\" + lightIndex,\r\n            \"vLightFalloff\" + lightIndex,\r\n            \"vLightGround\" + lightIndex,\r\n            \"lightMatrix\" + lightIndex,\r\n            \"shadowsInfo\" + lightIndex,\r\n            \"depthValues\" + lightIndex\r\n        );\r\n\r\n        samplersList.push(\"shadowSampler\" + lightIndex);\r\n        samplersList.push(\"depthSampler\" + lightIndex);\r\n\r\n        uniformsList.push(\r\n            \"viewFrustumZ\" + lightIndex,\r\n            \"cascadeBlendFactor\" + lightIndex,\r\n            \"lightSizeUVCorrection\" + lightIndex,\r\n            \"depthCorrection\" + lightIndex,\r\n            \"penumbraDarkness\" + lightIndex,\r\n            \"frustumLengths\" + lightIndex\r\n        );\r\n\r\n        if (projectedLightTexture) {\r\n            samplersList.push(\"projectionLightSampler\" + lightIndex);\r\n            uniformsList.push(\"textureProjectionMatrix\" + lightIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares the uniforms and samplers list to be used in the effect\r\n     * @param uniformsListOrOptions The uniform names to prepare or an EffectCreationOptions containing the list and extra information\r\n     * @param samplersList The sampler list\r\n     * @param defines The defines helping in the list generation\r\n     * @param maxSimultaneousLights The maximum number of simultaneous light allowed in the effect\r\n     */\r\n    public static PrepareUniformsAndSamplersList(\r\n        uniformsListOrOptions: string[] | IEffectCreationOptions,\r\n        samplersList?: string[],\r\n        defines?: any,\r\n        maxSimultaneousLights = 4\r\n    ): void {\r\n        let uniformsList: string[];\r\n        let uniformBuffersList: Nullable<string[]> = null;\r\n\r\n        if ((<IEffectCreationOptions>uniformsListOrOptions).uniformsNames) {\r\n            const options = <IEffectCreationOptions>uniformsListOrOptions;\r\n            uniformsList = options.uniformsNames;\r\n            uniformBuffersList = options.uniformBuffersNames;\r\n            samplersList = options.samplers;\r\n            defines = options.defines;\r\n            maxSimultaneousLights = options.maxSimultaneousLights || 0;\r\n        } else {\r\n            uniformsList = <string[]>uniformsListOrOptions;\r\n            if (!samplersList) {\r\n                samplersList = [];\r\n            }\r\n        }\r\n\r\n        for (let lightIndex = 0; lightIndex < maxSimultaneousLights; lightIndex++) {\r\n            if (!defines[\"LIGHT\" + lightIndex]) {\r\n                break;\r\n            }\r\n            this.PrepareUniformsAndSamplersForLight(lightIndex, uniformsList, samplersList, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffersList);\r\n        }\r\n\r\n        if (defines[\"NUM_MORPH_INFLUENCERS\"]) {\r\n            uniformsList.push(\"morphTargetInfluences\");\r\n        }\r\n\r\n        if (defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"]) {\r\n            uniformsList.push(\"bakedVertexAnimationSettings\");\r\n            uniformsList.push(\"bakedVertexAnimationTextureSizeInverted\");\r\n            uniformsList.push(\"bakedVertexAnimationTime\");\r\n            samplersList.push(\"bakedVertexAnimationTexture\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This helps decreasing rank by rank the shadow quality (0 being the highest rank and quality)\r\n     * @param defines The defines to update while falling back\r\n     * @param fallbacks The authorized effect fallbacks\r\n     * @param maxSimultaneousLights The maximum number of lights allowed\r\n     * @param rank the current rank of the Effect\r\n     * @returns The newly affected rank\r\n     */\r\n    public static HandleFallbacksForShadows(defines: any, fallbacks: EffectFallbacks, maxSimultaneousLights = 4, rank = 0): number {\r\n        let lightFallbackRank = 0;\r\n        for (let lightIndex = 0; lightIndex < maxSimultaneousLights; lightIndex++) {\r\n            if (!defines[\"LIGHT\" + lightIndex]) {\r\n                break;\r\n            }\r\n\r\n            if (lightIndex > 0) {\r\n                lightFallbackRank = rank + lightIndex;\r\n                fallbacks.addFallback(lightFallbackRank, \"LIGHT\" + lightIndex);\r\n            }\r\n\r\n            if (!defines[\"SHADOWS\"]) {\r\n                if (defines[\"SHADOW\" + lightIndex]) {\r\n                    fallbacks.addFallback(rank, \"SHADOW\" + lightIndex);\r\n                }\r\n\r\n                if (defines[\"SHADOWPCF\" + lightIndex]) {\r\n                    fallbacks.addFallback(rank, \"SHADOWPCF\" + lightIndex);\r\n                }\r\n\r\n                if (defines[\"SHADOWPCSS\" + lightIndex]) {\r\n                    fallbacks.addFallback(rank, \"SHADOWPCSS\" + lightIndex);\r\n                }\r\n\r\n                if (defines[\"SHADOWPOISSON\" + lightIndex]) {\r\n                    fallbacks.addFallback(rank, \"SHADOWPOISSON\" + lightIndex);\r\n                }\r\n\r\n                if (defines[\"SHADOWESM\" + lightIndex]) {\r\n                    fallbacks.addFallback(rank, \"SHADOWESM\" + lightIndex);\r\n                }\r\n\r\n                if (defines[\"SHADOWCLOSEESM\" + lightIndex]) {\r\n                    fallbacks.addFallback(rank, \"SHADOWCLOSEESM\" + lightIndex);\r\n                }\r\n            }\r\n        }\r\n        return lightFallbackRank++;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private static _TmpMorphInfluencers = { NUM_MORPH_INFLUENCERS: 0 };\r\n    /**\r\n     * Prepares the list of attributes required for morph targets according to the effect defines.\r\n     * @param attribs The current list of supported attribs\r\n     * @param mesh The mesh to prepare the morph targets attributes for\r\n     * @param influencers The number of influencers\r\n     */\r\n    public static PrepareAttributesForMorphTargetsInfluencers(attribs: string[], mesh: AbstractMesh, influencers: number): void {\r\n        this._TmpMorphInfluencers.NUM_MORPH_INFLUENCERS = influencers;\r\n        this.PrepareAttributesForMorphTargets(attribs, mesh, this._TmpMorphInfluencers);\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of attributes required for morph targets according to the effect defines.\r\n     * @param attribs The current list of supported attribs\r\n     * @param mesh The mesh to prepare the morph targets attributes for\r\n     * @param defines The current Defines of the effect\r\n     */\r\n    public static PrepareAttributesForMorphTargets(attribs: string[], mesh: AbstractMesh, defines: any): void {\r\n        const influencers = defines[\"NUM_MORPH_INFLUENCERS\"];\r\n\r\n        if (influencers > 0 && EngineStore.LastCreatedEngine) {\r\n            const maxAttributesCount = EngineStore.LastCreatedEngine.getCaps().maxVertexAttribs;\r\n            const manager = (<Mesh>mesh).morphTargetManager;\r\n            if (manager?.isUsingTextureForTargets) {\r\n                return;\r\n            }\r\n            const normal = manager && manager.supportsNormals && defines[\"NORMAL\"];\r\n            const tangent = manager && manager.supportsTangents && defines[\"TANGENT\"];\r\n            const uv = manager && manager.supportsUVs && defines[\"UV1\"];\r\n            for (let index = 0; index < influencers; index++) {\r\n                attribs.push(VertexBuffer.PositionKind + index);\r\n\r\n                if (normal) {\r\n                    attribs.push(VertexBuffer.NormalKind + index);\r\n                }\r\n\r\n                if (tangent) {\r\n                    attribs.push(VertexBuffer.TangentKind + index);\r\n                }\r\n\r\n                if (uv) {\r\n                    attribs.push(VertexBuffer.UVKind + \"_\" + index);\r\n                }\r\n\r\n                if (attribs.length > maxAttributesCount) {\r\n                    Logger.Error(\"Cannot add more vertex attributes for mesh \" + mesh.name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of attributes required for baked vertex animations according to the effect defines.\r\n     * @param attribs The current list of supported attribs\r\n     * @param mesh The mesh to prepare the morph targets attributes for\r\n     * @param defines The current Defines of the effect\r\n     */\r\n    public static PrepareAttributesForBakedVertexAnimation(attribs: string[], mesh: AbstractMesh, defines: any): void {\r\n        const enabled = defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"] && defines[\"INSTANCES\"];\r\n\r\n        if (enabled) {\r\n            attribs.push(\"bakedVertexAnimationSettingsInstanced\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of attributes required for bones according to the effect defines.\r\n     * @param attribs The current list of supported attribs\r\n     * @param mesh The mesh to prepare the bones attributes for\r\n     * @param defines The current Defines of the effect\r\n     * @param fallbacks The current effect fallback strategy\r\n     */\r\n    public static PrepareAttributesForBones(attribs: string[], mesh: AbstractMesh, defines: any, fallbacks: EffectFallbacks): void {\r\n        if (defines[\"NUM_BONE_INFLUENCERS\"] > 0) {\r\n            fallbacks.addCPUSkinningFallback(0, mesh);\r\n\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (defines[\"NUM_BONE_INFLUENCERS\"] > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check and prepare the list of attributes required for instances according to the effect defines.\r\n     * @param attribs The current list of supported attribs\r\n     * @param defines The current MaterialDefines of the effect\r\n     */\r\n    public static PrepareAttributesForInstances(attribs: string[], defines: MaterialDefines): void {\r\n        if (defines[\"INSTANCES\"] || defines[\"THIN_INSTANCES\"]) {\r\n            this.PushAttributesForInstances(attribs, !!defines[\"PREPASS_VELOCITY\"]);\r\n        }\r\n\r\n        if (defines.INSTANCESCOLOR) {\r\n            attribs.push(VertexBuffer.ColorInstanceKind);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the list of attributes required for instances to the attribs array.\r\n     * @param attribs The current list of supported attribs\r\n     * @param needsPreviousMatrices If the shader needs previous matrices\r\n     */\r\n    public static PushAttributesForInstances(attribs: string[], needsPreviousMatrices: boolean = false): void {\r\n        attribs.push(\"world0\");\r\n        attribs.push(\"world1\");\r\n        attribs.push(\"world2\");\r\n        attribs.push(\"world3\");\r\n        if (needsPreviousMatrices) {\r\n            attribs.push(\"previousWorld0\");\r\n            attribs.push(\"previousWorld1\");\r\n            attribs.push(\"previousWorld2\");\r\n            attribs.push(\"previousWorld3\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the light information to the effect.\r\n     * @param light The light containing the generator\r\n     * @param effect The effect we are binding the data to\r\n     * @param lightIndex The light index in the effect used to render\r\n     */\r\n    public static BindLightProperties(light: Light, effect: Effect, lightIndex: number): void {\r\n        light.transferToEffect(effect, lightIndex + \"\");\r\n    }\r\n\r\n    /**\r\n     * Binds the lights information from the scene to the effect for the given mesh.\r\n     * @param light Light to bind\r\n     * @param lightIndex Light index\r\n     * @param scene The scene where the light belongs to\r\n     * @param effect The effect we are binding the data to\r\n     * @param useSpecular Defines if specular is supported\r\n     * @param receiveShadows Defines if the effect (mesh) we bind the light for receives shadows\r\n     */\r\n    public static BindLight(light: Light, lightIndex: number, scene: Scene, effect: Effect, useSpecular: boolean, receiveShadows = true): void {\r\n        light._bindLight(lightIndex, scene, effect, useSpecular, receiveShadows);\r\n    }\r\n\r\n    /**\r\n     * Binds the lights information from the scene to the effect for the given mesh.\r\n     * @param scene The scene the lights belongs to\r\n     * @param mesh The mesh we are binding the information to render\r\n     * @param effect The effect we are binding the data to\r\n     * @param defines The generated defines for the effect\r\n     * @param maxSimultaneousLights The maximum number of light that can be bound to the effect\r\n     */\r\n    public static BindLights(scene: Scene, mesh: AbstractMesh, effect: Effect, defines: any, maxSimultaneousLights = 4): void {\r\n        const len = Math.min(mesh.lightSources.length, maxSimultaneousLights);\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            const light = mesh.lightSources[i];\r\n            this.BindLight(light, i, scene, effect, typeof defines === \"boolean\" ? defines : defines[\"SPECULARTERM\"], mesh.receiveShadows);\r\n        }\r\n    }\r\n\r\n    private static _TempFogColor = Color3.Black();\r\n    /**\r\n     * Binds the fog information from the scene to the effect for the given mesh.\r\n     * @param scene The scene the lights belongs to\r\n     * @param mesh The mesh we are binding the information to render\r\n     * @param effect The effect we are binding the data to\r\n     * @param linearSpace Defines if the fog effect is applied in linear space\r\n     */\r\n    public static BindFogParameters(scene: Scene, mesh: AbstractMesh, effect: Effect, linearSpace = false): void {\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            effect.setFloat4(\"vFogInfos\", scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\r\n            // Convert fog color to linear space if used in a linear space computed shader.\r\n            if (linearSpace) {\r\n                scene.fogColor.toLinearSpaceToRef(this._TempFogColor);\r\n                effect.setColor3(\"vFogColor\", this._TempFogColor);\r\n            } else {\r\n                effect.setColor3(\"vFogColor\", scene.fogColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the bones information from the mesh to the effect.\r\n     * @param mesh The mesh we are binding the information to render\r\n     * @param effect The effect we are binding the data to\r\n     * @param prePassConfiguration Configuration for the prepass, in case prepass is activated\r\n     */\r\n    public static BindBonesParameters(mesh?: AbstractMesh, effect?: Effect, prePassConfiguration?: PrePassConfiguration): void {\r\n        if (!effect || !mesh) {\r\n            return;\r\n        }\r\n        if (mesh.computeBonesUsingShaders && effect._bonesComputationForcedToCPU) {\r\n            mesh.computeBonesUsingShaders = false;\r\n        }\r\n\r\n        if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            const skeleton = mesh.skeleton;\r\n\r\n            if (skeleton.isUsingTextureForMatrices && effect.getUniformIndex(\"boneTextureWidth\") > -1) {\r\n                const boneTexture = skeleton.getTransformMatrixTexture(mesh);\r\n                effect.setTexture(\"boneSampler\", boneTexture);\r\n                effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\r\n            } else {\r\n                const matrices = skeleton.getTransformMatrices(mesh);\r\n\r\n                if (matrices) {\r\n                    effect.setMatrices(\"mBones\", matrices);\r\n                    if (prePassConfiguration && mesh.getScene().prePassRenderer && mesh.getScene().prePassRenderer!.getIndex(Constants.PREPASS_VELOCITY_TEXTURE_TYPE)) {\r\n                        if (!prePassConfiguration.previousBones[mesh.uniqueId]) {\r\n                            prePassConfiguration.previousBones[mesh.uniqueId] = matrices.slice();\r\n                        }\r\n                        effect.setMatrices(\"mPreviousBones\", prePassConfiguration.previousBones[mesh.uniqueId]);\r\n                        MaterialHelper._CopyBonesTransformationMatrices(matrices, prePassConfiguration.previousBones[mesh.uniqueId]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Copies the bones transformation matrices into the target array and returns the target's reference\r\n    private static _CopyBonesTransformationMatrices(source: Float32Array, target: Float32Array): Float32Array {\r\n        target.set(source);\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * Binds the morph targets information from the mesh to the effect.\r\n     * @param abstractMesh The mesh we are binding the information to render\r\n     * @param effect The effect we are binding the data to\r\n     */\r\n    public static BindMorphTargetParameters(abstractMesh: AbstractMesh, effect: Effect): void {\r\n        const manager = (<Mesh>abstractMesh).morphTargetManager;\r\n        if (!abstractMesh || !manager) {\r\n            return;\r\n        }\r\n\r\n        effect.setFloatArray(\"morphTargetInfluences\", manager.influences);\r\n    }\r\n\r\n    /**\r\n     * Binds the logarithmic depth information from the scene to the effect for the given defines.\r\n     * @param defines The generated defines used in the effect\r\n     * @param effect The effect we are binding the data to\r\n     * @param scene The scene we are willing to render with logarithmic scale for\r\n     */\r\n    public static BindLogDepth(defines: any, effect: Effect, scene: Scene): void {\r\n        if (!defines || defines[\"LOGARITHMICDEPTH\"] || (defines.indexOf && defines.indexOf(\"LOGARITHMICDEPTH\") >= 0)) {\r\n            const camera = <Camera>scene.activeCamera;\r\n            if (camera.mode === Camera.ORTHOGRAPHIC_CAMERA) {\r\n                Logger.Error(\"Logarithmic depth is not compatible with orthographic cameras!\", 20);\r\n            }\r\n            effect.setFloat(\"logarithmicDepthConstant\", 2.0 / (Math.log(camera.maxZ + 1.0) / Math.LN2));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the clip plane information from the scene to the effect.\r\n     * @param effect The effect we are binding the data to\r\n     * @param scene The scene the clip plane information are extracted from\r\n     */\r\n    public static BindClipPlane(effect: Effect, scene: Scene): void {\r\n        ThinMaterialHelper.BindClipPlane(effect, scene);\r\n    }\r\n}\r\n","import { SerializationHelper, serialize } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport { MaterialPluginManager } from \"./materialPluginManager\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\ndeclare type SubMesh = import(\"../Meshes/subMesh\").SubMesh;\r\ndeclare type IAnimatable = import(\"../Animations/animatable.interface\").IAnimatable;\r\ndeclare type UniformBuffer = import(\"./uniformBuffer\").UniformBuffer;\r\ndeclare type EffectFallbacks = import(\"./effectFallbacks\").EffectFallbacks;\r\ndeclare type MaterialDefines = import(\"./materialDefines\").MaterialDefines;\r\ndeclare type Material = import(\"./material\").Material;\r\ndeclare type BaseTexture = import(\"./Textures/baseTexture\").BaseTexture;\r\ndeclare type RenderTargetTexture = import(\"./Textures/renderTargetTexture\").RenderTargetTexture;\r\n\r\n/**\r\n * Base class for material plugins.\r\n * @since 5.0\r\n */\r\nexport class MaterialPluginBase {\r\n    /**\r\n     * Defines the name of the plugin\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Defines the priority of the plugin. Lower numbers run first.\r\n     */\r\n    @serialize()\r\n    public priority: number = 500;\r\n\r\n    /**\r\n     * Indicates that this plugin should be notified for the extra events (HasRenderTargetTextures / FillRenderTargetTextures / HardBindForSubMesh)\r\n     */\r\n    @serialize()\r\n    public registerForExtraEvents: boolean = false;\r\n\r\n    protected _material: Material;\r\n    protected _pluginManager: MaterialPluginManager;\r\n    protected _pluginDefineNames?: { [name: string]: any };\r\n\r\n    protected _enable(enable: boolean) {\r\n        if (enable) {\r\n            this._pluginManager._activatePlugin(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to mark defines as being dirty.\r\n     */\r\n    public readonly markAllDefinesAsDirty: () => void;\r\n\r\n    /**\r\n     * Creates a new material plugin\r\n     * @param material parent material of the plugin\r\n     * @param name name of the plugin\r\n     * @param priority priority of the plugin\r\n     * @param defines list of defines used by the plugin. The value of the property is the default value for this property\r\n     * @param addToPluginList true to add the plugin to the list of plugins managed by the material plugin manager of the material (default: true)\r\n     * @param enable true to enable the plugin (it is handy if the plugin does not handle properties to switch its current activation)\r\n     */\r\n    constructor(material: Material, name: string, priority: number, defines?: { [key: string]: any }, addToPluginList = true, enable = false) {\r\n        this._material = material;\r\n        this.name = name;\r\n        this.priority = priority;\r\n\r\n        if (!material.pluginManager) {\r\n            material.pluginManager = new MaterialPluginManager(material);\r\n        }\r\n\r\n        this._pluginDefineNames = defines;\r\n        this._pluginManager = material.pluginManager;\r\n\r\n        if (addToPluginList) {\r\n            this._pluginManager._addPlugin(this);\r\n        }\r\n\r\n        if (enable) {\r\n            this._enable(true);\r\n        }\r\n\r\n        this.markAllDefinesAsDirty = material._dirtyCallbacks[Constants.MATERIAL_AllDirtyFlag];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name useful for serialization or dynamic coding.\r\n     * @returns The class name.\r\n     */\r\n    public getClassName(): string {\r\n        return \"MaterialPluginBase\";\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used.\r\n     * @param defines the list of \"defines\" to update.\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param engine the engine this scene belongs to.\r\n     * @param subMesh the submesh to check for readiness\r\n     * @returns - boolean indicating that the submesh is ready or not.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isReadyForSubMesh(defines: MaterialDefines, scene: Scene, engine: Engine, subMesh: SubMesh): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the material data (this function is called even if mustRebind() returns false)\r\n     * @param uniformBuffer defines the Uniform buffer to fill in.\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param engine defines the engine the material belongs to.\r\n     * @param subMesh the submesh to bind data for\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public hardBindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {}\r\n\r\n    /**\r\n     * Binds the material data.\r\n     * @param uniformBuffer defines the Uniform buffer to fill in.\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param engine the engine this scene belongs to.\r\n     * @param subMesh the submesh to bind data for\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {}\r\n\r\n    /**\r\n     * Disposes the resources of the material.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public dispose(forceDisposeTextures?: boolean): void {}\r\n\r\n    /**\r\n     * Returns a list of custom shader code fragments to customize the shader.\r\n     * @param shaderType \"vertex\" or \"fragment\"\r\n     * @returns null if no code to be added, or a list of pointName => code.\r\n     * Note that `pointName` can also be a regular expression if it starts with a `!`.\r\n     * In that case, the string found by the regular expression (if any) will be\r\n     * replaced by the code provided.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getCustomCode(shaderType: string): Nullable<{ [pointName: string]: string }> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Collects all defines.\r\n     * @param defines The object to append to.\r\n     */\r\n    public collectDefines(defines: { [name: string]: { type: string; default: any } }): void {\r\n        if (!this._pluginDefineNames) {\r\n            return;\r\n        }\r\n        for (const key of Object.keys(this._pluginDefineNames)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            const type = typeof this._pluginDefineNames[key];\r\n            defines[key] = {\r\n                type: type === \"number\" ? \"number\" : type === \"string\" ? \"string\" : type === \"boolean\" ? \"boolean\" : \"object\",\r\n                default: this._pluginDefineNames[key],\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the defines for the next rendering. Called before MaterialHelper.PrepareDefinesForAttributes is called.\r\n     * @param defines the list of \"defines\" to update.\r\n     * @param scene defines the scene to the material belongs to.\r\n     * @param mesh the mesh being rendered\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public prepareDefinesBeforeAttributes(defines: MaterialDefines, scene: Scene, mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Sets the defines for the next rendering\r\n     * @param defines the list of \"defines\" to update.\r\n     * @param scene defines the scene to the material belongs to.\r\n     * @param mesh the mesh being rendered\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public prepareDefines(defines: MaterialDefines, scene: Scene, mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param texture - Base texture to use.\r\n     * @returns - Boolean specifying if a texture is used in the material.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     * @returns true if this uses a render target otherwise false.\r\n     */\r\n    public hasRenderTargetTextures(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Fills the list of render target textures.\r\n     * @param renderTargets the list of render targets to update\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fillRenderTargetTextures(renderTargets: SmartArray<RenderTargetTexture>): void {}\r\n\r\n    /**\r\n     * Returns an array of the actively used textures.\r\n     * @param activeTextures Array of BaseTextures\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {}\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * @param animatables Array of animatable textures.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getAnimatables(animatables: IAnimatable[]): void {}\r\n\r\n    /**\r\n     * Add fallbacks to the effect fallbacks list.\r\n     * @param defines defines the Base texture to use.\r\n     * @param fallbacks defines the current fallback list.\r\n     * @param currentRank defines the current fallback rank.\r\n     * @returns the new fallback rank.\r\n     */\r\n    public addFallbacks(defines: MaterialDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        return currentRank;\r\n    }\r\n\r\n    /**\r\n     * Gets the samplers used by the plugin.\r\n     * @param samplers list that the sampler names should be added to.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getSamplers(samplers: string[]): void {}\r\n\r\n    /**\r\n     * Gets the attributes used by the plugin.\r\n     * @param attributes list that the attribute names should be added to.\r\n     * @param scene the scene that the material belongs to.\r\n     * @param mesh the mesh being rendered.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getAttributes(attributes: string[], scene: Scene, mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Gets the uniform buffers names added by the plugin.\r\n     * @param ubos list that the ubo names should be added to.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getUniformBuffersNames(ubos: string[]): void {}\r\n\r\n    /**\r\n     * Gets the description of the uniforms to add to the ubo (if engine supports ubos) or to inject directly in the vertex/fragment shaders (if engine does not support ubos)\r\n     * @returns the description of the uniforms\r\n     */\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param plugin define the config where to copy the info\r\n     */\r\n    public copyTo(plugin: MaterialPluginBase): void {\r\n        SerializationHelper.Clone(() => plugin, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this clear coat configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a anisotropy Configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n","import type { ShaderCustomProcessingFunction } from \"../Engines/Processors/shaderProcessingOptions\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\n\r\ndeclare type BaseTexture = import(\"./Textures/baseTexture\").BaseTexture;\r\ndeclare type EffectFallbacks = import(\"./effectFallbacks\").EffectFallbacks;\r\ndeclare type MaterialDefines = import(\"./materialDefines\").MaterialDefines;\r\ndeclare type UniformBuffer = import(\"./uniformBuffer\").UniformBuffer;\r\ndeclare type SubMesh = import(\"../Meshes/subMesh\").SubMesh;\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\ndeclare type IAnimatable = import(\"../Animations/animatable.interface\").IAnimatable;\r\ndeclare type RenderTargetTexture = import(\"./Textures/renderTargetTexture\").RenderTargetTexture;\r\n\r\n/** @internal */\r\nexport type MaterialPluginCreated = {};\r\n\r\n/** @internal */\r\nexport type MaterialPluginDisposed = {\r\n    forceDisposeTextures?: boolean;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginHasTexture = {\r\n    hasTexture: boolean;\r\n    texture: BaseTexture;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginIsReadyForSubMesh = {\r\n    isReadyForSubMesh: boolean;\r\n    defines: MaterialDefines;\r\n    subMesh: SubMesh;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginGetDefineNames = {\r\n    defineNames?: { [name: string]: { type: string; default: any } };\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginPrepareEffect = {\r\n    defines: MaterialDefines;\r\n    fallbacks: EffectFallbacks;\r\n    fallbackRank: number;\r\n    customCode?: ShaderCustomProcessingFunction;\r\n    attributes: string[];\r\n    uniforms: string[];\r\n    samplers: string[];\r\n    uniformBuffersNames: string[];\r\n    mesh: AbstractMesh;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginPrepareDefines = {\r\n    defines: MaterialDefines;\r\n    mesh: AbstractMesh;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginPrepareUniformBuffer = {\r\n    ubo: UniformBuffer;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginBindForSubMesh = {\r\n    subMesh: SubMesh;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginGetAnimatables = {\r\n    animatables: IAnimatable[];\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginGetActiveTextures = {\r\n    activeTextures: BaseTexture[];\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginFillRenderTargetTextures = {\r\n    renderTargets: SmartArray<RenderTargetTexture>;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginHasRenderTargetTextures = {\r\n    hasRenderTargetTextures: boolean;\r\n};\r\n\r\n/** @internal */\r\nexport type MaterialPluginHardBindForSubMesh = {\r\n    subMesh: SubMesh;\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport enum MaterialPluginEvent {\r\n    Created = 0x0001,\r\n    Disposed = 0x0002,\r\n    GetDefineNames = 0x0004,\r\n    PrepareUniformBuffer = 0x0008,\r\n    IsReadyForSubMesh = 0x0010,\r\n    PrepareDefines = 0x0020,\r\n    BindForSubMesh = 0x0040,\r\n    PrepareEffect = 0x0080,\r\n    GetAnimatables = 0x0100,\r\n    GetActiveTextures = 0x0200,\r\n    HasTexture = 0x0400,\r\n    FillRenderTargetTextures = 0x0800,\r\n    HasRenderTargetTextures = 0x1000,\r\n    HardBindForSubMesh = 0x2000,\r\n}\r\n","import type { ShaderCustomProcessingFunction } from \"../Engines/Processors/shaderProcessingOptions\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport type {\r\n    MaterialPluginPrepareEffect,\r\n    MaterialPluginBindForSubMesh,\r\n    MaterialPluginDisposed,\r\n    MaterialPluginGetActiveTextures,\r\n    MaterialPluginGetAnimatables,\r\n    MaterialPluginGetDefineNames,\r\n    MaterialPluginHasTexture,\r\n    MaterialPluginIsReadyForSubMesh,\r\n    MaterialPluginPrepareDefines,\r\n    MaterialPluginPrepareUniformBuffer,\r\n    MaterialPluginHardBindForSubMesh,\r\n    MaterialPluginHasRenderTargetTextures,\r\n    MaterialPluginFillRenderTargetTextures,\r\n} from \"./materialPluginEvent\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type MaterialPluginBase = import(\"./materialPluginBase\").MaterialPluginBase;\r\n\r\ndeclare module \"./material\" {\r\n    export interface Material {\r\n        /**\r\n         * Plugin manager for this material\r\n         */\r\n        pluginManager?: MaterialPluginManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Class that manages the plugins of a material\r\n * @since 5.0\r\n */\r\nexport class MaterialPluginManager {\r\n    /** Map a plugin class name to a #define name (used in the vertex/fragment shaders as a marker of the plugin usage) */\r\n    private static _MaterialPluginClassToMainDefine: { [name: string]: string } = {};\r\n    private static _MaterialPluginCounter: number = 0;\r\n\r\n    protected _material: Material;\r\n    protected _scene: Scene;\r\n    protected _engine: Engine;\r\n    protected _plugins: MaterialPluginBase[] = [];\r\n    protected _activePlugins: MaterialPluginBase[] = [];\r\n    protected _activePluginsForExtraEvents: MaterialPluginBase[] = [];\r\n    protected _codeInjectionPoints: { [shaderType: string]: { [codeName: string]: boolean } };\r\n    protected _defineNamesFromPlugins?: { [name: string]: { type: string; default: any } };\r\n    protected _uboDeclaration: string;\r\n    protected _vertexDeclaration: string;\r\n    protected _fragmentDeclaration: string;\r\n    protected _uniformList: string[];\r\n    protected _samplerList: string[];\r\n    protected _uboList: string[];\r\n\r\n    /**\r\n     * Creates a new instance of the plugin manager\r\n     * @param material material that this manager will manage the plugins for\r\n     */\r\n    constructor(material: Material) {\r\n        this._material = material;\r\n        this._scene = material.getScene();\r\n        this._engine = this._scene.getEngine();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _addPlugin(plugin: MaterialPluginBase): void {\r\n        for (let i = 0; i < this._plugins.length; ++i) {\r\n            if (this._plugins[i].name === plugin.name) {\r\n                throw `Plugin \"${plugin.name}\" already added to the material \"${this._material.name}\"!`;\r\n            }\r\n        }\r\n\r\n        if (this._material._uniformBufferLayoutBuilt) {\r\n            throw `The plugin \"${plugin.name}\" can't be added to the material \"${this._material.name}\" because this material has already been used for rendering! Please add plugins to materials before any rendering with this material occurs.`;\r\n        }\r\n\r\n        const pluginClassName = plugin.getClassName();\r\n        if (!MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]) {\r\n            MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName] = \"MATERIALPLUGIN_\" + ++MaterialPluginManager._MaterialPluginCounter;\r\n        }\r\n\r\n        this._material._callbackPluginEventGeneric = this._handlePluginEvent.bind(this);\r\n\r\n        this._plugins.push(plugin);\r\n        this._plugins.sort((a, b) => a.priority - b.priority);\r\n\r\n        this._codeInjectionPoints = {};\r\n\r\n        const defineNamesFromPlugins: { [name: string]: { type: string; default: any } } = {};\r\n        defineNamesFromPlugins[MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]] = {\r\n            type: \"boolean\",\r\n            default: true,\r\n        };\r\n\r\n        for (const plugin of this._plugins) {\r\n            plugin.collectDefines(defineNamesFromPlugins);\r\n            this._collectPointNames(\"vertex\", plugin.getCustomCode(\"vertex\"));\r\n            this._collectPointNames(\"fragment\", plugin.getCustomCode(\"fragment\"));\r\n        }\r\n\r\n        this._defineNamesFromPlugins = defineNamesFromPlugins;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _activatePlugin(plugin: MaterialPluginBase): void {\r\n        if (this._activePlugins.indexOf(plugin) === -1) {\r\n            this._activePlugins.push(plugin);\r\n            this._activePlugins.sort((a, b) => a.priority - b.priority);\r\n\r\n            this._material._callbackPluginEventIsReadyForSubMesh = this._handlePluginEventIsReadyForSubMesh.bind(this);\r\n            this._material._callbackPluginEventPrepareDefinesBeforeAttributes = this._handlePluginEventPrepareDefinesBeforeAttributes.bind(this);\r\n            this._material._callbackPluginEventPrepareDefines = this._handlePluginEventPrepareDefines.bind(this);\r\n            this._material._callbackPluginEventBindForSubMesh = this._handlePluginEventBindForSubMesh.bind(this);\r\n\r\n            if (plugin.registerForExtraEvents) {\r\n                this._activePluginsForExtraEvents.push(plugin);\r\n                this._activePluginsForExtraEvents.sort((a, b) => a.priority - b.priority);\r\n                this._material._callbackPluginEventHasRenderTargetTextures = this._handlePluginEventHasRenderTargetTextures.bind(this);\r\n                this._material._callbackPluginEventFillRenderTargetTextures = this._handlePluginEventFillRenderTargetTextures.bind(this);\r\n                this._material._callbackPluginEventHardBindForSubMesh = this._handlePluginEventHardBindForSubMesh.bind(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a plugin from the list of plugins managed by this manager\r\n     * @param name name of the plugin\r\n     * @returns the plugin if found, else null\r\n     */\r\n    public getPlugin(name: string): Nullable<MaterialPluginBase> {\r\n        for (let i = 0; i < this._plugins.length; ++i) {\r\n            if (this._plugins[i].name === name) {\r\n                return this._plugins[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected _handlePluginEventIsReadyForSubMesh(eventData: MaterialPluginIsReadyForSubMesh): void {\r\n        let isReady = true;\r\n        for (const plugin of this._activePlugins) {\r\n            isReady = isReady && plugin.isReadyForSubMesh(eventData.defines, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n        eventData.isReadyForSubMesh = isReady;\r\n    }\r\n\r\n    protected _handlePluginEventPrepareDefinesBeforeAttributes(eventData: MaterialPluginPrepareDefines): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.prepareDefinesBeforeAttributes(eventData.defines, this._scene, eventData.mesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventPrepareDefines(eventData: MaterialPluginPrepareDefines): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.prepareDefines(eventData.defines, this._scene, eventData.mesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventHardBindForSubMesh(eventData: MaterialPluginHardBindForSubMesh): void {\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            plugin.hardBindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventBindForSubMesh(eventData: MaterialPluginBindForSubMesh): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.bindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventHasRenderTargetTextures(eventData: MaterialPluginHasRenderTargetTextures): void {\r\n        let hasRenderTargetTextures = false;\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            hasRenderTargetTextures = plugin.hasRenderTargetTextures();\r\n            if (hasRenderTargetTextures) {\r\n                break;\r\n            }\r\n        }\r\n        eventData.hasRenderTargetTextures = hasRenderTargetTextures;\r\n    }\r\n\r\n    protected _handlePluginEventFillRenderTargetTextures(eventData: MaterialPluginFillRenderTargetTextures): void {\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            plugin.fillRenderTargetTextures(eventData.renderTargets);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEvent(\r\n        id: number,\r\n        info:\r\n            | MaterialPluginGetActiveTextures\r\n            | MaterialPluginGetAnimatables\r\n            | MaterialPluginHasTexture\r\n            | MaterialPluginDisposed\r\n            | MaterialPluginGetDefineNames\r\n            | MaterialPluginPrepareEffect\r\n            | MaterialPluginPrepareUniformBuffer\r\n    ): void {\r\n        switch (id) {\r\n            case MaterialPluginEvent.GetActiveTextures: {\r\n                const eventData = info as MaterialPluginGetActiveTextures;\r\n                for (const plugin of this._activePlugins) {\r\n                    plugin.getActiveTextures(eventData.activeTextures);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.GetAnimatables: {\r\n                const eventData = info as MaterialPluginGetAnimatables;\r\n                for (const plugin of this._activePlugins) {\r\n                    plugin.getAnimatables(eventData.animatables);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.HasTexture: {\r\n                const eventData = info as MaterialPluginHasTexture;\r\n                let hasTexture = false;\r\n                for (const plugin of this._activePlugins) {\r\n                    hasTexture = plugin.hasTexture(eventData.texture);\r\n                    if (hasTexture) {\r\n                        break;\r\n                    }\r\n                }\r\n                eventData.hasTexture = hasTexture;\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.Disposed: {\r\n                const eventData = info as MaterialPluginDisposed;\r\n                for (const plugin of this._plugins) {\r\n                    plugin.dispose(eventData.forceDisposeTextures);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.GetDefineNames: {\r\n                const eventData = info as MaterialPluginGetDefineNames;\r\n                eventData.defineNames = this._defineNamesFromPlugins;\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.PrepareEffect: {\r\n                const eventData = info as MaterialPluginPrepareEffect;\r\n                for (const plugin of this._activePlugins) {\r\n                    eventData.fallbackRank = plugin.addFallbacks(eventData.defines, eventData.fallbacks, eventData.fallbackRank);\r\n                    plugin.getAttributes(eventData.attributes, this._scene, eventData.mesh);\r\n                }\r\n                if (this._uniformList.length > 0) {\r\n                    eventData.uniforms.push(...this._uniformList);\r\n                }\r\n                if (this._samplerList.length > 0) {\r\n                    eventData.samplers.push(...this._samplerList);\r\n                }\r\n                if (this._uboList.length > 0) {\r\n                    eventData.uniformBuffersNames.push(...this._uboList);\r\n                }\r\n                eventData.customCode = this._injectCustomCode(eventData.customCode);\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.PrepareUniformBuffer: {\r\n                const eventData = info as MaterialPluginPrepareUniformBuffer;\r\n                this._uboDeclaration = \"\";\r\n                this._vertexDeclaration = \"\";\r\n                this._fragmentDeclaration = \"\";\r\n                this._uniformList = [];\r\n                this._samplerList = [];\r\n                this._uboList = [];\r\n                for (const plugin of this._plugins) {\r\n                    const uniforms = plugin.getUniforms();\r\n                    if (uniforms) {\r\n                        if (uniforms.ubo) {\r\n                            for (const uniform of uniforms.ubo) {\r\n                                eventData.ubo.addUniform(uniform.name, uniform.size);\r\n                                this._uboDeclaration += `${uniform.type} ${uniform.name};\\r\\n`;\r\n                                this._uniformList.push(uniform.name);\r\n                            }\r\n                        }\r\n                        if (uniforms.vertex) {\r\n                            this._vertexDeclaration += uniforms.vertex + \"\\r\\n\";\r\n                        }\r\n                        if (uniforms.fragment) {\r\n                            this._fragmentDeclaration += uniforms.fragment + \"\\r\\n\";\r\n                        }\r\n                    }\r\n                    plugin.getSamplers(this._samplerList);\r\n                    plugin.getUniformBuffersNames(this._uboList);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _collectPointNames(shaderType: string, customCode: Nullable<{ [pointName: string]: string }> | undefined): void {\r\n        if (!customCode) {\r\n            return;\r\n        }\r\n        for (const pointName in customCode) {\r\n            if (!this._codeInjectionPoints[shaderType]) {\r\n                this._codeInjectionPoints[shaderType] = {};\r\n            }\r\n            this._codeInjectionPoints[shaderType][pointName] = true;\r\n        }\r\n    }\r\n\r\n    protected _injectCustomCode(existingCallback?: (shaderType: string, code: string) => string): ShaderCustomProcessingFunction {\r\n        return (shaderType: string, code: string) => {\r\n            if (existingCallback) {\r\n                code = existingCallback(shaderType, code);\r\n            }\r\n            if (this._uboDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_UBO_DECLARATION\", this._uboDeclaration);\r\n            }\r\n            if (this._vertexDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_VERTEX_DECLARATION\", this._vertexDeclaration);\r\n            }\r\n            if (this._fragmentDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_FRAGMENT_DECLARATION\", this._fragmentDeclaration);\r\n            }\r\n            const points = this._codeInjectionPoints?.[shaderType];\r\n            if (!points) {\r\n                return code;\r\n            }\r\n            for (const pointName in points) {\r\n                let injectedCode = \"\";\r\n                for (const plugin of this._activePlugins) {\r\n                    const customCode = plugin.getCustomCode(shaderType);\r\n                    if (customCode?.[pointName]) {\r\n                        injectedCode += customCode[pointName] + \"\\r\\n\";\r\n                    }\r\n                }\r\n                if (injectedCode.length > 0) {\r\n                    if (pointName.charAt(0) === \"!\") {\r\n                        // pointName is a regular expression\r\n                        const rx = new RegExp(pointName.substring(1), \"g\");\r\n                        let match = rx.exec(code);\r\n                        while (match !== null) {\r\n                            let newCode = injectedCode;\r\n                            for (let i = 0; i < match.length; ++i) {\r\n                                newCode = newCode.replace(\"$\" + i, match[i]);\r\n                            }\r\n                            code = code.replace(match[0], newCode);\r\n                            match = rx.exec(code);\r\n                        }\r\n                    } else {\r\n                        const fullPointName = \"#define \" + pointName;\r\n                        code = code.replace(fullPointName, \"\\r\\n\" + injectedCode + \"\\r\\n\" + fullPointName);\r\n                    }\r\n                }\r\n            }\r\n            return code;\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Type for plugin material factories.\r\n */\r\nexport type PluginMaterialFactory = (material: Material) => Nullable<MaterialPluginBase>;\r\n\r\nconst plugins: Array<[string, PluginMaterialFactory]> = [];\r\nlet inited = false;\r\n\r\n/**\r\n * Registers a new material plugin through a factory, or updates it. This makes the plugin available to all materials instantiated after its registration.\r\n * @param pluginName The plugin name\r\n * @param factory The factory function which allows to create the plugin\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function RegisterMaterialPlugin(pluginName: string, factory: PluginMaterialFactory): void {\r\n    if (!inited) {\r\n        Material.OnEventObservable.add((material: Material) => {\r\n            for (const [, factory] of plugins) {\r\n                factory(material);\r\n            }\r\n        }, MaterialPluginEvent.Created);\r\n        inited = true;\r\n    }\r\n    const existing = plugins.filter(([name, _factory]) => name === pluginName);\r\n    if (existing.length > 0) {\r\n        existing[0][1] = factory;\r\n    } else {\r\n        plugins.push([pluginName, factory]);\r\n    }\r\n}\r\n\r\n/**\r\n * Removes a material plugin from the list of global plugins.\r\n * @param pluginName The plugin name\r\n * @returns true if the plugin has been removed, else false\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function UnregisterMaterialPlugin(pluginName: string): boolean {\r\n    for (let i = 0; i < plugins.length; ++i) {\r\n        if (plugins[i][0] === pluginName) {\r\n            plugins.splice(i, 1);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Clear the list of global material plugins\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function UnregisterAllMaterialPlugins(): void {\r\n    plugins.length = 0;\r\n}\r\n","import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * A multi-material is used to apply different materials to different parts of the same object without the need of\r\n * separate meshes. This can be use to improve performances.\r\n * @see https://doc.babylonjs.com/how_to/multi_materials\r\n */\r\nexport class MultiMaterial extends Material {\r\n    private _subMaterials: Nullable<Material>[];\r\n    /** @internal */\r\n    public _waitingSubMaterialsUniqueIds: string[] = [];\r\n\r\n    /**\r\n     * Gets or Sets the list of Materials used within the multi material.\r\n     * They need to be ordered according to the submeshes order in the associated mesh\r\n     */\r\n    public get subMaterials(): Nullable<Material>[] {\r\n        return this._subMaterials;\r\n    }\r\n\r\n    public set subMaterials(value: Nullable<Material>[]) {\r\n        this._subMaterials = value;\r\n        this._hookArray(value);\r\n    }\r\n\r\n    /**\r\n     * Function used to align with Node.getChildren()\r\n     * @returns the list of Materials used within the multi material\r\n     */\r\n    public getChildren(): Nullable<Material>[] {\r\n        return this.subMaterials;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Multi Material\r\n     * A multi-material is used to apply different materials to different parts of the same object without the need of\r\n     * separate meshes. This can be use to improve performances.\r\n     * @see https://doc.babylonjs.com/how_to/multi_materials\r\n     * @param name Define the name in the scene\r\n     * @param scene Define the scene the material belongs to\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene, true);\r\n\r\n        this.getScene().multiMaterials.push(this);\r\n\r\n        this.subMaterials = new Array<Material>();\r\n\r\n        this._storeEffectOnSubMeshes = true; // multimaterial is considered like a push material\r\n    }\r\n\r\n    private _hookArray(array: Nullable<Material>[]): void {\r\n        const oldPush = array.push;\r\n        array.push = (...items: Nullable<Material>[]) => {\r\n            const result = oldPush.apply(array, items);\r\n\r\n            this._markAllSubMeshesAsTexturesDirty();\r\n\r\n            return result;\r\n        };\r\n\r\n        const oldSplice = array.splice;\r\n        array.splice = (index: number, deleteCount?: number) => {\r\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\r\n\r\n            this._markAllSubMeshesAsTexturesDirty();\r\n\r\n            return deleted;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get one of the submaterial by its index in the submaterials array\r\n     * @param index The index to look the sub material at\r\n     * @returns The Material if the index has been defined\r\n     */\r\n    public getSubMaterial(index: number): Nullable<Material> {\r\n        if (index < 0 || index >= this.subMaterials.length) {\r\n            return this.getScene().defaultMaterial;\r\n        }\r\n\r\n        return this.subMaterials[index];\r\n    }\r\n\r\n    /**\r\n     * Get the list of active textures for the whole sub materials list.\r\n     * @returns All the textures that will be used during the rendering\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        return super.getActiveTextures().concat(\r\n            ...this.subMaterials.map((subMaterial) => {\r\n                if (subMaterial) {\r\n                    return subMaterial.getActiveTextures();\r\n                } else {\r\n                    return [];\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies if any sub-materials of this multi-material use a given texture.\r\n     * @param texture Defines the texture to check against this multi-material's sub-materials.\r\n     * @returns A boolean specifying if any sub-material of this multi-material uses the texture.\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        for (let i = 0; i < this.subMaterials.length; i++) {\r\n            if (this.subMaterials[i]?.hasTexture(texture)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"MultiMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"MultiMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Checks if the material is ready to render the requested sub mesh\r\n     * @param mesh Define the mesh the submesh belongs to\r\n     * @param subMesh Define the sub mesh to look readiness for\r\n     * @param useInstances Define whether or not the material is used with instances\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        for (let index = 0; index < this.subMaterials.length; index++) {\r\n            const subMaterial = this.subMaterials[index];\r\n            if (subMaterial) {\r\n                if (subMaterial._storeEffectOnSubMeshes) {\r\n                    if (!subMaterial.isReadyForSubMesh(mesh, subMesh, useInstances)) {\r\n                        return false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!subMaterial.isReady(mesh)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones the current material and its related sub materials\r\n     * @param name Define the name of the newly cloned material\r\n     * @param cloneChildren Define if submaterial will be cloned or shared with the parent instance\r\n     * @returns the cloned material\r\n     */\r\n    public clone(name: string, cloneChildren?: boolean): MultiMaterial {\r\n        const newMultiMaterial = new MultiMaterial(name, this.getScene());\r\n\r\n        for (let index = 0; index < this.subMaterials.length; index++) {\r\n            let subMaterial: Nullable<Material> = null;\r\n            const current = this.subMaterials[index];\r\n            if (cloneChildren && current) {\r\n                subMaterial = current.clone(name + \"-\" + current.name);\r\n            } else {\r\n                subMaterial = this.subMaterials[index];\r\n            }\r\n            newMultiMaterial.subMaterials.push(subMaterial);\r\n        }\r\n\r\n        return newMultiMaterial;\r\n    }\r\n\r\n    /**\r\n     * Serializes the materials into a JSON representation.\r\n     * @returns the JSON representation\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        if (Tags) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n        serializationObject.materialsUniqueIds = [];\r\n        serializationObject.materials = [];\r\n\r\n        for (let matIndex = 0; matIndex < this.subMaterials.length; matIndex++) {\r\n            const subMat = this.subMaterials[matIndex];\r\n\r\n            if (subMat) {\r\n                serializationObject.materialsUniqueIds.push(subMat.uniqueId);\r\n                serializationObject.materials.push(subMat.id);\r\n            } else {\r\n                serializationObject.materialsUniqueIds.push(null);\r\n                serializationObject.materials.push(null);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Dispose the material and release its associated resources\r\n     * @param forceDisposeEffect Define if we want to force disposing the associated effect (if false the shader is not released and could be reuse later on)\r\n     * @param forceDisposeTextures Define if we want to force disposing the associated textures (if false, they will not be disposed and can still be use elsewhere in the app)\r\n     * @param forceDisposeChildren Define if we want to force disposing the associated submaterials (if false, they will not be disposed and can still be use elsewhere in the app)\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, forceDisposeChildren?: boolean): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        if (forceDisposeChildren) {\r\n            for (let index = 0; index < this.subMaterials.length; index++) {\r\n                const subMaterial = this.subMaterials[index];\r\n                if (subMaterial) {\r\n                    subMaterial.dispose(forceDisposeEffect, forceDisposeTextures);\r\n                }\r\n            }\r\n        }\r\n\r\n        const index = scene.multiMaterials.indexOf(this);\r\n        if (index >= 0) {\r\n            scene.multiMaterials.splice(index, 1);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n\r\n    /**\r\n     * Creates a MultiMaterial from parsed MultiMaterial data.\r\n     * @param parsedMultiMaterial defines parsed MultiMaterial data.\r\n     * @param scene defines the hosting scene\r\n     * @returns a new MultiMaterial\r\n     */\r\n    public static ParseMultiMaterial(parsedMultiMaterial: any, scene: Scene): MultiMaterial {\r\n        const multiMaterial = new MultiMaterial(parsedMultiMaterial.name, scene);\r\n\r\n        multiMaterial.id = parsedMultiMaterial.id;\r\n        multiMaterial._loadedUniqueId = parsedMultiMaterial.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(multiMaterial, parsedMultiMaterial.tags);\r\n        }\r\n\r\n        if (parsedMultiMaterial.materialsUniqueIds) {\r\n            multiMaterial._waitingSubMaterialsUniqueIds = parsedMultiMaterial.materialsUniqueIds;\r\n        } else {\r\n            parsedMultiMaterial.materials.forEach((subMatId: string) => multiMaterial.subMaterials.push(scene.getLastMaterialById(subMatId)));\r\n        }\r\n\r\n        return multiMaterial;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MultiMaterial\", MultiMaterial);\r\n","import type { Matrix } from \"../Maths/math.vector\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Configuration needed for prepass-capable materials\r\n */\r\nexport class PrePassConfiguration {\r\n    /**\r\n     * Previous world matrices of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousWorldMatrices: { [index: number]: Matrix } = {};\r\n    /**\r\n     * Previous view project matrix\r\n     * Used for computing velocity\r\n     */\r\n    public previousViewProjection: Matrix;\r\n    /**\r\n     * Current view projection matrix\r\n     * Used for computing velocity\r\n     */\r\n    public currentViewProjection: Matrix;\r\n    /**\r\n     * Previous bones of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousBones: { [index: number]: Float32Array } = {};\r\n\r\n    private _lastUpdateFrameId: number;\r\n\r\n    /**\r\n     * Add the required uniforms to the current list.\r\n     * @param uniforms defines the current uniform list.\r\n     */\r\n    public static AddUniforms(uniforms: string[]): void {\r\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\r\n    }\r\n\r\n    /**\r\n     * Add the required samplers to the current list.\r\n     * @param samplers defines the current sampler list.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static AddSamplers(samplers: string[]): void {\r\n        // pass\r\n    }\r\n\r\n    /**\r\n     * Binds the material data.\r\n     * @param effect defines the effect to update\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param mesh The mesh\r\n     * @param world World matrix of this mesh\r\n     * @param isFrozen Is the material frozen\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bindForSubMesh(effect: Effect, scene: Scene, mesh: Mesh, world: Matrix, isFrozen: boolean): void {\r\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && scene.prePassRenderer.currentRTisSceneRT) {\r\n            if (scene.prePassRenderer.getIndex(Constants.PREPASS_VELOCITY_TEXTURE_TYPE) !== -1) {\r\n                if (!this.previousWorldMatrices[mesh.uniqueId]) {\r\n                    this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n                }\r\n\r\n                if (!this.previousViewProjection) {\r\n                    this.previousViewProjection = scene.getTransformMatrix().clone();\r\n                    this.currentViewProjection = scene.getTransformMatrix().clone();\r\n                }\r\n\r\n                const engine = scene.getEngine();\r\n\r\n                if (this.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\r\n                    // First update of the prepass configuration for this rendering pass\r\n                    this._lastUpdateFrameId = engine.frameId;\r\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\r\n                    this.currentViewProjection.copyFrom(scene.getTransformMatrix());\r\n                } else if (this._lastUpdateFrameId !== engine.frameId) {\r\n                    // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\r\n                    this._lastUpdateFrameId = engine.frameId;\r\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\r\n                }\r\n\r\n                effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\r\n                effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\r\n\r\n                this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n            }\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { Material } from \"../Materials/material\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\n/**\r\n * Base class of materials working in push mode in babylon JS\r\n * @internal\r\n */\r\nexport class PushMaterial extends Material {\r\n    protected _activeEffect: Effect;\r\n\r\n    protected _normalMatrix: Matrix = new Matrix();\r\n\r\n    constructor(name: string, scene?: Scene, storeEffectOnSubMeshes = true) {\r\n        super(name, scene);\r\n        this._storeEffectOnSubMeshes = storeEffectOnSubMeshes;\r\n    }\r\n\r\n    public getEffect(): Effect {\r\n        return this._storeEffectOnSubMeshes ? this._activeEffect : super.getEffect()!;\r\n    }\r\n\r\n    public isReady(mesh?: AbstractMesh, useInstances?: boolean): boolean {\r\n        if (!mesh) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._storeEffectOnSubMeshes) {\r\n            return true;\r\n        }\r\n\r\n        if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);\r\n    }\r\n\r\n    protected _isReadyForSubMesh(subMesh: SubMesh) {\r\n        const defines = subMesh.materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect && defines) {\r\n            if (defines._renderId === this.getScene().getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Binds the given world matrix to the active effect\r\n     *\r\n     * @param world the matrix to bind\r\n     */\r\n    public bindOnlyWorldMatrix(world: Matrix): void {\r\n        this._activeEffect.setMatrix(\"world\", world);\r\n    }\r\n\r\n    /**\r\n     * Binds the given normal matrix to the active effect\r\n     *\r\n     * @param normalMatrix the matrix to bind\r\n     */\r\n    public bindOnlyNormalMatrix(normalMatrix: Matrix): void {\r\n        this._activeEffect.setMatrix(\"normalMatrix\", normalMatrix);\r\n    }\r\n\r\n    public bind(world: Matrix, mesh?: Mesh): void {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);\r\n    }\r\n\r\n    protected _afterBind(mesh?: Mesh, effect: Nullable<Effect> = null): void {\r\n        super._afterBind(mesh, effect);\r\n        this.getScene()._cachedEffect = effect;\r\n    }\r\n\r\n    protected _mustRebind(scene: Scene, effect: Effect, visibility: number = 1) {\r\n        return scene.isCachedMaterialInvalid(this, effect, visibility);\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"defaultFragmentDeclaration\";\nconst shader = `uniform vec4 vEyePosition;\runiform vec4 vDiffuseColor;\r#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\r#endif\nuniform vec3 vEmissiveColor;\runiform vec3 vAmbientColor;\runiform float visibility;\r#ifdef DIFFUSE\nuniform vec2 vDiffuseInfos;\r#endif\n#ifdef AMBIENT\nuniform vec2 vAmbientInfos;\r#endif\n#ifdef OPACITY \nuniform vec2 vOpacityInfos;\r#endif\n#ifdef EMISSIVE\nuniform vec2 vEmissiveInfos;\r#endif\n#ifdef LIGHTMAP\nuniform vec2 vLightmapInfos;\r#endif\n#ifdef BUMP\nuniform vec3 vBumpInfos;\runiform vec2 vTangentSpaceParams;\r#endif\n#ifdef ALPHATEST\nuniform float alphaCutOff;\r#endif\n#if defined(REFLECTIONMAP_SPHERICAL) || defined(REFLECTIONMAP_PROJECTION) || defined(REFRACTION) || defined(PREPASS)\nuniform mat4 view;\r#endif\n#ifdef REFRACTION\nuniform vec4 vRefractionInfos;\r#ifndef REFRACTIONMAP_3D\nuniform mat4 refractionMatrix;\r#endif\n#ifdef REFRACTIONFRESNEL\nuniform vec4 refractionLeftColor;\runiform vec4 refractionRightColor;\r#endif\n#if defined(USE_LOCAL_REFRACTIONMAP_CUBIC) && defined(REFRACTIONMAP_3D)\nuniform vec3 vRefractionPosition;\runiform vec3 vRefractionSize; \r#endif\n#endif\n#if defined(SPECULAR) && defined(SPECULARTERM)\nuniform vec2 vSpecularInfos;\r#endif\n#ifdef DIFFUSEFRESNEL\nuniform vec4 diffuseLeftColor;\runiform vec4 diffuseRightColor;\r#endif\n#ifdef OPACITYFRESNEL\nuniform vec4 opacityParts;\r#endif\n#ifdef EMISSIVEFRESNEL\nuniform vec4 emissiveLeftColor;\runiform vec4 emissiveRightColor;\r#endif\n#ifdef REFLECTION\nuniform vec2 vReflectionInfos;\r#if defined(REFLECTIONMAP_PLANAR) || defined(REFLECTIONMAP_CUBIC) || defined(REFLECTIONMAP_PROJECTION) || defined(REFLECTIONMAP_EQUIRECTANGULAR) || defined(REFLECTIONMAP_SPHERICAL) || defined(REFLECTIONMAP_SKYBOX)\nuniform mat4 reflectionMatrix;\r#endif\n#ifndef REFLECTIONMAP_SKYBOX\n#if defined(USE_LOCAL_REFLECTIONMAP_CUBIC) && defined(REFLECTIONMAP_CUBIC)\nuniform vec3 vReflectionPosition;\runiform vec3 vReflectionSize; \r#endif\n#endif\n#ifdef REFLECTIONFRESNEL\nuniform vec4 reflectionLeftColor;\runiform vec4 reflectionRightColor;\r#endif\n#endif\n#ifdef DETAIL\nuniform vec4 vDetailInfos;\r#endif\n#define ADDITIONAL_FRAGMENT_DECLARATION\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const defaultFragmentDeclaration = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/defaultFragmentDeclaration\";\nimport \"./ShadersInclude/defaultUboDeclaration\";\nimport \"./ShadersInclude/prePassDeclaration\";\nimport \"./ShadersInclude/oitDeclaration\";\nimport \"./ShadersInclude/mainUVVaryingDeclaration\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/lightFragmentDeclaration\";\nimport \"./ShadersInclude/lightUboDeclaration\";\nimport \"./ShadersInclude/lightsFragmentFunctions\";\nimport \"./ShadersInclude/shadowsFragmentFunctions\";\nimport \"./ShadersInclude/samplerFragmentDeclaration\";\nimport \"./ShadersInclude/fresnelFunction\";\nimport \"./ShadersInclude/reflectionFunction\";\nimport \"./ShadersInclude/imageProcessingDeclaration\";\nimport \"./ShadersInclude/imageProcessingFunctions\";\nimport \"./ShadersInclude/bumpFragmentMainFunctions\";\nimport \"./ShadersInclude/bumpFragmentFunctions\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"./ShadersInclude/logDepthDeclaration\";\nimport \"./ShadersInclude/fogFragmentDeclaration\";\nimport \"./ShadersInclude/clipPlaneFragment\";\nimport \"./ShadersInclude/bumpFragment\";\nimport \"./ShadersInclude/depthPrePass\";\nimport \"./ShadersInclude/lightFragment\";\nimport \"./ShadersInclude/logDepthFragment\";\nimport \"./ShadersInclude/fogFragment\";\nimport \"./ShadersInclude/oitFragment\";\n\nconst name = \"defaultPixelShader\";\nconst shader = `#include<__decl__defaultFragment>\n#if defined(BUMP) || !defined(NORMAL)\n#extension GL_OES_standard_derivatives : enable\n#endif\n#include<prePassDeclaration>[SCENE_MRT_COUNT]\n#include<oitDeclaration>\n#define CUSTOM_FRAGMENT_BEGIN\n#ifdef LOGARITHMICDEPTH\n#extension GL_EXT_frag_depth : enable\n#endif\n#define RECIPROCAL_PI2 0.15915494\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nvarying vec4 vColor;\r#endif\n#include<mainUVVaryingDeclaration>[1..7]\n#include<helperFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<samplerFragmentDeclaration>(_DEFINENAME_,DIFFUSE,_VARYINGNAME_,Diffuse,_SAMPLERNAME_,diffuse)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,AMBIENT,_VARYINGNAME_,Ambient,_SAMPLERNAME_,ambient)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,OPACITY,_VARYINGNAME_,Opacity,_SAMPLERNAME_,opacity)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,EMISSIVE,_VARYINGNAME_,Emissive,_SAMPLERNAME_,emissive)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,LIGHTMAP,_VARYINGNAME_,Lightmap,_SAMPLERNAME_,lightmap)\n#ifdef REFRACTION\n#ifdef REFRACTIONMAP_3D\nuniform samplerCube refractionCubeSampler;\r#else\nuniform sampler2D refraction2DSampler;\r#endif\n#endif\n#if defined(SPECULARTERM)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,SPECULAR,_VARYINGNAME_,Specular,_SAMPLERNAME_,specular)\n#endif\n#include<fresnelFunction>\n#ifdef REFLECTION\n#ifdef REFLECTIONMAP_3D\nuniform samplerCube reflectionCubeSampler;\r#else\nuniform sampler2D reflection2DSampler;\r#endif\n#ifdef REFLECTIONMAP_SKYBOX\nvarying vec3 vPositionUVW;\r#else\n#if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\nvarying vec3 vDirectionW;\r#endif\n#endif\n#include<reflectionFunction>\n#endif\n#include<imageProcessingDeclaration>\n#include<imageProcessingFunctions>\n#include<bumpFragmentMainFunctions>\n#include<bumpFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\rvec4 baseColor=vec4(1.,1.,1.,1.);\rvec3 diffuseColor=vDiffuseColor.rgb;\rfloat alpha=vDiffuseColor.a;\r#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\r#else\nvec3 normalW=normalize(-cross(dFdx(vPositionW),dFdy(vPositionW)));\r#endif\n#include<bumpFragment>\n#ifdef TWOSIDEDLIGHTING\nnormalW=gl_FrontFacing ? normalW : -normalW;\r#endif\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV+uvOffset);\r#if defined(ALPHATEST) && !defined(ALPHATEST_AFTERALLALPHACOMPUTATIONS)\nif (baseColor.a<alphaCutOff)\rdiscard;\r#endif\n#ifdef ALPHAFROMDIFFUSE\nalpha*=baseColor.a;\r#endif\n#define CUSTOM_FRAGMENT_UPDATE_ALPHA\nbaseColor.rgb*=vDiffuseInfos.y;\r#endif\n#include<depthPrePass>\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nbaseColor.rgb*=vColor.rgb;\r#endif\n#ifdef DETAIL\nbaseColor.rgb=baseColor.rgb*2.0*mix(0.5,detailColor.r,vDetailInfos.y);\r#endif\n#define CUSTOM_FRAGMENT_UPDATE_DIFFUSE\nvec3 baseAmbientColor=vec3(1.,1.,1.);\r#ifdef AMBIENT\nbaseAmbientColor=texture2D(ambientSampler,vAmbientUV+uvOffset).rgb*vAmbientInfos.y;\r#endif\n#define CUSTOM_FRAGMENT_BEFORE_LIGHTS\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\rvec3 specularColor=vSpecularColor.rgb;\r#ifdef SPECULAR\nvec4 specularMapColor=texture2D(specularSampler,vSpecularUV+uvOffset);\rspecularColor=specularMapColor.rgb;\r#ifdef GLOSSINESS\nglossiness=glossiness*specularMapColor.a;\r#endif\n#endif\n#else\nfloat glossiness=0.;\r#endif\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\r#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\r#endif\nfloat shadow=1.;\r#ifdef LIGHTMAP\nvec4 lightmapColor=texture2D(lightmapSampler,vLightmapUV+uvOffset);\r#ifdef RGBDLIGHTMAP\nlightmapColor.rgb=fromRGBD(lightmapColor);\r#endif\nlightmapColor.rgb*=vLightmapInfos.y;\r#endif\n#include<lightFragment>[0..maxSimultaneousLights]\nvec4 refractionColor=vec4(0.,0.,0.,1.);\r#ifdef REFRACTION\nvec3 refractionVector=normalize(refract(-viewDirectionW,normalW,vRefractionInfos.y));\r#ifdef REFRACTIONMAP_3D\n#ifdef USE_LOCAL_REFRACTIONMAP_CUBIC\nrefractionVector=parallaxCorrectNormal(vPositionW,refractionVector,vRefractionSize,vRefractionPosition);\r#endif\nrefractionVector.y=refractionVector.y*vRefractionInfos.w;\rif (dot(refractionVector,viewDirectionW)<1.0) {\rrefractionColor=textureCube(refractionCubeSampler,refractionVector);\r}\r#else\nvec3 vRefractionUVW=vec3(refractionMatrix*(view*vec4(vPositionW+refractionVector*vRefractionInfos.z,1.0)));\rvec2 refractionCoords=vRefractionUVW.xy/vRefractionUVW.z;\rrefractionCoords.y=1.0-refractionCoords.y;\rrefractionColor=texture2D(refraction2DSampler,refractionCoords);\r#endif\n#ifdef RGBDREFRACTION\nrefractionColor.rgb=fromRGBD(refractionColor);\r#endif\n#ifdef IS_REFRACTION_LINEAR\nrefractionColor.rgb=toGammaSpace(refractionColor.rgb);\r#endif\nrefractionColor.rgb*=vRefractionInfos.x;\r#endif\nvec4 reflectionColor=vec4(0.,0.,0.,1.);\r#ifdef REFLECTION\nvec3 vReflectionUVW=computeReflectionCoords(vec4(vPositionW,1.0),normalW);\r#ifdef REFLECTIONMAP_OPPOSITEZ\nvReflectionUVW.z*=-1.0;\r#endif\n#ifdef REFLECTIONMAP_3D\n#ifdef ROUGHNESS\nfloat bias=vReflectionInfos.y;\r#ifdef SPECULARTERM\n#ifdef SPECULAR\n#ifdef GLOSSINESS\nbias*=(1.0-specularMapColor.a);\r#endif\n#endif\n#endif\nreflectionColor=textureCube(reflectionCubeSampler,vReflectionUVW,bias);\r#else\nreflectionColor=textureCube(reflectionCubeSampler,vReflectionUVW);\r#endif\n#else\nvec2 coords=vReflectionUVW.xy;\r#ifdef REFLECTIONMAP_PROJECTION\ncoords/=vReflectionUVW.z;\r#endif\ncoords.y=1.0-coords.y;\rreflectionColor=texture2D(reflection2DSampler,coords);\r#endif\n#ifdef RGBDREFLECTION\nreflectionColor.rgb=fromRGBD(reflectionColor);\r#endif\n#ifdef IS_REFLECTION_LINEAR\nreflectionColor.rgb=toGammaSpace(reflectionColor.rgb);\r#endif\nreflectionColor.rgb*=vReflectionInfos.x;\r#ifdef REFLECTIONFRESNEL\nfloat reflectionFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,reflectionRightColor.a,reflectionLeftColor.a);\r#ifdef REFLECTIONFRESNELFROMSPECULAR\n#ifdef SPECULARTERM\nreflectionColor.rgb*=specularColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\r#else\nreflectionColor.rgb*=reflectionLeftColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\r#endif\n#else\nreflectionColor.rgb*=reflectionLeftColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\r#endif\n#endif\n#endif\n#ifdef REFRACTIONFRESNEL\nfloat refractionFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,refractionRightColor.a,refractionLeftColor.a);\rrefractionColor.rgb*=refractionLeftColor.rgb*(1.0-refractionFresnelTerm)+refractionFresnelTerm*refractionRightColor.rgb;\r#endif\n#ifdef OPACITY\nvec4 opacityMap=texture2D(opacitySampler,vOpacityUV+uvOffset);\r#ifdef OPACITYRGB\nopacityMap.rgb=opacityMap.rgb*vec3(0.3,0.59,0.11);\ralpha*=(opacityMap.x+opacityMap.y+opacityMap.z)* vOpacityInfos.y;\r#else\nalpha*=opacityMap.a*vOpacityInfos.y;\r#endif\n#endif\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\n#ifdef OPACITYFRESNEL\nfloat opacityFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,opacityParts.z,opacityParts.w);\ralpha+=opacityParts.x*(1.0-opacityFresnelTerm)+opacityFresnelTerm*opacityParts.y;\r#endif\n#ifdef ALPHATEST\n#ifdef ALPHATEST_AFTERALLALPHACOMPUTATIONS\nif (alpha<alphaCutOff)\rdiscard;\r#endif\n#ifndef ALPHABLEND\nalpha=1.0;\r#endif\n#endif\nvec3 emissiveColor=vEmissiveColor;\r#ifdef EMISSIVE\nemissiveColor+=texture2D(emissiveSampler,vEmissiveUV+uvOffset).rgb*vEmissiveInfos.y;\r#endif\n#ifdef EMISSIVEFRESNEL\nfloat emissiveFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,emissiveRightColor.a,emissiveLeftColor.a);\remissiveColor*=emissiveLeftColor.rgb*(1.0-emissiveFresnelTerm)+emissiveFresnelTerm*emissiveRightColor.rgb;\r#endif\n#ifdef DIFFUSEFRESNEL\nfloat diffuseFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,diffuseRightColor.a,diffuseLeftColor.a);\rdiffuseBase*=diffuseLeftColor.rgb*(1.0-diffuseFresnelTerm)+diffuseFresnelTerm*diffuseRightColor.rgb;\r#endif\n#ifdef EMISSIVEASILLUMINATION\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\r#else\n#ifdef LINKEMISSIVEWITHDIFFUSE\nvec3 finalDiffuse=clamp((diffuseBase+emissiveColor)*diffuseColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\r#else\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor+emissiveColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\r#endif\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\r#ifdef SPECULAROVERALPHA\nalpha=clamp(alpha+dot(finalSpecular,vec3(0.3,0.59,0.11)),0.,1.);\r#endif\n#else\nvec3 finalSpecular=vec3(0.0);\r#endif\n#ifdef REFLECTIONOVERALPHA\nalpha=clamp(alpha+dot(reflectionColor.rgb,vec3(0.3,0.59,0.11)),0.,1.);\r#endif\n#ifdef EMISSIVEASILLUMINATION\nvec4 color=vec4(clamp(finalDiffuse*baseAmbientColor+finalSpecular+reflectionColor.rgb+emissiveColor+refractionColor.rgb,0.0,1.0),alpha);\r#else\nvec4 color=vec4(finalDiffuse*baseAmbientColor+finalSpecular+reflectionColor.rgb+refractionColor.rgb,alpha);\r#endif\n#ifdef LIGHTMAP\n#ifndef LIGHTMAPEXCLUDED\n#ifdef USELIGHTMAPASSHADOWMAP\ncolor.rgb*=lightmapColor.rgb;\r#else\ncolor.rgb+=lightmapColor.rgb;\r#endif\n#endif\n#endif\n#define CUSTOM_FRAGMENT_BEFORE_FOG\ncolor.rgb=max(color.rgb,0.);\r#include<logDepthFragment>\n#include<fogFragment>\n#ifdef IMAGEPROCESSINGPOSTPROCESS\ncolor.rgb=toLinearSpace(color.rgb);\r#else\n#ifdef IMAGEPROCESSING\ncolor.rgb=toLinearSpace(color.rgb);\rcolor=applyImageProcessing(color);\r#endif\n#endif\ncolor.a*=visibility;\r#ifdef PREMULTIPLYALPHA\ncolor.rgb*=color.a;\r#endif\n#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\n#ifdef PREPASS\nfloat writeGeometryInfo=color.a>0.4 ? 1.0 : 0.0;\rgl_FragData[0]=color; \r#ifdef PREPASS_POSITION\ngl_FragData[PREPASS_POSITION_INDEX]=vec4(vPositionW,writeGeometryInfo);\r#endif\n#ifdef PREPASS_VELOCITY\nvec2 a=(vCurrentPosition.xy/vCurrentPosition.w)*0.5+0.5;\rvec2 b=(vPreviousPosition.xy/vPreviousPosition.w)*0.5+0.5;\rvec2 velocity=abs(a-b);\rvelocity=vec2(pow(velocity.x,1.0/3.0),pow(velocity.y,1.0/3.0))*sign(a-b)*0.5+0.5;\rgl_FragData[PREPASS_VELOCITY_INDEX]=vec4(velocity,0.0,writeGeometryInfo);\r#endif\n#ifdef PREPASS_IRRADIANCE\ngl_FragData[PREPASS_IRRADIANCE_INDEX]=vec4(0.0,0.0,0.0,writeGeometryInfo); \r#endif\n#ifdef PREPASS_DEPTH\ngl_FragData[PREPASS_DEPTH_INDEX]=vec4(vViewPos.z,0.0,0.0,writeGeometryInfo); \r#endif\n#ifdef PREPASS_NORMAL\ngl_FragData[PREPASS_NORMAL_INDEX]=vec4((view*vec4(normalW,0.0)).rgb,writeGeometryInfo); \r#endif\n#ifdef PREPASS_ALBEDO_SQRT\ngl_FragData[PREPASS_ALBEDO_SQRT_INDEX]=vec4(0.0,0.0,0.0,writeGeometryInfo); \r#endif\n#ifdef PREPASS_REFLECTIVITY\n#if defined(SPECULARTERM)\n#if defined(SPECULAR)\ngl_FragData[PREPASS_REFLECTIVITY_INDEX]=vec4(specularMapColor)*writeGeometryInfo; \r#else\ngl_FragData[PREPASS_REFLECTIVITY_INDEX]=vec4(specularColor,1.0)*writeGeometryInfo;\r#endif\n#else\ngl_FragData[PREPASS_REFLECTIVITY_INDEX]=vec4(0.0,0.0,0.0,1.0)*writeGeometryInfo;\r#endif\n#endif\n#endif\n#if !defined(PREPASS) || defined(WEBGL2)\ngl_FragColor=color;\r#endif\n#include<oitFragment>\n#if ORDER_INDEPENDENT_TRANSPARENCY\nif (fragDepth==nearestDepth) {\rfrontColor.rgb+=color.rgb*color.a*alphaMultiplier;\rfrontColor.a=1.0-alphaMultiplier*(1.0-color.a);\r} else {\rbackColor+=color;\r}\r#endif\n#define CUSTOM_FRAGMENT_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const defaultPixelShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsFresnelParameters, serializeAsTexture } from \"../Misc/decorators\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\n\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene, ScenePerformancePriority } from \"../scene\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { PrePassConfiguration } from \"./prePassConfiguration\";\r\n\r\nimport type { IImageProcessingConfigurationDefines } from \"./imageProcessingConfiguration\";\r\nimport { ImageProcessingConfiguration } from \"./imageProcessingConfiguration\";\r\nimport type { ColorCurves } from \"./colorCurves\";\r\nimport type { FresnelParameters } from \"./fresnelParameters\";\r\nimport type { ICustomShaderNameResolveOptions } from \"../Materials/material\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport { PushMaterial } from \"./pushMaterial\";\r\nimport { MaterialHelper } from \"./materialHelper\";\r\n\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { CubeTexture } from \"../Materials/Textures/cubeTexture\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\n\r\nimport \"../Shaders/default.fragment\";\r\nimport \"../Shaders/default.vertex\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EffectFallbacks } from \"./effectFallbacks\";\r\nimport type { Effect, IEffectCreationOptions } from \"./effect\";\r\nimport { DetailMapConfiguration } from \"./material.detailMapConfiguration\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/** @internal */\r\nexport class StandardMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public MAINUV1 = false;\r\n    public MAINUV2 = false;\r\n    public MAINUV3 = false;\r\n    public MAINUV4 = false;\r\n    public MAINUV5 = false;\r\n    public MAINUV6 = false;\r\n    public DIFFUSE = false;\r\n    public DIFFUSEDIRECTUV = 0;\r\n    public BAKED_VERTEX_ANIMATION_TEXTURE = false;\r\n    public AMBIENT = false;\r\n    public AMBIENTDIRECTUV = 0;\r\n    public OPACITY = false;\r\n    public OPACITYDIRECTUV = 0;\r\n    public OPACITYRGB = false;\r\n    public REFLECTION = false;\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n    public SPECULAR = false;\r\n    public SPECULARDIRECTUV = 0;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public PARALLAX = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    public SPECULAROVERALPHA = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHAFROMDIFFUSE = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public DIFFUSEFRESNEL = false;\r\n    public OPACITYFRESNEL = false;\r\n    public REFLECTIONFRESNEL = false;\r\n    public REFRACTIONFRESNEL = false;\r\n    public EMISSIVEFRESNEL = false;\r\n    public FRESNEL = false;\r\n    public NORMAL = false;\r\n    public TANGENT = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public UV3 = false;\r\n    public UV4 = false;\r\n    public UV5 = false;\r\n    public UV6 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public GLOSSINESS = false;\r\n    public ROUGHNESS = false;\r\n    public EMISSIVEASILLUMINATION = false;\r\n    public LINKEMISSIVEWITHDIFFUSE = false;\r\n    public REFLECTIONFRESNELFROMSPECULAR = false;\r\n    public LIGHTMAP = false;\r\n    public LIGHTMAPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    public USELIGHTMAPASSHADOWMAP = false;\r\n    public REFLECTIONMAP_3D = false;\r\n    public REFLECTIONMAP_SPHERICAL = false;\r\n    public REFLECTIONMAP_PLANAR = false;\r\n    public REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFRACTIONMAP_CUBIC = false;\r\n    public REFLECTIONMAP_PROJECTION = false;\r\n    public REFLECTIONMAP_SKYBOX = false;\r\n    public REFLECTIONMAP_EXPLICIT = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_OPPOSITEZ = false;\r\n    public INVERTCUBICMAP = false;\r\n    public LOGARITHMICDEPTH = false;\r\n    public REFRACTION = false;\r\n    public REFRACTIONMAP_3D = false;\r\n    public REFLECTIONOVERALPHA = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public SHADOWFLOAT = false;\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    public MORPHTARGETS_TEXTURE = false;\r\n    public NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\r\n    public PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\r\n    public ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\r\n    public ALPHABLEND = true;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO_SQRT = false;\r\n    public PREPASS_ALBEDO_SQRT_INDEX = -1;\r\n    public PREPASS_DEPTH = false;\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMAL = false;\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    public RGBDLIGHTMAP = false;\r\n    public RGBDREFLECTION = false;\r\n    public RGBDREFRACTION = false;\r\n\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public DITHER = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n    public MULTIVIEW = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\r\n\r\n    /**\r\n     * If the reflection texture on this material is in linear color space\r\n     * @internal\r\n     */\r\n    public IS_REFLECTION_LINEAR = false;\r\n    /**\r\n     * If the refraction texture on this material is in linear color space\r\n     * @internal\r\n     */\r\n    public IS_REFRACTION_LINEAR = false;\r\n    public EXPOSURE = false;\r\n\r\n    /**\r\n     * Initializes the Standard Material defines.\r\n     * @param externalProperties The external properties\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        super(externalProperties);\r\n        this.rebuild();\r\n    }\r\n\r\n    public setReflectionMode(modeToEnable: string) {\r\n        const modes = [\r\n            \"REFLECTIONMAP_CUBIC\",\r\n            \"REFLECTIONMAP_EXPLICIT\",\r\n            \"REFLECTIONMAP_PLANAR\",\r\n            \"REFLECTIONMAP_PROJECTION\",\r\n            \"REFLECTIONMAP_PROJECTION\",\r\n            \"REFLECTIONMAP_SKYBOX\",\r\n            \"REFLECTIONMAP_SPHERICAL\",\r\n            \"REFLECTIONMAP_EQUIRECTANGULAR\",\r\n            \"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\",\r\n            \"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\",\r\n        ];\r\n\r\n        for (const mode of modes) {\r\n            (<any>this)[mode] = mode === modeToEnable;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * This is the default material used in Babylon. It is the best trade off between quality\r\n * and performances.\r\n * @see https://doc.babylonjs.com/babylon101/materials\r\n */\r\nexport class StandardMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The basic texture of the material as viewed under a light.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public diffuseTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"ambientTexture\")\r\n    private _ambientTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature, it helps adding baked shadows into your material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public ambientTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the transparency of the material from a texture.\r\n     * The final alpha value can be read either from the red channel (if texture.getAlphaFromRGB is false)\r\n     * or from the luminance or the current texel (if texture.getAlphaFromRGB is true)\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"reflectionTexture\")\r\n    private _reflectionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the texture used to display the reflection.\r\n     * @see https://doc.babylonjs.com/how_to/reflect#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public reflectionTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"emissiveTexture\")\r\n    private _emissiveTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define texture of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"specularTexture\")\r\n    private _specularTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define how the color and intensity of the highlight given by the light in the material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public specularTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"bumpTexture\")\r\n    private _bumpTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Bump mapping is a technique to simulate bump and dents on a rendered surface.\r\n     * These are made by creating a normal map from an image. The means to do this can be found on the web, a search for 'normal map generator' will bring up free and paid for methods of doing this.\r\n     * @see https://doc.babylonjs.com/how_to/more_materials#bump-map\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"lightmapTexture\")\r\n    private _lightmapTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Complex lighting can be computationally expensive to compute at runtime.\r\n     * To save on computation, lightmaps may be used to store calculated lighting in a texture which will be applied to a given mesh.\r\n     * @see https://doc.babylonjs.com/babylon101/lights#lightmaps\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public lightmapTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"refractionTexture\")\r\n    private _refractionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the texture used to display the refraction.\r\n     * @see https://doc.babylonjs.com/how_to/reflect#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public refractionTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * The color of the material lit by the environmental background lighting.\r\n     * @see https://doc.babylonjs.com/babylon101/materials#ambient-color-example\r\n     */\r\n    @serializeAsColor3(\"ambient\")\r\n    public ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * The basic color of the material as viewed under a light.\r\n     */\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Define how the color and intensity of the highlight given by the light in the material.\r\n     */\r\n    @serializeAsColor3(\"specular\")\r\n    public specularColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Define the color of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @serializeAsColor3(\"emissive\")\r\n    public emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Defines how sharp are the highlights in the material.\r\n     * The bigger the value the sharper giving a more glossy feeling to the result.\r\n     * Reversely, the smaller the value the blurrier giving a more rough feeling to the result.\r\n     */\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"useAlphaFromDiffuseTexture\")\r\n    private _useAlphaFromDiffuseTexture = false;\r\n    /**\r\n     * Does the transparency come from the diffuse texture alpha channel.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public useAlphaFromDiffuseTexture: boolean;\r\n\r\n    @serialize(\"useEmissiveAsIllumination\")\r\n    private _useEmissiveAsIllumination = false;\r\n    /**\r\n     * If true, the emissive value is added into the end result, otherwise it is multiplied in.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useEmissiveAsIllumination: boolean;\r\n\r\n    @serialize(\"linkEmissiveWithDiffuse\")\r\n    private _linkEmissiveWithDiffuse = false;\r\n    /**\r\n     * If true, some kind of energy conservation will prevent the end result to be more than 1 by reducing\r\n     * the emissive level when the final color is close to one.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public linkEmissiveWithDiffuse: boolean;\r\n\r\n    @serialize(\"useSpecularOverAlpha\")\r\n    private _useSpecularOverAlpha = false;\r\n    /**\r\n     * Specifies that the material will keep the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useSpecularOverAlpha: boolean;\r\n\r\n    @serialize(\"useReflectionOverAlpha\")\r\n    private _useReflectionOverAlpha = false;\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useReflectionOverAlpha: boolean;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    /**\r\n     * Does lights from the scene impacts this material.\r\n     * It can be a nice trick for performance to disable lighting on a fully emissive material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"useObjectSpaceNormalMap\")\r\n    private _useObjectSpaceNormalMap = false;\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useObjectSpaceNormalMap: boolean;\r\n\r\n    @serialize(\"useParallax\")\r\n    private _useParallax = false;\r\n    /**\r\n     * Is parallax enabled or not.\r\n     * @see https://doc.babylonjs.com/how_to/using_parallax_mapping\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallax: boolean;\r\n\r\n    @serialize(\"useParallaxOcclusion\")\r\n    private _useParallaxOcclusion = false;\r\n    /**\r\n     * Is parallax occlusion enabled or not.\r\n     * If true, the outcome is way more realistic than traditional Parallax but you can expect a performance hit that worthes consideration.\r\n     * @see https://doc.babylonjs.com/how_to/using_parallax_mapping\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallaxOcclusion: boolean;\r\n\r\n    /**\r\n     * Apply a scaling factor that determine which \"depth\" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.\r\n     */\r\n    @serialize()\r\n    public parallaxScaleBias = 0.05;\r\n\r\n    @serialize(\"roughness\")\r\n    private _roughness = 0;\r\n    /**\r\n     * Helps to define how blurry the reflections should appears in the material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: number;\r\n\r\n    /**\r\n     * In case of refraction, define the value of the index of refraction.\r\n     * @see https://doc.babylonjs.com/how_to/reflect#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @serialize()\r\n    public indexOfRefraction = 0.98;\r\n\r\n    /**\r\n     * Invert the refraction texture alongside the y axis.\r\n     * It can be useful with procedural textures or probe for instance.\r\n     * @see https://doc.babylonjs.com/how_to/reflect#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @serialize()\r\n    public invertRefractionY = true;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @serialize()\r\n    public alphaCutOff = 0.4;\r\n\r\n    @serialize(\"useLightmapAsShadowmap\")\r\n    private _useLightmapAsShadowmap = false;\r\n    /**\r\n     * In case of light mapping, define whether the map contains light or shadow informations.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useLightmapAsShadowmap: boolean;\r\n\r\n    // Fresnel\r\n    @serializeAsFresnelParameters(\"diffuseFresnelParameters\")\r\n    private _diffuseFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the diffuse fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_fresnelparameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public diffuseFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"opacityFresnelParameters\")\r\n    private _opacityFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the opacity fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_fresnelparameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelAndMiscDirty\")\r\n    public opacityFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"reflectionFresnelParameters\")\r\n    private _reflectionFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the reflection fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_fresnelparameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public reflectionFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"refractionFresnelParameters\")\r\n    private _refractionFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the refraction fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_fresnelparameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public refractionFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"emissiveFresnelParameters\")\r\n    private _emissiveFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the emissive fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_fresnelparameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public emissiveFresnelParameters: FresnelParameters;\r\n\r\n    @serialize(\"useReflectionFresnelFromSpecular\")\r\n    private _useReflectionFresnelFromSpecular = false;\r\n    /**\r\n     * If true automatically deducts the fresnels values from the material specularity.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_fresnelparameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public useReflectionFresnelFromSpecular: boolean;\r\n\r\n    @serialize(\"useGlossinessFromSpecularMapAlpha\")\r\n    private _useGlossinessFromSpecularMapAlpha = false;\r\n    /**\r\n     * Defines if the glossiness/roughness of the material should be read from the specular map alpha channel\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useGlossinessFromSpecularMapAlpha: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    /**\r\n     * Defines the maximum number of lights that can be used in the material\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    @serialize(\"invertNormalMapX\")\r\n    private _invertNormalMapX = false;\r\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapX: boolean;\r\n\r\n    @serialize(\"invertNormalMapY\")\r\n    private _invertNormalMapY = false;\r\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapY: boolean;\r\n\r\n    @serialize(\"twoSidedLighting\")\r\n    private _twoSidedLighting = false;\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public twoSidedLighting: boolean;\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the standard Material.\r\n     */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: ImageProcessingConfiguration) {\r\n        this._attachImageProcessingConfiguration(value);\r\n\r\n        // Ensure the effect will be rebuilt.\r\n        this._markAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the Standard Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed\r\n        if (!configuration) {\r\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines additional PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public get isPrePassCapable(): boolean {\r\n        return !this.disableDepthWrite;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get cameraColorCurvesEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set cameraColorCurvesEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get cameraColorGradingEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public set cameraColorGradingEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether tonemapping is enabled or not.\r\n     */\r\n    public get cameraToneMappingEnabled(): boolean {\r\n        return this._imageProcessingConfiguration.toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether tonemapping is enabled or not\r\n     */\r\n    public set cameraToneMappingEnabled(value: boolean) {\r\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\r\n    public get cameraExposure(): number {\r\n        return this._imageProcessingConfiguration.exposure;\r\n    }\r\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\r\n    public set cameraExposure(value: number) {\r\n        this._imageProcessingConfiguration.exposure = value;\r\n    }\r\n\r\n    /**\r\n     * Gets The camera contrast used on this material.\r\n     */\r\n    public get cameraContrast(): number {\r\n        return this._imageProcessingConfiguration.contrast;\r\n    }\r\n\r\n    /**\r\n     * Sets The camera contrast used on this material.\r\n     */\r\n    public set cameraContrast(value: number) {\r\n        this._imageProcessingConfiguration.contrast = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the Color Grading 2D Lookup Texture.\r\n     */\r\n    public get cameraColorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._imageProcessingConfiguration.colorGradingTexture;\r\n    }\r\n    /**\r\n     * Sets the Color Grading 2D Lookup Texture.\r\n     */\r\n    public set cameraColorGradingTexture(value: Nullable<BaseTexture>) {\r\n        this._imageProcessingConfiguration.colorGradingTexture = value;\r\n    }\r\n\r\n    /**\r\n     * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\r\n    public get cameraColorCurves(): Nullable<ColorCurves> {\r\n        return this._imageProcessingConfiguration.colorCurves;\r\n    }\r\n    /**\r\n     * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\r\n    public set cameraColorCurves(value: Nullable<ColorCurves>) {\r\n        this._imageProcessingConfiguration.colorCurves = value;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap: DetailMapConfiguration;\r\n\r\n    protected _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n    protected _worldViewProjectionMatrix = Matrix.Zero();\r\n    protected _globalAmbientColor = new Color3(0, 0, 0);\r\n    protected _useLogarithmicDepth: boolean;\r\n    protected _cacheHasRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Instantiates a new standard material.\r\n     * This is the default material used in Babylon. It is the best trade off between quality\r\n     * and performances.\r\n     * @see https://doc.babylonjs.com/babylon101/materials\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belong to\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n\r\n        this.detailMap = new DetailMapConfiguration(this);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            }\r\n\r\n            if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._refractionTexture);\r\n            }\r\n\r\n            this._eventInfo.renderTargets = this._renderTargets;\r\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\r\n\r\n            return this._renderTargets;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return this._cacheHasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"StandardMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"StandardMaterial\";\r\n    }\r\n\r\n    /**\r\n     * In case the depth buffer does not allow enough depth precision for your scene (might be the case in large scenes)\r\n     * You can try switching to logarithmic depth.\r\n     * @see https://doc.babylonjs.com/how_to/using_logarithmic_depth_buffer\r\n     */\r\n    @serialize()\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\r\n\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            this.alpha < 1.0 ||\r\n            this._opacityTexture != null ||\r\n            this._shouldUseAlphaFromDiffuseTexture() ||\r\n            (this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._forceAlphaTest) {\r\n            return true;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the alpha value of the diffuse texture should be used for alpha blending.\r\n     */\r\n    protected _shouldUseAlphaFromDiffuseTexture(): boolean {\r\n        return this._diffuseTexture != null && this._diffuseTexture.hasAlpha && this._useAlphaFromDiffuseTexture && this._transparencyMode !== Material.MATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not there is a usable alpha channel for transparency.\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._diffuseTexture != null && this._diffuseTexture.hasAlpha) || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * Get the texture used for alpha test purpose.\r\n     * @returns the diffuse texture in case of the standard material.\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._diffuseTexture;\r\n    }\r\n\r\n    /**\r\n     * Get if the submesh is ready to be used and all its information available.\r\n     * Child classes can use it to update shaders\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances: boolean = false): boolean {\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        if (subMesh.effect && this.isFrozen) {\r\n            if (subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n            subMesh.materialDefines = new StandardMaterialDefines(this._eventInfo.defineNames);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const defines = <StandardMaterialDefines>subMesh.materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Multiview\r\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\r\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\r\n\r\n        // Order independant transparency\r\n        MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            this._eventInfo.hasRenderTargetTextures = false;\r\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\r\n            defines._needUVs = false;\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                defines[\"MAINUV\" + i] = false;\r\n            }\r\n            if (scene.texturesEnabled) {\r\n                defines.DIFFUSEDIRECTUV = 0;\r\n                defines.BUMPDIRECTUV = 0;\r\n                defines.AMBIENTDIRECTUV = 0;\r\n                defines.OPACITYDIRECTUV = 0;\r\n                defines.EMISSIVEDIRECTUV = 0;\r\n                defines.SPECULARDIRECTUV = 0;\r\n                defines.LIGHTMAPDIRECTUV = 0;\r\n\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\r\n                    }\r\n                } else {\r\n                    defines.DIFFUSE = false;\r\n                }\r\n\r\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\r\n                    }\r\n                } else {\r\n                    defines.AMBIENT = false;\r\n                }\r\n\r\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\r\n                        defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\r\n                    }\r\n                } else {\r\n                    defines.OPACITY = false;\r\n                }\r\n\r\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                    if (!this._reflectionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needNormals = true;\r\n                        defines.REFLECTION = true;\r\n\r\n                        defines.ROUGHNESS = this._roughness > 0;\r\n                        defines.REFLECTIONOVERALPHA = this._useReflectionOverAlpha;\r\n                        defines.INVERTCUBICMAP = this._reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE;\r\n                        defines.REFLECTIONMAP_3D = this._reflectionTexture.isCube;\r\n                        defines.REFLECTIONMAP_OPPOSITEZ =\r\n                            defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !this._reflectionTexture.invertZ : this._reflectionTexture.invertZ;\r\n                        defines.RGBDREFLECTION = this._reflectionTexture.isRGBD;\r\n\r\n                        switch (this._reflectionTexture.coordinatesMode) {\r\n                            case Texture.EXPLICIT_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EXPLICIT\");\r\n                                break;\r\n                            case Texture.PLANAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_PLANAR\");\r\n                                break;\r\n                            case Texture.PROJECTION_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_PROJECTION\");\r\n                                break;\r\n                            case Texture.SKYBOX_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_SKYBOX\");\r\n                                break;\r\n                            case Texture.SPHERICAL_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_SPHERICAL\");\r\n                                break;\r\n                            case Texture.EQUIRECTANGULAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR\");\r\n                                break;\r\n                            case Texture.FIXED_EQUIRECTANGULAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\");\r\n                                break;\r\n                            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\");\r\n                                break;\r\n                            case Texture.CUBIC_MODE:\r\n                            case Texture.INVCUBIC_MODE:\r\n                            default:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_CUBIC\");\r\n                                break;\r\n                        }\r\n\r\n                        defines.USE_LOCAL_REFLECTIONMAP_CUBIC = (<any>this._reflectionTexture).boundingBoxSize ? true : false;\r\n                    }\r\n                } else {\r\n                    defines.REFLECTION = false;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\r\n                }\r\n\r\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\r\n                    }\r\n                } else {\r\n                    defines.EMISSIVE = false;\r\n                }\r\n\r\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\r\n                        defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\r\n                        defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\r\n                    }\r\n                } else {\r\n                    defines.LIGHTMAP = false;\r\n                }\r\n\r\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                    if (!this._specularTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._specularTexture, defines, \"SPECULAR\");\r\n                        defines.GLOSSINESS = this._useGlossinessFromSpecularMapAlpha;\r\n                    }\r\n                } else {\r\n                    defines.SPECULAR = false;\r\n                }\r\n\r\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && StandardMaterial.BumpTextureEnabled) {\r\n                    // Bump texture can not be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\r\n\r\n                        defines.PARALLAX = this._useParallax;\r\n                        defines.PARALLAXOCCLUSION = this._useParallaxOcclusion;\r\n                    }\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                    defines.PARALLAX = false;\r\n                    defines.PARALLAXOCCLUSION = false;\r\n                }\r\n\r\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                    if (!this._refractionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.REFRACTION = true;\r\n\r\n                        defines.REFRACTIONMAP_3D = this._refractionTexture.isCube;\r\n                        defines.RGBDREFRACTION = this._refractionTexture.isRGBD;\r\n                        defines.USE_LOCAL_REFRACTIONMAP_CUBIC = (<any>this._refractionTexture).boundingBoxSize ? true : false;\r\n                    }\r\n                } else {\r\n                    defines.REFRACTION = false;\r\n                }\r\n\r\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\r\n            } else {\r\n                defines.DIFFUSE = false;\r\n                defines.AMBIENT = false;\r\n                defines.OPACITY = false;\r\n                defines.REFLECTION = false;\r\n                defines.EMISSIVE = false;\r\n                defines.LIGHTMAP = false;\r\n                defines.BUMP = false;\r\n                defines.REFRACTION = false;\r\n            }\r\n\r\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\r\n\r\n            defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\r\n\r\n            defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\r\n\r\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n\r\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\r\n\r\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        if (!this._eventInfo.isReadyForSubMesh) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n\r\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\r\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\r\n        }\r\n\r\n        if (defines._areFresnelDirty) {\r\n            if (StandardMaterial.FresnelEnabled) {\r\n                // Fresnel\r\n                if (\r\n                    this._diffuseFresnelParameters ||\r\n                    this._opacityFresnelParameters ||\r\n                    this._emissiveFresnelParameters ||\r\n                    this._refractionFresnelParameters ||\r\n                    this._reflectionFresnelParameters\r\n                ) {\r\n                    defines.DIFFUSEFRESNEL = this._diffuseFresnelParameters && this._diffuseFresnelParameters.isEnabled;\r\n\r\n                    defines.OPACITYFRESNEL = this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\r\n\r\n                    defines.REFLECTIONFRESNEL = this._reflectionFresnelParameters && this._reflectionFresnelParameters.isEnabled;\r\n\r\n                    defines.REFLECTIONFRESNELFROMSPECULAR = this._useReflectionFresnelFromSpecular;\r\n\r\n                    defines.REFRACTIONFRESNEL = this._refractionFresnelParameters && this._refractionFresnelParameters.isEnabled;\r\n\r\n                    defines.EMISSIVEFRESNEL = this._emissiveFresnelParameters && this._emissiveFresnelParameters.isEnabled;\r\n\r\n                    defines._needNormals = true;\r\n                    defines.FRESNEL = true;\r\n                }\r\n            } else {\r\n                defines.FRESNEL = false;\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(\r\n            mesh,\r\n            scene,\r\n            this._useLogarithmicDepth,\r\n            this.pointsCloud,\r\n            this.fogEnabled,\r\n            this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest,\r\n            defines\r\n        );\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\r\n\r\n        // External config\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true);\r\n\r\n        // External config\r\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            const lightDisposed = defines._areLightsDisposed;\r\n            defines.markAsProcessed();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.REFLECTION) {\r\n                fallbacks.addFallback(0, \"REFLECTION\");\r\n            }\r\n\r\n            if (defines.SPECULAR) {\r\n                fallbacks.addFallback(0, \"SPECULAR\");\r\n            }\r\n\r\n            if (defines.BUMP) {\r\n                fallbacks.addFallback(0, \"BUMP\");\r\n            }\r\n\r\n            if (defines.PARALLAX) {\r\n                fallbacks.addFallback(1, \"PARALLAX\");\r\n            }\r\n\r\n            if (defines.PARALLAXOCCLUSION) {\r\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\r\n            }\r\n\r\n            if (defines.SPECULAROVERALPHA) {\r\n                fallbacks.addFallback(0, \"SPECULAROVERALPHA\");\r\n            }\r\n\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.POINTSIZE) {\r\n                fallbacks.addFallback(0, \"POINTSIZE\");\r\n            }\r\n\r\n            if (defines.LOGARITHMICDEPTH) {\r\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\r\n\r\n            if (defines.SPECULARTERM) {\r\n                fallbacks.addFallback(0, \"SPECULARTERM\");\r\n            }\r\n\r\n            if (defines.DIFFUSEFRESNEL) {\r\n                fallbacks.addFallback(1, \"DIFFUSEFRESNEL\");\r\n            }\r\n\r\n            if (defines.OPACITYFRESNEL) {\r\n                fallbacks.addFallback(2, \"OPACITYFRESNEL\");\r\n            }\r\n\r\n            if (defines.REFLECTIONFRESNEL) {\r\n                fallbacks.addFallback(3, \"REFLECTIONFRESNEL\");\r\n            }\r\n\r\n            if (defines.EMISSIVEFRESNEL) {\r\n                fallbacks.addFallback(4, \"EMISSIVEFRESNEL\");\r\n            }\r\n\r\n            if (defines.FRESNEL) {\r\n                fallbacks.addFallback(4, \"FRESNEL\");\r\n            }\r\n\r\n            if (defines.MULTIVIEW) {\r\n                fallbacks.addFallback(0, \"MULTIVIEW\");\r\n            }\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                if (defines[\"UV\" + i]) {\r\n                    attribs.push(`uv${i === 1 ? \"\" : i}`);\r\n                }\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n            MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n            MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n\r\n            let shaderName = \"default\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vAmbientColor\",\r\n                \"vDiffuseColor\",\r\n                \"vSpecularColor\",\r\n                \"vEmissiveColor\",\r\n                \"visibility\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"vAmbientInfos\",\r\n                \"vOpacityInfos\",\r\n                \"vReflectionInfos\",\r\n                \"vEmissiveInfos\",\r\n                \"vSpecularInfos\",\r\n                \"vBumpInfos\",\r\n                \"vLightmapInfos\",\r\n                \"vRefractionInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\",\r\n                \"vClipPlane2\",\r\n                \"vClipPlane3\",\r\n                \"vClipPlane4\",\r\n                \"vClipPlane5\",\r\n                \"vClipPlane6\",\r\n                \"diffuseMatrix\",\r\n                \"ambientMatrix\",\r\n                \"opacityMatrix\",\r\n                \"reflectionMatrix\",\r\n                \"emissiveMatrix\",\r\n                \"specularMatrix\",\r\n                \"bumpMatrix\",\r\n                \"normalMatrix\",\r\n                \"lightmapMatrix\",\r\n                \"refractionMatrix\",\r\n                \"diffuseLeftColor\",\r\n                \"diffuseRightColor\",\r\n                \"opacityParts\",\r\n                \"reflectionLeftColor\",\r\n                \"reflectionRightColor\",\r\n                \"emissiveLeftColor\",\r\n                \"emissiveRightColor\",\r\n                \"refractionLeftColor\",\r\n                \"refractionRightColor\",\r\n                \"vReflectionPosition\",\r\n                \"vReflectionSize\",\r\n                \"vRefractionPosition\",\r\n                \"vRefractionSize\",\r\n                \"logarithmicDepthConstant\",\r\n                \"vTangentSpaceParams\",\r\n                \"alphaCutOff\",\r\n                \"boneTextureWidth\",\r\n                \"morphTargetTextureInfo\",\r\n                \"morphTargetTextureIndices\",\r\n            ];\r\n\r\n            const samplers = [\r\n                \"diffuseSampler\",\r\n                \"ambientSampler\",\r\n                \"opacitySampler\",\r\n                \"reflectionCubeSampler\",\r\n                \"reflection2DSampler\",\r\n                \"emissiveSampler\",\r\n                \"specularSampler\",\r\n                \"bumpSampler\",\r\n                \"lightmapSampler\",\r\n                \"refractionCubeSampler\",\r\n                \"refraction2DSampler\",\r\n                \"boneSampler\",\r\n                \"morphTargets\",\r\n                \"oitDepthSampler\",\r\n                \"oitFrontColorSampler\",\r\n            ];\r\n\r\n            const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\r\n\r\n            this._eventInfo.fallbacks = fallbacks;\r\n            this._eventInfo.fallbackRank = 0;\r\n            this._eventInfo.defines = defines;\r\n            this._eventInfo.uniforms = uniforms;\r\n            this._eventInfo.attributes = attribs;\r\n            this._eventInfo.samplers = samplers;\r\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\r\n            this._eventInfo.customCode = undefined;\r\n            this._eventInfo.mesh = mesh;\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\r\n\r\n            PrePassConfiguration.AddUniforms(uniforms);\r\n            PrePassConfiguration.AddSamplers(samplers);\r\n\r\n            if (ImageProcessingConfiguration) {\r\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n            }\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this._maxSimultaneousLights,\r\n            });\r\n\r\n            const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n            if (this.customShaderNameResolve) {\r\n                shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\r\n            }\r\n\r\n            const join = defines.toString();\r\n\r\n            const previousEffect = subMesh.effect;\r\n            let effect = scene.getEngine().createEffect(\r\n                shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS },\r\n                    processFinalCode: csnrOptions.processFinalCode,\r\n                    processCodeAfterIncludes: this._eventInfo.customCode,\r\n                    multiTarget: defines.PREPASS,\r\n                },\r\n                engine\r\n            );\r\n\r\n            if (effect) {\r\n                if (this._onEffectCreatedObservable) {\r\n                    onCreatedEffectParameters.effect = effect;\r\n                    onCreatedEffectParameters.subMesh = subMesh;\r\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n                }\r\n\r\n                // Use previous effect while new one is compiling\r\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                    effect = previousEffect;\r\n                    defines.markAsUnprocessed();\r\n\r\n                    if (lightDisposed) {\r\n                        // re register in case it takes more than one frame.\r\n                        defines._areLightsDisposed = true;\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    scene.resetCachedMaterial();\r\n                    subMesh.setEffect(effect, defines, this._materialContext);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n        subMesh.effect._wasPreviouslyUsingInstances = useInstances;\r\n\r\n        if (scene.performancePriority !== ScenePerformancePriority.BackwardCompatible) {\r\n            this.checkReadyOnlyOnce = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Builds the material UBO layouts.\r\n     * Used internally during the effect preparation.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        // Order is important !\r\n        const ubo = this._uniformBuffer;\r\n        ubo.addUniform(\"diffuseLeftColor\", 4);\r\n        ubo.addUniform(\"diffuseRightColor\", 4);\r\n        ubo.addUniform(\"opacityParts\", 4);\r\n        ubo.addUniform(\"reflectionLeftColor\", 4);\r\n        ubo.addUniform(\"reflectionRightColor\", 4);\r\n        ubo.addUniform(\"refractionLeftColor\", 4);\r\n        ubo.addUniform(\"refractionRightColor\", 4);\r\n        ubo.addUniform(\"emissiveLeftColor\", 4);\r\n        ubo.addUniform(\"emissiveRightColor\", 4);\r\n\r\n        ubo.addUniform(\"vDiffuseInfos\", 2);\r\n        ubo.addUniform(\"vAmbientInfos\", 2);\r\n        ubo.addUniform(\"vOpacityInfos\", 2);\r\n        ubo.addUniform(\"vReflectionInfos\", 2);\r\n        ubo.addUniform(\"vReflectionPosition\", 3);\r\n        ubo.addUniform(\"vReflectionSize\", 3);\r\n        ubo.addUniform(\"vEmissiveInfos\", 2);\r\n        ubo.addUniform(\"vLightmapInfos\", 2);\r\n        ubo.addUniform(\"vSpecularInfos\", 2);\r\n        ubo.addUniform(\"vBumpInfos\", 3);\r\n\r\n        ubo.addUniform(\"diffuseMatrix\", 16);\r\n        ubo.addUniform(\"ambientMatrix\", 16);\r\n        ubo.addUniform(\"opacityMatrix\", 16);\r\n        ubo.addUniform(\"reflectionMatrix\", 16);\r\n        ubo.addUniform(\"emissiveMatrix\", 16);\r\n        ubo.addUniform(\"lightmapMatrix\", 16);\r\n        ubo.addUniform(\"specularMatrix\", 16);\r\n        ubo.addUniform(\"bumpMatrix\", 16);\r\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\r\n        ubo.addUniform(\"pointSize\", 1);\r\n        ubo.addUniform(\"alphaCutOff\", 1);\r\n        ubo.addUniform(\"refractionMatrix\", 16);\r\n        ubo.addUniform(\"vRefractionInfos\", 4);\r\n        ubo.addUniform(\"vRefractionPosition\", 3);\r\n        ubo.addUniform(\"vRefractionSize\", 3);\r\n        ubo.addUniform(\"vSpecularColor\", 4);\r\n        ubo.addUniform(\"vEmissiveColor\", 3);\r\n        ubo.addUniform(\"vDiffuseColor\", 4);\r\n        ubo.addUniform(\"vAmbientColor\", 3);\r\n\r\n        super.buildUniformLayout();\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <StandardMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices Mesh.\r\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n        mesh.transferToEffect(world);\r\n\r\n        // Binding unconditionally\r\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\r\n\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        const mustRebind = this._mustRebind(scene, effect, mesh.visibility);\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n        const ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            this.bindViewProjection(effect);\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync) {\r\n                if (StandardMaterial.FresnelEnabled && defines.FRESNEL) {\r\n                    // Fresnel\r\n                    if (this.diffuseFresnelParameters && this.diffuseFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"diffuseLeftColor\", this.diffuseFresnelParameters.leftColor, this.diffuseFresnelParameters.power);\r\n                        ubo.updateColor4(\"diffuseRightColor\", this.diffuseFresnelParameters.rightColor, this.diffuseFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.opacityFresnelParameters && this.opacityFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\r\n                            \"opacityParts\",\r\n                            new Color3(\r\n                                this.opacityFresnelParameters.leftColor.toLuminance(),\r\n                                this.opacityFresnelParameters.rightColor.toLuminance(),\r\n                                this.opacityFresnelParameters.bias\r\n                            ),\r\n                            this.opacityFresnelParameters.power\r\n                        );\r\n                    }\r\n\r\n                    if (this.reflectionFresnelParameters && this.reflectionFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"reflectionLeftColor\", this.reflectionFresnelParameters.leftColor, this.reflectionFresnelParameters.power);\r\n                        ubo.updateColor4(\"reflectionRightColor\", this.reflectionFresnelParameters.rightColor, this.reflectionFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.refractionFresnelParameters && this.refractionFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"refractionLeftColor\", this.refractionFresnelParameters.leftColor, this.refractionFresnelParameters.power);\r\n                        ubo.updateColor4(\"refractionRightColor\", this.refractionFresnelParameters.rightColor, this.refractionFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.emissiveFresnelParameters && this.emissiveFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"emissiveLeftColor\", this.emissiveFresnelParameters.leftColor, this.emissiveFresnelParameters.power);\r\n                        ubo.updateColor4(\"emissiveRightColor\", this.emissiveFresnelParameters.rightColor, this.emissiveFresnelParameters.bias);\r\n                    }\r\n                }\r\n\r\n                // Textures\r\n                if (scene.texturesEnabled) {\r\n                    if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                        ubo.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._diffuseTexture, ubo, \"diffuse\");\r\n                    }\r\n\r\n                    if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                        ubo.updateFloat2(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\r\n                    }\r\n\r\n                    if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\r\n                    }\r\n\r\n                    if (this._hasAlphaChannel()) {\r\n                        ubo.updateFloat(\"alphaCutOff\", this.alphaCutOff);\r\n                    }\r\n\r\n                    if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                        ubo.updateFloat2(\"vReflectionInfos\", this._reflectionTexture.level, this.roughness);\r\n                        ubo.updateMatrix(\"reflectionMatrix\", this._reflectionTexture.getReflectionTextureMatrix());\r\n\r\n                        if ((<any>this._reflectionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>this._reflectionTexture;\r\n\r\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n                    }\r\n\r\n                    if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\r\n                    }\r\n\r\n                    if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\r\n                    }\r\n\r\n                    if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                        ubo.updateFloat2(\"vSpecularInfos\", this._specularTexture.coordinatesIndex, this._specularTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._specularTexture, ubo, \"specular\");\r\n                    }\r\n\r\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, 1.0 / this._bumpTexture.level, this.parallaxScaleBias);\r\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n\r\n                    if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                        let depth = 1.0;\r\n                        if (!this._refractionTexture.isCube) {\r\n                            ubo.updateMatrix(\"refractionMatrix\", this._refractionTexture.getReflectionTextureMatrix());\r\n\r\n                            if ((<any>this._refractionTexture).depth) {\r\n                                depth = (<any>this._refractionTexture).depth;\r\n                            }\r\n                        }\r\n                        ubo.updateFloat4(\"vRefractionInfos\", this._refractionTexture.level, this.indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\r\n\r\n                        if ((<any>this._refractionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>this._refractionTexture;\r\n\r\n                            ubo.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\r\n                }\r\n\r\n                if (defines.SPECULARTERM) {\r\n                    ubo.updateColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n                }\r\n\r\n                ubo.updateColor3(\"vEmissiveColor\", StandardMaterial.EmissiveTextureEnabled ? this.emissiveColor : Color3.BlackReadOnly);\r\n                ubo.updateColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha);\r\n\r\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\r\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\r\n            }\r\n\r\n            // Textures\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    effect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n                }\r\n\r\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                    effect.setTexture(\"ambientSampler\", this._ambientTexture);\r\n                }\r\n\r\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                    effect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                }\r\n\r\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                    if (this._reflectionTexture.isCube) {\r\n                        effect.setTexture(\"reflectionCubeSampler\", this._reflectionTexture);\r\n                    } else {\r\n                        effect.setTexture(\"reflection2DSampler\", this._reflectionTexture);\r\n                    }\r\n                }\r\n\r\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                    effect.setTexture(\"emissiveSampler\", this._emissiveTexture);\r\n                }\r\n\r\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                    effect.setTexture(\"lightmapSampler\", this._lightmapTexture);\r\n                }\r\n\r\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                    effect.setTexture(\"specularSampler\", this._specularTexture);\r\n                }\r\n\r\n                if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                    effect.setTexture(\"bumpSampler\", this._bumpTexture);\r\n                }\r\n\r\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                    if (this._refractionTexture.isCube) {\r\n                        effect.setTexture(\"refractionCubeSampler\", this._refractionTexture);\r\n                    } else {\r\n                        effect.setTexture(\"refraction2DSampler\", this._refractionTexture);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // OIT with depth peeling\r\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\r\n                this.getScene().depthPeelingRenderer!.bind(effect);\r\n            }\r\n\r\n            this._eventInfo.subMesh = subMesh;\r\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(effect, scene);\r\n\r\n            // Colors\r\n            this.bindEyePosition(effect);\r\n        } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                MaterialHelper.BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\r\n            }\r\n\r\n            // View\r\n            if (\r\n                (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\r\n                this._reflectionTexture ||\r\n                this._refractionTexture ||\r\n                mesh.receiveShadows ||\r\n                defines.PREPASS\r\n            ) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            MaterialHelper.BindFogParameters(scene, mesh, effect);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                MaterialHelper.BindMorphTargetParameters(mesh, effect);\r\n            }\r\n\r\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\r\n            }\r\n\r\n            // Log. depth\r\n            if (this.useLogarithmicDepth) {\r\n                MaterialHelper.BindLogDepth(defines, effect, scene);\r\n            }\r\n\r\n            // image processing\r\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\r\n                this._imageProcessingConfiguration.bind(this._activeEffect);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = super.getAnimatables();\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\r\n            results.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\r\n            results.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\r\n            results.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._specularTexture && this._specularTexture.animations && this._specularTexture.animations.length > 0) {\r\n            results.push(this._specularTexture);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            results.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\r\n            results.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\r\n            results.push(this._refractionTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._ambientTexture) {\r\n            activeTextures.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture) {\r\n            activeTextures.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture) {\r\n            activeTextures.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._specularTexture) {\r\n            activeTextures.push(this._specularTexture);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture) {\r\n            activeTextures.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._refractionTexture) {\r\n            activeTextures.push(this._refractionTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._ambientTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._emissiveTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._specularTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lightmapTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._refractionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._diffuseTexture?.dispose();\r\n            this._ambientTexture?.dispose();\r\n            this._opacityTexture?.dispose();\r\n            this._reflectionTexture?.dispose();\r\n            this._emissiveTexture?.dispose();\r\n            this._specularTexture?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._lightmapTexture?.dispose();\r\n            this._refractionTexture?.dispose();\r\n        }\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    public clone(name: string): StandardMaterial {\r\n        const result = SerializationHelper.Clone(() => new StandardMaterial(name, this.getScene()), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a standard material from parsed material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new standard material\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): StandardMaterial {\r\n        const material = SerializationHelper.Parse(() => new StandardMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    // Flags used to enable or disable a type of texture for all Standard Materials\r\n    /**\r\n     * Are diffuse textures enabled in the application.\r\n     */\r\n    public static get DiffuseTextureEnabled(): boolean {\r\n        return MaterialFlags.DiffuseTextureEnabled;\r\n    }\r\n    public static set DiffuseTextureEnabled(value: boolean) {\r\n        MaterialFlags.DiffuseTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are detail textures enabled in the application.\r\n     */\r\n    public static get DetailTextureEnabled(): boolean {\r\n        return MaterialFlags.DetailTextureEnabled;\r\n    }\r\n    public static set DetailTextureEnabled(value: boolean) {\r\n        MaterialFlags.DetailTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are ambient textures enabled in the application.\r\n     */\r\n    public static get AmbientTextureEnabled(): boolean {\r\n        return MaterialFlags.AmbientTextureEnabled;\r\n    }\r\n    public static set AmbientTextureEnabled(value: boolean) {\r\n        MaterialFlags.AmbientTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are opacity textures enabled in the application.\r\n     */\r\n    public static get OpacityTextureEnabled(): boolean {\r\n        return MaterialFlags.OpacityTextureEnabled;\r\n    }\r\n    public static set OpacityTextureEnabled(value: boolean) {\r\n        MaterialFlags.OpacityTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are reflection textures enabled in the application.\r\n     */\r\n    public static get ReflectionTextureEnabled(): boolean {\r\n        return MaterialFlags.ReflectionTextureEnabled;\r\n    }\r\n    public static set ReflectionTextureEnabled(value: boolean) {\r\n        MaterialFlags.ReflectionTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are emissive textures enabled in the application.\r\n     */\r\n    public static get EmissiveTextureEnabled(): boolean {\r\n        return MaterialFlags.EmissiveTextureEnabled;\r\n    }\r\n    public static set EmissiveTextureEnabled(value: boolean) {\r\n        MaterialFlags.EmissiveTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are specular textures enabled in the application.\r\n     */\r\n    public static get SpecularTextureEnabled(): boolean {\r\n        return MaterialFlags.SpecularTextureEnabled;\r\n    }\r\n    public static set SpecularTextureEnabled(value: boolean) {\r\n        MaterialFlags.SpecularTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are bump textures enabled in the application.\r\n     */\r\n    public static get BumpTextureEnabled(): boolean {\r\n        return MaterialFlags.BumpTextureEnabled;\r\n    }\r\n    public static set BumpTextureEnabled(value: boolean) {\r\n        MaterialFlags.BumpTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are lightmap textures enabled in the application.\r\n     */\r\n    public static get LightmapTextureEnabled(): boolean {\r\n        return MaterialFlags.LightmapTextureEnabled;\r\n    }\r\n    public static set LightmapTextureEnabled(value: boolean) {\r\n        MaterialFlags.LightmapTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are refraction textures enabled in the application.\r\n     */\r\n    public static get RefractionTextureEnabled(): boolean {\r\n        return MaterialFlags.RefractionTextureEnabled;\r\n    }\r\n    public static set RefractionTextureEnabled(value: boolean) {\r\n        MaterialFlags.RefractionTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are color grading textures enabled in the application.\r\n     */\r\n    public static get ColorGradingTextureEnabled(): boolean {\r\n        return MaterialFlags.ColorGradingTextureEnabled;\r\n    }\r\n    public static set ColorGradingTextureEnabled(value: boolean) {\r\n        MaterialFlags.ColorGradingTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are fresnels enabled in the application.\r\n     */\r\n    public static get FresnelEnabled(): boolean {\r\n        return MaterialFlags.FresnelEnabled;\r\n    }\r\n    public static set FresnelEnabled(value: boolean) {\r\n        MaterialFlags.FresnelEnabled = value;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.StandardMaterial\", StandardMaterial);\r\n\r\nScene.DefaultMaterialFactory = (scene: Scene) => {\r\n    return new StandardMaterial(\"default material\", scene);\r\n};\r\n","import type { Effect } from \"./effect\";\r\nimport type { IClipPlanesHolder } from \"../Misc/interfaces/iClipPlanesHolder\";\r\n\r\n/**\r\n * \"Static Class\" containing a few commonly used helper while dealing with material for rendering purpose.\r\n *\r\n * It is complementary with MaterialHelper but provides completely independent functions (for tree shaking sake)\r\n *\r\n * This works by convention in BabylonJS but is meant to be use only with shader following the in place naming rules and conventions.\r\n */\r\nexport class ThinMaterialHelper {\r\n    /**\r\n     * Binds the clip plane information from the holder to the effect.\r\n     * @param effect The effect we are binding the data to\r\n     * @param holder The entity containing the clip plane information\r\n     */\r\n    public static BindClipPlane(effect: Effect, holder: IClipPlanesHolder): void {\r\n        if (holder.clipPlane) {\r\n            const clipPlane = holder.clipPlane;\r\n            effect.setFloat4(\"vClipPlane\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\r\n        }\r\n        if (holder.clipPlane2) {\r\n            const clipPlane = holder.clipPlane2;\r\n            effect.setFloat4(\"vClipPlane2\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\r\n        }\r\n        if (holder.clipPlane3) {\r\n            const clipPlane = holder.clipPlane3;\r\n            effect.setFloat4(\"vClipPlane3\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\r\n        }\r\n        if (holder.clipPlane4) {\r\n            const clipPlane = holder.clipPlane4;\r\n            effect.setFloat4(\"vClipPlane4\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\r\n        }\r\n        if (holder.clipPlane5) {\r\n            const clipPlane = holder.clipPlane5;\r\n            effect.setFloat4(\"vClipPlane5\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\r\n        }\r\n        if (holder.clipPlane6) {\r\n            const clipPlane = holder.clipPlane6;\r\n            effect.setFloat4(\"vClipPlane6\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\r\n        }\r\n    }\r\n}\r\n","import type { FloatArray, Nullable, IndicesArray } from \"../types\";\r\nimport type { Vector2 } from \"./math.vector\";\r\nimport { Vector3 } from \"./math.vector\";\r\nimport { nativeOverride } from \"../Misc/decorators\";\r\n\r\n// This helper class is only here so we can apply the nativeOverride decorator to functions.\r\nclass MathHelpers {\r\n    @nativeOverride.filter((...[positions, indices]: Parameters<typeof MathHelpers.extractMinAndMaxIndexed>) => !Array.isArray(positions) && !Array.isArray(indices))\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static extractMinAndMaxIndexed(positions: FloatArray, indices: IndicesArray, indexStart: number, indexCount: number, minimum: Vector3, maximum: Vector3): void {\r\n        for (let index = indexStart; index < indexStart + indexCount; index++) {\r\n            const offset = indices[index] * 3;\r\n            const x = positions[offset];\r\n            const y = positions[offset + 1];\r\n            const z = positions[offset + 2];\r\n            minimum.minimizeInPlaceFromFloats(x, y, z);\r\n            maximum.maximizeInPlaceFromFloats(x, y, z);\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[positions]: Parameters<typeof MathHelpers.extractMinAndMax>) => !Array.isArray(positions))\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static extractMinAndMax(positions: FloatArray, start: number, count: number, stride: number, minimum: Vector3, maximum: Vector3): void {\r\n        for (let index = start, offset = start * stride; index < start + count; index++, offset += stride) {\r\n            const x = positions[offset];\r\n            const y = positions[offset + 1];\r\n            const z = positions[offset + 2];\r\n            minimum.minimizeInPlaceFromFloats(x, y, z);\r\n            maximum.maximizeInPlaceFromFloats(x, y, z);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Extracts minimum and maximum values from a list of indexed positions\r\n * @param positions defines the positions to use\r\n * @param indices defines the indices to the positions\r\n * @param indexStart defines the start index\r\n * @param indexCount defines the end index\r\n * @param bias defines bias value to add to the result\r\n * @returns minimum and maximum values\r\n */\r\nexport function extractMinAndMaxIndexed(\r\n    positions: FloatArray,\r\n    indices: IndicesArray,\r\n    indexStart: number,\r\n    indexCount: number,\r\n    bias: Nullable<Vector2> = null\r\n): { minimum: Vector3; maximum: Vector3 } {\r\n    const minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    const maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n    MathHelpers.extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, minimum, maximum);\r\n\r\n    if (bias) {\r\n        minimum.x -= minimum.x * bias.x + bias.y;\r\n        minimum.y -= minimum.y * bias.x + bias.y;\r\n        minimum.z -= minimum.z * bias.x + bias.y;\r\n        maximum.x += maximum.x * bias.x + bias.y;\r\n        maximum.y += maximum.y * bias.x + bias.y;\r\n        maximum.z += maximum.z * bias.x + bias.y;\r\n    }\r\n\r\n    return {\r\n        minimum: minimum,\r\n        maximum: maximum,\r\n    };\r\n}\r\n\r\n/**\r\n * Extracts minimum and maximum values from a list of positions\r\n * @param positions defines the positions to use\r\n * @param start defines the start index in the positions array\r\n * @param count defines the number of positions to handle\r\n * @param bias defines bias value to add to the result\r\n * @param stride defines the stride size to use (distance between two positions in the positions array)\r\n * @returns minimum and maximum values\r\n */\r\nexport function extractMinAndMax(positions: FloatArray, start: number, count: number, bias: Nullable<Vector2> = null, stride?: number): { minimum: Vector3; maximum: Vector3 } {\r\n    const minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    const maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n    if (!stride) {\r\n        stride = 3;\r\n    }\r\n\r\n    MathHelpers.extractMinAndMax(positions, start, count, stride, minimum, maximum);\r\n\r\n    if (bias) {\r\n        minimum.x -= minimum.x * bias.x + bias.y;\r\n        minimum.y -= minimum.y * bias.x + bias.y;\r\n        minimum.z -= minimum.z * bias.x + bias.y;\r\n        maximum.x += maximum.x * bias.x + bias.y;\r\n        maximum.y += maximum.y * bias.x + bias.y;\r\n        maximum.z += maximum.z * bias.x + bias.y;\r\n    }\r\n\r\n    return {\r\n        minimum: minimum,\r\n        maximum: maximum,\r\n    };\r\n}\r\n","import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable, FloatArray, IndicesArray, DeepImmutable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { ScenePerformancePriority } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { Node } from \"../node\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { IGetSetVerticesData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport type { IntersectionInfo } from \"../Collisions/intersectionInfo\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport type { MorphTargetManager } from \"../Morph/morphTargetManager\";\r\nimport type { IBakedVertexAnimationManager } from \"../BakedVertexAnimation/bakedVertexAnimationManager\";\r\nimport type { IEdgesRenderer } from \"../Rendering/edgesRenderer\";\r\nimport type { SolidParticle } from \"../Particles/solidParticle\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { AbstractActionManager } from \"../Actions/abstractActionManager\";\r\nimport { UniformBuffer } from \"../Materials/uniformBuffer\";\r\nimport { _MeshCollisionData } from \"../Collisions/meshCollisionData\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { RawTexture } from \"../Materials/Textures/rawTexture\";\r\nimport { extractMinAndMax } from \"../Maths/math.functions\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\ndeclare type Ray = import(\"../Culling/ray\").Ray;\r\ndeclare type Collider = import(\"../Collisions/collider\").Collider;\r\ndeclare type TrianglePickingPredicate = import(\"../Culling/ray\").TrianglePickingPredicate;\r\ndeclare type RenderingGroup = import(\"../Rendering/renderingGroup\").RenderingGroup;\r\ndeclare type IEdgesRendererOptions = import(\"../Rendering/edgesRenderer\").IEdgesRendererOptions;\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _FacetDataStorage {\r\n    // facetData private properties\r\n    public facetPositions: Vector3[]; // facet local positions\r\n    public facetNormals: Vector3[]; // facet local normals\r\n    public facetPartitioning: number[][]; // partitioning array of facet index arrays\r\n    public facetNb: number = 0; // facet number\r\n    public partitioningSubdivisions: number = 10; // number of subdivisions per axis in the partitioning space\r\n    public partitioningBBoxRatio: number = 1.01; // the partitioning array space is by default 1% bigger than the bounding box\r\n    public facetDataEnabled: boolean = false; // is the facet data feature enabled on this mesh ?\r\n    public facetParameters: any = {}; // keep a reference to the object parameters to avoid memory re-allocation\r\n    public bbSize: Vector3 = Vector3.Zero(); // bbox size approximated for facet data\r\n    public subDiv = {\r\n        // actual number of subdivisions per axis for ComputeNormals()\r\n        max: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        X: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        Y: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        Z: 1,\r\n    };\r\n\r\n    public facetDepthSort: boolean = false; // is the facet depth sort to be computed\r\n    public facetDepthSortEnabled: boolean = false; // is the facet depth sort initialized\r\n    public depthSortedIndices: IndicesArray; // copy of the indices array to store them once sorted\r\n    public depthSortedFacets: { ind: number; sqDistance: number }[]; // array of depth sorted facets\r\n    public facetDepthSortFunction: (f1: { ind: number; sqDistance: number }, f2: { ind: number; sqDistance: number }) => number; // facet depth sort function\r\n    public facetDepthSortFrom: Vector3; // location where to depth sort from\r\n    public facetDepthSortOrigin: Vector3; // same as facetDepthSortFrom but expressed in the mesh local space\r\n\r\n    public invertedMatrix: Matrix; // Inverted world matrix.\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _InternalAbstractMeshDataInfo {\r\n    public _hasVertexAlpha = false;\r\n    public _useVertexColors = true;\r\n    public _numBoneInfluencers = 4;\r\n    public _applyFog = true;\r\n    public _receiveShadows = false;\r\n    public _facetData = new _FacetDataStorage();\r\n    public _visibility = 1.0;\r\n    public _skeleton: Nullable<Skeleton> = null;\r\n    public _layerMask: number = 0x0fffffff;\r\n    public _computeBonesUsingShaders = true;\r\n    public _isActive = false;\r\n    public _onlyForInstances = false;\r\n    public _isActiveIntermediate = false;\r\n    public _onlyForInstancesIntermediate = false;\r\n    public _actAsRegularMesh = false;\r\n    public _currentLOD: Nullable<AbstractMesh> = null;\r\n    public _currentLODIsUpToDate: boolean = false;\r\n    public _collisionRetryCount: number = 3;\r\n    public _morphTargetManager: Nullable<MorphTargetManager> = null;\r\n    public _renderingGroupId = 0;\r\n    public _bakedVertexAnimationManager: Nullable<IBakedVertexAnimationManager> = null;\r\n    public _material: Nullable<Material> = null;\r\n    public _materialForRenderPass: Array<Material | undefined>; // map a render pass id (index in the array) to a Material\r\n    public _positions: Nullable<Vector3[]> = null;\r\n    public _pointerOverDisableMeshTesting: boolean = false;\r\n    // Collisions\r\n    public _meshCollisionData = new _MeshCollisionData();\r\n    public _enableDistantPicking = false;\r\n}\r\n\r\n/**\r\n * Class used to store all common mesh properties\r\n */\r\nexport class AbstractMesh extends TransformNode implements IDisposable, ICullable, IGetSetVerticesData {\r\n    /** No occlusion */\r\n    public static OCCLUSION_TYPE_NONE = 0;\r\n    /** Occlusion set to optimistic */\r\n    public static OCCLUSION_TYPE_OPTIMISTIC = 1;\r\n    /** Occlusion set to strict */\r\n    public static OCCLUSION_TYPE_STRICT = 2;\r\n    /** Use an accurate occlusion algorithm */\r\n    public static OCCLUSION_ALGORITHM_TYPE_ACCURATE = 0;\r\n    /** Use a conservative occlusion algorithm */\r\n    public static OCCLUSION_ALGORITHM_TYPE_CONSERVATIVE = 1;\r\n\r\n    /** Default culling strategy : this is an exclusion test and it's the more accurate.\r\n     *  Test order :\r\n     *  Is the bounding sphere outside the frustum ?\r\n     *  If not, are the bounding box vertices outside the frustum ?\r\n     *  It not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_STANDARD = Constants.MESHES_CULLINGSTRATEGY_STANDARD;\r\n    /** Culling strategy : Bounding Sphere Only.\r\n     *  This is an exclusion test. It's faster than the standard strategy because the bounding box is not tested.\r\n     *  It's also less accurate than the standard because some not visible objects can still be selected.\r\n     *  Test : is the bounding sphere outside the frustum ?\r\n     *  If not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY = Constants.MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n    /** Culling strategy : Optimistic Inclusion.\r\n     *  This in an inclusion test first, then the standard exclusion test.\r\n     *  This can be faster when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the standard test when the tested object center is not the frustum but one of its bounding box vertex is still inside.\r\n     *  Anyway, it's as accurate as the standard strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the default culling strategy.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_OPTIMISTIC_INCLUSION = Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION;\r\n    /** Culling strategy : Optimistic Inclusion then Bounding Sphere Only.\r\n     *  This in an inclusion test first, then the bounding sphere only exclusion test.\r\n     *  This can be the fastest test when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the BoundingSphereOnly strategy when the tested object center is not in the frustum but its bounding sphere still intersects it.\r\n     *  It's less accurate than the standard strategy and as accurate as the BoundingSphereOnly strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the Bounding Sphere Only strategy. No Bounding Box is tested here.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY = Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n\r\n    /**\r\n     * No billboard\r\n     */\r\n    public static get BILLBOARDMODE_NONE(): number {\r\n        return TransformNode.BILLBOARDMODE_NONE;\r\n    }\r\n\r\n    /** Billboard on X axis */\r\n    public static get BILLBOARDMODE_X(): number {\r\n        return TransformNode.BILLBOARDMODE_X;\r\n    }\r\n\r\n    /** Billboard on Y axis */\r\n    public static get BILLBOARDMODE_Y(): number {\r\n        return TransformNode.BILLBOARDMODE_Y;\r\n    }\r\n\r\n    /** Billboard on Z axis */\r\n    public static get BILLBOARDMODE_Z(): number {\r\n        return TransformNode.BILLBOARDMODE_Z;\r\n    }\r\n\r\n    /** Billboard on all axes */\r\n    public static get BILLBOARDMODE_ALL(): number {\r\n        return TransformNode.BILLBOARDMODE_ALL;\r\n    }\r\n\r\n    /** Billboard on using position instead of orientation */\r\n    public static get BILLBOARDMODE_USE_POSITION(): number {\r\n        return TransformNode.BILLBOARDMODE_USE_POSITION;\r\n    }\r\n\r\n    // Internal data\r\n    /** @internal */\r\n    public _internalAbstractMeshDataInfo = new _InternalAbstractMeshDataInfo();\r\n\r\n    /** @internal */\r\n    public _waitingMaterialId: Nullable<string> = null;\r\n\r\n    /**\r\n     * The culling strategy to use to check whether the mesh must be rendered or not.\r\n     * This value can be changed at any time and will be used on the next render mesh selection.\r\n     * The possible values are :\r\n     * - AbstractMesh.CULLINGSTRATEGY_STANDARD\r\n     * - AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\r\n     * Please read each static variable documentation to get details about the culling process.\r\n     * */\r\n    public cullingStrategy = AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n\r\n    /**\r\n     * Gets the number of facets in the mesh\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#what-is-a-mesh-facet\r\n     */\r\n    public get facetNb(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetNb;\r\n    }\r\n    /**\r\n     * Gets or set the number (integer) of subdivisions per axis in the partitioning space\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#tweaking-the-partitioning\r\n     */\r\n    public get partitioningSubdivisions(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.partitioningSubdivisions;\r\n    }\r\n    public set partitioningSubdivisions(nb: number) {\r\n        this._internalAbstractMeshDataInfo._facetData.partitioningSubdivisions = nb;\r\n    }\r\n    /**\r\n     * The ratio (float) to apply to the bounding box size to set to the partitioning space.\r\n     * Ex : 1.01 (default) the partitioning space is 1% bigger than the bounding box\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#tweaking-the-partitioning\r\n     */\r\n    public get partitioningBBoxRatio(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.partitioningBBoxRatio;\r\n    }\r\n    public set partitioningBBoxRatio(ratio: number) {\r\n        this._internalAbstractMeshDataInfo._facetData.partitioningBBoxRatio = ratio;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the facets must be depth sorted on next call to `updateFacetData()`.\r\n     * Works only for updatable meshes.\r\n     * Doesn't work with multi-materials\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#facet-depth-sort\r\n     */\r\n    public get mustDepthSortFacets(): boolean {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDepthSort;\r\n    }\r\n    public set mustDepthSortFacets(sort: boolean) {\r\n        this._internalAbstractMeshDataInfo._facetData.facetDepthSort = sort;\r\n    }\r\n\r\n    /**\r\n     * The location (Vector3) where the facet depth sort must be computed from.\r\n     * By default, the active camera position.\r\n     * Used only when facet depth sort is enabled\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#facet-depth-sort\r\n     */\r\n    public get facetDepthSortFrom(): Vector3 {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDepthSortFrom;\r\n    }\r\n    public set facetDepthSortFrom(location: Vector3) {\r\n        this._internalAbstractMeshDataInfo._facetData.facetDepthSortFrom = location;\r\n    }\r\n\r\n    /** number of collision detection tries. Change this value if not all collisions are detected and handled properly */\r\n    public get collisionRetryCount(): number {\r\n        return this._internalAbstractMeshDataInfo._collisionRetryCount;\r\n    }\r\n    public set collisionRetryCount(retryCount: number) {\r\n        this._internalAbstractMeshDataInfo._collisionRetryCount = retryCount;\r\n    }\r\n    /**\r\n     * gets a boolean indicating if facetData is enabled\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#what-is-a-mesh-facet\r\n     */\r\n    public get isFacetDataEnabled(): boolean {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the morph target manager\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_morphtargets\r\n     */\r\n    public get morphTargetManager(): Nullable<MorphTargetManager> {\r\n        return this._internalAbstractMeshDataInfo._morphTargetManager;\r\n    }\r\n\r\n    public set morphTargetManager(value: Nullable<MorphTargetManager>) {\r\n        if (this._internalAbstractMeshDataInfo._morphTargetManager === value) {\r\n            return;\r\n        }\r\n        this._internalAbstractMeshDataInfo._morphTargetManager = value;\r\n        this._syncGeometryWithMorphTargetManager();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the baked vertex animation manager\r\n     * @see https://doc.babylonjs.com/divingDeeper/animation/baked_texture_animations\r\n     */\r\n    public get bakedVertexAnimationManager(): Nullable<IBakedVertexAnimationManager> {\r\n        return this._internalAbstractMeshDataInfo._bakedVertexAnimationManager;\r\n    }\r\n\r\n    public set bakedVertexAnimationManager(value: Nullable<IBakedVertexAnimationManager>) {\r\n        if (this._internalAbstractMeshDataInfo._bakedVertexAnimationManager === value) {\r\n            return;\r\n        }\r\n        this._internalAbstractMeshDataInfo._bakedVertexAnimationManager = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _syncGeometryWithMorphTargetManager(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateNonUniformScalingState(value: boolean): boolean {\r\n        if (!super._updateNonUniformScalingState(value)) {\r\n            return false;\r\n        }\r\n        this._markSubMeshesAsMiscDirty();\r\n        return true;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * An event triggered when this mesh collides with another one\r\n     */\r\n    public onCollideObservable = new Observable<AbstractMesh>();\r\n\r\n    /** Set a function to call when this mesh collides with another one */\r\n    public set onCollide(callback: (collidedMesh?: AbstractMesh) => void) {\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver) {\r\n            this.onCollideObservable.remove(this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver);\r\n        }\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver = this.onCollideObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the collision's position changes\r\n     */\r\n    public onCollisionPositionChangeObservable = new Observable<Vector3>();\r\n\r\n    /** Set a function to call when the collision's position changes */\r\n    public set onCollisionPositionChange(callback: () => void) {\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver) {\r\n            this.onCollisionPositionChangeObservable.remove(this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver);\r\n        }\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver = this.onCollisionPositionChangeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when material is changed\r\n     */\r\n    public onMaterialChangedObservable = new Observable<AbstractMesh>();\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets or sets the orientation for POV movement & rotation\r\n     */\r\n    public definedFacingForward = true;\r\n\r\n    /** @internal */\r\n    public _occlusionQuery: Nullable<WebGLQuery | number> = null;\r\n\r\n    /** @internal */\r\n    public _renderingGroup: Nullable<RenderingGroup> = null;\r\n\r\n    /**\r\n     * Gets or sets mesh visibility between 0 and 1 (default is 1)\r\n     */\r\n    public get visibility(): number {\r\n        return this._internalAbstractMeshDataInfo._visibility;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets mesh visibility between 0 and 1 (default is 1)\r\n     */\r\n    public set visibility(value: number) {\r\n        if (this._internalAbstractMeshDataInfo._visibility === value) {\r\n            return;\r\n        }\r\n\r\n        const oldValue = this._internalAbstractMeshDataInfo._visibility;\r\n\r\n        this._internalAbstractMeshDataInfo._visibility = value;\r\n\r\n        if ((oldValue === 1 && value !== 1) || (oldValue !== 1 && value === 1)) {\r\n            this._markSubMeshesAsMiscDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the alpha index used to sort transparent meshes\r\n     * @see https://doc.babylonjs.com/resources/transparency_and_how_meshes_are_rendered#alpha-index\r\n     */\r\n    public alphaIndex = Number.MAX_VALUE;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh is visible (renderable). Default is true\r\n     */\r\n    public isVisible = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be picked (by scene.pick for instance or through actions). Default is true\r\n     */\r\n    public isPickable = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be near picked. Default is false\r\n     */\r\n    public isNearPickable = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be near grabbed. Default is false\r\n     */\r\n    public isNearGrabbable = false;\r\n\r\n    /** Gets or sets a boolean indicating that bounding boxes of subMeshes must be rendered as well (false by default) */\r\n    public showSubMeshesBoundingBox = false;\r\n\r\n    /** Gets or sets a boolean indicating if the mesh must be considered as a ray blocker for lens flares (false by default)\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n     */\r\n    public isBlocker = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that pointer move events must be supported on this mesh (false by default)\r\n     */\r\n    public enablePointerMoveEvents = false;\r\n\r\n    /**\r\n     * Gets or sets the property which disables the test that is checking that the mesh under the pointer is the same than the previous time we tested for it (default: false).\r\n     * Set this property to true if you want thin instances picking to be reported accurately when moving over the mesh.\r\n     * Note that setting this property to true will incur some performance penalties when dealing with pointer events for this mesh so use it sparingly.\r\n     */\r\n    public get pointerOverDisableMeshTesting() {\r\n        return this._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting;\r\n    }\r\n\r\n    public set pointerOverDisableMeshTesting(disable: boolean) {\r\n        this._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting = disable;\r\n    }\r\n\r\n    /**\r\n     * Specifies the rendering group id for this mesh (0 by default)\r\n     * @see https://doc.babylonjs.com/resources/transparency_and_how_meshes_are_rendered#rendering-groups\r\n     */\r\n    public get renderingGroupId() {\r\n        return this._internalAbstractMeshDataInfo._renderingGroupId;\r\n    }\r\n\r\n    public set renderingGroupId(value: number) {\r\n        this._internalAbstractMeshDataInfo._renderingGroupId = value;\r\n    }\r\n\r\n    /** Gets or sets current material */\r\n    public get material(): Nullable<Material> {\r\n        return this._internalAbstractMeshDataInfo._material;\r\n    }\r\n    public set material(value: Nullable<Material>) {\r\n        if (this._internalAbstractMeshDataInfo._material === value) {\r\n            return;\r\n        }\r\n\r\n        // remove from material mesh map id needed\r\n        if (this._internalAbstractMeshDataInfo._material && this._internalAbstractMeshDataInfo._material.meshMap) {\r\n            this._internalAbstractMeshDataInfo._material.meshMap[this.uniqueId] = undefined;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._material = value;\r\n\r\n        if (value && value.meshMap) {\r\n            value.meshMap[this.uniqueId] = this;\r\n        }\r\n\r\n        if (this.onMaterialChangedObservable.hasObservers()) {\r\n            this.onMaterialChangedObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        this.resetDrawCache();\r\n        this._unBindEffect();\r\n    }\r\n\r\n    /**\r\n     * Gets the material used to render the mesh in a specific render pass\r\n     * @param renderPassId render pass id\r\n     * @returns material used for the render pass. If no specific material is used for this render pass, undefined is returned (meaning mesh.material is used for this pass)\r\n     */\r\n    public getMaterialForRenderPass(renderPassId: number): Material | undefined {\r\n        return this._internalAbstractMeshDataInfo._materialForRenderPass?.[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Sets the material to be used to render the mesh in a specific render pass\r\n     * @param renderPassId render pass id\r\n     * @param material material to use for this render pass. If undefined is passed, no specific material will be used for this render pass but the regular material will be used instead (mesh.material)\r\n     */\r\n    public setMaterialForRenderPass(renderPassId: number, material?: Material): void {\r\n        this.resetDrawCache(renderPassId);\r\n        if (!this._internalAbstractMeshDataInfo._materialForRenderPass) {\r\n            this._internalAbstractMeshDataInfo._materialForRenderPass = [];\r\n        }\r\n        this._internalAbstractMeshDataInfo._materialForRenderPass[renderPassId] = material;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh can receive realtime shadows\r\n     * @see https://doc.babylonjs.com/babylon101/shadows\r\n     */\r\n    public get receiveShadows(): boolean {\r\n        return this._internalAbstractMeshDataInfo._receiveShadows;\r\n    }\r\n    public set receiveShadows(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._receiveShadows === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._receiveShadows = value;\r\n        this._markSubMeshesAsLightDirty();\r\n    }\r\n\r\n    /** Defines color to use when rendering outline */\r\n    public outlineColor = Color3.Red();\r\n    /** Define width to use when rendering outline */\r\n    public outlineWidth = 0.02;\r\n\r\n    /** Defines color to use when rendering overlay */\r\n    public overlayColor = Color3.Red();\r\n    /** Defines alpha to use when rendering overlay */\r\n    public overlayAlpha = 0.5;\r\n\r\n    /** Gets or sets a boolean indicating that this mesh contains vertex color data with alpha values */\r\n    public get hasVertexAlpha(): boolean {\r\n        return this._internalAbstractMeshDataInfo._hasVertexAlpha;\r\n    }\r\n    public set hasVertexAlpha(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._hasVertexAlpha === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._hasVertexAlpha = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this mesh needs to use vertex color data to render (if this kind of vertex data is available in the geometry) */\r\n    public get useVertexColors(): boolean {\r\n        return this._internalAbstractMeshDataInfo._useVertexColors;\r\n    }\r\n    public set useVertexColors(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._useVertexColors === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._useVertexColors = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that bone animations must be computed by the CPU (false by default)\r\n     */\r\n    public get computeBonesUsingShaders(): boolean {\r\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\r\n    }\r\n    public set computeBonesUsingShaders(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** Gets or sets the number of allowed bone influences per vertex (4 by default) */\r\n    public get numBoneInfluencers(): number {\r\n        return this._internalAbstractMeshDataInfo._numBoneInfluencers;\r\n    }\r\n    public set numBoneInfluencers(value: number) {\r\n        if (this._internalAbstractMeshDataInfo._numBoneInfluencers === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._numBoneInfluencers = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this mesh will allow fog to be rendered on it (true by default) */\r\n    public get applyFog(): boolean {\r\n        return this._internalAbstractMeshDataInfo._applyFog;\r\n    }\r\n    public set applyFog(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._applyFog === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._applyFog = value;\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** When enabled, decompose picking matrices for better precision with large values for mesh position and scling */\r\n    public get enableDistantPicking(): boolean {\r\n        return this._internalAbstractMeshDataInfo._enableDistantPicking;\r\n    }\r\n    public set enableDistantPicking(value: boolean) {\r\n        this._internalAbstractMeshDataInfo._enableDistantPicking = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes selection (true by default) */\r\n    public useOctreeForRenderingSelection = true;\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes picking (true by default) */\r\n    public useOctreeForPicking = true;\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes collision (true by default) */\r\n    public useOctreeForCollisions = true;\r\n    /**\r\n     * Gets or sets the current layer mask (default is 0x0FFFFFFF)\r\n     * @see https://doc.babylonjs.com/divingDeeper/cameras/layerMasksAndMultiCam\r\n     */\r\n    public get layerMask(): number {\r\n        return this._internalAbstractMeshDataInfo._layerMask;\r\n    }\r\n\r\n    public set layerMask(value: number) {\r\n        if (value === this._internalAbstractMeshDataInfo._layerMask) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._layerMask = value;\r\n        this._resyncLightSources();\r\n    }\r\n\r\n    /**\r\n     * True if the mesh must be rendered in any case (this will shortcut the frustum clipping phase)\r\n     */\r\n    public alwaysSelectAsActiveMesh = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the bounding info does not need to be kept in sync (for performance reason)\r\n     */\r\n    public doNotSyncBoundingInfo = false;\r\n\r\n    /**\r\n     * Gets or sets the current action manager\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n     */\r\n    public actionManager: Nullable<AbstractActionManager> = null;\r\n\r\n    /**\r\n     * Gets or sets the ellipsoid used to impersonate this mesh when using collision engine (default is (0.5, 1, 0.5))\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\r\n     */\r\n    public ellipsoid = new Vector3(0.5, 1, 0.5);\r\n    /**\r\n     * Gets or sets the ellipsoid offset used to impersonate this mesh when using collision engine (default is (0, 0, 0))\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\r\n     */\r\n    public ellipsoidOffset = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets a collision mask used to mask collisions (default is -1).\r\n     * A collision between A and B will happen if A.collisionGroup & b.collisionMask !== 0\r\n     */\r\n    public get collisionMask(): number {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionMask;\r\n    }\r\n\r\n    public set collisionMask(mask: number) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionMask = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a collision response flag (default is true).\r\n     * when collisionResponse is false, events are still triggered but colliding entity has no response\r\n     * This helps creating trigger volume when user wants collision feedback events but not position/velocity\r\n     * to respond to the collision.\r\n     */\r\n    public get collisionResponse(): boolean {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionResponse;\r\n    }\r\n\r\n    public set collisionResponse(response: boolean) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionResponse = response;\r\n    }\r\n    /**\r\n     * Gets or sets the current collision group mask (-1 by default).\r\n     * A collision between A and B will happen if A.collisionGroup & b.collisionMask !== 0\r\n     */\r\n    public get collisionGroup(): number {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionGroup;\r\n    }\r\n\r\n    public set collisionGroup(mask: number) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionGroup = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets current surrounding meshes (null by default).\r\n     *\r\n     * By default collision detection is tested against every mesh in the scene.\r\n     * It is possible to set surroundingMeshes to a defined list of meshes and then only these specified\r\n     * meshes will be tested for the collision.\r\n     *\r\n     * Note: if set to an empty array no collision will happen when this mesh is moved.\r\n     */\r\n    public get surroundingMeshes(): Nullable<AbstractMesh[]> {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._surroundingMeshes;\r\n    }\r\n\r\n    public set surroundingMeshes(meshes: Nullable<AbstractMesh[]>) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._surroundingMeshes = meshes;\r\n    }\r\n\r\n    // Edges\r\n    /**\r\n     * Defines edge width used when edgesRenderer is enabled\r\n     * @see https://www.babylonjs-playground.com/#10OJSG#13\r\n     */\r\n    public edgesWidth = 1;\r\n    /**\r\n     * Defines edge color used when edgesRenderer is enabled\r\n     * @see https://www.babylonjs-playground.com/#10OJSG#13\r\n     */\r\n    public edgesColor = new Color4(1, 0, 0, 1);\r\n    /** @internal */\r\n    public _edgesRenderer: Nullable<IEdgesRenderer> = null;\r\n\r\n    /** @internal */\r\n    public _masterMesh: Nullable<AbstractMesh> = null;\r\n    protected _boundingInfo: Nullable<BoundingInfo> = null;\r\n    protected _boundingInfoIsDirty = true;\r\n    /** @internal */\r\n    public _renderId = 0;\r\n\r\n    /**\r\n     * Gets or sets the list of subMeshes\r\n     * @see https://doc.babylonjs.com/how_to/multi_materials\r\n     */\r\n    public subMeshes: SubMesh[];\r\n\r\n    /** @internal */\r\n    public _intersectionsInProgress = new Array<AbstractMesh>();\r\n\r\n    /** @internal */\r\n    public _unIndexed = false;\r\n\r\n    /** @internal */\r\n    public _lightSources = new Array<Light>();\r\n\r\n    /** Gets the list of lights affecting that mesh */\r\n    public get lightSources(): Light[] {\r\n        return this._lightSources;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _positions(): Nullable<Vector3[]> {\r\n        return null;\r\n    }\r\n\r\n    // Loading properties\r\n    /** @internal */\r\n    public _waitingData: {\r\n        lods: Nullable<any>;\r\n        actions: Nullable<any>;\r\n        freezeWorldMatrix: Nullable<boolean>;\r\n    } = {\r\n        lods: null,\r\n        actions: null,\r\n        freezeWorldMatrix: null,\r\n    };\r\n\r\n    /** @internal */\r\n    public _bonesTransformMatrices: Nullable<Float32Array> = null;\r\n\r\n    /** @internal */\r\n    public _transformMatrixTexture: Nullable<RawTexture> = null;\r\n\r\n    /**\r\n     * Gets or sets a skeleton to apply skinning transformations\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons\r\n     */\r\n    public set skeleton(value: Nullable<Skeleton>) {\r\n        const skeleton = this._internalAbstractMeshDataInfo._skeleton;\r\n        if (skeleton && skeleton.needInitialSkinMatrix) {\r\n            skeleton._unregisterMeshWithPoseMatrix(this);\r\n        }\r\n\r\n        if (value && value.needInitialSkinMatrix) {\r\n            value._registerMeshWithPoseMatrix(this);\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._skeleton = value;\r\n\r\n        if (!this._internalAbstractMeshDataInfo._skeleton) {\r\n            this._bonesTransformMatrices = null;\r\n        }\r\n\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    public get skeleton(): Nullable<Skeleton> {\r\n        return this._internalAbstractMeshDataInfo._skeleton;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the mesh is rebuilt.\r\n     */\r\n    public onRebuildObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * The current mesh uniform buffer.\r\n     * @internal Internal use only.\r\n     */\r\n    public _uniformBuffer: UniformBuffer;\r\n\r\n    // Constructor\r\n\r\n    /**\r\n     * Creates a new AbstractMesh\r\n     * @param name defines the name of the mesh\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = null) {\r\n        super(name, scene, false);\r\n\r\n        scene = this.getScene();\r\n\r\n        scene.addMesh(this);\r\n\r\n        this._resyncLightSources();\r\n\r\n        // Mesh Uniform Buffer.\r\n        this._uniformBuffer = new UniformBuffer(this.getScene().getEngine(), undefined, undefined, name, !this.getScene().getEngine().isWebGPU);\r\n        this._buildUniformLayout();\r\n\r\n        switch (scene.performancePriority) {\r\n            case ScenePerformancePriority.Aggressive:\r\n                this.doNotSyncBoundingInfo = true;\r\n            // eslint-disable-next-line no-fallthrough\r\n            case ScenePerformancePriority.Intermediate:\r\n                this.alwaysSelectAsActiveMesh = true;\r\n                this.isPickable = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"world\", 16);\r\n        this._uniformBuffer.addUniform(\"visibility\", 1);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Transfer the mesh values to its UBO.\r\n     * @param world The world matrix associated with the mesh\r\n     */\r\n    public transferToEffect(world: Matrix): void {\r\n        const ubo = this._uniformBuffer;\r\n\r\n        ubo.updateMatrix(\"world\", world);\r\n        ubo.updateFloat(\"visibility\", this._internalAbstractMeshDataInfo._visibility);\r\n\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh uniform buffer.\r\n     * @returns the uniform buffer of the mesh.\r\n     */\r\n    public getMeshUniformBuffer(): UniformBuffer {\r\n        return this._uniformBuffer;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"AbstractMesh\"\r\n     * @returns \"AbstractMesh\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AbstractMesh\";\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the current mesh\r\n     * @param fullDetails defines a boolean indicating if full details must be included\r\n     * @returns a string representation of the current mesh\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name + \", isInstance: \" + (this.getClassName() !== \"InstancedMesh\" ? \"YES\" : \"NO\");\r\n        ret += \", # of submeshes: \" + (this.subMeshes ? this.subMeshes.length : 0);\r\n\r\n        const skeleton = this._internalAbstractMeshDataInfo._skeleton;\r\n        if (skeleton) {\r\n            ret += \", skeleton: \" + skeleton.name;\r\n        }\r\n        if (fullDetails) {\r\n            ret += \", billboard mode: \" + [\"NONE\", \"X\", \"Y\", null, \"Z\", null, null, \"ALL\"][this.billboardMode];\r\n            ret += \", freeze wrld mat: \" + (this._isWorldMatrixFrozen || this._waitingData.freezeWorldMatrix ? \"YES\" : \"NO\");\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _getEffectiveParent(): Nullable<Node> {\r\n        if (this._masterMesh && this.billboardMode !== TransformNode.BILLBOARDMODE_NONE) {\r\n            return this._masterMesh;\r\n        }\r\n\r\n        return super._getEffectiveParent();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getActionManagerForTrigger(trigger?: number, initialCall = true): Nullable<AbstractActionManager> {\r\n        if (this.actionManager && (initialCall || this.actionManager.isRecursive)) {\r\n            if (trigger) {\r\n                if (this.actionManager.hasSpecificTrigger(trigger)) {\r\n                    return this.actionManager;\r\n                }\r\n            } else {\r\n                return this.actionManager;\r\n            }\r\n        }\r\n\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        return this.parent._getActionManagerForTrigger(trigger, false);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _rebuild(dispose = false): void {\r\n        this.onRebuildObservable.notifyObservers(this);\r\n\r\n        if (this._occlusionQuery !== null) {\r\n            this._occlusionQuery = null;\r\n        }\r\n\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh._rebuild();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _resyncLightSources(): void {\r\n        this._lightSources.length = 0;\r\n\r\n        for (const light of this.getScene().lights) {\r\n            if (!light.isEnabled()) {\r\n                continue;\r\n            }\r\n\r\n            if (light.canAffectMesh(this)) {\r\n                this._lightSources.push(light);\r\n            }\r\n        }\r\n\r\n        this._markSubMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _resyncLightSource(light: Light): void {\r\n        const isIn = light.isEnabled() && light.canAffectMesh(this);\r\n\r\n        const index = this._lightSources.indexOf(light);\r\n        let removed = false;\r\n        if (index === -1) {\r\n            if (!isIn) {\r\n                return;\r\n            }\r\n            this._lightSources.push(light);\r\n        } else {\r\n            if (isIn) {\r\n                return;\r\n            }\r\n            removed = true;\r\n            this._lightSources.splice(index, 1);\r\n        }\r\n\r\n        this._markSubMeshesAsLightDirty(removed);\r\n    }\r\n\r\n    /** @internal */\r\n    public _unBindEffect() {\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh.setEffect(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _removeLightSource(light: Light, dispose: boolean): void {\r\n        const index = this._lightSources.indexOf(light);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        this._lightSources.splice(index, 1);\r\n\r\n        this._markSubMeshesAsLightDirty(dispose);\r\n    }\r\n\r\n    private _markSubMeshesAsDirty(func: (defines: MaterialDefines) => void) {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            for (let i = 0; i < subMesh._drawWrappers.length; ++i) {\r\n                const drawWrapper = subMesh._drawWrappers[i];\r\n                if (!drawWrapper || !drawWrapper.defines || !(drawWrapper.defines as MaterialDefines).markAllAsDirty) {\r\n                    continue;\r\n                }\r\n                func(drawWrapper.defines as MaterialDefines);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _markSubMeshesAsLightDirty(dispose: boolean = false) {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsLightDirty(dispose));\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSubMeshesAsAttributesDirty() {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsAttributesDirty());\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSubMeshesAsMiscDirty() {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsMiscDirty());\r\n    }\r\n\r\n    /**\r\n     * Flag the AbstractMesh as dirty (Forcing it to update everything)\r\n     * @param property if set to \"rotation\" the objects rotationQuaternion will be set to null\r\n     * @returns this AbstractMesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public markAsDirty(property?: string): AbstractMesh {\r\n        this._currentRenderId = Number.MAX_VALUE;\r\n        this._isDirty = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache for all submeshes of this abstract mesh\r\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\r\n     */\r\n    public resetDrawCache(passId?: number): void {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh.resetDrawCache(passId);\r\n        }\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Returns true if the mesh is blocked. Implemented by child classes\r\n     */\r\n    public get isBlocked(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh itself by default. Implemented by child classes\r\n     * @param camera defines the camera to use to pick the right LOD level\r\n     * @returns the currentAbstractMesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getLOD(camera: Camera): Nullable<AbstractMesh> {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns 0 by default. Implemented by child classes\r\n     * @returns an integer\r\n     */\r\n    public getTotalVertices(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the number of indices or zero if the mesh has no geometry.\r\n     */\r\n    public getTotalIndices(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns null by default. Implemented by child classes\r\n     * @returns null\r\n     */\r\n    public getIndices(): Nullable<IndicesArray> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the array of the requested vertex data kind. Implemented by child classes\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns null\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getVerticesData(kind: string): Nullable<FloatArray> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\r\n     * Note that a new underlying VertexBuffer object is created each call.\r\n     * If the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     * @param kind defines vertex data kind:\r\n     * * VertexBuffer.PositionKind\r\n     * * VertexBuffer.UVKind\r\n     * * VertexBuffer.UV2Kind\r\n     * * VertexBuffer.UV3Kind\r\n     * * VertexBuffer.UV4Kind\r\n     * * VertexBuffer.UV5Kind\r\n     * * VertexBuffer.UV6Kind\r\n     * * VertexBuffer.ColorKind\r\n     * * VertexBuffer.MatricesIndicesKind\r\n     * * VertexBuffer.MatricesIndicesExtraKind\r\n     * * VertexBuffer.MatricesWeightsKind\r\n     * * VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the data must be flagged as updatable (or static)\r\n     * @param stride defines the vertex stride (size of an entire vertex). Can be null and in this case will be deduced from vertex data kind\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setVerticesData(kind: string, data: FloatArray, updatable?: boolean, stride?: number): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the existing vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, it is simply returned as it is.\r\n     * @param kind defines vertex data kind:\r\n     * * VertexBuffer.PositionKind\r\n     * * VertexBuffer.UVKind\r\n     * * VertexBuffer.UV2Kind\r\n     * * VertexBuffer.UV3Kind\r\n     * * VertexBuffer.UV4Kind\r\n     * * VertexBuffer.UV5Kind\r\n     * * VertexBuffer.UV6Kind\r\n     * * VertexBuffer.ColorKind\r\n     * * VertexBuffer.MatricesIndicesKind\r\n     * * VertexBuffer.MatricesIndicesExtraKind\r\n     * * VertexBuffer.MatricesWeightsKind\r\n     * * VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends If `kind` is `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed\r\n     * @param makeItUnique If true, a new global geometry is created from this data and is set to the mesh\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh indices,\r\n     * If the mesh has no geometry, a new Geometry object is created and set to the mesh.\r\n     * @param indices Expects an array populated with integers or a typed array (Int32Array, Uint32Array, Uint16Array)\r\n     * @param totalVertices Defines the total number of vertices\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number>): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if specific vertex data is present\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns true is data kind is present\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh BoundingInfo object or creates a new one and returns if it was undefined.\r\n     * Note that it returns a shallow bounding of the mesh (i.e. it does not include children).\r\n     * To get the full bounding of all children, call `getHierarchyBoundingVectors` instead.\r\n     * @returns a BoundingInfo\r\n     */\r\n    public getBoundingInfo(): BoundingInfo {\r\n        if (this._masterMesh) {\r\n            return this._masterMesh.getBoundingInfo();\r\n        }\r\n\r\n        if (this._boundingInfoIsDirty) {\r\n            this._boundingInfoIsDirty = false;\r\n            // this._boundingInfo is being created if undefined\r\n            this._updateBoundingInfo();\r\n        }\r\n        // cannot be null.\r\n        return this._boundingInfo!;\r\n    }\r\n\r\n    /**\r\n     * Overwrite the current bounding info\r\n     * @param boundingInfo defines the new bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public setBoundingInfo(boundingInfo: BoundingInfo): AbstractMesh {\r\n        this._boundingInfo = boundingInfo;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns true if there is already a bounding info\r\n     */\r\n    public get hasBoundingInfo(): boolean {\r\n        return this._boundingInfo !== null;\r\n    }\r\n\r\n    /**\r\n     * Creates a new bounding info for the mesh\r\n     * @param minimum min vector of the bounding box/sphere\r\n     * @param maximum max vector of the bounding box/sphere\r\n     * @param worldMatrix defines the new world matrix\r\n     * @returns the new bounding info\r\n     */\r\n    public buildBoundingInfo(minimum: DeepImmutable<Vector3>, maximum: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this._boundingInfo = new BoundingInfo(minimum, maximum, worldMatrix);\r\n        return this._boundingInfo;\r\n    }\r\n\r\n    /**\r\n     * Uniformly scales the mesh to fit inside of a unit cube (1 X 1 X 1 units)\r\n     * @param includeDescendants Use the hierarchy's bounding box instead of the mesh's bounding box. Default is false\r\n     * @param ignoreRotation ignore rotation when computing the scale (ie. object will be axis aligned). Default is false\r\n     * @param predicate predicate that is passed in to getHierarchyBoundingVectors when selecting which object should be included when scaling\r\n     * @returns the current mesh\r\n     */\r\n    public normalizeToUnitCube(includeDescendants = true, ignoreRotation = false, predicate?: Nullable<(node: AbstractMesh) => boolean>): AbstractMesh {\r\n        return <AbstractMesh>super.normalizeToUnitCube(includeDescendants, ignoreRotation, predicate);\r\n    }\r\n\r\n    /** Gets a boolean indicating if this mesh has skinning data and an attached skeleton */\r\n    public get useBones(): boolean {\r\n        return <boolean>(\r\n            (this.skeleton &&\r\n                this.getScene().skeletonsEnabled &&\r\n                this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind) &&\r\n                this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind))\r\n        );\r\n    }\r\n\r\n    /** @internal */\r\n    public _preActivate(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _preActivateForIntermediateRendering(renderId: number): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _activate(renderId: number, intermediateRendering: boolean): boolean {\r\n        this._renderId = renderId;\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _postActivate(): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _freeze() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _unFreeze() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Gets the current world matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._masterMesh && this.billboardMode === TransformNode.BILLBOARDMODE_NONE) {\r\n            return this._masterMesh.getWorldMatrix();\r\n        }\r\n\r\n        return super.getWorldMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public _getWorldMatrixDeterminant(): number {\r\n        if (this._masterMesh) {\r\n            return this._masterMesh._getWorldMatrixDeterminant();\r\n        }\r\n\r\n        return super._getWorldMatrixDeterminant();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh is an instance or a regular mesh\r\n     */\r\n    public get isAnInstance(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has instances\r\n     */\r\n    public get hasInstances(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has thin instances\r\n     */\r\n    public get hasThinInstances(): boolean {\r\n        return false;\r\n    }\r\n\r\n    // ================================== Point of View Movement =================================\r\n\r\n    /**\r\n     * Perform relative position change from the point of view of behind the front of the mesh.\r\n     * This is performed taking into account the meshes current rotation, so you do not have to care.\r\n     * Supports definition of mesh facing forward or backward\r\n     * @param amountRight defines the distance on the right axis\r\n     * @param amountUp defines the distance on the up axis\r\n     * @param amountForward defines the distance on the forward axis\r\n     * @returns the current mesh\r\n     */\r\n    public movePOV(amountRight: number, amountUp: number, amountForward: number): AbstractMesh {\r\n        this.position.addInPlace(this.calcMovePOV(amountRight, amountUp, amountForward));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate relative position change from the point of view of behind the front of the mesh.\r\n     * This is performed taking into account the meshes current rotation, so you do not have to care.\r\n     * Supports definition of mesh facing forward or backward\r\n     * @param amountRight defines the distance on the right axis\r\n     * @param amountUp defines the distance on the up axis\r\n     * @param amountForward defines the distance on the forward axis\r\n     * @returns the new displacement vector\r\n     */\r\n    public calcMovePOV(amountRight: number, amountUp: number, amountForward: number): Vector3 {\r\n        const rotMatrix = new Matrix();\r\n        const rotQuaternion = this.rotationQuaternion ? this.rotationQuaternion : Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\r\n        rotQuaternion.toRotationMatrix(rotMatrix);\r\n\r\n        const translationDelta = Vector3.Zero();\r\n        const defForwardMult = this.definedFacingForward ? -1 : 1;\r\n        Vector3.TransformCoordinatesFromFloatsToRef(amountRight * defForwardMult, amountUp, amountForward * defForwardMult, rotMatrix, translationDelta);\r\n        return translationDelta;\r\n    }\r\n    // ================================== Point of View Rotation =================================\r\n    /**\r\n     * Perform relative rotation change from the point of view of behind the front of the mesh.\r\n     * Supports definition of mesh facing forward or backward\r\n     * @param flipBack defines the flip\r\n     * @param twirlClockwise defines the twirl\r\n     * @param tiltRight defines the tilt\r\n     * @returns the current mesh\r\n     */\r\n    public rotatePOV(flipBack: number, twirlClockwise: number, tiltRight: number): AbstractMesh {\r\n        this.rotation.addInPlace(this.calcRotatePOV(flipBack, twirlClockwise, tiltRight));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate relative rotation change from the point of view of behind the front of the mesh.\r\n     * Supports definition of mesh facing forward or backward.\r\n     * @param flipBack defines the flip\r\n     * @param twirlClockwise defines the twirl\r\n     * @param tiltRight defines the tilt\r\n     * @returns the new rotation vector\r\n     */\r\n    public calcRotatePOV(flipBack: number, twirlClockwise: number, tiltRight: number): Vector3 {\r\n        const defForwardMult = this.definedFacingForward ? 1 : -1;\r\n        return new Vector3(flipBack * defForwardMult, twirlClockwise, tiltRight * defForwardMult);\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\r\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public refreshBoundingInfo(applySkeleton: boolean = false, applyMorph: boolean = false): AbstractMesh {\r\n        if (this._boundingInfo && this._boundingInfo.isLocked) {\r\n            return this;\r\n        }\r\n\r\n        this._refreshBoundingInfo(this._getPositionData(applySkeleton, applyMorph), null);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _refreshBoundingInfo(data: Nullable<FloatArray>, bias: Nullable<Vector2>): void {\r\n        if (data) {\r\n            const extend = extractMinAndMax(data, 0, this.getTotalVertices(), bias);\r\n            if (this._boundingInfo) {\r\n                this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\r\n            } else {\r\n                this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\r\n            }\r\n        }\r\n\r\n        if (this.subMeshes) {\r\n            for (let index = 0; index < this.subMeshes.length; index++) {\r\n                this.subMeshes[index].refreshBoundingInfo(data);\r\n            }\r\n        }\r\n\r\n        this._updateBoundingInfo();\r\n    }\r\n\r\n    /**\r\n     * Internal function to get buffer data and possibly apply morphs and normals\r\n     * @param applySkeleton\r\n     * @param applyMorph\r\n     * @param data\r\n     * @param kind the kind of data you want. Can be Normal or Position\r\n     */\r\n    private _getData(applySkeleton: boolean = false, applyMorph: boolean = false, data?: Nullable<FloatArray>, kind: string = VertexBuffer.PositionKind): Nullable<FloatArray> {\r\n        data = data ?? this.getVerticesData(kind)!.slice();\r\n\r\n        if (data && applyMorph && this.morphTargetManager) {\r\n            let faceIndexCount = 0;\r\n            let positionIndex = 0;\r\n            for (let vertexCount = 0; vertexCount < data.length; vertexCount++) {\r\n                for (let targetCount = 0; targetCount < this.morphTargetManager.numTargets; targetCount++) {\r\n                    const targetMorph = this.morphTargetManager.getTarget(targetCount);\r\n                    const influence = targetMorph.influence;\r\n                    if (influence > 0.0) {\r\n                        const morphTargetPositions = targetMorph.getPositions();\r\n                        if (morphTargetPositions) {\r\n                            data[vertexCount] += (morphTargetPositions[vertexCount] - data[vertexCount]) * influence;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                faceIndexCount++;\r\n                if (kind === VertexBuffer.PositionKind) {\r\n                    if (this._positions && faceIndexCount === 3) {\r\n                        // We want to merge into positions every 3 indices starting (but not 0)\r\n                        faceIndexCount = 0;\r\n                        const index = positionIndex * 3;\r\n                        this._positions[positionIndex++].copyFromFloats(data[index], data[index + 1], data[index + 2]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (data && applySkeleton && this.skeleton) {\r\n            const matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n            const matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n            if (matricesWeightsData && matricesIndicesData) {\r\n                const needExtras = this.numBoneInfluencers > 4;\r\n                const matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n                const matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n\r\n                const skeletonMatrices = this.skeleton.getTransformMatrices(this);\r\n\r\n                const tempVector = TmpVectors.Vector3[0];\r\n                const finalMatrix = TmpVectors.Matrix[0];\r\n                const tempMatrix = TmpVectors.Matrix[1];\r\n\r\n                let matWeightIdx = 0;\r\n                for (let index = 0; index < data.length; index += 3, matWeightIdx += 4) {\r\n                    finalMatrix.reset();\r\n\r\n                    let inf: number;\r\n                    let weight: number;\r\n                    for (inf = 0; inf < 4; inf++) {\r\n                        weight = matricesWeightsData[matWeightIdx + inf];\r\n                        if (weight > 0) {\r\n                            Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                            finalMatrix.addToSelf(tempMatrix);\r\n                        }\r\n                    }\r\n                    if (needExtras) {\r\n                        for (inf = 0; inf < 4; inf++) {\r\n                            weight = matricesWeightsExtraData![matWeightIdx + inf];\r\n                            if (weight > 0) {\r\n                                Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData![matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                                finalMatrix.addToSelf(tempMatrix);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (kind === VertexBuffer.NormalKind) {\r\n                        Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], finalMatrix, tempVector);\r\n                    } else {\r\n                        Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], finalMatrix, tempVector);\r\n                    }\r\n                    tempVector.toArray(data, index);\r\n\r\n                    if (kind === VertexBuffer.PositionKind && this._positions) {\r\n                        this._positions[index / 3].copyFrom(tempVector);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Get the normals vertex data and optionally apply skeleton and morphing.\r\n     * @param applySkeleton defines whether to apply the skeleton\r\n     * @param applyMorph  defines whether to apply the morph target\r\n     * @returns the normals data\r\n     */\r\n    public getNormalsData(applySkeleton = false, applyMorph = false): Nullable<FloatArray> {\r\n        return this._getData(applySkeleton, applyMorph, null, VertexBuffer.NormalKind);\r\n    }\r\n\r\n    /**\r\n     * Get the position vertex data and optionally apply skeleton and morphing.\r\n     * @param applySkeleton defines whether to apply the skeleton\r\n     * @param applyMorph  defines whether to apply the morph target\r\n     * @param data defines the position data to apply the skeleton and morph to\r\n     * @returns the position data\r\n     */\r\n    public getPositionData(applySkeleton: boolean = false, applyMorph: boolean = false, data?: Nullable<FloatArray>): Nullable<FloatArray> {\r\n        return this._getData(applySkeleton, applyMorph, data, VertexBuffer.PositionKind);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getPositionData(applySkeleton: boolean, applyMorph: boolean): Nullable<FloatArray> {\r\n        let data = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (this._internalAbstractMeshDataInfo._positions) {\r\n            this._internalAbstractMeshDataInfo._positions = null;\r\n        }\r\n\r\n        if (data && ((applySkeleton && this.skeleton) || (applyMorph && this.morphTargetManager))) {\r\n            data = data.slice();\r\n            this._generatePointsArray();\r\n            if (this._positions) {\r\n                const pos = this._positions;\r\n                this._internalAbstractMeshDataInfo._positions = new Array<Vector3>(pos.length);\r\n                for (let i = 0; i < pos.length; i++) {\r\n                    this._internalAbstractMeshDataInfo._positions[i] = pos[i]?.clone() || new Vector3();\r\n                }\r\n            }\r\n            return this.getPositionData(applySkeleton, applyMorph, data);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateBoundingInfo(): AbstractMesh {\r\n        if (this._boundingInfo) {\r\n            this._boundingInfo.update(this.worldMatrixFromCache);\r\n        } else {\r\n            this._boundingInfo = new BoundingInfo(Vector3.Zero(), Vector3.Zero(), this.worldMatrixFromCache);\r\n        }\r\n        this._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateSubMeshesBoundingInfo(matrix: DeepImmutable<Matrix>): AbstractMesh {\r\n        if (!this.subMeshes) {\r\n            return this;\r\n        }\r\n        const count = this.subMeshes.length;\r\n        for (let subIndex = 0; subIndex < count; subIndex++) {\r\n            const subMesh = this.subMeshes[subIndex];\r\n            if (count > 1 || !subMesh.IsGlobal) {\r\n                subMesh.updateBoundingInfo(matrix);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _afterComputeWorldMatrix(): void {\r\n        if (this.doNotSyncBoundingInfo) {\r\n            return;\r\n        }\r\n        // Bounding info\r\n        this._boundingInfoIsDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\r\n     * A mesh is in the frustum if its bounding box intersects the frustum\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this.getBoundingInfo().isInFrustum(frustumPlanes, this.cullingStrategy);\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is completely in the frustum defined be the passed array of planes.\r\n     * A mesh is completely in the frustum if its bounding box it completely inside the frustum.\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is completely in the frustum planes\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this.getBoundingInfo().isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * True if the mesh intersects another mesh or a SolidParticle object\r\n     * @param mesh defines a target mesh or SolidParticle to test\r\n     * @param precise Unless the parameter `precise` is set to `true` the intersection is computed according to Axis Aligned Bounding Boxes (AABB), else according to OBB (Oriented BBoxes)\r\n     * @param includeDescendants Can be set to true to test if the mesh defined in parameters intersects with the current mesh or any child meshes\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsMesh(mesh: AbstractMesh | SolidParticle, precise: boolean = false, includeDescendants?: boolean): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n        const otherBoundingInfo = mesh.getBoundingInfo();\r\n\r\n        if (boundingInfo.intersects(otherBoundingInfo, precise)) {\r\n            return true;\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (const child of this.getChildMeshes()) {\r\n                if (child.intersectsMesh(mesh, precise, true)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the passed point (Vector3) is inside the mesh bounding box\r\n     * @param point defines the point to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsPoint(point: Vector3): boolean {\r\n        return this.getBoundingInfo().intersectsPoint(point);\r\n    }\r\n\r\n    // Collisions\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh can be used in the collision engine\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\r\n     */\r\n    public get checkCollisions(): boolean {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._checkCollisions;\r\n    }\r\n\r\n    public set checkCollisions(collisionEnabled: boolean) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._checkCollisions = collisionEnabled;\r\n    }\r\n\r\n    /**\r\n     * Gets Collider object used to compute collisions (not physics)\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\r\n     */\r\n    public get collider(): Nullable<Collider> {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collider;\r\n    }\r\n\r\n    /**\r\n     * Move the mesh using collision engine\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\r\n     * @param displacement defines the requested displacement vector\r\n     * @returns the current mesh\r\n     */\r\n    public moveWithCollisions(displacement: Vector3): AbstractMesh {\r\n        const globalPosition = this.getAbsolutePosition();\r\n\r\n        globalPosition.addToRef(this.ellipsoidOffset, this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions);\r\n        const coordinator = this.getScene().collisionCoordinator;\r\n\r\n        if (!this._internalAbstractMeshDataInfo._meshCollisionData._collider) {\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._collider = coordinator.createCollider();\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collider._radius = this.ellipsoid;\r\n\r\n        coordinator.getNewPosition(\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions,\r\n            displacement,\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._collider,\r\n            this.collisionRetryCount,\r\n            this,\r\n            this._onCollisionPositionChange,\r\n            this.uniqueId\r\n        );\r\n        return this;\r\n    }\r\n\r\n    private _onCollisionPositionChange = (collisionId: number, newPosition: Vector3, collidedMesh: Nullable<AbstractMesh> = null) => {\r\n        newPosition.subtractToRef(\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions,\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions\r\n        );\r\n\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions.length() > Engine.CollisionsEpsilon) {\r\n            this.position.addInPlace(this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions);\r\n        }\r\n\r\n        if (collidedMesh) {\r\n            this.onCollideObservable.notifyObservers(collidedMesh);\r\n        }\r\n\r\n        this.onCollisionPositionChangeObservable.notifyObservers(this.position);\r\n    };\r\n\r\n    // Collisions\r\n    /**\r\n     * @internal\r\n     */\r\n    public _collideForSubMesh(subMesh: SubMesh, transformMatrix: Matrix, collider: Collider): AbstractMesh {\r\n        this._generatePointsArray();\r\n\r\n        if (!this._positions) {\r\n            return this;\r\n        }\r\n\r\n        // Transformation\r\n        if (!subMesh._lastColliderWorldVertices || !subMesh._lastColliderTransformMatrix!.equals(transformMatrix)) {\r\n            subMesh._lastColliderTransformMatrix = transformMatrix.clone();\r\n            subMesh._lastColliderWorldVertices = [];\r\n            subMesh._trianglePlanes = [];\r\n            const start = subMesh.verticesStart;\r\n            const end = subMesh.verticesStart + subMesh.verticesCount;\r\n            for (let i = start; i < end; i++) {\r\n                subMesh._lastColliderWorldVertices.push(Vector3.TransformCoordinates(this._positions[i], transformMatrix));\r\n            }\r\n        }\r\n\r\n        // Collide\r\n        collider._collide(\r\n            subMesh._trianglePlanes,\r\n            subMesh._lastColliderWorldVertices,\r\n            <IndicesArray>this.getIndices(),\r\n            subMesh.indexStart,\r\n            subMesh.indexStart + subMesh.indexCount,\r\n            subMesh.verticesStart,\r\n            !!subMesh.getMaterial(),\r\n            this,\r\n            this._shouldConvertRHS(),\r\n            subMesh.getMaterial()?.fillMode === Constants.MATERIAL_TriangleStripDrawMode\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processCollisionsForSubMeshes(collider: Collider, transformMatrix: Matrix): AbstractMesh {\r\n        const subMeshes = this._scene.getCollidingSubMeshCandidates(this, collider);\r\n        const len = subMeshes.length;\r\n\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n\r\n            // Bounding test\r\n            if (len > 1 && !subMesh._checkCollision(collider)) {\r\n                continue;\r\n            }\r\n\r\n            this._collideForSubMesh(subMesh, transformMatrix, collider);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _shouldConvertRHS() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): AbstractMesh {\r\n        // Bounding box test\r\n        if (!this.getBoundingInfo()._checkCollision(collider)) {\r\n            return this;\r\n        }\r\n\r\n        // Transformation matrix\r\n        const collisionsScalingMatrix = TmpVectors.Matrix[0];\r\n        const collisionsTransformMatrix = TmpVectors.Matrix[1];\r\n        Matrix.ScalingToRef(1.0 / collider._radius.x, 1.0 / collider._radius.y, 1.0 / collider._radius.z, collisionsScalingMatrix);\r\n        this.worldMatrixFromCache.multiplyToRef(collisionsScalingMatrix, collisionsTransformMatrix);\r\n        this._processCollisionsForSubMeshes(collider, collisionsTransformMatrix);\r\n        return this;\r\n    }\r\n\r\n    // Picking\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the passed Ray intersects with the mesh\r\n     * @param ray defines the ray to use\r\n     * @param fastCheck defines if fast mode (but less precise) must be used (false by default)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @param onlyBoundingInfo defines a boolean indicating if picking should only happen using bounding info (false by default)\r\n     * @param worldToUse defines the world matrix to use to get the world coordinate of the intersection point\r\n     * @param skipBoundingInfo a boolean indicating if we should skip the bounding info check\r\n     * @returns the picking info\r\n     * @see https://doc.babylonjs.com/babylon101/intersect_collisions_-_mesh\r\n     */\r\n    public intersects(\r\n        ray: Ray,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate,\r\n        onlyBoundingInfo = false,\r\n        worldToUse?: Matrix,\r\n        skipBoundingInfo = false\r\n    ): PickingInfo {\r\n        const pickingInfo = new PickingInfo();\r\n        const intersectionThreshold = this.getClassName() === \"InstancedLinesMesh\" || this.getClassName() === \"LinesMesh\" ? (this as any).intersectionThreshold : 0;\r\n        const boundingInfo = this.getBoundingInfo();\r\n        if (!this.subMeshes) {\r\n            return pickingInfo;\r\n        }\r\n        if (\r\n            !skipBoundingInfo &&\r\n            (!ray.intersectsSphere(boundingInfo.boundingSphere, intersectionThreshold) || !ray.intersectsBox(boundingInfo.boundingBox, intersectionThreshold))\r\n        ) {\r\n            return pickingInfo;\r\n        }\r\n\r\n        if (onlyBoundingInfo) {\r\n            pickingInfo.hit = skipBoundingInfo ? false : true;\r\n            pickingInfo.pickedMesh = skipBoundingInfo ? null : this;\r\n            pickingInfo.distance = skipBoundingInfo ? 0 : Vector3.Distance(ray.origin, boundingInfo.boundingSphere.center);\r\n            pickingInfo.subMeshId = 0;\r\n            return pickingInfo;\r\n        }\r\n\r\n        if (!this._generatePointsArray()) {\r\n            return pickingInfo;\r\n        }\r\n\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        const subMeshes = this._scene.getIntersectingSubMeshCandidates(this, ray);\r\n        const len: number = subMeshes.length;\r\n\r\n        // Check if all submeshes are using a material that don't allow picking (point/lines rendering)\r\n        // if no submesh can be picked that way, then fallback to BBox picking\r\n        let anySubmeshSupportIntersect = false;\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n            const material = subMesh.getMaterial();\r\n            if (!material) {\r\n                continue;\r\n            }\r\n            if (\r\n                material.fillMode == Constants.MATERIAL_TriangleStripDrawMode ||\r\n                material.fillMode == Constants.MATERIAL_TriangleFillMode ||\r\n                material.fillMode == Constants.MATERIAL_WireFrameFillMode ||\r\n                material.fillMode == Constants.MATERIAL_PointFillMode ||\r\n                material.fillMode == Constants.MATERIAL_LineListDrawMode\r\n            ) {\r\n                anySubmeshSupportIntersect = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // no sub mesh support intersection, fallback to BBox that has already be done\r\n        if (!anySubmeshSupportIntersect) {\r\n            pickingInfo.hit = true;\r\n            pickingInfo.pickedMesh = this;\r\n            pickingInfo.distance = Vector3.Distance(ray.origin, boundingInfo.boundingSphere.center);\r\n            pickingInfo.subMeshId = -1;\r\n            return pickingInfo;\r\n        }\r\n\r\n        // at least 1 submesh supports intersection, keep going\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n\r\n            // Bounding test\r\n            if (len > 1 && !subMesh.canIntersects(ray)) {\r\n                continue;\r\n            }\r\n\r\n            const currentIntersectInfo = subMesh.intersects(ray, <Vector3[]>this._positions, <IndicesArray>this.getIndices(), fastCheck, trianglePredicate);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.subMeshId = index;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (intersectInfo) {\r\n            // Get picked point\r\n            const world = worldToUse ?? this.getWorldMatrix();\r\n            const worldOrigin = TmpVectors.Vector3[0];\r\n            const direction = TmpVectors.Vector3[1];\r\n            Vector3.TransformCoordinatesToRef(ray.origin, world, worldOrigin);\r\n            ray.direction.scaleToRef(intersectInfo.distance, direction);\r\n            const worldDirection = Vector3.TransformNormal(direction, world);\r\n            const pickedPoint = worldDirection.addInPlace(worldOrigin);\r\n\r\n            // Return result\r\n            pickingInfo.hit = true;\r\n            pickingInfo.distance = Vector3.Distance(worldOrigin, pickedPoint);\r\n            pickingInfo.pickedPoint = pickedPoint;\r\n            pickingInfo.pickedMesh = this;\r\n            pickingInfo.bu = intersectInfo.bu || 0;\r\n            pickingInfo.bv = intersectInfo.bv || 0;\r\n            pickingInfo.subMeshFaceId = intersectInfo.faceId;\r\n            pickingInfo.faceId = intersectInfo.faceId + subMeshes.data[intersectInfo.subMeshId].indexStart / (this.getClassName().indexOf(\"LinesMesh\") !== -1 ? 2 : 3);\r\n            pickingInfo.subMeshId = intersectInfo.subMeshId;\r\n            return pickingInfo;\r\n        }\r\n\r\n        return pickingInfo;\r\n    }\r\n\r\n    /**\r\n     * Clones the current mesh\r\n     * @param name defines the mesh name\r\n     * @param newParent defines the new mesh parent\r\n     * @param doNotCloneChildren defines a boolean indicating that children must not be cloned (false by default)\r\n     * @returns the new mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<AbstractMesh> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Disposes all the submeshes of the current meshnp\r\n     * @returns the current mesh\r\n     */\r\n    public releaseSubMeshes(): AbstractMesh {\r\n        if (this.subMeshes) {\r\n            while (this.subMeshes.length) {\r\n                this.subMeshes[0].dispose();\r\n            }\r\n        } else {\r\n            this.subMeshes = new Array<SubMesh>();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this abstract mesh.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        let index: number;\r\n\r\n        // mesh map release.\r\n        if (this._scene.useMaterialMeshMap) {\r\n            // remove from material mesh map id needed\r\n            if (this._internalAbstractMeshDataInfo._material && this._internalAbstractMeshDataInfo._material.meshMap) {\r\n                this._internalAbstractMeshDataInfo._material.meshMap[this.uniqueId] = undefined;\r\n            }\r\n        }\r\n\r\n        // Smart Array Retainers.\r\n        this.getScene().freeActiveMeshes();\r\n        this.getScene().freeRenderingGroups();\r\n\r\n        // Action manager\r\n        if (this.actionManager !== undefined && this.actionManager !== null) {\r\n            this.actionManager.dispose();\r\n            this.actionManager = null;\r\n        }\r\n\r\n        // Skeleton\r\n        this._internalAbstractMeshDataInfo._skeleton = null;\r\n\r\n        if (this._transformMatrixTexture) {\r\n            this._transformMatrixTexture.dispose();\r\n            this._transformMatrixTexture = null;\r\n        }\r\n\r\n        // Intersections in progress\r\n        for (index = 0; index < this._intersectionsInProgress.length; index++) {\r\n            const other = this._intersectionsInProgress[index];\r\n\r\n            const pos = other._intersectionsInProgress.indexOf(this);\r\n            other._intersectionsInProgress.splice(pos, 1);\r\n        }\r\n\r\n        this._intersectionsInProgress.length = 0;\r\n\r\n        // Lights\r\n        const lights = this.getScene().lights;\r\n\r\n        lights.forEach((light: Light) => {\r\n            let meshIndex = light.includedOnlyMeshes.indexOf(this);\r\n\r\n            if (meshIndex !== -1) {\r\n                light.includedOnlyMeshes.splice(meshIndex, 1);\r\n            }\r\n\r\n            meshIndex = light.excludedMeshes.indexOf(this);\r\n\r\n            if (meshIndex !== -1) {\r\n                light.excludedMeshes.splice(meshIndex, 1);\r\n            }\r\n\r\n            // Shadow generators\r\n            const generator = light.getShadowGenerator();\r\n            if (generator) {\r\n                const shadowMap = generator.getShadowMap();\r\n\r\n                if (shadowMap && shadowMap.renderList) {\r\n                    meshIndex = shadowMap.renderList.indexOf(this);\r\n\r\n                    if (meshIndex !== -1) {\r\n                        shadowMap.renderList.splice(meshIndex, 1);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // SubMeshes\r\n        if (this.getClassName() !== \"InstancedMesh\" || this.getClassName() !== \"InstancedLinesMesh\") {\r\n            this.releaseSubMeshes();\r\n        }\r\n\r\n        // Query\r\n        const engine = this.getScene().getEngine();\r\n        if (this._occlusionQuery !== null) {\r\n            this.isOcclusionQueryInProgress = false;\r\n            engine.deleteQuery(this._occlusionQuery);\r\n            this._occlusionQuery = null;\r\n        }\r\n\r\n        // Engine\r\n        engine.wipeCaches();\r\n\r\n        // Remove from scene\r\n        this.getScene().removeMesh(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.meshes.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.meshes.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        if (disposeMaterialAndTextures) {\r\n            if (this.material) {\r\n                if (this.material.getClassName() === \"MultiMaterial\") {\r\n                    this.material.dispose(false, true, true);\r\n                } else {\r\n                    this.material.dispose(false, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!doNotRecurse) {\r\n            // Particles\r\n            for (index = 0; index < this.getScene().particleSystems.length; index++) {\r\n                if (this.getScene().particleSystems[index].emitter === this) {\r\n                    this.getScene().particleSystems[index].dispose();\r\n                    index--;\r\n                }\r\n            }\r\n        }\r\n\r\n        // facet data\r\n        if (this._internalAbstractMeshDataInfo._facetData.facetDataEnabled) {\r\n            this.disableFacetData();\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        this.onAfterWorldMatrixUpdateObservable.clear();\r\n        this.onCollideObservable.clear();\r\n        this.onCollisionPositionChangeObservable.clear();\r\n        this.onRebuildObservable.clear();\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * Adds the passed mesh as a child to the current mesh\r\n     * @param mesh defines the child mesh\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @returns the current mesh\r\n     */\r\n    public addChild(mesh: AbstractMesh, preserveScalingSign: boolean = false): AbstractMesh {\r\n        mesh.setParent(this, preserveScalingSign);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the passed mesh from the current mesh children list\r\n     * @param mesh defines the child mesh\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @returns the current mesh\r\n     */\r\n    public removeChild(mesh: AbstractMesh, preserveScalingSign: boolean = false): AbstractMesh {\r\n        mesh.setParent(null, preserveScalingSign);\r\n        return this;\r\n    }\r\n\r\n    // Facet data\r\n    /** @internal */\r\n    private _initFacetData(): AbstractMesh {\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!data.facetNormals) {\r\n            data.facetNormals = new Array<Vector3>();\r\n        }\r\n        if (!data.facetPositions) {\r\n            data.facetPositions = new Array<Vector3>();\r\n        }\r\n        if (!data.facetPartitioning) {\r\n            data.facetPartitioning = new Array<number[]>();\r\n        }\r\n        data.facetNb = ((<IndicesArray>this.getIndices()).length / 3) | 0;\r\n        data.partitioningSubdivisions = data.partitioningSubdivisions ? data.partitioningSubdivisions : 10; // default nb of partitioning subdivisions = 10\r\n        data.partitioningBBoxRatio = data.partitioningBBoxRatio ? data.partitioningBBoxRatio : 1.01; // default ratio 1.01 = the partitioning is 1% bigger than the bounding box\r\n        for (let f = 0; f < data.facetNb; f++) {\r\n            data.facetNormals[f] = Vector3.Zero();\r\n            data.facetPositions[f] = Vector3.Zero();\r\n        }\r\n        data.facetDataEnabled = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the mesh facetData arrays and the internal partitioning when the mesh is morphed or updated.\r\n     * This method can be called within the render loop.\r\n     * You don't need to call this method by yourself in the render loop when you update/morph a mesh with the methods CreateXXX() as they automatically manage this computation\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public updateFacetData(): AbstractMesh {\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!data.facetDataEnabled) {\r\n            this._initFacetData();\r\n        }\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        const indices = this.getIndices();\r\n        const normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n        const bInfo = this.getBoundingInfo();\r\n\r\n        if (data.facetDepthSort && !data.facetDepthSortEnabled) {\r\n            // init arrays, matrix and sort function on first call\r\n            data.facetDepthSortEnabled = true;\r\n            if (indices instanceof Uint16Array) {\r\n                data.depthSortedIndices = new Uint16Array(indices!);\r\n            } else if (indices instanceof Uint32Array) {\r\n                data.depthSortedIndices = new Uint32Array(indices!);\r\n            } else {\r\n                let needs32bits = false;\r\n                for (let i = 0; i < indices!.length; i++) {\r\n                    if (indices![i] > 65535) {\r\n                        needs32bits = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (needs32bits) {\r\n                    data.depthSortedIndices = new Uint32Array(indices!);\r\n                } else {\r\n                    data.depthSortedIndices = new Uint16Array(indices!);\r\n                }\r\n            }\r\n            data.facetDepthSortFunction = function (f1, f2) {\r\n                return f2.sqDistance - f1.sqDistance;\r\n            };\r\n            if (!data.facetDepthSortFrom) {\r\n                const camera = this.getScene().activeCamera;\r\n                data.facetDepthSortFrom = camera ? camera.position : Vector3.Zero();\r\n            }\r\n            data.depthSortedFacets = [];\r\n            for (let f = 0; f < data.facetNb; f++) {\r\n                const depthSortedFacet = { ind: f * 3, sqDistance: 0.0 };\r\n                data.depthSortedFacets.push(depthSortedFacet);\r\n            }\r\n            data.invertedMatrix = Matrix.Identity();\r\n            data.facetDepthSortOrigin = Vector3.Zero();\r\n        }\r\n\r\n        data.bbSize.x = bInfo.maximum.x - bInfo.minimum.x > Epsilon ? bInfo.maximum.x - bInfo.minimum.x : Epsilon;\r\n        data.bbSize.y = bInfo.maximum.y - bInfo.minimum.y > Epsilon ? bInfo.maximum.y - bInfo.minimum.y : Epsilon;\r\n        data.bbSize.z = bInfo.maximum.z - bInfo.minimum.z > Epsilon ? bInfo.maximum.z - bInfo.minimum.z : Epsilon;\r\n        let bbSizeMax = data.bbSize.x > data.bbSize.y ? data.bbSize.x : data.bbSize.y;\r\n        bbSizeMax = bbSizeMax > data.bbSize.z ? bbSizeMax : data.bbSize.z;\r\n        data.subDiv.max = data.partitioningSubdivisions;\r\n        data.subDiv.X = Math.floor((data.subDiv.max * data.bbSize.x) / bbSizeMax); // adjust the number of subdivisions per axis\r\n        data.subDiv.Y = Math.floor((data.subDiv.max * data.bbSize.y) / bbSizeMax); // according to each bbox size per axis\r\n        data.subDiv.Z = Math.floor((data.subDiv.max * data.bbSize.z) / bbSizeMax);\r\n        data.subDiv.X = data.subDiv.X < 1 ? 1 : data.subDiv.X; // at least one subdivision\r\n        data.subDiv.Y = data.subDiv.Y < 1 ? 1 : data.subDiv.Y;\r\n        data.subDiv.Z = data.subDiv.Z < 1 ? 1 : data.subDiv.Z;\r\n        // set the parameters for ComputeNormals()\r\n        data.facetParameters.facetNormals = this.getFacetLocalNormals();\r\n        data.facetParameters.facetPositions = this.getFacetLocalPositions();\r\n        data.facetParameters.facetPartitioning = this.getFacetLocalPartitioning();\r\n        data.facetParameters.bInfo = bInfo;\r\n        data.facetParameters.bbSize = data.bbSize;\r\n        data.facetParameters.subDiv = data.subDiv;\r\n        data.facetParameters.ratio = this.partitioningBBoxRatio;\r\n        data.facetParameters.depthSort = data.facetDepthSort;\r\n        if (data.facetDepthSort && data.facetDepthSortEnabled) {\r\n            this.computeWorldMatrix(true);\r\n            this._worldMatrix.invertToRef(data.invertedMatrix);\r\n            Vector3.TransformCoordinatesToRef(data.facetDepthSortFrom, data.invertedMatrix, data.facetDepthSortOrigin);\r\n            data.facetParameters.distanceTo = data.facetDepthSortOrigin;\r\n        }\r\n        data.facetParameters.depthSortedFacets = data.depthSortedFacets;\r\n        if (normals) {\r\n            VertexData.ComputeNormals(positions, indices, normals, data.facetParameters);\r\n        }\r\n\r\n        if (data.facetDepthSort && data.facetDepthSortEnabled) {\r\n            data.depthSortedFacets.sort(data.facetDepthSortFunction);\r\n            const l = (data.depthSortedIndices.length / 3) | 0;\r\n            for (let f = 0; f < l; f++) {\r\n                const sind = data.depthSortedFacets[f].ind;\r\n                data.depthSortedIndices[f * 3] = indices![sind];\r\n                data.depthSortedIndices[f * 3 + 1] = indices![sind + 1];\r\n                data.depthSortedIndices[f * 3 + 2] = indices![sind + 2];\r\n            }\r\n            this.updateIndices(data.depthSortedIndices, undefined, true);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalNormals array.\r\n     * The normals are expressed in the mesh local spac\r\n     * @returns an array of Vector3\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetLocalNormals(): Vector3[] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!facetData.facetNormals) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetNormals;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalPositions array.\r\n     * The facet positions are expressed in the mesh local space\r\n     * @returns an array of Vector3\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetLocalPositions(): Vector3[] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!facetData.facetPositions) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetPositions;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalPartitioning array\r\n     * @returns an array of array of numbers\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetLocalPartitioning(): number[][] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n\r\n        if (!facetData.facetPartitioning) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetPartitioning;\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th facet position in the world system.\r\n     * This method allocates a new Vector3 per call\r\n     * @param i defines the facet index\r\n     * @returns a new Vector3\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetPosition(i: number): Vector3 {\r\n        const pos = Vector3.Zero();\r\n        this.getFacetPositionToRef(i, pos);\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference Vector3 with the i-th facet position in the world system\r\n     * @param i defines the facet index\r\n     * @param ref defines the target vector\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetPositionToRef(i: number, ref: Vector3): AbstractMesh {\r\n        const localPos = this.getFacetLocalPositions()[i];\r\n        const world = this.getWorldMatrix();\r\n        Vector3.TransformCoordinatesToRef(localPos, world, ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th facet normal in the world system.\r\n     * This method allocates a new Vector3 per call\r\n     * @param i defines the facet index\r\n     * @returns a new Vector3\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetNormal(i: number): Vector3 {\r\n        const norm = Vector3.Zero();\r\n        this.getFacetNormalToRef(i, norm);\r\n        return norm;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference Vector3 with the i-th facet normal in the world system\r\n     * @param i defines the facet index\r\n     * @param ref defines the target vector\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetNormalToRef(i: number, ref: Vector3) {\r\n        const localNorm = this.getFacetLocalNormals()[i];\r\n        Vector3.TransformNormalToRef(localNorm, this.getWorldMatrix(), ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the facets (in an array) in the same partitioning block than the one the passed coordinates are located (expressed in the mesh local system)\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @returns the array of facet indexes\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetsAtLocalCoordinates(x: number, y: number, z: number): Nullable<number[]> {\r\n        const bInfo = this.getBoundingInfo();\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n\r\n        const ox = Math.floor(((x - bInfo.minimum.x * data.partitioningBBoxRatio) * data.subDiv.X * data.partitioningBBoxRatio) / data.bbSize.x);\r\n        const oy = Math.floor(((y - bInfo.minimum.y * data.partitioningBBoxRatio) * data.subDiv.Y * data.partitioningBBoxRatio) / data.bbSize.y);\r\n        const oz = Math.floor(((z - bInfo.minimum.z * data.partitioningBBoxRatio) * data.subDiv.Z * data.partitioningBBoxRatio) / data.bbSize.z);\r\n        if (ox < 0 || ox > data.subDiv.max || oy < 0 || oy > data.subDiv.max || oz < 0 || oz > data.subDiv.max) {\r\n            return null;\r\n        }\r\n        return data.facetPartitioning[ox + data.subDiv.max * oy + data.subDiv.max * data.subDiv.max * oz];\r\n    }\r\n\r\n    /**\r\n     * Returns the closest mesh facet index at (x,y,z) World coordinates, null if not found\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @param projected sets as the (x,y,z) world projection on the facet\r\n     * @param checkFace if true (default false), only the facet \"facing\" to (x,y,z) or only the ones \"turning their backs\", according to the parameter \"facing\" are returned\r\n     * @param facing if facing and checkFace are true, only the facet \"facing\" to (x, y, z) are returned : positive dot (x, y, z) * facet position. If facing si false and checkFace is true, only the facet \"turning their backs\" to (x, y, z) are returned : negative dot (x, y, z) * facet position\r\n     * @returns the face index if found (or null instead)\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getClosestFacetAtCoordinates(x: number, y: number, z: number, projected?: Vector3, checkFace: boolean = false, facing: boolean = true): Nullable<number> {\r\n        const world = this.getWorldMatrix();\r\n        const invMat = TmpVectors.Matrix[5];\r\n        world.invertToRef(invMat);\r\n        const invVect = TmpVectors.Vector3[8];\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, invMat, invVect); // transform (x,y,z) to coordinates in the mesh local space\r\n        const closest = this.getClosestFacetAtLocalCoordinates(invVect.x, invVect.y, invVect.z, projected, checkFace, facing);\r\n        if (projected) {\r\n            // transform the local computed projected vector to world coordinates\r\n            Vector3.TransformCoordinatesFromFloatsToRef(projected.x, projected.y, projected.z, world, projected);\r\n        }\r\n        return closest;\r\n    }\r\n\r\n    /**\r\n     * Returns the closest mesh facet index at (x,y,z) local coordinates, null if not found\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @param projected sets as the (x,y,z) local projection on the facet\r\n     * @param checkFace if true (default false), only the facet \"facing\" to (x,y,z) or only the ones \"turning their backs\", according to the parameter \"facing\" are returned\r\n     * @param facing if facing and checkFace are true, only the facet \"facing\" to (x, y, z) are returned : positive dot (x, y, z) * facet position. If facing si false and checkFace is true, only the facet \"turning their backs\" to (x, y, z) are returned : negative dot (x, y, z) * facet position\r\n     * @returns the face index if found (or null instead)\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getClosestFacetAtLocalCoordinates(x: number, y: number, z: number, projected?: Vector3, checkFace: boolean = false, facing: boolean = true): Nullable<number> {\r\n        let closest = null;\r\n        let tmpx = 0.0;\r\n        let tmpy = 0.0;\r\n        let tmpz = 0.0;\r\n        let d = 0.0; // tmp dot facet normal * facet position\r\n        let t0 = 0.0;\r\n        let projx = 0.0;\r\n        let projy = 0.0;\r\n        let projz = 0.0;\r\n        // Get all the facets in the same partitioning block than (x, y, z)\r\n        const facetPositions = this.getFacetLocalPositions();\r\n        const facetNormals = this.getFacetLocalNormals();\r\n        const facetsInBlock = this.getFacetsAtLocalCoordinates(x, y, z);\r\n        if (!facetsInBlock) {\r\n            return null;\r\n        }\r\n        // Get the closest facet to (x, y, z)\r\n        let shortest = Number.MAX_VALUE; // init distance vars\r\n        let tmpDistance = shortest;\r\n        let fib; // current facet in the block\r\n        let norm; // current facet normal\r\n        let p0; // current facet barycenter position\r\n        // loop on all the facets in the current partitioning block\r\n        for (let idx = 0; idx < facetsInBlock.length; idx++) {\r\n            fib = facetsInBlock[idx];\r\n            norm = facetNormals[fib];\r\n            p0 = facetPositions[fib];\r\n\r\n            d = (x - p0.x) * norm.x + (y - p0.y) * norm.y + (z - p0.z) * norm.z;\r\n            if (!checkFace || (checkFace && facing && d >= 0.0) || (checkFace && !facing && d <= 0.0)) {\r\n                // compute (x,y,z) projection on the facet = (projx, projy, projz)\r\n                d = norm.x * p0.x + norm.y * p0.y + norm.z * p0.z;\r\n                t0 = -(norm.x * x + norm.y * y + norm.z * z - d) / (norm.x * norm.x + norm.y * norm.y + norm.z * norm.z);\r\n                projx = x + norm.x * t0;\r\n                projy = y + norm.y * t0;\r\n                projz = z + norm.z * t0;\r\n\r\n                tmpx = projx - x;\r\n                tmpy = projy - y;\r\n                tmpz = projz - z;\r\n                tmpDistance = tmpx * tmpx + tmpy * tmpy + tmpz * tmpz; // compute length between (x, y, z) and its projection on the facet\r\n                if (tmpDistance < shortest) {\r\n                    // just keep the closest facet to (x, y, z)\r\n                    shortest = tmpDistance;\r\n                    closest = fib;\r\n                    if (projected) {\r\n                        projected.x = projx;\r\n                        projected.y = projy;\r\n                        projected.z = projz;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return closest;\r\n    }\r\n\r\n    /**\r\n     * Returns the object \"parameter\" set with all the expected parameters for facetData computation by ComputeNormals()\r\n     * @returns the parameters\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetDataParameters(): any {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetParameters;\r\n    }\r\n\r\n    /**\r\n     * Disables the feature FacetData and frees the related memory\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public disableFacetData(): AbstractMesh {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (facetData.facetDataEnabled) {\r\n            facetData.facetDataEnabled = false;\r\n            facetData.facetPositions = new Array<Vector3>();\r\n            facetData.facetNormals = new Array<Vector3>();\r\n            facetData.facetPartitioning = new Array<number[]>();\r\n            facetData.facetParameters = null;\r\n            facetData.depthSortedIndices = new Uint32Array(0);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the AbstractMesh indices array\r\n     * @param indices defines the data source\r\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates new normals data for the mesh\r\n     * @param updatable defines if the normal vertex buffer must be flagged as updatable\r\n     * @returns the current mesh\r\n     */\r\n    public createNormals(updatable: boolean): AbstractMesh {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        const indices = this.getIndices();\r\n        let normals: FloatArray;\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            normals = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n        } else {\r\n            normals = [];\r\n        }\r\n\r\n        VertexData.ComputeNormals(positions, indices, normals, { useRightHandedSystem: this.getScene().useRightHandedSystem });\r\n        this.setVerticesData(VertexBuffer.NormalKind, normals, updatable);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Align the mesh with a normal\r\n     * @param normal defines the normal to use\r\n     * @param upDirection can be used to redefined the up vector to use (will use the (0, 1, 0) by default)\r\n     * @returns the current mesh\r\n     */\r\n    public alignWithNormal(normal: Vector3, upDirection?: Vector3): AbstractMesh {\r\n        if (!upDirection) {\r\n            upDirection = Axis.Y;\r\n        }\r\n\r\n        const axisX = TmpVectors.Vector3[0];\r\n        const axisZ = TmpVectors.Vector3[1];\r\n        Vector3.CrossToRef(upDirection, normal, axisZ);\r\n        Vector3.CrossToRef(normal, axisZ, axisX);\r\n\r\n        if (this.rotationQuaternion) {\r\n            Quaternion.RotationQuaternionFromAxisToRef(axisX, normal, axisZ, this.rotationQuaternion);\r\n        } else {\r\n            Vector3.RotationFromAxisToRef(axisX, normal, axisZ, this.rotation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkOcclusionQuery(): boolean {\r\n        // Will be replaced by correct code if Occlusion queries are referenced\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disables the mesh edge rendering mode\r\n     * @returns the currentAbstractMesh\r\n     */\r\n    disableEdgesRendering(): AbstractMesh {\r\n        throw _WarnImport(\"EdgesRenderer\");\r\n    }\r\n\r\n    /**\r\n     * Enables the edge rendering mode on the mesh.\r\n     * This mode makes the mesh edges visible\r\n     * @param epsilon defines the maximal distance between two angles to detect a face\r\n     * @param checkVerticesInsteadOfIndices indicates that we should check vertex list directly instead of faces\r\n     * @param options options to the edge renderer\r\n     * @returns the currentAbstractMesh\r\n     * @see https://www.babylonjs-playground.com/#19O9TU#0\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    enableEdgesRendering(epsilon?: number, checkVerticesInsteadOfIndices?: boolean, options?: IEdgesRendererOptions): AbstractMesh {\r\n        throw _WarnImport(\"EdgesRenderer\");\r\n    }\r\n\r\n    /**\r\n     * This function returns all of the particle systems in the scene that use the mesh as an emitter.\r\n     * @returns an array of particle systems in the scene that use the mesh as an emitter\r\n     */\r\n    public getConnectedParticleSystems(): IParticleSystem[] {\r\n        return this._scene.particleSystems.filter((particleSystem) => particleSystem.emitter === this);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.AbstractMesh\", AbstractMesh);\r\n","import type { Nullable, FloatArray, DataArray, IndicesArray } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { IGetSetVerticesData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { extractMinAndMax } from \"../Maths/math.functions\";\r\nimport type { AbstractScene } from \"../abstractScene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { CompatibilityOptions } from \"../Compat/compatibilityOptions\";\r\n\r\ndeclare type Mesh = import(\"../Meshes/mesh\").Mesh;\r\n\r\n/**\r\n * Class used to store geometry data (vertex buffers + index buffer)\r\n */\r\nexport class Geometry implements IGetSetVerticesData {\r\n    // Members\r\n    /**\r\n     * Gets or sets the ID of the geometry\r\n     */\r\n    public id: string;\r\n    /**\r\n     * Gets or sets the unique ID of the geometry\r\n     */\r\n    public uniqueId: number;\r\n    /**\r\n     * Gets the delay loading state of the geometry (none by default which means not delayed)\r\n     */\r\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n    /**\r\n     * Gets the file containing the data to load when running in delay load state\r\n     */\r\n    public delayLoadingFile: Nullable<string>;\r\n    /**\r\n     * Callback called when the geometry is updated\r\n     */\r\n    public onGeometryUpdated: (geometry: Geometry, kind?: string) => void;\r\n\r\n    // Private\r\n    private _scene: Scene;\r\n    private _engine: Engine;\r\n    private _meshes: Mesh[];\r\n    private _totalVertices = 0;\r\n    /** @internal */\r\n    public _loadedUniqueId: string;\r\n    /** @internal */\r\n    public _indices: IndicesArray;\r\n    /** @internal */\r\n    public _vertexBuffers: { [key: string]: VertexBuffer };\r\n    private _isDisposed = false;\r\n    private _extend: { minimum: Vector3; maximum: Vector3 };\r\n    private _boundingBias: Vector2;\r\n    /** @internal */\r\n    public _delayInfo: Array<string>;\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _indexBufferIsUpdatable = false;\r\n    /** @internal */\r\n    public _boundingInfo: Nullable<BoundingInfo>;\r\n    /** @internal */\r\n    public _delayLoadingFunction: Nullable<(any: any, geometry: Geometry) => void>;\r\n    /** @internal */\r\n    public _softwareSkinningFrameId: number;\r\n    private _vertexArrayObjects: { [key: string]: WebGLVertexArrayObject };\r\n    private _updatable: boolean;\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _positions: Nullable<Vector3[]>;\r\n    private _positionsCache: Vector3[] = [];\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /**\r\n     *  Gets or sets the Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\r\n     */\r\n    public get boundingBias(): Vector2 {\r\n        return this._boundingBias;\r\n    }\r\n\r\n    /**\r\n     *  Gets or sets the Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\r\n     */\r\n    public set boundingBias(value: Vector2) {\r\n        if (this._boundingBias) {\r\n            this._boundingBias.copyFrom(value);\r\n        } else {\r\n            this._boundingBias = value.clone();\r\n        }\r\n\r\n        this._updateBoundingInfo(true, null);\r\n    }\r\n\r\n    /**\r\n     * Static function used to attach a new empty geometry to a mesh\r\n     * @param mesh defines the mesh to attach the geometry to\r\n     * @returns the new Geometry\r\n     */\r\n    public static CreateGeometryForMesh(mesh: Mesh): Geometry {\r\n        const geometry = new Geometry(Geometry.RandomId(), mesh.getScene());\r\n\r\n        geometry.applyToMesh(mesh);\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /** Get the list of meshes using this geometry */\r\n    public get meshes(): Mesh[] {\r\n        return this._meshes;\r\n    }\r\n\r\n    /**\r\n     * If set to true (false by default), the bounding info applied to the meshes sharing this geometry will be the bounding info defined at the class level\r\n     * and won't be computed based on the vertex positions (which is what we get when useBoundingInfoFromGeometry = false)\r\n     */\r\n    public useBoundingInfoFromGeometry = false;\r\n\r\n    /**\r\n     * Creates a new geometry\r\n     * @param id defines the unique ID\r\n     * @param scene defines the hosting scene\r\n     * @param vertexData defines the VertexData used to get geometry data\r\n     * @param updatable defines if geometry must be updatable (false by default)\r\n     * @param mesh defines the mesh that will be associated with the geometry\r\n     */\r\n    constructor(id: string, scene?: Scene, vertexData?: VertexData, updatable: boolean = false, mesh: Nullable<Mesh> = null) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n        this.id = id;\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._engine = this._scene.getEngine();\r\n        this._meshes = [];\r\n        //Init vertex buffer cache\r\n        this._vertexBuffers = {};\r\n        this._indices = [];\r\n        this._updatable = updatable;\r\n\r\n        // vertexData\r\n        if (vertexData) {\r\n            this.setAllVerticesData(vertexData, updatable);\r\n        } else {\r\n            this._totalVertices = 0;\r\n        }\r\n\r\n        if (this._engine.getCaps().vertexArrayObject) {\r\n            this._vertexArrayObjects = {};\r\n        }\r\n\r\n        // applyToMesh\r\n        if (mesh) {\r\n            this.applyToMesh(mesh);\r\n            mesh.computeWorldMatrix(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current extend of the geometry\r\n     */\r\n    public get extend(): { minimum: Vector3; maximum: Vector3 } {\r\n        return this._extend;\r\n    }\r\n\r\n    /**\r\n     * Gets the hosting scene\r\n     * @returns the hosting Scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the hosting engine\r\n     * @returns the hosting Engine\r\n     */\r\n    public getEngine(): Engine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Defines if the geometry is ready to use\r\n     * @returns true if the geometry is ready to be used\r\n     */\r\n    public isReady(): boolean {\r\n        return this.delayLoadState === Constants.DELAYLOADSTATE_LOADED || this.delayLoadState === Constants.DELAYLOADSTATE_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating that the geometry should not be serialized\r\n     */\r\n    public get doNotSerialize(): boolean {\r\n        for (let index = 0; index < this._meshes.length; index++) {\r\n            if (!this._meshes[index].doNotSerialize) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        if (this._vertexArrayObjects) {\r\n            this._vertexArrayObjects = {};\r\n        }\r\n\r\n        // Index buffer\r\n        if (this._meshes.length !== 0 && this._indices) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, this._updatable);\r\n        }\r\n\r\n        // Vertex buffers\r\n        for (const key in this._vertexBuffers) {\r\n            const vertexBuffer = <VertexBuffer>this._vertexBuffers[key];\r\n            vertexBuffer._rebuild();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Affects all geometry data in one call\r\n     * @param vertexData defines the geometry data\r\n     * @param updatable defines if the geometry must be flagged as updatable (false as default)\r\n     */\r\n    public setAllVerticesData(vertexData: VertexData, updatable?: boolean): void {\r\n        vertexData.applyToGeometry(this, updatable);\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Set specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the vertex data to use\r\n     * @param updatable defines if the vertex must be flagged as updatable (false as default)\r\n     * @param stride defines the stride to use (0 by default). This value is deduced from the kind value if not specified\r\n     */\r\n    public setVerticesData(kind: string, data: FloatArray, updatable: boolean = false, stride?: number): void {\r\n        if (updatable && Array.isArray(data)) {\r\n            // to avoid converting to Float32Array at each draw call in engine.updateDynamicVertexBuffer, we make the conversion a single time here\r\n            data = new Float32Array(data);\r\n        }\r\n        const buffer = new VertexBuffer(this._engine, data, kind, updatable, this._meshes.length === 0, stride);\r\n        this.setVerticesBuffer(buffer);\r\n    }\r\n\r\n    /**\r\n     * Removes a specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     */\r\n    public removeVerticesData(kind: string) {\r\n        if (this._vertexBuffers[kind]) {\r\n            this._vertexBuffers[kind].dispose();\r\n            delete this._vertexBuffers[kind];\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            this._disposeVertexArrayObjects();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Affect a vertex buffer to the geometry. the vertexBuffer.getKind() function is used to determine where to store the data\r\n     * @param buffer defines the vertex buffer to use\r\n     * @param totalVertices defines the total number of vertices for position kind (could be null)\r\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\r\n     */\r\n    public setVerticesBuffer(buffer: VertexBuffer, totalVertices: Nullable<number> = null, disposeExistingBuffer = true): void {\r\n        const kind = buffer.getKind();\r\n        if (this._vertexBuffers[kind] && disposeExistingBuffer) {\r\n            this._vertexBuffers[kind].dispose();\r\n        }\r\n\r\n        if (buffer._buffer) {\r\n            buffer._buffer._increaseReferences();\r\n        }\r\n\r\n        this._vertexBuffers[kind] = buffer;\r\n        const meshes = this._meshes;\r\n        const numOfMeshes = meshes.length;\r\n\r\n        if (kind === VertexBuffer.PositionKind) {\r\n            const data = <FloatArray>buffer.getData();\r\n            if (totalVertices != null) {\r\n                this._totalVertices = totalVertices;\r\n            } else {\r\n                if (data != null) {\r\n                    this._totalVertices = data.length / (buffer.type === VertexBuffer.BYTE ? buffer.byteStride : buffer.byteStride / 4);\r\n                }\r\n            }\r\n\r\n            this._updateExtend(data);\r\n            this._resetPointsArrayCache();\r\n\r\n            for (let index = 0; index < numOfMeshes; index++) {\r\n                const mesh = meshes[index];\r\n                mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\r\n                mesh._createGlobalSubMesh(mesh.isUnIndexed);\r\n                mesh.computeWorldMatrix(true);\r\n                mesh.synchronizeInstances();\r\n            }\r\n        }\r\n\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    /**\r\n     * Update a specific vertex buffer\r\n     * This function will directly update the underlying DataBuffer according to the passed numeric array or Float32Array\r\n     * It will do nothing if the buffer is not updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the data to use\r\n     * @param offset defines the offset in the target buffer where to store the data\r\n     * @param useBytes set to true if the offset is in bytes\r\n     */\r\n    public updateVerticesDataDirectly(kind: string, data: DataArray, offset: number, useBytes: boolean = false): void {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n\r\n        if (!vertexBuffer) {\r\n            return;\r\n        }\r\n\r\n        vertexBuffer.updateDirectly(data, offset, useBytes);\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    /**\r\n     * Update a specific vertex buffer\r\n     * This function will create a new buffer if the current one is not updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the data to use\r\n     * @param updateExtends defines if the geometry extends must be recomputed (false by default)\r\n     */\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends: boolean = false): void {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n\r\n        if (!vertexBuffer) {\r\n            return;\r\n        }\r\n\r\n        vertexBuffer.update(data);\r\n\r\n        if (kind === VertexBuffer.PositionKind) {\r\n            this._updateBoundingInfo(updateExtends, data);\r\n        }\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    private _updateBoundingInfo(updateExtends: boolean, data: Nullable<FloatArray>) {\r\n        if (updateExtends) {\r\n            this._updateExtend(data);\r\n        }\r\n\r\n        this._resetPointsArrayCache();\r\n\r\n        if (updateExtends) {\r\n            const meshes = this._meshes;\r\n            for (const mesh of meshes) {\r\n                if (mesh.hasBoundingInfo) {\r\n                    mesh.getBoundingInfo().reConstruct(this._extend.minimum, this._extend.maximum);\r\n                } else {\r\n                    mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\r\n                }\r\n\r\n                const subMeshes = mesh.subMeshes;\r\n                for (const subMesh of subMeshes) {\r\n                    subMesh.refreshBoundingInfo();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(\r\n        effect: Nullable<Effect>,\r\n        indexToBind?: Nullable<DataBuffer>,\r\n        overrideVertexBuffers?: { [kind: string]: Nullable<VertexBuffer> },\r\n        overrideVertexArrayObjects?: { [key: string]: WebGLVertexArrayObject }\r\n    ): void {\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        if (indexToBind === undefined) {\r\n            indexToBind = this._indexBuffer;\r\n        }\r\n        const vbs = this.getVertexBuffers();\r\n\r\n        if (!vbs) {\r\n            return;\r\n        }\r\n\r\n        if (indexToBind != this._indexBuffer || (!this._vertexArrayObjects && !overrideVertexArrayObjects)) {\r\n            this._engine.bindBuffers(vbs, indexToBind, effect, overrideVertexBuffers);\r\n            return;\r\n        }\r\n\r\n        const vaos = overrideVertexArrayObjects ? overrideVertexArrayObjects : this._vertexArrayObjects;\r\n\r\n        // Using VAO\r\n        if (!vaos[effect.key]) {\r\n            vaos[effect.key] = this._engine.recordVertexArrayObject(vbs, indexToBind, effect, overrideVertexBuffers);\r\n        }\r\n\r\n        this._engine.bindVertexArrayObject(vaos[effect.key], indexToBind);\r\n    }\r\n\r\n    /**\r\n     * Gets total number of vertices\r\n     * @returns the total number of vertices\r\n     */\r\n    public getTotalVertices(): number {\r\n        if (!this.isReady()) {\r\n            return 0;\r\n        }\r\n\r\n        return this._totalVertices;\r\n    }\r\n\r\n    /**\r\n     * Gets a specific vertex data attached to this geometry. Float data is constructed if the vertex buffer data cannot be returned directly.\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns a float array containing vertex data\r\n     */\r\n    public getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray> {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n        if (!vertexBuffer) {\r\n            return null;\r\n        }\r\n\r\n        return vertexBuffer.getFloatData(this._totalVertices, forceCopy || (copyWhenShared && this._meshes.length !== 1));\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns true if the vertex buffer with the specified kind is updatable\r\n     */\r\n    public isVertexBufferUpdatable(kind: string): boolean {\r\n        const vb = this._vertexBuffers[kind];\r\n\r\n        if (!vb) {\r\n            return false;\r\n        }\r\n\r\n        return vb.isUpdatable();\r\n    }\r\n\r\n    /**\r\n     * Gets a specific vertex buffer\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns a VertexBuffer\r\n     */\r\n    public getVertexBuffer(kind: string): Nullable<VertexBuffer> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._vertexBuffers[kind];\r\n    }\r\n\r\n    /**\r\n     * Returns all vertex buffers\r\n     * @returns an object holding all vertex buffers indexed by kind\r\n     */\r\n    public getVertexBuffers(): Nullable<{ [key: string]: VertexBuffer }> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._vertexBuffers;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if specific vertex buffer is present\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns true if data is present\r\n     */\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        if (!this._vertexBuffers) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        return this._vertexBuffers[kind] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all attached data kinds (Position, normal, etc...)\r\n     * @returns a list of string containing all kinds\r\n     */\r\n    public getVerticesDataKinds(): string[] {\r\n        const result = [];\r\n        let kind;\r\n        if (!this._vertexBuffers && this._delayInfo) {\r\n            for (kind in this._delayInfo) {\r\n                result.push(kind);\r\n            }\r\n        } else {\r\n            for (kind in this._vertexBuffers) {\r\n                result.push(kind);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Update index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param offset defines the offset in the target buffer where to store the data\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     */\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): void {\r\n        if (!this._indexBuffer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._indexBufferIsUpdatable) {\r\n            this.setIndices(indices, null, true);\r\n        } else {\r\n            const needToUpdateSubMeshes = indices.length !== this._indices.length;\r\n\r\n            if (!gpuMemoryOnly) {\r\n                this._indices = indices.slice();\r\n            }\r\n            this._engine.updateDynamicIndexBuffer(this._indexBuffer, indices, offset);\r\n            if (needToUpdateSubMeshes) {\r\n                for (const mesh of this._meshes) {\r\n                    mesh._createGlobalSubMesh(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param totalVertices defines the total number of vertices (could be null)\r\n     * @param updatable defines if the index buffer must be flagged as updatable (false by default)\r\n     */\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null, updatable: boolean = false): void {\r\n        if (this._indexBuffer) {\r\n            this._engine._releaseBuffer(this._indexBuffer);\r\n        }\r\n\r\n        this._indices = indices;\r\n        this._indexBufferIsUpdatable = updatable;\r\n        if (this._meshes.length !== 0 && this._indices) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, updatable);\r\n        }\r\n\r\n        if (totalVertices != undefined) {\r\n            // including null and undefined\r\n            this._totalVertices = totalVertices;\r\n        }\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._createGlobalSubMesh(true);\r\n            mesh.synchronizeInstances();\r\n        }\r\n\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Return the total number of indices\r\n     * @returns the total number of indices\r\n     */\r\n    public getTotalIndices(): number {\r\n        if (!this.isReady()) {\r\n            return 0;\r\n        }\r\n        return this._indices.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer array\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the index buffer array\r\n     */\r\n    public getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        const orig = this._indices;\r\n        if (!forceCopy && (!copyWhenShared || this._meshes.length === 1)) {\r\n            return orig;\r\n        } else {\r\n            return orig.slice();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer\r\n     * @returns the index buffer\r\n     */\r\n    public getIndexBuffer(): Nullable<DataBuffer> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._indexBuffer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _releaseVertexArrayObject(effect: Nullable<Effect> = null) {\r\n        if (!effect || !this._vertexArrayObjects) {\r\n            return;\r\n        }\r\n\r\n        if (this._vertexArrayObjects[effect.key]) {\r\n            this._engine.releaseVertexArrayObject(this._vertexArrayObjects[effect.key]);\r\n            delete this._vertexArrayObjects[effect.key];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the associated resources for a specific mesh\r\n     * @param mesh defines the source mesh\r\n     * @param shouldDispose defines if the geometry must be disposed if there is no more mesh pointing to it\r\n     */\r\n    public releaseForMesh(mesh: Mesh, shouldDispose?: boolean): void {\r\n        const meshes = this._meshes;\r\n        const index = meshes.indexOf(mesh);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        meshes.splice(index, 1);\r\n\r\n        if (this._vertexArrayObjects) {\r\n            mesh._invalidateInstanceVertexArrayObject();\r\n        }\r\n\r\n        mesh._geometry = null;\r\n\r\n        if (meshes.length === 0 && shouldDispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply current geometry to a given mesh\r\n     * @param mesh defines the mesh to apply geometry to\r\n     */\r\n    public applyToMesh(mesh: Mesh): void {\r\n        if (mesh._geometry === this) {\r\n            return;\r\n        }\r\n\r\n        const previousGeometry = mesh._geometry;\r\n        if (previousGeometry) {\r\n            previousGeometry.releaseForMesh(mesh);\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            mesh._invalidateInstanceVertexArrayObject();\r\n        }\r\n\r\n        const meshes = this._meshes;\r\n\r\n        // must be done before setting vertexBuffers because of mesh._createGlobalSubMesh()\r\n        mesh._geometry = this;\r\n        mesh._internalAbstractMeshDataInfo._positions = null;\r\n\r\n        this._scene.pushGeometry(this);\r\n\r\n        meshes.push(mesh);\r\n\r\n        if (this.isReady()) {\r\n            this._applyToMesh(mesh);\r\n        } else if (this._boundingInfo) {\r\n            mesh.setBoundingInfo(this._boundingInfo);\r\n        }\r\n    }\r\n\r\n    private _updateExtend(data: Nullable<FloatArray> = null) {\r\n        if (this.useBoundingInfoFromGeometry && this._boundingInfo) {\r\n            this._extend = {\r\n                minimum: this._boundingInfo.minimum.clone(),\r\n                maximum: this._boundingInfo.maximum.clone(),\r\n            };\r\n        } else {\r\n            if (!data) {\r\n                data = this.getVerticesData(VertexBuffer.PositionKind)!;\r\n                // This can happen if the buffer comes from a Hardware Buffer where\r\n                // The data have not been uploaded by Babylon. (ex: Compute Shaders and Storage Buffers)\r\n                if (!data) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._extend = extractMinAndMax(data, 0, this._totalVertices, this.boundingBias, 3);\r\n        }\r\n    }\r\n\r\n    private _applyToMesh(mesh: Mesh): void {\r\n        const numOfMeshes = this._meshes.length;\r\n\r\n        // vertexBuffers\r\n        for (const kind in this._vertexBuffers) {\r\n            if (numOfMeshes === 1) {\r\n                this._vertexBuffers[kind].create();\r\n            }\r\n\r\n            if (kind === VertexBuffer.PositionKind) {\r\n                if (!this._extend) {\r\n                    this._updateExtend();\r\n                }\r\n                mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\r\n\r\n                mesh._createGlobalSubMesh(mesh.isUnIndexed);\r\n\r\n                //bounding info was just created again, world matrix should be applied again.\r\n                mesh._updateBoundingInfo();\r\n            }\r\n        }\r\n\r\n        // indexBuffer\r\n        if (numOfMeshes === 1 && this._indices && this._indices.length > 0) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, this._updatable);\r\n        }\r\n\r\n        // morphTargets\r\n        mesh._syncGeometryWithMorphTargetManager();\r\n\r\n        // instances\r\n        mesh.synchronizeInstances();\r\n    }\r\n\r\n    private _notifyUpdate(kind?: string) {\r\n        if (this.onGeometryUpdated) {\r\n            this.onGeometryUpdated(this, kind);\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            this._disposeVertexArrayObjects();\r\n        }\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._markSubMeshesAsAttributesDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load the geometry if it was flagged as delay loaded\r\n     * @param scene defines the hosting scene\r\n     * @param onLoaded defines a callback called when the geometry is loaded\r\n     */\r\n    public load(scene: Scene, onLoaded?: () => void): void {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return;\r\n        }\r\n\r\n        if (this.isReady()) {\r\n            if (onLoaded) {\r\n                onLoaded();\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_LOADING;\r\n\r\n        this._queueLoad(scene, onLoaded);\r\n    }\r\n\r\n    private _queueLoad(scene: Scene, onLoaded?: () => void): void {\r\n        if (!this.delayLoadingFile) {\r\n            return;\r\n        }\r\n\r\n        scene.addPendingData(this);\r\n        scene._loadFile(\r\n            this.delayLoadingFile,\r\n            (data) => {\r\n                if (!this._delayLoadingFunction) {\r\n                    return;\r\n                }\r\n\r\n                this._delayLoadingFunction(JSON.parse(data as string), this);\r\n\r\n                this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n                this._delayInfo = [];\r\n\r\n                scene.removePendingData(this);\r\n\r\n                const meshes = this._meshes;\r\n                const numOfMeshes = meshes.length;\r\n                for (let index = 0; index < numOfMeshes; index++) {\r\n                    this._applyToMesh(meshes[index]);\r\n                }\r\n\r\n                if (onLoaded) {\r\n                    onLoaded();\r\n                }\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Invert the geometry to move from a right handed system to a left handed one.\r\n     */\r\n    public toLeftHanded(): void {\r\n        // Flip faces\r\n        const tIndices = this.getIndices(false);\r\n        if (tIndices != null && tIndices.length > 0) {\r\n            for (let i = 0; i < tIndices.length; i += 3) {\r\n                const tTemp = tIndices[i + 0];\r\n                tIndices[i + 0] = tIndices[i + 2];\r\n                tIndices[i + 2] = tTemp;\r\n            }\r\n            this.setIndices(tIndices);\r\n        }\r\n\r\n        // Negate position.z\r\n        const tPositions = this.getVerticesData(VertexBuffer.PositionKind, false);\r\n        if (tPositions != null && tPositions.length > 0) {\r\n            for (let i = 0; i < tPositions.length; i += 3) {\r\n                tPositions[i + 2] = -tPositions[i + 2];\r\n            }\r\n            this.setVerticesData(VertexBuffer.PositionKind, tPositions, false);\r\n        }\r\n\r\n        // Negate normal.z\r\n        const tNormals = this.getVerticesData(VertexBuffer.NormalKind, false);\r\n        if (tNormals != null && tNormals.length > 0) {\r\n            for (let i = 0; i < tNormals.length; i += 3) {\r\n                tNormals[i + 2] = -tNormals[i + 2];\r\n            }\r\n            this.setVerticesData(VertexBuffer.NormalKind, tNormals, false);\r\n        }\r\n    }\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _resetPointsArrayCache(): void {\r\n        this._positions = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        if (this._positions) {\r\n            return true;\r\n        }\r\n\r\n        const data = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!data || data.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = this._positionsCache.length * 3, arrayIdx = this._positionsCache.length; index < data.length; index += 3, ++arrayIdx) {\r\n            this._positionsCache[arrayIdx] = Vector3.FromArray(data, index);\r\n        }\r\n\r\n        for (let index = 0, arrayIdx = 0; index < data.length; index += 3, ++arrayIdx) {\r\n            this._positionsCache[arrayIdx].set(data[0 + index], data[1 + index], data[2 + index]);\r\n        }\r\n\r\n        // just in case the number of positions was reduced, splice the array\r\n        this._positionsCache.length = data.length / 3;\r\n\r\n        this._positions = this._positionsCache;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating if the geometry is disposed\r\n     * @returns true if the geometry was disposed\r\n     */\r\n    public isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    private _disposeVertexArrayObjects(): void {\r\n        if (this._vertexArrayObjects) {\r\n            for (const kind in this._vertexArrayObjects) {\r\n                this._engine.releaseVertexArrayObject(this._vertexArrayObjects[kind]);\r\n            }\r\n            this._vertexArrayObjects = {}; // Will trigger a rebuild of the VAO if supported\r\n\r\n            const meshes = this._meshes;\r\n            const numOfMeshes = meshes.length;\r\n            for (let index = 0; index < numOfMeshes; index++) {\r\n                meshes[index]._invalidateInstanceVertexArrayObject();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Free all associated resources\r\n     */\r\n    public dispose(): void {\r\n        const meshes = this._meshes;\r\n        const numOfMeshes = meshes.length;\r\n        let index: number;\r\n        for (index = 0; index < numOfMeshes; index++) {\r\n            this.releaseForMesh(meshes[index]);\r\n        }\r\n        this._meshes.length = 0;\r\n\r\n        this._disposeVertexArrayObjects();\r\n\r\n        for (const kind in this._vertexBuffers) {\r\n            this._vertexBuffers[kind].dispose();\r\n        }\r\n        this._vertexBuffers = {};\r\n        this._totalVertices = 0;\r\n\r\n        if (this._indexBuffer) {\r\n            this._engine._releaseBuffer(this._indexBuffer);\r\n        }\r\n        this._indexBuffer = null;\r\n        this._indices = [];\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n        this.delayLoadingFile = null;\r\n        this._delayLoadingFunction = null;\r\n        this._delayInfo = [];\r\n\r\n        this._boundingInfo = null;\r\n\r\n        this._scene.removeGeometry(this);\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.geometries.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.geometries.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * Clone the current geometry into a new geometry\r\n     * @param id defines the unique ID of the new geometry\r\n     * @returns a new geometry object\r\n     */\r\n    public copy(id: string): Geometry {\r\n        const vertexData = new VertexData();\r\n\r\n        vertexData.indices = [];\r\n\r\n        const indices = this.getIndices();\r\n        if (indices) {\r\n            for (let index = 0; index < indices.length; index++) {\r\n                (<number[]>vertexData.indices).push(indices[index]);\r\n            }\r\n        }\r\n\r\n        let updatable = false;\r\n        let stopChecking = false;\r\n        let kind;\r\n        for (kind in this._vertexBuffers) {\r\n            // using slice() to make a copy of the array and not just reference it\r\n            const data = this.getVerticesData(kind);\r\n\r\n            if (data) {\r\n                if (data instanceof Float32Array) {\r\n                    vertexData.set(new Float32Array(<Float32Array>data), kind);\r\n                } else {\r\n                    vertexData.set((<number[]>data).slice(0), kind);\r\n                }\r\n                if (!stopChecking) {\r\n                    const vb = this.getVertexBuffer(kind);\r\n\r\n                    if (vb) {\r\n                        updatable = vb.isUpdatable();\r\n                        stopChecking = !updatable;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const geometry = new Geometry(id, this._scene, vertexData, updatable);\r\n\r\n        geometry.delayLoadState = this.delayLoadState;\r\n        geometry.delayLoadingFile = this.delayLoadingFile;\r\n        geometry._delayLoadingFunction = this._delayLoadingFunction;\r\n\r\n        for (kind in this._delayInfo) {\r\n            geometry._delayInfo = geometry._delayInfo || [];\r\n            geometry._delayInfo.push(kind);\r\n        }\r\n\r\n        // Bounding info\r\n        geometry._boundingInfo = new BoundingInfo(this._extend.minimum, this._extend.maximum);\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * Serialize the current geometry info (and not the vertices data) into a JSON object\r\n     * @returns a JSON representation of the current geometry data (without the vertices data)\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.updatable = this._updatable;\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    private _toNumberArray(origin: Nullable<Float32Array | IndicesArray>): number[] {\r\n        if (Array.isArray(origin)) {\r\n            return origin;\r\n        } else {\r\n            return Array.prototype.slice.call(origin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release any memory retained by the cached data on the Geometry.\r\n     *\r\n     * Call this function to reduce memory footprint of the mesh.\r\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\r\n     */\r\n    public clearCachedData(): void {\r\n        this._indices = [];\r\n        this._resetPointsArrayCache();\r\n\r\n        for (const vbName in this._vertexBuffers) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._vertexBuffers, vbName)) {\r\n                continue;\r\n            }\r\n            this._vertexBuffers[vbName]._buffer._data = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serialize all vertices data into a JSON object\r\n     * @returns a JSON representation of the current geometry data\r\n     */\r\n    public serializeVerticeData(): any {\r\n        const serializationObject = this.serialize();\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            serializationObject.positions = this._toNumberArray(this.getVerticesData(VertexBuffer.PositionKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\r\n                serializationObject.positions._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            serializationObject.normals = this._toNumberArray(this.getVerticesData(VertexBuffer.NormalKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\r\n                serializationObject.normals._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            serializationObject.tangents = this._toNumberArray(this.getVerticesData(VertexBuffer.TangentKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.TangentKind)) {\r\n                serializationObject.tangents._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            serializationObject.uvs = this._toNumberArray(this.getVerticesData(VertexBuffer.UVKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UVKind)) {\r\n                serializationObject.uvs._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n            serializationObject.uv2s = this._toNumberArray(this.getVerticesData(VertexBuffer.UV2Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV2Kind)) {\r\n                serializationObject.uv2s._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV3Kind)) {\r\n            serializationObject.uv3s = this._toNumberArray(this.getVerticesData(VertexBuffer.UV3Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV3Kind)) {\r\n                serializationObject.uv3s._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV4Kind)) {\r\n            serializationObject.uv4s = this._toNumberArray(this.getVerticesData(VertexBuffer.UV4Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV4Kind)) {\r\n                serializationObject.uv4s._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV5Kind)) {\r\n            serializationObject.uv5s = this._toNumberArray(this.getVerticesData(VertexBuffer.UV5Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV5Kind)) {\r\n                serializationObject.uv5s._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV6Kind)) {\r\n            serializationObject.uv6s = this._toNumberArray(this.getVerticesData(VertexBuffer.UV6Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV6Kind)) {\r\n                serializationObject.uv6s._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            serializationObject.colors = this._toNumberArray(this.getVerticesData(VertexBuffer.ColorKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.ColorKind)) {\r\n                serializationObject.colors._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            serializationObject.matricesIndices = this._toNumberArray(this.getVerticesData(VertexBuffer.MatricesIndicesKind));\r\n            serializationObject.matricesIndices._isExpanded = true;\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.MatricesIndicesKind)) {\r\n                serializationObject.matricesIndices._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            serializationObject.matricesWeights = this._toNumberArray(this.getVerticesData(VertexBuffer.MatricesWeightsKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.MatricesWeightsKind)) {\r\n                serializationObject.matricesWeights._updatable = true;\r\n            }\r\n        }\r\n\r\n        serializationObject.indices = this._toNumberArray(this.getIndices());\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Extracts a clone of a mesh geometry\r\n     * @param mesh defines the source mesh\r\n     * @param id defines the unique ID of the new geometry object\r\n     * @returns the new geometry object\r\n     */\r\n    public static ExtractFromMesh(mesh: Mesh, id: string): Nullable<Geometry> {\r\n        const geometry = mesh._geometry;\r\n\r\n        if (!geometry) {\r\n            return null;\r\n        }\r\n\r\n        return geometry.copy(id);\r\n    }\r\n\r\n    /**\r\n     * You should now use Tools.RandomId(), this method is still here for legacy reasons.\r\n     * Implementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\r\n     * Be aware Math.random() could cause collisions, but:\r\n     * \"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\"\r\n     * @returns a string containing a new GUID\r\n     */\r\n    public static RandomId(): string {\r\n        return Tools.RandomId();\r\n    }\r\n\r\n    private static _GetGeometryByLoadedUniqueId(uniqueId: string, scene: Scene) {\r\n        for (let index = 0; index < scene.geometries.length; index++) {\r\n            if (scene.geometries[index]._loadedUniqueId === uniqueId) {\r\n                return scene.geometries[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _ImportGeometry(parsedGeometry: any, mesh: Mesh): void {\r\n        const scene = mesh.getScene();\r\n\r\n        // Geometry\r\n        const geometryUniqueId = parsedGeometry.geometryUniqueId;\r\n        const geometryId = parsedGeometry.geometryId;\r\n        if (geometryUniqueId || geometryId) {\r\n            const geometry = geometryUniqueId ? this._GetGeometryByLoadedUniqueId(geometryUniqueId, scene) : scene.getGeometryById(geometryId);\r\n            if (geometry) {\r\n                geometry.applyToMesh(mesh);\r\n            }\r\n        } else if (parsedGeometry instanceof ArrayBuffer) {\r\n            const binaryInfo = mesh._binaryInfo;\r\n\r\n            if (binaryInfo.positionsAttrDesc && binaryInfo.positionsAttrDesc.count > 0) {\r\n                const positionsData = new Float32Array(parsedGeometry, binaryInfo.positionsAttrDesc.offset, binaryInfo.positionsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.PositionKind, positionsData, false);\r\n            }\r\n\r\n            if (binaryInfo.normalsAttrDesc && binaryInfo.normalsAttrDesc.count > 0) {\r\n                const normalsData = new Float32Array(parsedGeometry, binaryInfo.normalsAttrDesc.offset, binaryInfo.normalsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.NormalKind, normalsData, false);\r\n            }\r\n\r\n            if (binaryInfo.tangetsAttrDesc && binaryInfo.tangetsAttrDesc.count > 0) {\r\n                const tangentsData = new Float32Array(parsedGeometry, binaryInfo.tangetsAttrDesc.offset, binaryInfo.tangetsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.TangentKind, tangentsData, false);\r\n            }\r\n\r\n            if (binaryInfo.uvsAttrDesc && binaryInfo.uvsAttrDesc.count > 0) {\r\n                const uvsData = new Float32Array(parsedGeometry, binaryInfo.uvsAttrDesc.offset, binaryInfo.uvsAttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvsData.length; index += 2) {\r\n                        uvsData[index] = 1 - uvsData[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UVKind, uvsData, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs2AttrDesc && binaryInfo.uvs2AttrDesc.count > 0) {\r\n                const uvs2Data = new Float32Array(parsedGeometry, binaryInfo.uvs2AttrDesc.offset, binaryInfo.uvs2AttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs2Data.length; index += 2) {\r\n                        uvs2Data[index] = 1 - uvs2Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV2Kind, uvs2Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs3AttrDesc && binaryInfo.uvs3AttrDesc.count > 0) {\r\n                const uvs3Data = new Float32Array(parsedGeometry, binaryInfo.uvs3AttrDesc.offset, binaryInfo.uvs3AttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs3Data.length; index += 2) {\r\n                        uvs3Data[index] = 1 - uvs3Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV3Kind, uvs3Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs4AttrDesc && binaryInfo.uvs4AttrDesc.count > 0) {\r\n                const uvs4Data = new Float32Array(parsedGeometry, binaryInfo.uvs4AttrDesc.offset, binaryInfo.uvs4AttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs4Data.length; index += 2) {\r\n                        uvs4Data[index] = 1 - uvs4Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV4Kind, uvs4Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs5AttrDesc && binaryInfo.uvs5AttrDesc.count > 0) {\r\n                const uvs5Data = new Float32Array(parsedGeometry, binaryInfo.uvs5AttrDesc.offset, binaryInfo.uvs5AttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs5Data.length; index += 2) {\r\n                        uvs5Data[index] = 1 - uvs5Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV5Kind, uvs5Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs6AttrDesc && binaryInfo.uvs6AttrDesc.count > 0) {\r\n                const uvs6Data = new Float32Array(parsedGeometry, binaryInfo.uvs6AttrDesc.offset, binaryInfo.uvs6AttrDesc.count);\r\n                if (CompatibilityOptions.UseOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs6Data.length; index += 2) {\r\n                        uvs6Data[index] = 1 - uvs6Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV6Kind, uvs6Data, false);\r\n            }\r\n\r\n            if (binaryInfo.colorsAttrDesc && binaryInfo.colorsAttrDesc.count > 0) {\r\n                const colorsData = new Float32Array(parsedGeometry, binaryInfo.colorsAttrDesc.offset, binaryInfo.colorsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.ColorKind, colorsData, false, binaryInfo.colorsAttrDesc.stride);\r\n            }\r\n\r\n            if (binaryInfo.matricesIndicesAttrDesc && binaryInfo.matricesIndicesAttrDesc.count > 0) {\r\n                const matricesIndicesData = new Int32Array(parsedGeometry, binaryInfo.matricesIndicesAttrDesc.offset, binaryInfo.matricesIndicesAttrDesc.count);\r\n                const floatIndices = [];\r\n                for (let i = 0; i < matricesIndicesData.length; i++) {\r\n                    const index = matricesIndicesData[i];\r\n                    floatIndices.push(index & 0x000000ff);\r\n                    floatIndices.push((index & 0x0000ff00) >> 8);\r\n                    floatIndices.push((index & 0x00ff0000) >> 16);\r\n                    floatIndices.push((index >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, floatIndices, false);\r\n            }\r\n\r\n            if (binaryInfo.matricesIndicesExtraAttrDesc && binaryInfo.matricesIndicesExtraAttrDesc.count > 0) {\r\n                const matricesIndicesData = new Int32Array(parsedGeometry, binaryInfo.matricesIndicesExtraAttrDesc.offset, binaryInfo.matricesIndicesExtraAttrDesc.count);\r\n                const floatIndices = [];\r\n                for (let i = 0; i < matricesIndicesData.length; i++) {\r\n                    const index = matricesIndicesData[i];\r\n                    floatIndices.push(index & 0x000000ff);\r\n                    floatIndices.push((index & 0x0000ff00) >> 8);\r\n                    floatIndices.push((index & 0x00ff0000) >> 16);\r\n                    floatIndices.push((index >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, floatIndices, false);\r\n            }\r\n\r\n            if (binaryInfo.matricesWeightsAttrDesc && binaryInfo.matricesWeightsAttrDesc.count > 0) {\r\n                const matricesWeightsData = new Float32Array(parsedGeometry, binaryInfo.matricesWeightsAttrDesc.offset, binaryInfo.matricesWeightsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsData, false);\r\n            }\r\n\r\n            if (binaryInfo.indicesAttrDesc && binaryInfo.indicesAttrDesc.count > 0) {\r\n                const indicesData = new Int32Array(parsedGeometry, binaryInfo.indicesAttrDesc.offset, binaryInfo.indicesAttrDesc.count);\r\n                mesh.setIndices(indicesData, null);\r\n            }\r\n\r\n            if (binaryInfo.subMeshesAttrDesc && binaryInfo.subMeshesAttrDesc.count > 0) {\r\n                const subMeshesData = new Int32Array(parsedGeometry, binaryInfo.subMeshesAttrDesc.offset, binaryInfo.subMeshesAttrDesc.count * 5);\r\n\r\n                mesh.subMeshes = [];\r\n                for (let i = 0; i < binaryInfo.subMeshesAttrDesc.count; i++) {\r\n                    const materialIndex = subMeshesData[i * 5 + 0];\r\n                    const verticesStart = subMeshesData[i * 5 + 1];\r\n                    const verticesCount = subMeshesData[i * 5 + 2];\r\n                    const indexStart = subMeshesData[i * 5 + 3];\r\n                    const indexCount = subMeshesData[i * 5 + 4];\r\n\r\n                    SubMesh.AddToMesh(materialIndex, verticesStart, verticesCount, indexStart, indexCount, <AbstractMesh>mesh);\r\n                }\r\n            }\r\n        } else if (parsedGeometry.positions && parsedGeometry.normals && parsedGeometry.indices) {\r\n            mesh.setVerticesData(VertexBuffer.PositionKind, parsedGeometry.positions, parsedGeometry.positions._updatable);\r\n\r\n            mesh.setVerticesData(VertexBuffer.NormalKind, parsedGeometry.normals, parsedGeometry.normals._updatable);\r\n\r\n            if (parsedGeometry.tangents) {\r\n                mesh.setVerticesData(VertexBuffer.TangentKind, parsedGeometry.tangents, parsedGeometry.tangents._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs) {\r\n                mesh.setVerticesData(VertexBuffer.UVKind, parsedGeometry.uvs, parsedGeometry.uvs._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs2) {\r\n                mesh.setVerticesData(VertexBuffer.UV2Kind, parsedGeometry.uvs2, parsedGeometry.uvs2._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs3) {\r\n                mesh.setVerticesData(VertexBuffer.UV3Kind, parsedGeometry.uvs3, parsedGeometry.uvs3._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs4) {\r\n                mesh.setVerticesData(VertexBuffer.UV4Kind, parsedGeometry.uvs4, parsedGeometry.uvs4._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs5) {\r\n                mesh.setVerticesData(VertexBuffer.UV5Kind, parsedGeometry.uvs5, parsedGeometry.uvs5._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs6) {\r\n                mesh.setVerticesData(VertexBuffer.UV6Kind, parsedGeometry.uvs6, parsedGeometry.uvs6._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.colors) {\r\n                mesh.setVerticesData(VertexBuffer.ColorKind, Color4.CheckColors4(parsedGeometry.colors, parsedGeometry.positions.length / 3), parsedGeometry.colors._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.matricesIndices) {\r\n                if (!parsedGeometry.matricesIndices._isExpanded) {\r\n                    const floatIndices = [];\r\n\r\n                    for (let i = 0; i < parsedGeometry.matricesIndices.length; i++) {\r\n                        const matricesIndex = parsedGeometry.matricesIndices[i];\r\n\r\n                        floatIndices.push(matricesIndex & 0x000000ff);\r\n                        floatIndices.push((matricesIndex & 0x0000ff00) >> 8);\r\n                        floatIndices.push((matricesIndex & 0x00ff0000) >> 16);\r\n                        floatIndices.push((matricesIndex >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                    }\r\n\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, floatIndices, parsedGeometry.matricesIndices._updatable);\r\n                } else {\r\n                    delete parsedGeometry.matricesIndices._isExpanded;\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, parsedGeometry.matricesIndices, parsedGeometry.matricesIndices._updatable);\r\n                }\r\n            }\r\n\r\n            if (parsedGeometry.matricesIndicesExtra) {\r\n                if (!parsedGeometry.matricesIndicesExtra._isExpanded) {\r\n                    const floatIndices = [];\r\n\r\n                    for (let i = 0; i < parsedGeometry.matricesIndicesExtra.length; i++) {\r\n                        const matricesIndex = parsedGeometry.matricesIndicesExtra[i];\r\n\r\n                        floatIndices.push(matricesIndex & 0x000000ff);\r\n                        floatIndices.push((matricesIndex & 0x0000ff00) >> 8);\r\n                        floatIndices.push((matricesIndex & 0x00ff0000) >> 16);\r\n                        floatIndices.push((matricesIndex >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                    }\r\n\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, floatIndices, parsedGeometry.matricesIndicesExtra._updatable);\r\n                } else {\r\n                    delete parsedGeometry.matricesIndices._isExpanded;\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, parsedGeometry.matricesIndicesExtra, parsedGeometry.matricesIndicesExtra._updatable);\r\n                }\r\n            }\r\n\r\n            if (parsedGeometry.matricesWeights) {\r\n                Geometry._CleanMatricesWeights(parsedGeometry, mesh);\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsKind, parsedGeometry.matricesWeights, parsedGeometry.matricesWeights._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.matricesWeightsExtra) {\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsExtraKind, parsedGeometry.matricesWeightsExtra, parsedGeometry.matricesWeights._updatable);\r\n            }\r\n\r\n            mesh.setIndices(parsedGeometry.indices, null);\r\n        }\r\n\r\n        // SubMeshes\r\n        if (parsedGeometry.subMeshes) {\r\n            mesh.subMeshes = [];\r\n            for (let subIndex = 0; subIndex < parsedGeometry.subMeshes.length; subIndex++) {\r\n                const parsedSubMesh = parsedGeometry.subMeshes[subIndex];\r\n\r\n                SubMesh.AddToMesh(\r\n                    parsedSubMesh.materialIndex,\r\n                    parsedSubMesh.verticesStart,\r\n                    parsedSubMesh.verticesCount,\r\n                    parsedSubMesh.indexStart,\r\n                    parsedSubMesh.indexCount,\r\n                    <AbstractMesh>mesh\r\n                );\r\n            }\r\n        }\r\n\r\n        // Flat shading\r\n        if (mesh._shouldGenerateFlatShading) {\r\n            mesh.convertToFlatShadedMesh();\r\n            mesh._shouldGenerateFlatShading = false;\r\n        }\r\n\r\n        // Update\r\n        mesh.computeWorldMatrix(true);\r\n\r\n        scene.onMeshImportedObservable.notifyObservers(<AbstractMesh>mesh);\r\n    }\r\n\r\n    private static _CleanMatricesWeights(parsedGeometry: any, mesh: Mesh): void {\r\n        const epsilon: number = 1e-3;\r\n        if (!SceneLoaderFlags.CleanBoneMatrixWeights) {\r\n            return;\r\n        }\r\n        let noInfluenceBoneIndex = 0.0;\r\n        if (parsedGeometry.skeletonId > -1) {\r\n            const skeleton = mesh.getScene().getLastSkeletonById(parsedGeometry.skeletonId);\r\n\r\n            if (!skeleton) {\r\n                return;\r\n            }\r\n            noInfluenceBoneIndex = skeleton.bones.length;\r\n        } else {\r\n            return;\r\n        }\r\n        const matricesIndices = <FloatArray>mesh.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesIndicesExtra = <FloatArray>mesh.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\r\n        const matricesWeights = parsedGeometry.matricesWeights;\r\n        const matricesWeightsExtra = parsedGeometry.matricesWeightsExtra;\r\n        const influencers = parsedGeometry.numBoneInfluencer;\r\n        const size = matricesWeights.length;\r\n\r\n        for (let i = 0; i < size; i += 4) {\r\n            let weight = 0.0;\r\n            let firstZeroWeight = -1;\r\n            for (let j = 0; j < 4; j++) {\r\n                const w = matricesWeights[i + j];\r\n                weight += w;\r\n                if (w < epsilon && firstZeroWeight < 0) {\r\n                    firstZeroWeight = j;\r\n                }\r\n            }\r\n            if (matricesWeightsExtra) {\r\n                for (let j = 0; j < 4; j++) {\r\n                    const w = matricesWeightsExtra[i + j];\r\n                    weight += w;\r\n                    if (w < epsilon && firstZeroWeight < 0) {\r\n                        firstZeroWeight = j + 4;\r\n                    }\r\n                }\r\n            }\r\n            if (firstZeroWeight < 0 || firstZeroWeight > influencers - 1) {\r\n                firstZeroWeight = influencers - 1;\r\n            }\r\n            if (weight > epsilon) {\r\n                const mweight = 1.0 / weight;\r\n                for (let j = 0; j < 4; j++) {\r\n                    matricesWeights[i + j] *= mweight;\r\n                }\r\n                if (matricesWeightsExtra) {\r\n                    for (let j = 0; j < 4; j++) {\r\n                        matricesWeightsExtra[i + j] *= mweight;\r\n                    }\r\n                }\r\n            } else {\r\n                if (firstZeroWeight >= 4) {\r\n                    matricesWeightsExtra[i + firstZeroWeight - 4] = 1.0 - weight;\r\n                    matricesIndicesExtra[i + firstZeroWeight - 4] = noInfluenceBoneIndex;\r\n                } else {\r\n                    matricesWeights[i + firstZeroWeight] = 1.0 - weight;\r\n                    matricesIndices[i + firstZeroWeight] = noInfluenceBoneIndex;\r\n                }\r\n            }\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, matricesIndices);\r\n        if (parsedGeometry.matricesWeightsExtra) {\r\n            mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, matricesIndicesExtra);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new geometry from persisted data (Using .babylon file format)\r\n     * @param parsedVertexData defines the persisted data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root url to use to load assets (like delayed data)\r\n     * @returns the new geometry object\r\n     */\r\n    public static Parse(parsedVertexData: any, scene: Scene, rootUrl: string): Nullable<Geometry> {\r\n        const geometry = new Geometry(parsedVertexData.id, scene, undefined, parsedVertexData.updatable);\r\n        geometry._loadedUniqueId = parsedVertexData.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(geometry, parsedVertexData.tags);\r\n        }\r\n\r\n        if (parsedVertexData.delayLoadingFile) {\r\n            geometry.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            geometry.delayLoadingFile = rootUrl + parsedVertexData.delayLoadingFile;\r\n            geometry._boundingInfo = new BoundingInfo(Vector3.FromArray(parsedVertexData.boundingBoxMinimum), Vector3.FromArray(parsedVertexData.boundingBoxMaximum));\r\n\r\n            geometry._delayInfo = [];\r\n            if (parsedVertexData.hasUVs) {\r\n                geometry._delayInfo.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs2) {\r\n                geometry._delayInfo.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs3) {\r\n                geometry._delayInfo.push(VertexBuffer.UV3Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs4) {\r\n                geometry._delayInfo.push(VertexBuffer.UV4Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs5) {\r\n                geometry._delayInfo.push(VertexBuffer.UV5Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs6) {\r\n                geometry._delayInfo.push(VertexBuffer.UV6Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasColors) {\r\n                geometry._delayInfo.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasMatricesIndices) {\r\n                geometry._delayInfo.push(VertexBuffer.MatricesIndicesKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasMatricesWeights) {\r\n                geometry._delayInfo.push(VertexBuffer.MatricesWeightsKind);\r\n            }\r\n\r\n            geometry._delayLoadingFunction = VertexData.ImportVertexData;\r\n        } else {\r\n            VertexData.ImportVertexData(parsedVertexData, geometry);\r\n        }\r\n\r\n        scene.pushGeometry(geometry, true);\r\n\r\n        return geometry;\r\n    }\r\n}\r\n","import type { Observer } from \"../Misc/observable\";\nimport { Observable } from \"../Misc/observable\";\nimport { Tools, AsyncLoop } from \"../Misc/tools\";\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\nimport { DeepCopier } from \"../Misc/deepCopier\";\nimport { Tags } from \"../Misc/tags\";\nimport type { Coroutine } from \"../Misc/coroutine\";\nimport { runCoroutineSync, runCoroutineAsync, createYieldingScheduler } from \"../Misc/coroutine\";\nimport type { Nullable, FloatArray, IndicesArray } from \"../types\";\nimport { Camera } from \"../Cameras/camera\";\nimport type { Scene } from \"../scene\";\nimport { ScenePerformancePriority } from \"../scene\";\nimport { Quaternion, Matrix, Vector3, Vector2 } from \"../Maths/math.vector\";\nimport { Color3 } from \"../Maths/math.color\";\nimport type { Engine } from \"../Engines/engine\";\nimport { Node } from \"../node\";\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer\";\nimport type { IGetSetVerticesData } from \"./mesh.vertexData\";\nimport { VertexData } from \"./mesh.vertexData\";\nimport { Geometry } from \"./geometry\";\nimport { AbstractMesh } from \"./abstractMesh\";\nimport { SubMesh } from \"./subMesh\";\nimport type { BoundingSphere } from \"../Culling/boundingSphere\";\nimport type { Effect } from \"../Materials/effect\";\nimport { Material } from \"../Materials/material\";\nimport { MultiMaterial } from \"../Materials/multiMaterial\";\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags\";\nimport type { Skeleton } from \"../Bones/skeleton\";\nimport { Constants } from \"../Engines/constants\";\nimport { SerializationHelper } from \"../Misc/decorators\";\nimport { Logger } from \"../Misc/logger\";\nimport { GetClass, RegisterClass } from \"../Misc/typeStore\";\nimport { _WarnImport } from \"../Misc/devTools\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { MeshLODLevel } from \"./meshLODLevel\";\nimport type { Path3D } from \"../Maths/math.path\";\nimport type { Plane } from \"../Maths/math.plane\";\nimport type { TransformNode } from \"./transformNode\";\nimport type { DrawWrapper } from \"../Materials/drawWrapper\";\ndeclare type GoldbergMesh = import(\"./goldbergMesh\").GoldbergMesh;\ndeclare type InstancedMesh = import(\"./instancedMesh\").InstancedMesh;\ndeclare type IPhysicsEnabledObject = import(\"../Physics/physicsImpostor\").IPhysicsEnabledObject;\ndeclare type PhysicsImpostor = import(\"../Physics/physicsImpostor\").PhysicsImpostor;\n/**\n * @internal\n **/\nexport class _CreationDataStorage {\n    public closePath?: boolean;\n    public closeArray?: boolean;\n    public idx: number[];\n    public dashSize: number;\n    public gapSize: number;\n    public path3D: Path3D;\n    public pathArray: Vector3[][];\n    public arc: number;\n    public radius: number;\n    public cap: number;\n    public tessellation: number;\n}\n/**\n * @internal\n **/\nclass _InstanceDataStorage {\n    public visibleInstances: any = {};\n    public batchCache = new _InstancesBatch();\n    public batchCacheReplacementModeInFrozenMode = new _InstancesBatch();\n    public instancesBufferSize = 32 * 16 * 4; // let's start with a maximum of 32 instances\n    public instancesBuffer: Nullable<Buffer>;\n    public instancesPreviousBuffer: Nullable<Buffer>;\n    public instancesData: Float32Array;\n    public instancesPreviousData: Float32Array;\n    public overridenInstanceCount: number;\n    public isFrozen: boolean;\n    public previousBatch: Nullable<_InstancesBatch>;\n    public hardwareInstancedRendering: boolean;\n    public sideOrientation: number;\n    public manualUpdate: boolean;\n    public previousManualUpdate: boolean;\n    public previousRenderId: number;\n    public masterMeshPreviousWorldMatrix: Nullable<Matrix>;\n}\n/**\n * @internal\n **/\nexport class _InstancesBatch {\n    public mustReturn = false;\n    public visibleInstances = new Array<Nullable<Array<InstancedMesh>>>();\n    public renderSelf = new Array<boolean>();\n    public hardwareInstancedRendering = new Array<boolean>();\n}\n/**\n * @internal\n **/\nclass _ThinInstanceDataStorage {\n    public instancesCount: number = 0;\n    public matrixBuffer: Nullable<Buffer> = null;\n    public previousMatrixBuffer: Nullable<Buffer> = null;\n    public matrixBufferSize = 32 * 16; // let's start with a maximum of 32 thin instances\n    public matrixData: Nullable<Float32Array> = null;\n    public previousMatrixData: Nullable<Float32Array>;\n    public boundingVectors: Array<Vector3> = [];\n    public worldMatrices: Nullable<Matrix[]> = null;\n    public masterMeshPreviousWorldMatrix: Nullable<Matrix>;\n}\n/**\n * @internal\n **/\nclass _InternalMeshDataInfo {\n    // Events\n    public _onBeforeRenderObservable: Nullable<Observable<Mesh>>;\n    public _onBeforeBindObservable: Nullable<Observable<Mesh>>;\n    public _onAfterRenderObservable: Nullable<Observable<Mesh>>;\n    public _onBeforeDrawObservable: Nullable<Observable<Mesh>>;\n    public _onBetweenPassObservable: Nullable<Observable<SubMesh>>;\n    public _areNormalsFrozen: boolean = false; // Will be used by ribbons mainly\n    public _sourcePositions: Nullable<Float32Array>; // Will be used to save original positions when using software skinning\n    public _sourceNormals: Nullable<Float32Array>; // Will be used to save original normals when using software skinning\n    // Will be used to save a source mesh reference, If any\n    public _source: Nullable<Mesh> = null;\n    // Will be used to for fast cloned mesh lookup\n    public meshMap: Nullable<{\n        [id: string]: Mesh | undefined;\n    }> = null;\n    public _preActivateId: number = -1;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public _LODLevels = new Array<MeshLODLevel>();\n    /** Alternative definition of LOD level, using screen coverage instead of distance */\n    public _useLODScreenCoverage: boolean = false;\n    public _checkReadinessObserver: Nullable<Observer<Scene>>;\n    public _onMeshReadyObserverAdded: (observer: Observer<Mesh>) => void;\n    public _effectiveMaterial: Nullable<Material> = null;\n    public _forcedInstanceCount: number = 0;\n}\n/**\n * Class used to represent renderable models\n */\nexport class Mesh extends AbstractMesh implements IGetSetVerticesData {\n    // Consts\n    /**\n     * Mesh side orientation : usually the external or front surface\n     */\n    public static readonly FRONTSIDE = VertexData.FRONTSIDE;\n    /**\n     * Mesh side orientation : usually the internal or back surface\n     */\n    public static readonly BACKSIDE = VertexData.BACKSIDE;\n    /**\n     * Mesh side orientation : both internal and external or front and back surfaces\n     */\n    public static readonly DOUBLESIDE = VertexData.DOUBLESIDE;\n    /**\n     * Mesh side orientation : by default, `FRONTSIDE`\n     */\n    public static readonly DEFAULTSIDE = VertexData.DEFAULTSIDE;\n    /**\n     * Mesh cap setting : no cap\n     */\n    public static readonly NO_CAP = 0;\n    /**\n     * Mesh cap setting : one cap at the beginning of the mesh\n     */\n    public static readonly CAP_START = 1;\n    /**\n     * Mesh cap setting : one cap at the end of the mesh\n     */\n    public static readonly CAP_END = 2;\n    /**\n     * Mesh cap setting : two caps, one at the beginning  and one at the end of the mesh\n     */\n    public static readonly CAP_ALL = 3;\n    /**\n     * Mesh pattern setting : no flip or rotate\n     */\n    public static readonly NO_FLIP = 0;\n    /**\n     * Mesh pattern setting : flip (reflect in y axis) alternate tiles on each row or column\n     */\n    public static readonly FLIP_TILE = 1;\n    /**\n     * Mesh pattern setting : rotate (180degs) alternate tiles on each row or column\n     */\n    public static readonly ROTATE_TILE = 2;\n    /**\n     * Mesh pattern setting : flip (reflect in y axis) all tiles on alternate rows\n     */\n    public static readonly FLIP_ROW = 3;\n    /**\n     * Mesh pattern setting : rotate (180degs) all tiles on alternate rows\n     */\n    public static readonly ROTATE_ROW = 4;\n    /**\n     * Mesh pattern setting : flip and rotate alternate tiles on each row or column\n     */\n    public static readonly FLIP_N_ROTATE_TILE = 5;\n    /**\n     * Mesh pattern setting : rotate pattern and rotate\n     */\n    public static readonly FLIP_N_ROTATE_ROW = 6;\n    /**\n     * Mesh tile positioning : part tiles same on left/right or top/bottom\n     */\n    public static readonly CENTER = 0;\n    /**\n     * Mesh tile positioning : part tiles on left\n     */\n    public static readonly LEFT = 1;\n    /**\n     * Mesh tile positioning : part tiles on right\n     */\n    public static readonly RIGHT = 2;\n    /**\n     * Mesh tile positioning : part tiles on top\n     */\n    public static readonly TOP = 3;\n    /**\n     * Mesh tile positioning : part tiles on bottom\n     */\n    public static readonly BOTTOM = 4;\n    /**\n     * Indicates that the instanced meshes should be sorted from back to front before rendering if their material is transparent\n     */\n    public static INSTANCEDMESH_SORT_TRANSPARENT = false;\n    /**\n     * Gets the default side orientation.\n     * @param orientation the orientation to value to attempt to get\n     * @returns the default orientation\n     * @internal\n     */\n    public static _GetDefaultSideOrientation(orientation?: number): number {\n        return orientation || Mesh.FRONTSIDE; // works as Mesh.FRONTSIDE is 0\n    }\n    // Internal data\n    private _internalMeshDataInfo = new _InternalMeshDataInfo();\n    /**\n     * Determines if the LOD levels are intended to be calculated using screen coverage (surface area ratio) instead of distance\n     */\n    public get useLODScreenCoverage() {\n        return this._internalMeshDataInfo._useLODScreenCoverage;\n    }\n    public set useLODScreenCoverage(value: boolean) {\n        this._internalMeshDataInfo._useLODScreenCoverage = value;\n    }\n    /**\n     * Will notify when the mesh is completely ready, including materials.\n     * Observers added to this observable will be removed once triggered\n     */\n    public onMeshReadyObservable: Observable<Mesh>;\n    public get computeBonesUsingShaders(): boolean {\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\n    }\n    public set computeBonesUsingShaders(value: boolean) {\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\n            return;\n        }\n        if (value && this._internalMeshDataInfo._sourcePositions) {\n            // switch from software to GPU computation: we need to reset the vertex and normal buffers that have been updated by the software process\n            this.setVerticesData(VertexBuffer.PositionKind, this._internalMeshDataInfo._sourcePositions, true);\n            if (this._internalMeshDataInfo._sourceNormals) {\n                this.setVerticesData(VertexBuffer.NormalKind, this._internalMeshDataInfo._sourceNormals, true);\n            }\n            this._internalMeshDataInfo._sourcePositions = null;\n            this._internalMeshDataInfo._sourceNormals = null;\n        }\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\n        this._markSubMeshesAsAttributesDirty();\n    }\n    /**\n     * An event triggered before rendering the mesh\n     */\n    public get onBeforeRenderObservable(): Observable<Mesh> {\n        if (!this._internalMeshDataInfo._onBeforeRenderObservable) {\n            this._internalMeshDataInfo._onBeforeRenderObservable = new Observable<Mesh>();\n        }\n        return this._internalMeshDataInfo._onBeforeRenderObservable;\n    }\n    /**\n     * An event triggered before binding the mesh\n     */\n    public get onBeforeBindObservable(): Observable<Mesh> {\n        if (!this._internalMeshDataInfo._onBeforeBindObservable) {\n            this._internalMeshDataInfo._onBeforeBindObservable = new Observable<Mesh>();\n        }\n        return this._internalMeshDataInfo._onBeforeBindObservable;\n    }\n    /**\n     * An event triggered after rendering the mesh\n     */\n    public get onAfterRenderObservable(): Observable<Mesh> {\n        if (!this._internalMeshDataInfo._onAfterRenderObservable) {\n            this._internalMeshDataInfo._onAfterRenderObservable = new Observable<Mesh>();\n        }\n        return this._internalMeshDataInfo._onAfterRenderObservable;\n    }\n    /**\n     * An event triggeredbetween rendering pass when using separateCullingPass = true\n     */\n    public get onBetweenPassObservable(): Observable<SubMesh> {\n        if (!this._internalMeshDataInfo._onBetweenPassObservable) {\n            this._internalMeshDataInfo._onBetweenPassObservable = new Observable<SubMesh>();\n        }\n        return this._internalMeshDataInfo._onBetweenPassObservable;\n    }\n    /**\n     * An event triggered before drawing the mesh\n     */\n    public get onBeforeDrawObservable(): Observable<Mesh> {\n        if (!this._internalMeshDataInfo._onBeforeDrawObservable) {\n            this._internalMeshDataInfo._onBeforeDrawObservable = new Observable<Mesh>();\n        }\n        return this._internalMeshDataInfo._onBeforeDrawObservable;\n    }\n    private _onBeforeDrawObserver: Nullable<Observer<Mesh>>;\n    /**\n     * Sets a callback to call before drawing the mesh. It is recommended to use onBeforeDrawObservable instead\n     */\n    public set onBeforeDraw(callback: () => void) {\n        if (this._onBeforeDrawObserver) {\n            this.onBeforeDrawObservable.remove(this._onBeforeDrawObserver);\n        }\n        this._onBeforeDrawObserver = this.onBeforeDrawObservable.add(callback);\n    }\n    public get hasInstances(): boolean {\n        return this.instances.length > 0;\n    }\n    public get hasThinInstances(): boolean {\n        return (this._thinInstanceDataStorage.instancesCount ?? 0) > 0;\n    }\n    // Members\n    /**\n     * Gets the delay loading state of the mesh (when delay loading is turned on)\n     * @see https://doc.babylonjs.com/how_to/using_the_incremental_loading_system\n     */\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\n    /**\n     * Gets the list of instances created from this mesh\n     * it is not supposed to be modified manually.\n     * Note also that the order of the InstancedMesh wihin the array is not significant and might change.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_instances\n     */\n    public instances = new Array<InstancedMesh>();\n    /**\n     * Gets the file containing delay loading data for this mesh\n     */\n    public delayLoadingFile: string;\n    /** @internal */\n    public _binaryInfo: any;\n    /**\n     * User defined function used to change how LOD level selection is done\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lod\n     */\n    public onLODLevelSelection: (distance: number, mesh: Mesh, selectedLevel: Nullable<Mesh>) => void;\n    // Private\n    /** @internal */\n    public _creationDataStorage: Nullable<_CreationDataStorage> = null;\n    /** @internal */\n    public _geometry: Nullable<Geometry> = null;\n    /** @internal */\n    public _delayInfo: Array<string>;\n    /** @internal */\n    public _delayLoadingFunction: (any: any, mesh: Mesh) => void;\n    /**\n     * Gets or sets the forced number of instances to display.\n     * If 0 (default value), the number of instances is not forced and depends on the draw type\n     * (regular / instance / thin instances mesh)\n     */\n    public get forcedInstanceCount(): number {\n        return this._internalMeshDataInfo._forcedInstanceCount;\n    }\n    public set forcedInstanceCount(count: number) {\n        this._internalMeshDataInfo._forcedInstanceCount = count;\n    }\n    /** @internal */\n    public _instanceDataStorage = new _InstanceDataStorage();\n    /** @internal */\n    public _thinInstanceDataStorage = new _ThinInstanceDataStorage();\n    /** @internal */\n    public _shouldGenerateFlatShading: boolean = false;\n    // Use by builder only to know what orientation were the mesh build in.\n    /** @internal */\n    public _originalBuilderSideOrientation: number = Mesh.DEFAULTSIDE;\n    /**\n     * Use this property to change the original side orientation defined at construction time\n     */\n    public overrideMaterialSideOrientation: Nullable<number> = null;\n    /**\n     * Gets or sets a boolean indicating whether to render ignoring the active camera's max z setting. (false by default)\n     * Note this will reduce performance when set to true.\n     */\n    public ignoreCameraMaxZ = false;\n    /**\n     * Gets the source mesh (the one used to clone this one from)\n     */\n    public get source(): Nullable<Mesh> {\n        return this._internalMeshDataInfo._source;\n    }\n    /**\n     * Gets the list of clones of this mesh\n     * The scene must have been constructed with useClonedMeshMap=true for this to work!\n     * Note that useClonedMeshMap=true is the default setting\n     */\n    public get cloneMeshMap(): Nullable<{\n        [id: string]: Mesh | undefined;\n    }> {\n        return this._internalMeshDataInfo.meshMap;\n    }\n    /**\n     * Gets or sets a boolean indicating that this mesh does not use index buffer\n     */\n    public get isUnIndexed(): boolean {\n        return this._unIndexed;\n    }\n    public set isUnIndexed(value: boolean) {\n        if (this._unIndexed !== value) {\n            this._unIndexed = value;\n            this._markSubMeshesAsAttributesDirty();\n        }\n    }\n    /** Gets the array buffer used to store the instanced buffer used for instances' world matrices */\n    public get worldMatrixInstancedBuffer() {\n        return this._instanceDataStorage.instancesData;\n    }\n    /** Gets the array buffer used to store the instanced buffer used for instances' previous world matrices */\n    public get previousWorldMatrixInstancedBuffer() {\n        return this._instanceDataStorage.instancesPreviousData;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\n    public get manualUpdateOfWorldMatrixInstancedBuffer() {\n        return this._instanceDataStorage.manualUpdate;\n    }\n    public set manualUpdateOfWorldMatrixInstancedBuffer(value: boolean) {\n        this._instanceDataStorage.manualUpdate = value;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\n    public get manualUpdateOfPreviousWorldMatrixInstancedBuffer() {\n        return this._instanceDataStorage.previousManualUpdate;\n    }\n    public set manualUpdateOfPreviousWorldMatrixInstancedBuffer(value: boolean) {\n        this._instanceDataStorage.previousManualUpdate = value;\n    }\n    /**\n     * @constructor\n     * @param name The value used by scene.getMeshByName() to do a lookup.\n     * @param scene The scene to add this mesh to.\n     * @param parent The parent of this mesh, if it has one\n     * @param source An optional Mesh from which geometry is shared, cloned.\n     * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\n     *                  When false, achieved by calling a clone(), also passing False.\n     *                  This will make creation of children, recursive.\n     * @param clonePhysicsImpostor When cloning, include cloning mesh physics impostor, default True.\n     */\n    constructor(name: string, scene: Nullable<Scene> = null, parent: Nullable<Node> = null, source: Nullable<Mesh> = null, doNotCloneChildren?: boolean, clonePhysicsImpostor: boolean = true) {\n        super(name, scene);\n        scene = this.getScene();\n        this._onBeforeDraw = (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => {\n            if (isInstance && effectiveMaterial) {\n                if (this._uniformBuffer) {\n                    this.transferToEffect(world);\n                }\n                else {\n                    effectiveMaterial.bindOnlyWorldMatrix(world);\n                }\n            }\n        };\n        if (source) {\n            // Geometry\n            if (source._geometry) {\n                source._geometry.applyToMesh(this);\n            }\n            // Deep copy\n            DeepCopier.DeepCopy(source, this, [\n                \"name\",\n                \"material\",\n                \"skeleton\",\n                \"instances\",\n                \"parent\",\n                \"uniqueId\",\n                \"source\",\n                \"metadata\",\n                \"morphTargetManager\",\n                \"hasInstances\",\n                \"worldMatrixInstancedBuffer\",\n                \"previousWorldMatrixInstancedBuffer\",\n                \"hasLODLevels\",\n                \"geometry\",\n                \"isBlocked\",\n                \"areNormalsFrozen\",\n                \"facetNb\",\n                \"isFacetDataEnabled\",\n                \"lightSources\",\n                \"useBones\",\n                \"isAnInstance\",\n                \"collider\",\n                \"edgesRenderer\",\n                \"forward\",\n                \"up\",\n                \"right\",\n                \"absolutePosition\",\n                \"absoluteScaling\",\n                \"absoluteRotationQuaternion\",\n                \"isWorldMatrixFrozen\",\n                \"nonUniformScaling\",\n                \"behaviors\",\n                \"worldMatrixFromCache\",\n                \"hasThinInstances\",\n                \"cloneMeshMap\",\n                \"hasBoundingInfo\",\n            ], [\"_poseMatrix\"]);\n            // Source mesh\n            this._internalMeshDataInfo._source = source;\n            if (scene.useClonedMeshMap) {\n                if (!source._internalMeshDataInfo.meshMap) {\n                    source._internalMeshDataInfo.meshMap = {};\n                }\n                source._internalMeshDataInfo.meshMap[this.uniqueId] = this;\n            }\n            // Construction Params\n            // Clone parameters allowing mesh to be updated in case of parametric shapes.\n            this._originalBuilderSideOrientation = source._originalBuilderSideOrientation;\n            this._creationDataStorage = source._creationDataStorage;\n            // Animation ranges\n            if (source._ranges) {\n                const ranges = source._ranges;\n                for (const name in ranges) {\n                    if (!Object.prototype.hasOwnProperty.call(ranges, name)) {\n                        continue;\n                    }\n                    if (!ranges[name]) {\n                        continue;\n                    }\n                    this.createAnimationRange(name, ranges[name]!.from, ranges[name]!.to);\n                }\n            }\n            // Metadata\n            if (source.metadata && source.metadata.clone) {\n                this.metadata = source.metadata.clone();\n            }\n            else {\n                this.metadata = source.metadata;\n            }\n            // Tags\n            if (Tags && Tags.HasTags(source)) {\n                Tags.AddTagsTo(this, Tags.GetTags(source, true));\n            }\n            // Enabled. We shouldn't need to check the source's ancestors, as this mesh\n            // will have the same ones.\n            this.setEnabled(source.isEnabled(false));\n            // Parent\n            this.parent = source.parent;\n            // Pivot\n            this.setPivotMatrix(source.getPivotMatrix());\n            this.id = name + \".\" + source.id;\n            // Material\n            this.material = source.material;\n            if (!doNotCloneChildren) {\n                // Children\n                const directDescendants = source.getDescendants(true);\n                for (let index = 0; index < directDescendants.length; index++) {\n                    const child = directDescendants[index];\n                    if ((<any>child).clone) {\n                        (<any>child).clone(name + \".\" + child.name, this);\n                    }\n                }\n            }\n            // Morphs\n            if (source.morphTargetManager) {\n                this.morphTargetManager = source.morphTargetManager;\n            }\n            // Physics clone\n            if (scene.getPhysicsEngine) {\n                const physicsEngine = scene.getPhysicsEngine();\n                if (clonePhysicsImpostor && physicsEngine) {\n                    const impostor = physicsEngine.getImpostorForPhysicsObject(source);\n                    if (impostor) {\n                        this.physicsImpostor = impostor.clone(this);\n                    }\n                }\n            }\n            // Particles\n            for (let index = 0; index < scene.particleSystems.length; index++) {\n                const system = scene.particleSystems[index];\n                if (system.emitter === source) {\n                    system.clone(system.name, this);\n                }\n            }\n            // Skeleton\n            this.skeleton = source.skeleton;\n            this.refreshBoundingInfo(true, true);\n            this.computeWorldMatrix(true);\n        }\n        // Parent\n        if (parent !== null) {\n            this.parent = parent;\n        }\n        this._instanceDataStorage.hardwareInstancedRendering = this.getEngine().getCaps().instancedArrays;\n        this._internalMeshDataInfo._onMeshReadyObserverAdded = (observer: Observer<Mesh>) => {\n            // only notify once! then unregister the observer\n            observer.unregisterOnNextCall = true;\n            if (this.isReady(true)) {\n                this.onMeshReadyObservable.notifyObservers(this);\n            }\n            else {\n                if (!this._internalMeshDataInfo._checkReadinessObserver) {\n                    this._internalMeshDataInfo._checkReadinessObserver = this._scene.onBeforeRenderObservable.add(() => {\n                        // check for complete readiness\n                        if (this.isReady(true)) {\n                            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\n                            this._internalMeshDataInfo._checkReadinessObserver = null;\n                            this.onMeshReadyObservable.notifyObservers(this);\n                        }\n                    });\n                }\n            }\n        };\n        this.onMeshReadyObservable = new Observable(this._internalMeshDataInfo._onMeshReadyObserverAdded);\n        if (source) {\n            source.onClonedObservable.notifyObservers(this);\n        }\n    }\n    public instantiateHierarchy(newParent: Nullable<TransformNode> = null, options?: {\n        doNotInstantiate: boolean | ((node: TransformNode) => boolean);\n    }, onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void): Nullable<TransformNode> {\n        const instance = this.getTotalVertices() === 0 || (options && options.doNotInstantiate && (options.doNotInstantiate === true || options.doNotInstantiate(this)))\n            ? this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true)\n            : this.createInstance(\"instance of \" + (this.name || this.id));\n        instance.parent = newParent || this.parent;\n        instance.position = this.position.clone();\n        instance.scaling = this.scaling.clone();\n        if (this.rotationQuaternion) {\n            instance.rotationQuaternion = this.rotationQuaternion.clone();\n        }\n        else {\n            instance.rotation = this.rotation.clone();\n        }\n        if (onNewNodeCreated) {\n            onNewNodeCreated(this, instance);\n        }\n        for (const child of this.getChildTransformNodes(true)) {\n            // instancedMesh should have a different sourced mesh\n            if (child.getClassName() === \"InstancedMesh\" && instance.getClassName() === \"Mesh\") {\n                (child as InstancedMesh).instantiateHierarchy(instance, {\n                    doNotInstantiate: (options && options.doNotInstantiate) || false,\n                    newSourcedMesh: instance as Mesh\n                }, onNewNodeCreated);\n            }\n            else {\n                child.instantiateHierarchy(instance, options, onNewNodeCreated);\n            }\n        }\n        return instance;\n    }\n    /**\n     * Gets the class name\n     * @returns the string \"Mesh\".\n     */\n    public getClassName(): string {\n        return \"Mesh\";\n    }\n    /** @internal */\n    public get _isMesh() {\n        return true;\n    }\n    /**\n     * Returns a description of this mesh\n     * @param fullDetails define if full details about this mesh must be used\n     * @returns a descriptive string representing this mesh\n     */\n    public toString(fullDetails?: boolean): string {\n        let ret = super.toString(fullDetails);\n        ret += \", n vertices: \" + this.getTotalVertices();\n        ret += \", parent: \" + (this._waitingParentId ? this._waitingParentId : this.parent ? this.parent.name : \"NONE\");\n        if (this.animations) {\n            for (let i = 0; i < this.animations.length; i++) {\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\n            }\n        }\n        if (fullDetails) {\n            if (this._geometry) {\n                const ib = this.getIndices();\n                const vb = this.getVerticesData(VertexBuffer.PositionKind);\n                if (vb && ib) {\n                    ret += \", flat shading: \" + (vb.length / 3 === ib.length ? \"YES\" : \"NO\");\n                }\n            }\n            else {\n                ret += \", flat shading: UNKNOWN\";\n            }\n        }\n        return ret;\n    }\n    /** @internal */\n    public _unBindEffect() {\n        super._unBindEffect();\n        for (const instance of this.instances) {\n            instance._unBindEffect();\n        }\n    }\n    /**\n     * Gets a boolean indicating if this mesh has LOD\n     */\n    public get hasLODLevels(): boolean {\n        return this._internalMeshDataInfo._LODLevels.length > 0;\n    }\n    /**\n     * Gets the list of MeshLODLevel associated with the current mesh\n     * @returns an array of MeshLODLevel\n     */\n    public getLODLevels(): MeshLODLevel[] {\n        return this._internalMeshDataInfo._LODLevels;\n    }\n    private _sortLODLevels(): void {\n        const sortingOrderFactor = this._internalMeshDataInfo._useLODScreenCoverage ? -1 : 1;\n        this._internalMeshDataInfo._LODLevels.sort((a, b) => {\n            if (a.distanceOrScreenCoverage < b.distanceOrScreenCoverage) {\n                return sortingOrderFactor;\n            }\n            if (a.distanceOrScreenCoverage > b.distanceOrScreenCoverage) {\n                return -sortingOrderFactor;\n            }\n            return 0;\n        });\n    }\n    /**\n     * Add a mesh as LOD level triggered at the given distance.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lod\n     * @param distanceOrScreenCoverage Either distance from the center of the object to show this level or the screen coverage if `useScreenCoverage` is set to `true`.\n     * If screen coverage, value is a fraction of the screen's total surface, between 0 and 1.\n     * @param mesh The mesh to be added as LOD level (can be null)\n     * @returns This mesh (for chaining)\n     */\n    public addLODLevel(distanceOrScreenCoverage: number, mesh: Nullable<Mesh>): Mesh {\n        if (mesh && mesh._masterMesh) {\n            Logger.Warn(\"You cannot use a mesh as LOD level twice\");\n            return this;\n        }\n        const level = new MeshLODLevel(distanceOrScreenCoverage, mesh);\n        this._internalMeshDataInfo._LODLevels.push(level);\n        if (mesh) {\n            mesh._masterMesh = this;\n        }\n        this._sortLODLevels();\n        return this;\n    }\n    /**\n     * Returns the LOD level mesh at the passed distance or null if not found.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lod\n     * @param distance The distance from the center of the object to show this level\n     * @returns a Mesh or `null`\n     */\n    public getLODLevelAtDistance(distance: number): Nullable<Mesh> {\n        const internalDataInfo = this._internalMeshDataInfo;\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\n            const level = internalDataInfo._LODLevels[index];\n            if (level.distanceOrScreenCoverage === distance) {\n                return level.mesh;\n            }\n        }\n        return null;\n    }\n    /**\n     * Remove a mesh from the LOD array\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lod\n     * @param mesh defines the mesh to be removed\n     * @returns This mesh (for chaining)\n     */\n    public removeLODLevel(mesh: Mesh): Mesh {\n        const internalDataInfo = this._internalMeshDataInfo;\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\n            if (internalDataInfo._LODLevels[index].mesh === mesh) {\n                internalDataInfo._LODLevels.splice(index, 1);\n                if (mesh) {\n                    mesh._masterMesh = null;\n                }\n            }\n        }\n        this._sortLODLevels();\n        return this;\n    }\n    /**\n     * Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lod\n     * @param camera defines the camera to use to compute distance\n     * @param boundingSphere defines a custom bounding sphere to use instead of the one from this mesh\n     * @returns This mesh (for chaining)\n     */\n    public getLOD(camera: Camera, boundingSphere?: BoundingSphere): Nullable<AbstractMesh> {\n        const internalDataInfo = this._internalMeshDataInfo;\n        if (!internalDataInfo._LODLevels || internalDataInfo._LODLevels.length === 0) {\n            return this;\n        }\n        let bSphere: BoundingSphere;\n        if (boundingSphere) {\n            bSphere = boundingSphere;\n        }\n        else {\n            const boundingInfo = this.getBoundingInfo();\n            bSphere = boundingInfo.boundingSphere;\n        }\n        const distanceToCamera = camera.mode === Camera.ORTHOGRAPHIC_CAMERA ? camera.minZ : bSphere.centerWorld.subtract(camera.globalPosition).length();\n        const useScreenCoverage = internalDataInfo._useLODScreenCoverage;\n        let compareValue = distanceToCamera;\n        let compareSign = 1;\n        if (useScreenCoverage) {\n            const screenArea = camera.screenArea;\n            let meshArea = (bSphere.radiusWorld * camera.minZ) / distanceToCamera;\n            meshArea = meshArea * meshArea * Math.PI;\n            compareValue = meshArea / screenArea;\n            compareSign = -1;\n        }\n        if (compareSign * internalDataInfo._LODLevels[internalDataInfo._LODLevels.length - 1].distanceOrScreenCoverage > compareSign * compareValue) {\n            if (this.onLODLevelSelection) {\n                this.onLODLevelSelection(compareValue, this, this);\n            }\n            return this;\n        }\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\n            const level = internalDataInfo._LODLevels[index];\n            if (compareSign * level.distanceOrScreenCoverage < compareSign * compareValue) {\n                if (level.mesh) {\n                    if (level.mesh.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\n                        level.mesh._checkDelayState();\n                        return this;\n                    }\n                    if (level.mesh.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\n                        return this;\n                    }\n                    level.mesh._preActivate();\n                    level.mesh._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\n                }\n                if (this.onLODLevelSelection) {\n                    this.onLODLevelSelection(compareValue, this, level.mesh);\n                }\n                return level.mesh;\n            }\n        }\n        if (this.onLODLevelSelection) {\n            this.onLODLevelSelection(compareValue, this, this);\n        }\n        return this;\n    }\n    /**\n     * Gets the mesh internal Geometry object\n     */\n    public get geometry(): Nullable<Geometry> {\n        return this._geometry;\n    }\n    /**\n     * Returns the total number of vertices within the mesh geometry or zero if the mesh has no geometry.\n     * @returns the total number of vertices\n     */\n    public getTotalVertices(): number {\n        if (this._geometry === null || this._geometry === undefined) {\n            return 0;\n        }\n        return this._geometry.getTotalVertices();\n    }\n    /**\n     * Returns the content of an associated vertex buffer\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param copyWhenShared defines a boolean indicating that if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\n     * @returns a FloatArray or null if the mesh has no geometry or no vertex buffer for this kind.\n     */\n    public getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray> {\n        if (!this._geometry) {\n            return null;\n        }\n        let data = this._userInstancedBuffersStorage?.vertexBuffers[kind]?.getFloatData(this._geometry.getTotalVertices(), forceCopy || (copyWhenShared && this._geometry.meshes.length !== 1));\n        if (!data) {\n            data = this._geometry.getVerticesData(kind, copyWhenShared, forceCopy);\n        }\n        return data;\n    }\n    /**\n     * Returns the mesh VertexBuffer object from the requested `kind`\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.NormalKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a FloatArray or null if the mesh has no vertex buffer for this kind.\n     */\n    public getVertexBuffer(kind: string): Nullable<VertexBuffer> {\n        if (!this._geometry) {\n            return null;\n        }\n        return this._userInstancedBuffersStorage?.vertexBuffers[kind] ?? this._geometry.getVertexBuffer(kind);\n    }\n    /**\n     * Tests if a specific vertex buffer is associated with this mesh\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.NormalKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a boolean\n     */\n    public isVerticesDataPresent(kind: string): boolean {\n        if (!this._geometry) {\n            if (this._delayInfo) {\n                return this._delayInfo.indexOf(kind) !== -1;\n            }\n            return false;\n        }\n        return this._userInstancedBuffersStorage?.vertexBuffers[kind] !== undefined || this._geometry.isVerticesDataPresent(kind);\n    }\n    /**\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable.\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a boolean\n     */\n    public isVertexBufferUpdatable(kind: string): boolean {\n        if (!this._geometry) {\n            if (this._delayInfo) {\n                return this._delayInfo.indexOf(kind) !== -1;\n            }\n            return false;\n        }\n        return this._userInstancedBuffersStorage?.vertexBuffers[kind]?.isUpdatable() || this._geometry.isVertexBufferUpdatable(kind);\n    }\n    /**\n     * Returns a string which contains the list of existing `kinds` of Vertex Data associated with this mesh.\n     * @returns an array of strings\n     */\n    public getVerticesDataKinds(): string[] {\n        if (!this._geometry) {\n            const result = new Array<string>();\n            if (this._delayInfo) {\n                this._delayInfo.forEach(function (kind) {\n                    result.push(kind);\n                });\n            }\n            return result;\n        }\n        const kinds = this._geometry.getVerticesDataKinds();\n        if (this._userInstancedBuffersStorage) {\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\n                kinds.push(kind);\n            }\n        }\n        return kinds;\n    }\n    /**\n     * Returns a positive integer : the total number of indices in this mesh geometry.\n     * @returns the numner of indices or zero if the mesh has no geometry.\n     */\n    public getTotalIndices(): number {\n        if (!this._geometry) {\n            return 0;\n        }\n        return this._geometry.getTotalIndices();\n    }\n    /**\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\n     * @returns the indices array or an empty array if the mesh has no geometry\n     */\n    public getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray> {\n        if (!this._geometry) {\n            return [];\n        }\n        return this._geometry.getIndices(copyWhenShared, forceCopy);\n    }\n    public get isBlocked(): boolean {\n        return this._masterMesh !== null && this._masterMesh !== undefined;\n    }\n    /**\n     * Determine if the current mesh is ready to be rendered\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\n     * @param forceInstanceSupport will check if the mesh will be ready when used with instances (false by default)\n     * @returns true if all associated assets are ready (material, textures, shaders)\n     */\n    public isReady(completeCheck = false, forceInstanceSupport = false): boolean {\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\n            return false;\n        }\n        if (!super.isReady(completeCheck)) {\n            return false;\n        }\n        if (!this.subMeshes || this.subMeshes.length === 0) {\n            return true;\n        }\n        if (!completeCheck) {\n            return true;\n        }\n        const engine = this.getEngine();\n        const scene = this.getScene();\n        const hardwareInstancedRendering = forceInstanceSupport || (engine.getCaps().instancedArrays && (this.instances.length > 0 || this.hasThinInstances));\n        this.computeWorldMatrix();\n        const mat = this.material || scene.defaultMaterial;\n        if (mat) {\n            if (mat._storeEffectOnSubMeshes) {\n                for (const subMesh of this.subMeshes) {\n                    const effectiveMaterial = subMesh.getMaterial();\n                    if (effectiveMaterial) {\n                        if (effectiveMaterial._storeEffectOnSubMeshes) {\n                            if (!effectiveMaterial.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\n                                return false;\n                            }\n                        }\n                        else {\n                            if (!effectiveMaterial.isReady(this, hardwareInstancedRendering)) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (!mat.isReady(this, hardwareInstancedRendering)) {\n                    return false;\n                }\n            }\n        }\n        // Shadows\n        const currentRenderPassId = engine.currentRenderPassId;\n        for (const light of this.lightSources) {\n            const generator = light.getShadowGenerator();\n            if (generator && (!generator.getShadowMap()?.renderList || (generator.getShadowMap()?.renderList && generator.getShadowMap()?.renderList?.indexOf(this) !== -1))) {\n                if (generator.getShadowMap()) {\n                    engine.currentRenderPassId = generator.getShadowMap()!.renderPassId;\n                }\n                for (const subMesh of this.subMeshes) {\n                    if (!generator.isReady(subMesh, hardwareInstancedRendering, subMesh.getMaterial()?.needAlphaBlendingForMesh(this) ?? false)) {\n                        engine.currentRenderPassId = currentRenderPassId;\n                        return false;\n                    }\n                }\n                engine.currentRenderPassId = currentRenderPassId;\n            }\n        }\n        // LOD\n        for (const lod of this._internalMeshDataInfo._LODLevels) {\n            if (lod.mesh && !lod.mesh.isReady(hardwareInstancedRendering)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Gets a boolean indicating if the normals aren't to be recomputed on next mesh `positions` array update. This property is pertinent only for updatable parametric shapes.\n     */\n    public get areNormalsFrozen(): boolean {\n        return this._internalMeshDataInfo._areNormalsFrozen;\n    }\n    /**\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It prevents the mesh normals from being recomputed on next `positions` array update.\n     * @returns the current mesh\n     */\n    public freezeNormals(): Mesh {\n        this._internalMeshDataInfo._areNormalsFrozen = true;\n        return this;\n    }\n    /**\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It reactivates the mesh normals computation if it was previously frozen\n     * @returns the current mesh\n     */\n    public unfreezeNormals(): Mesh {\n        this._internalMeshDataInfo._areNormalsFrozen = false;\n        return this;\n    }\n    /**\n     * Sets a value overriding the instance count. Only applicable when custom instanced InterleavedVertexBuffer are used rather than InstancedMeshs\n     */\n    public set overridenInstanceCount(count: number) {\n        this._instanceDataStorage.overridenInstanceCount = count;\n    }\n    // Methods\n    /** @internal */\n    public _preActivate(): Mesh {\n        const internalDataInfo = this._internalMeshDataInfo;\n        const sceneRenderId = this.getScene().getRenderId();\n        if (internalDataInfo._preActivateId === sceneRenderId) {\n            return this;\n        }\n        internalDataInfo._preActivateId = sceneRenderId;\n        this._instanceDataStorage.visibleInstances = null;\n        return this;\n    }\n    /**\n     * @internal\n     */\n    public _preActivateForIntermediateRendering(renderId: number): Mesh {\n        if (this._instanceDataStorage.visibleInstances) {\n            this._instanceDataStorage.visibleInstances.intermediateDefaultRenderId = renderId;\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    public _registerInstanceForRenderId(instance: InstancedMesh, renderId: number): Mesh {\n        if (!this._instanceDataStorage.visibleInstances) {\n            this._instanceDataStorage.visibleInstances = {\n                defaultRenderId: renderId,\n                selfDefaultRenderId: this._renderId\n            };\n        }\n        if (!this._instanceDataStorage.visibleInstances[renderId]) {\n            if (this._instanceDataStorage.previousRenderId !== undefined && this._instanceDataStorage.isFrozen) {\n                this._instanceDataStorage.visibleInstances[this._instanceDataStorage.previousRenderId] = null;\n            }\n            this._instanceDataStorage.previousRenderId = renderId;\n            this._instanceDataStorage.visibleInstances[renderId] = new Array<InstancedMesh>();\n        }\n        this._instanceDataStorage.visibleInstances[renderId].push(instance);\n        return this;\n    }\n    protected _afterComputeWorldMatrix(): void {\n        super._afterComputeWorldMatrix();\n        if (!this.hasThinInstances) {\n            return;\n        }\n        if (!this.doNotSyncBoundingInfo) {\n            this.thinInstanceRefreshBoundingInfo(false);\n        }\n    }\n    /** @internal */\n    public _postActivate(): void {\n        if (this.edgesShareWithInstances && this.edgesRenderer && this.edgesRenderer.isEnabled && this._renderingGroup) {\n            this._renderingGroup._edgesRenderers.pushNoDuplicate(this.edgesRenderer);\n            this.edgesRenderer.customInstances.push(this.getWorldMatrix());\n        }\n    }\n    /**\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\n     * This means the mesh underlying bounding box and sphere are recomputed.\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\n     * @returns the current mesh\n     */\n    public refreshBoundingInfo(applySkeleton: boolean = false, applyMorph: boolean = false): Mesh {\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\n            return this;\n        }\n        const bias = this.geometry ? this.geometry.boundingBias : null;\n        this._refreshBoundingInfo(this._getPositionData(applySkeleton, applyMorph), bias);\n        return this;\n    }\n    /**\n     * @internal\n     */\n    public _createGlobalSubMesh(force: boolean): Nullable<SubMesh> {\n        const totalVertices = this.getTotalVertices();\n        if (!totalVertices || !this.getIndices()) {\n            return null;\n        }\n        // Check if we need to recreate the submeshes\n        if (this.subMeshes && this.subMeshes.length > 0) {\n            const ib = this.getIndices();\n            if (!ib) {\n                return null;\n            }\n            const totalIndices = ib.length;\n            let needToRecreate = false;\n            if (force) {\n                needToRecreate = true;\n            }\n            else {\n                for (const submesh of this.subMeshes) {\n                    if (submesh.indexStart + submesh.indexCount > totalIndices) {\n                        needToRecreate = true;\n                        break;\n                    }\n                    if (submesh.verticesStart + submesh.verticesCount > totalVertices) {\n                        needToRecreate = true;\n                        break;\n                    }\n                }\n            }\n            if (!needToRecreate) {\n                return this.subMeshes[0];\n            }\n        }\n        this.releaseSubMeshes();\n        return new SubMesh(0, 0, totalVertices, 0, this.getTotalIndices(), this);\n    }\n    /**\n     * This function will subdivide the mesh into multiple submeshes\n     * @param count defines the expected number of submeshes\n     */\n    public subdivide(count: number): void {\n        if (count < 1) {\n            return;\n        }\n        const totalIndices = this.getTotalIndices();\n        let subdivisionSize = (totalIndices / count) | 0;\n        let offset = 0;\n        // Ensure that subdivisionSize is a multiple of 3\n        while (subdivisionSize % 3 !== 0) {\n            subdivisionSize++;\n        }\n        this.releaseSubMeshes();\n        for (let index = 0; index < count; index++) {\n            if (offset >= totalIndices) {\n                break;\n            }\n            SubMesh.CreateFromIndices(0, offset, index === count - 1 ? totalIndices - offset : subdivisionSize, this);\n            offset += subdivisionSize;\n        }\n        this.synchronizeInstances();\n    }\n    /**\n     * Copy a FloatArray into a specific associated vertex buffer\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param data defines the data source\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\n     * @param stride defines the data stride size (can be null)\n     * @returns the current mesh\n     */\n    public setVerticesData(kind: string, data: FloatArray, updatable: boolean = false, stride?: number): AbstractMesh {\n        if (!this._geometry) {\n            const vertexData = new VertexData();\n            vertexData.set(data, kind);\n            const scene = this.getScene();\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\n        }\n        else {\n            this._geometry.setVerticesData(kind, data, updatable, stride);\n        }\n        return this;\n    }\n    /**\n     * Delete a vertex buffer associated with this mesh\n     * @param kind defines which buffer to delete (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     */\n    public removeVerticesData(kind: string) {\n        if (!this._geometry) {\n            return;\n        }\n        this._geometry.removeVerticesData(kind);\n    }\n    /**\n     * Flags an associated vertex buffer as updatable\n     * @param kind defines which buffer to use (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\n     */\n    public markVerticesDataAsUpdatable(kind: string, updatable = true) {\n        const vb = this.getVertexBuffer(kind);\n        if (!vb || vb.isUpdatable() === updatable) {\n            return;\n        }\n        this.setVerticesData(kind, <FloatArray>this.getVerticesData(kind), updatable);\n    }\n    /**\n     * Sets the mesh global Vertex Buffer\n     * @param buffer defines the buffer to use\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\n     * @returns the current mesh\n     */\n    public setVerticesBuffer(buffer: VertexBuffer, disposeExistingBuffer = true): Mesh {\n        if (!this._geometry) {\n            this._geometry = Geometry.CreateGeometryForMesh(this);\n        }\n        this._geometry.setVerticesBuffer(buffer, null, disposeExistingBuffer);\n        return this;\n    }\n    /**\n     * Update a specific associated vertex buffer\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param data defines the data source\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\n     * @returns the current mesh\n     */\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): AbstractMesh {\n        if (!this._geometry) {\n            return this;\n        }\n        if (!makeItUnique) {\n            this._geometry.updateVerticesData(kind, data, updateExtends);\n        }\n        else {\n            this.makeGeometryUnique();\n            this.updateVerticesData(kind, data, updateExtends, false);\n        }\n        return this;\n    }\n    /**\n     * This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\n     * @see https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#other-shapes-updatemeshpositions\n     * @param positionFunction is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything\n     * @param computeNormals is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update\n     * @returns the current mesh\n     */\n    public updateMeshPositions(positionFunction: (data: FloatArray) => void, computeNormals: boolean = true): Mesh {\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!positions) {\n            return this;\n        }\n        positionFunction(positions);\n        this.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\n        if (computeNormals) {\n            const indices = this.getIndices();\n            const normals = this.getVerticesData(VertexBuffer.NormalKind);\n            if (!normals) {\n                return this;\n            }\n            VertexData.ComputeNormals(positions, indices, normals);\n            this.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\n        }\n        return this;\n    }\n    /**\n     * Creates a un-shared specific occurence of the geometry for the mesh.\n     * @returns the current mesh\n     */\n    public makeGeometryUnique(): Mesh {\n        if (!this._geometry) {\n            return this;\n        }\n        if (this._geometry.meshes.length === 1) {\n            return this;\n        }\n        const oldGeometry = this._geometry;\n        const geometry = this._geometry.copy(Geometry.RandomId());\n        oldGeometry.releaseForMesh(this, true);\n        geometry.applyToMesh(this);\n        return this;\n    }\n    /**\n     * Set the index buffer of this mesh\n     * @param indices defines the source data\n     * @param totalVertices defines the total number of vertices referenced by this index data (can be null)\n     * @param updatable defines if the updated index buffer must be flagged as updatable (default is false)\n     * @returns the current mesh\n     */\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null, updatable: boolean = false): AbstractMesh {\n        if (!this._geometry) {\n            const vertexData = new VertexData();\n            vertexData.indices = indices;\n            const scene = this.getScene();\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\n        }\n        else {\n            this._geometry.setIndices(indices, totalVertices, updatable);\n        }\n        return this;\n    }\n    /**\n     * Update the current index buffer\n     * @param indices defines the source data\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\n     * @returns the current mesh\n     */\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): AbstractMesh {\n        if (!this._geometry) {\n            return this;\n        }\n        this._geometry.updateIndices(indices, offset, gpuMemoryOnly);\n        return this;\n    }\n    /**\n     * Invert the geometry to move from a right handed system to a left handed one.\n     * @returns the current mesh\n     */\n    public toLeftHanded(): Mesh {\n        if (!this._geometry) {\n            return this;\n        }\n        this._geometry.toLeftHanded();\n        return this;\n    }\n    /**\n     * @internal\n     */\n    public _bind(subMesh: SubMesh, effect: Effect, fillMode: number): Mesh {\n        if (!this._geometry) {\n            return this;\n        }\n        const engine = this.getScene().getEngine();\n        // Morph targets\n        if (this.morphTargetManager && this.morphTargetManager.isUsingTextureForTargets) {\n            this.morphTargetManager._bind(effect);\n        }\n        // Wireframe\n        let indexToBind;\n        if (this._unIndexed) {\n            indexToBind = null;\n        }\n        else {\n            switch (fillMode) {\n                case Material.PointFillMode:\n                    indexToBind = null;\n                    break;\n                case Material.WireFrameFillMode:\n                    indexToBind = subMesh._getLinesIndexBuffer(<IndicesArray>this.getIndices(), engine);\n                    break;\n                default:\n                case Material.TriangleFillMode:\n                    indexToBind = this._geometry.getIndexBuffer();\n                    break;\n            }\n        }\n        // VBOs\n        if (!this._userInstancedBuffersStorage || this.hasThinInstances) {\n            this._geometry._bind(effect, indexToBind);\n        }\n        else {\n            this._geometry._bind(effect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    public _draw(subMesh: SubMesh, fillMode: number, instancesCount?: number): Mesh {\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\n            return this;\n        }\n        if (this._internalMeshDataInfo._onBeforeDrawObservable) {\n            this._internalMeshDataInfo._onBeforeDrawObservable.notifyObservers(this);\n        }\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        if (this._unIndexed || fillMode == Material.PointFillMode) {\n            // or triangles as points\n            engine.drawArraysType(fillMode, subMesh.verticesStart, subMesh.verticesCount, this.forcedInstanceCount || instancesCount);\n        }\n        else if (fillMode == Material.WireFrameFillMode) {\n            // Triangles as wireframe\n            engine.drawElementsType(fillMode, 0, subMesh._linesIndexCount, this.forcedInstanceCount || instancesCount);\n        }\n        else {\n            engine.drawElementsType(fillMode, subMesh.indexStart, subMesh.indexCount, this.forcedInstanceCount || instancesCount);\n        }\n        return this;\n    }\n    /**\n     * Registers for this mesh a javascript function called just before the rendering process\n     * @param func defines the function to call before rendering this mesh\n     * @returns the current mesh\n     */\n    public registerBeforeRender(func: (mesh: AbstractMesh) => void): Mesh {\n        this.onBeforeRenderObservable.add(func);\n        return this;\n    }\n    /**\n     * Disposes a previously registered javascript function called before the rendering\n     * @param func defines the function to remove\n     * @returns the current mesh\n     */\n    public unregisterBeforeRender(func: (mesh: AbstractMesh) => void): Mesh {\n        this.onBeforeRenderObservable.removeCallback(func);\n        return this;\n    }\n    /**\n     * Registers for this mesh a javascript function called just after the rendering is complete\n     * @param func defines the function to call after rendering this mesh\n     * @returns the current mesh\n     */\n    public registerAfterRender(func: (mesh: AbstractMesh) => void): Mesh {\n        this.onAfterRenderObservable.add(func);\n        return this;\n    }\n    /**\n     * Disposes a previously registered javascript function called after the rendering.\n     * @param func defines the function to remove\n     * @returns the current mesh\n     */\n    public unregisterAfterRender(func: (mesh: AbstractMesh) => void): Mesh {\n        this.onAfterRenderObservable.removeCallback(func);\n        return this;\n    }\n    /**\n     * @internal\n     */\n    public _getInstancesRenderList(subMeshId: number, isReplacementMode: boolean = false): _InstancesBatch {\n        if (this._instanceDataStorage.isFrozen) {\n            if (isReplacementMode) {\n                this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.hardwareInstancedRendering[subMeshId] = false;\n                this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.renderSelf[subMeshId] = true;\n                return this._instanceDataStorage.batchCacheReplacementModeInFrozenMode;\n            }\n            if (this._instanceDataStorage.previousBatch) {\n                return this._instanceDataStorage.previousBatch;\n            }\n        }\n        const scene = this.getScene();\n        const isInIntermediateRendering = scene._isInIntermediateRendering();\n        const onlyForInstances = isInIntermediateRendering\n            ? this._internalAbstractMeshDataInfo._onlyForInstancesIntermediate\n            : this._internalAbstractMeshDataInfo._onlyForInstances;\n        const batchCache = this._instanceDataStorage.batchCache;\n        batchCache.mustReturn = false;\n        batchCache.renderSelf[subMeshId] = isReplacementMode || (!onlyForInstances && this.isEnabled() && this.isVisible);\n        batchCache.visibleInstances[subMeshId] = null;\n        if (this._instanceDataStorage.visibleInstances && !isReplacementMode) {\n            const visibleInstances = this._instanceDataStorage.visibleInstances;\n            const currentRenderId = scene.getRenderId();\n            const defaultRenderId = isInIntermediateRendering ? visibleInstances.intermediateDefaultRenderId : visibleInstances.defaultRenderId;\n            batchCache.visibleInstances[subMeshId] = visibleInstances[currentRenderId];\n            if (!batchCache.visibleInstances[subMeshId] && defaultRenderId) {\n                batchCache.visibleInstances[subMeshId] = visibleInstances[defaultRenderId];\n            }\n        }\n        batchCache.hardwareInstancedRendering[subMeshId] =\n            !isReplacementMode &&\n                this._instanceDataStorage.hardwareInstancedRendering &&\n                batchCache.visibleInstances[subMeshId] !== null &&\n                batchCache.visibleInstances[subMeshId] !== undefined;\n        this._instanceDataStorage.previousBatch = batchCache;\n        return batchCache;\n    }\n    /**\n     * @internal\n     */\n    public _renderWithInstances(subMesh: SubMesh, fillMode: number, batch: _InstancesBatch, effect: Effect, engine: Engine): Mesh {\n        const visibleInstances = batch.visibleInstances[subMesh._id];\n        const visibleInstanceCount = visibleInstances ? visibleInstances.length : 0;\n        const instanceStorage = this._instanceDataStorage;\n        const currentInstancesBufferSize = instanceStorage.instancesBufferSize;\n        let instancesBuffer = instanceStorage.instancesBuffer;\n        let instancesPreviousBuffer = instanceStorage.instancesPreviousBuffer;\n        const matricesCount = visibleInstanceCount + 1;\n        const bufferSize = matricesCount * 16 * 4;\n        while (instanceStorage.instancesBufferSize < bufferSize) {\n            instanceStorage.instancesBufferSize *= 2;\n        }\n        if (!instanceStorage.instancesData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\n            instanceStorage.instancesData = new Float32Array(instanceStorage.instancesBufferSize / 4);\n        }\n        if ((this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousData) || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\n            instanceStorage.instancesPreviousData = new Float32Array(instanceStorage.instancesBufferSize / 4);\n        }\n        let offset = 0;\n        let instancesCount = 0;\n        const renderSelf = batch.renderSelf[subMesh._id];\n        const needUpdateBuffer = !instancesBuffer ||\n            currentInstancesBufferSize !== instanceStorage.instancesBufferSize ||\n            (this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousBuffer);\n        if (!this._instanceDataStorage.manualUpdate && (!instanceStorage.isFrozen || needUpdateBuffer)) {\n            const world = this.getWorldMatrix();\n            if (renderSelf) {\n                if (this._scene.needsPreviousWorldMatrices) {\n                    if (!instanceStorage.masterMeshPreviousWorldMatrix) {\n                        instanceStorage.masterMeshPreviousWorldMatrix = world.clone();\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                    }\n                    else {\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyFrom(world);\n                    }\n                }\n                world.copyToArray(instanceStorage.instancesData, offset);\n                offset += 16;\n                instancesCount++;\n            }\n            if (visibleInstances) {\n                if (Mesh.INSTANCEDMESH_SORT_TRANSPARENT && this._scene.activeCamera && subMesh.getMaterial()?.needAlphaBlendingForMesh(subMesh.getRenderingMesh())) {\n                    const cameraPosition = this._scene.activeCamera.globalPosition;\n                    for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\n                        const instanceMesh = visibleInstances[instanceIndex];\n                        instanceMesh._distanceToCamera = Vector3.Distance(instanceMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\n                    }\n                    visibleInstances.sort((m1, m2) => {\n                        return m1._distanceToCamera > m2._distanceToCamera ? -1 : m1._distanceToCamera < m2._distanceToCamera ? 1 : 0;\n                    });\n                }\n                for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\n                    const instance = visibleInstances[instanceIndex];\n                    const matrix = instance.getWorldMatrix();\n                    matrix.copyToArray(instanceStorage.instancesData, offset);\n                    if (this._scene.needsPreviousWorldMatrices) {\n                        if (!instance._previousWorldMatrix) {\n                            instance._previousWorldMatrix = matrix.clone();\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                        }\n                        else {\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                            instance._previousWorldMatrix.copyFrom(matrix);\n                        }\n                    }\n                    offset += 16;\n                    instancesCount++;\n                }\n            }\n        }\n        else {\n            instancesCount = (renderSelf ? 1 : 0) + visibleInstanceCount;\n        }\n        if (needUpdateBuffer) {\n            if (instancesBuffer) {\n                instancesBuffer.dispose();\n            }\n            if (instancesPreviousBuffer) {\n                instancesPreviousBuffer.dispose();\n            }\n            instancesBuffer = new Buffer(engine, instanceStorage.instancesData, true, 16, false, true);\n            instanceStorage.instancesBuffer = instancesBuffer;\n            if (!this._userInstancedBuffersStorage) {\n                this._userInstancedBuffersStorage = {\n                    data: {},\n                    vertexBuffers: {},\n                    strides: {},\n                    sizes: {},\n                    vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined\n                };\n            }\n            this._userInstancedBuffersStorage.vertexBuffers[\"world0\"] = instancesBuffer.createVertexBuffer(\"world0\", 0, 4);\n            this._userInstancedBuffersStorage.vertexBuffers[\"world1\"] = instancesBuffer.createVertexBuffer(\"world1\", 4, 4);\n            this._userInstancedBuffersStorage.vertexBuffers[\"world2\"] = instancesBuffer.createVertexBuffer(\"world2\", 8, 4);\n            this._userInstancedBuffersStorage.vertexBuffers[\"world3\"] = instancesBuffer.createVertexBuffer(\"world3\", 12, 4);\n            if (this._scene.needsPreviousWorldMatrices) {\n                instancesPreviousBuffer = new Buffer(engine, instanceStorage.instancesPreviousData, true, 16, false, true);\n                instanceStorage.instancesPreviousBuffer = instancesPreviousBuffer;\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld0\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld0\", 0, 4);\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld1\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld1\", 4, 4);\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld2\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld2\", 8, 4);\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld3\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld3\", 12, 4);\n            }\n            this._invalidateInstanceVertexArrayObject();\n        }\n        else {\n            if (!this._instanceDataStorage.isFrozen) {\n                instancesBuffer!.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\n                if (this._scene.needsPreviousWorldMatrices && (!this._instanceDataStorage.manualUpdate || this._instanceDataStorage.previousManualUpdate)) {\n                    instancesPreviousBuffer!.updateDirectly(instanceStorage.instancesPreviousData, 0, instancesCount);\n                }\n            }\n        }\n        this._processInstancedBuffers(visibleInstances, renderSelf);\n        // Stats\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\n        // Draw\n        if (engine._currentDrawContext) {\n            engine._currentDrawContext.useInstancing = true;\n        }\n        this._bind(subMesh, effect, fillMode);\n        this._draw(subMesh, fillMode, instancesCount);\n        // Write current matrices as previous matrices in case of manual update\n        // Default behaviour when previous matrices are not specified explicitly\n        // Will break if instances number/order changes\n        if (this._scene.needsPreviousWorldMatrices &&\n            !needUpdateBuffer &&\n            this._instanceDataStorage.manualUpdate &&\n            !this._instanceDataStorage.isFrozen &&\n            !this._instanceDataStorage.previousManualUpdate) {\n            instancesPreviousBuffer!.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\n        }\n        engine.unbindInstanceAttributes();\n        return this;\n    }\n    /**\n     * @internal\n     */\n    public _renderWithThinInstances(subMesh: SubMesh, fillMode: number, effect: Effect, engine: Engine) {\n        // Stats\n        const instancesCount = this._thinInstanceDataStorage?.instancesCount ?? 0;\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\n        // Draw\n        if (engine._currentDrawContext) {\n            engine._currentDrawContext.useInstancing = true;\n        }\n        this._bind(subMesh, effect, fillMode);\n        this._draw(subMesh, fillMode, instancesCount);\n        // Write current matrices as previous matrices\n        // Default behaviour when previous matrices are not specified explicitly\n        // Will break if instances number/order changes\n        if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData && this._thinInstanceDataStorage.matrixData) {\n            if (!this._thinInstanceDataStorage.previousMatrixBuffer) {\n                this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", this._thinInstanceDataStorage.matrixData, false);\n            }\n            else {\n                this._thinInstanceDataStorage.previousMatrixBuffer!.updateDirectly(this._thinInstanceDataStorage.matrixData, 0, instancesCount);\n            }\n        }\n        engine.unbindInstanceAttributes();\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public _processInstancedBuffers(visibleInstances: Nullable<InstancedMesh[]>, renderSelf: boolean) {\n        // Do nothing\n    }\n    /**\n     * @internal\n     */\n    public _processRendering(renderingMesh: AbstractMesh, subMesh: SubMesh, effect: Effect, fillMode: number, batch: _InstancesBatch, hardwareInstancedRendering: boolean, onBeforeDraw: (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void, effectiveMaterial?: Material): Mesh {\n        const scene = this.getScene();\n        const engine = scene.getEngine();\n        if (hardwareInstancedRendering && subMesh.getRenderingMesh().hasThinInstances) {\n            this._renderWithThinInstances(subMesh, fillMode, effect, engine);\n            return this;\n        }\n        if (hardwareInstancedRendering) {\n            this._renderWithInstances(subMesh, fillMode, batch, effect, engine);\n        }\n        else {\n            if (engine._currentDrawContext) {\n                engine._currentDrawContext.useInstancing = false;\n            }\n            let instanceCount = 0;\n            if (batch.renderSelf[subMesh._id]) {\n                // Draw\n                if (onBeforeDraw) {\n                    onBeforeDraw(false, renderingMesh.getWorldMatrix(), effectiveMaterial);\n                }\n                instanceCount++;\n                this._draw(subMesh, fillMode, this._instanceDataStorage.overridenInstanceCount);\n            }\n            const visibleInstancesForSubMesh = batch.visibleInstances[subMesh._id];\n            if (visibleInstancesForSubMesh) {\n                const visibleInstanceCount = visibleInstancesForSubMesh.length;\n                instanceCount += visibleInstanceCount;\n                // Stats\n                for (let instanceIndex = 0; instanceIndex < visibleInstanceCount; instanceIndex++) {\n                    const instance = visibleInstancesForSubMesh[instanceIndex];\n                    // World\n                    const world = instance.getWorldMatrix();\n                    if (onBeforeDraw) {\n                        onBeforeDraw(true, world, effectiveMaterial);\n                    }\n                    // Draw\n                    this._draw(subMesh, fillMode);\n                }\n            }\n            // Stats\n            scene._activeIndices.addCount(subMesh.indexCount * instanceCount, false);\n        }\n        return this;\n    }\n    /**\n     * @internal\n     */\n    public _rebuild(dispose = false): void {\n        if (this._instanceDataStorage.instancesBuffer) {\n            // Dispose instance buffer to be recreated in _renderWithInstances when rendered\n            if (dispose) {\n                this._instanceDataStorage.instancesBuffer.dispose();\n            }\n            this._instanceDataStorage.instancesBuffer = null;\n        }\n        if (this._userInstancedBuffersStorage) {\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\n                const buffer = this._userInstancedBuffersStorage.vertexBuffers[kind];\n                if (buffer) {\n                    // Dispose instance buffer to be recreated in _renderWithInstances when rendered\n                    if (dispose) {\n                        buffer.dispose();\n                    }\n                    this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\n                }\n            }\n            if (this._userInstancedBuffersStorage.vertexArrayObjects) {\n                this._userInstancedBuffersStorage.vertexArrayObjects = {};\n            }\n        }\n        this._internalMeshDataInfo._effectiveMaterial = null;\n        super._rebuild(dispose);\n    }\n    /** @internal */\n    public _freeze() {\n        if (!this.subMeshes) {\n            return;\n        }\n        // Prepare batches\n        for (let index = 0; index < this.subMeshes.length; index++) {\n            this._getInstancesRenderList(index);\n        }\n        this._internalMeshDataInfo._effectiveMaterial = null;\n        this._instanceDataStorage.isFrozen = true;\n    }\n    /** @internal */\n    public _unFreeze() {\n        this._instanceDataStorage.isFrozen = false;\n        this._instanceDataStorage.previousBatch = null;\n    }\n    /**\n     * Triggers the draw call for the mesh. Usually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager\n     * @param subMesh defines the subMesh to render\n     * @param enableAlphaMode defines if alpha mode can be changed\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering\n     * @returns the current mesh\n     */\n    public render(subMesh: SubMesh, enableAlphaMode: boolean, effectiveMeshReplacement?: AbstractMesh): Mesh {\n        const scene = this.getScene();\n        if (this._internalAbstractMeshDataInfo._isActiveIntermediate) {\n            this._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n        }\n        else {\n            this._internalAbstractMeshDataInfo._isActive = false;\n        }\n        if (this._checkOcclusionQuery() && !this._occlusionDataStorage.forceRenderingWhenOccluded) {\n            return this;\n        }\n        // Managing instances\n        const batch = this._getInstancesRenderList(subMesh._id, !!effectiveMeshReplacement);\n        if (batch.mustReturn) {\n            return this;\n        }\n        // Checking geometry state\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\n            return this;\n        }\n        const engine = scene.getEngine();\n        let oldCameraMaxZ = 0;\n        let oldCamera: Nullable<Camera> = null;\n        if (this.ignoreCameraMaxZ && scene.activeCamera && !scene._isInIntermediateRendering()) {\n            oldCameraMaxZ = scene.activeCamera.maxZ;\n            oldCamera = scene.activeCamera;\n            scene.activeCamera.maxZ = 0;\n            scene.updateTransformMatrix(true);\n        }\n        if (this._internalMeshDataInfo._onBeforeRenderObservable) {\n            this._internalMeshDataInfo._onBeforeRenderObservable.notifyObservers(this);\n        }\n        const renderingMesh = subMesh.getRenderingMesh();\n        const hardwareInstancedRendering = batch.hardwareInstancedRendering[subMesh._id] ||\n            renderingMesh.hasThinInstances ||\n            (!!this._userInstancedBuffersStorage && !subMesh.getMesh()._internalAbstractMeshDataInfo._actAsRegularMesh);\n        const instanceDataStorage = this._instanceDataStorage;\n        const material = subMesh.getMaterial();\n        if (!material) {\n            if (oldCamera) {\n                oldCamera.maxZ = oldCameraMaxZ;\n                scene.updateTransformMatrix(true);\n            }\n            return this;\n        }\n        // Material\n        if (!instanceDataStorage.isFrozen || !this._internalMeshDataInfo._effectiveMaterial || this._internalMeshDataInfo._effectiveMaterial !== material) {\n            if (material._storeEffectOnSubMeshes) {\n                if (!material.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\n                    if (oldCamera) {\n                        oldCamera.maxZ = oldCameraMaxZ;\n                        scene.updateTransformMatrix(true);\n                    }\n                    return this;\n                }\n            }\n            else if (!material.isReady(this, hardwareInstancedRendering)) {\n                if (oldCamera) {\n                    oldCamera.maxZ = oldCameraMaxZ;\n                    scene.updateTransformMatrix(true);\n                }\n                return this;\n            }\n            this._internalMeshDataInfo._effectiveMaterial = material;\n        }\n        else if ((material._storeEffectOnSubMeshes && !subMesh.effect?._wasPreviouslyReady) ||\n            (!material._storeEffectOnSubMeshes && !material.getEffect()?._wasPreviouslyReady)) {\n            if (oldCamera) {\n                oldCamera.maxZ = oldCameraMaxZ;\n                scene.updateTransformMatrix(true);\n            }\n            return this;\n        }\n        // Alpha mode\n        if (enableAlphaMode) {\n            engine.setAlphaMode(this._internalMeshDataInfo._effectiveMaterial.alphaMode);\n        }\n        let drawWrapper: Nullable<DrawWrapper>;\n        if (this._internalMeshDataInfo._effectiveMaterial._storeEffectOnSubMeshes) {\n            drawWrapper = subMesh._drawWrapper;\n        }\n        else {\n            drawWrapper = this._internalMeshDataInfo._effectiveMaterial._getDrawWrapper();\n        }\n        const effect = drawWrapper?.effect ?? null;\n        for (const step of scene._beforeRenderingMeshStage) {\n            step.action(this, subMesh, batch, effect);\n        }\n        if (!drawWrapper || !effect) {\n            if (oldCamera) {\n                oldCamera.maxZ = oldCameraMaxZ;\n                scene.updateTransformMatrix(true);\n            }\n            return this;\n        }\n        const effectiveMesh = effectiveMeshReplacement || this;\n        let sideOrientation: Nullable<number>;\n        if (!instanceDataStorage.isFrozen && (this._internalMeshDataInfo._effectiveMaterial.backFaceCulling || this.overrideMaterialSideOrientation !== null)) {\n            const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\n            sideOrientation = this.overrideMaterialSideOrientation;\n            if (sideOrientation == null) {\n                sideOrientation = this._internalMeshDataInfo._effectiveMaterial.sideOrientation;\n            }\n            if (mainDeterminant < 0) {\n                sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n            }\n            instanceDataStorage.sideOrientation = sideOrientation!;\n        }\n        else {\n            sideOrientation = instanceDataStorage.sideOrientation;\n        }\n        const reverse = this._internalMeshDataInfo._effectiveMaterial._preBind(drawWrapper, sideOrientation);\n        if (this._internalMeshDataInfo._effectiveMaterial.forceDepthWrite) {\n            engine.setDepthWrite(true);\n        }\n        // Bind\n        const fillMode = scene.forcePointsCloud\n            ? Material.PointFillMode\n            : scene.forceWireframe\n                ? Material.WireFrameFillMode\n                : this._internalMeshDataInfo._effectiveMaterial.fillMode;\n        if (this._internalMeshDataInfo._onBeforeBindObservable) {\n            this._internalMeshDataInfo._onBeforeBindObservable.notifyObservers(this);\n        }\n        if (!hardwareInstancedRendering) {\n            // Binding will be done later because we need to add more info to the VB\n            this._bind(subMesh, effect, fillMode);\n        }\n        const effectiveMaterial = this._internalMeshDataInfo._effectiveMaterial;\n        const world = effectiveMesh.getWorldMatrix();\n        if (effectiveMaterial._storeEffectOnSubMeshes) {\n            effectiveMaterial.bindForSubMesh(world, this, subMesh);\n        }\n        else {\n            effectiveMaterial.bind(world, this);\n        }\n        if (!effectiveMaterial.backFaceCulling && effectiveMaterial.separateCullingPass) {\n            engine.setState(true, effectiveMaterial.zOffset, false, !reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\n            this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\n            engine.setState(true, effectiveMaterial.zOffset, false, reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\n            if (this._internalMeshDataInfo._onBetweenPassObservable) {\n                this._internalMeshDataInfo._onBetweenPassObservable.notifyObservers(subMesh);\n            }\n        }\n        // Draw\n        this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\n        // Unbind\n        this._internalMeshDataInfo._effectiveMaterial.unbind();\n        for (const step of scene._afterRenderingMeshStage) {\n            step.action(this, subMesh, batch, effect);\n        }\n        if (this._internalMeshDataInfo._onAfterRenderObservable) {\n            this._internalMeshDataInfo._onAfterRenderObservable.notifyObservers(this);\n        }\n        if (oldCamera) {\n            oldCamera.maxZ = oldCameraMaxZ;\n            scene.updateTransformMatrix(true);\n        }\n        if (scene.performancePriority === ScenePerformancePriority.Aggressive && !instanceDataStorage.isFrozen) {\n            this._freeze();\n        }\n        return this;\n    }\n    private _onBeforeDraw: (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void;\n    /**\n     *   Renormalize the mesh and patch it up if there are no weights\n     *   Similar to normalization by adding the weights compute the reciprocal and multiply all elements, this wil ensure that everything adds to 1.\n     *   However in the case of zero weights then we set just a single influence to 1.\n     *   We check in the function for extra's present and if so we use the normalizeSkinWeightsWithExtras rather than the FourWeights version.\n     */\n    public cleanMatrixWeights(): void {\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n            if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\n                this._normalizeSkinWeightsAndExtra();\n            }\n            else {\n                this._normalizeSkinFourWeights();\n            }\n        }\n    }\n    // faster 4 weight version.\n    private _normalizeSkinFourWeights(): void {\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n        const numWeights = matricesWeights.length;\n        for (let a = 0; a < numWeights; a += 4) {\n            // accumulate weights\n            const t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\n            // check for invalid weight and just set it to 1.\n            if (t === 0) {\n                matricesWeights[a] = 1;\n            }\n            else {\n                // renormalize so everything adds to 1 use reciprocal\n                const recip = 1 / t;\n                matricesWeights[a] *= recip;\n                matricesWeights[a + 1] *= recip;\n                matricesWeights[a + 2] *= recip;\n                matricesWeights[a + 3] *= recip;\n            }\n        }\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\n    }\n    // handle special case of extra verts.  (in theory gltf can handle 12 influences)\n    private _normalizeSkinWeightsAndExtra(): void {\n        const matricesWeightsExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n        const numWeights = matricesWeights.length;\n        for (let a = 0; a < numWeights; a += 4) {\n            // accumulate weights\n            let t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\n            t += matricesWeightsExtra[a] + matricesWeightsExtra[a + 1] + matricesWeightsExtra[a + 2] + matricesWeightsExtra[a + 3];\n            // check for invalid weight and just set it to 1.\n            if (t === 0) {\n                matricesWeights[a] = 1;\n            }\n            else {\n                // renormalize so everything adds to 1 use reciprocal\n                const recip = 1 / t;\n                matricesWeights[a] *= recip;\n                matricesWeights[a + 1] *= recip;\n                matricesWeights[a + 2] *= recip;\n                matricesWeights[a + 3] *= recip;\n                // same goes for extras\n                matricesWeightsExtra[a] *= recip;\n                matricesWeightsExtra[a + 1] *= recip;\n                matricesWeightsExtra[a + 2] *= recip;\n                matricesWeightsExtra[a + 3] *= recip;\n            }\n        }\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsExtra);\n    }\n    /**\n     * ValidateSkinning is used to determine that a mesh has valid skinning data along with skin metrics, if missing weights,\n     * or not normalized it is returned as invalid mesh the string can be used for console logs, or on screen messages to let\n     * the user know there was an issue with importing the mesh\n     * @returns a validation object with skinned, valid and report string\n     */\n    public validateSkinning(): {\n        skinned: boolean;\n        valid: boolean;\n        report: string;\n    } {\n        const matricesWeightsExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n        if (matricesWeights === null || this.skeleton == null) {\n            return { skinned: false, valid: true, report: \"not skinned\" };\n        }\n        const numWeights = matricesWeights.length;\n        let numberNotSorted: number = 0;\n        let missingWeights: number = 0;\n        let maxUsedWeights: number = 0;\n        let numberNotNormalized: number = 0;\n        const numInfluences: number = matricesWeightsExtra === null ? 4 : 8;\n        const usedWeightCounts = new Array<number>();\n        for (let a = 0; a <= numInfluences; a++) {\n            usedWeightCounts[a] = 0;\n        }\n        const toleranceEpsilon: number = 0.001;\n        for (let a = 0; a < numWeights; a += 4) {\n            let lastWeight: number = matricesWeights[a];\n            let t = lastWeight;\n            let usedWeights: number = t === 0 ? 0 : 1;\n            for (let b = 1; b < numInfluences; b++) {\n                const d = b < 4 ? matricesWeights[a + b] : matricesWeightsExtra[a + b - 4];\n                if (d > lastWeight) {\n                    numberNotSorted++;\n                }\n                if (d !== 0) {\n                    usedWeights++;\n                }\n                t += d;\n                lastWeight = d;\n            }\n            // count the buffer weights usage\n            usedWeightCounts[usedWeights]++;\n            // max influences\n            if (usedWeights > maxUsedWeights) {\n                maxUsedWeights = usedWeights;\n            }\n            // check for invalid weight and just set it to 1.\n            if (t === 0) {\n                missingWeights++;\n            }\n            else {\n                // renormalize so everything adds to 1 use reciprocal\n                const recip = 1 / t;\n                let tolerance = 0;\n                for (let b = 0; b < numInfluences; b++) {\n                    if (b < 4) {\n                        tolerance += Math.abs(matricesWeights[a + b] - matricesWeights[a + b] * recip);\n                    }\n                    else {\n                        tolerance += Math.abs(matricesWeightsExtra[a + b - 4] - matricesWeightsExtra[a + b - 4] * recip);\n                    }\n                }\n                // arbitrary epsilon value for dictating not normalized\n                if (tolerance > toleranceEpsilon) {\n                    numberNotNormalized++;\n                }\n            }\n        }\n        // validate bone indices are in range of the skeleton\n        const numBones: number = this.skeleton.bones.length;\n        const matricesIndices = <FloatArray>this.getVerticesData(VertexBuffer.MatricesIndicesKind);\n        const matricesIndicesExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\n        let numBadBoneIndices: number = 0;\n        for (let a = 0; a < numWeights; a += 4) {\n            for (let b = 0; b < numInfluences; b++) {\n                const index = b < 4 ? matricesIndices[a + b] : matricesIndicesExtra[a + b - 4];\n                if (index >= numBones || index < 0) {\n                    numBadBoneIndices++;\n                }\n            }\n        }\n        // log mesh stats\n        const output = \"Number of Weights = \" +\n            numWeights / 4 +\n            \"\\nMaximum influences = \" +\n            maxUsedWeights +\n            \"\\nMissing Weights = \" +\n            missingWeights +\n            \"\\nNot Sorted = \" +\n            numberNotSorted +\n            \"\\nNot Normalized = \" +\n            numberNotNormalized +\n            \"\\nWeightCounts = [\" +\n            usedWeightCounts +\n            \"]\" +\n            \"\\nNumber of bones = \" +\n            numBones +\n            \"\\nBad Bone Indices = \" +\n            numBadBoneIndices;\n        return { skinned: true, valid: missingWeights === 0 && numberNotNormalized === 0 && numBadBoneIndices === 0, report: output };\n    }\n    /** @internal */\n    public _checkDelayState(): Mesh {\n        const scene = this.getScene();\n        if (this._geometry) {\n            this._geometry.load(scene);\n        }\n        else if (this.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\n            this.delayLoadState = Constants.DELAYLOADSTATE_LOADING;\n            this._queueLoad(scene);\n        }\n        return this;\n    }\n    private _queueLoad(scene: Scene): Mesh {\n        scene.addPendingData(this);\n        const getBinaryData = this.delayLoadingFile.indexOf(\".babylonbinarymeshdata\") !== -1;\n        Tools.LoadFile(this.delayLoadingFile, (data) => {\n            if (data instanceof ArrayBuffer) {\n                this._delayLoadingFunction(data, this);\n            }\n            else {\n                this._delayLoadingFunction(JSON.parse(data), this);\n            }\n            this.instances.forEach((instance) => {\n                instance.refreshBoundingInfo();\n                instance._syncSubMeshes();\n            });\n            this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\n            scene.removePendingData(this);\n        }, () => { }, scene.offlineProvider, getBinaryData);\n        return this;\n    }\n    /**\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\n     * A mesh is in the frustum if its bounding box intersects the frustum\n     * @param frustumPlanes defines the frustum to test\n     * @returns true if the mesh is in the frustum planes\n     */\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\n            return false;\n        }\n        if (!super.isInFrustum(frustumPlanes)) {\n            return false;\n        }\n        this._checkDelayState();\n        return true;\n    }\n    /**\n     * Sets the mesh material by the material or multiMaterial `id` property\n     * @param id is a string identifying the material or the multiMaterial\n     * @returns the current mesh\n     */\n    public setMaterialById(id: string): Mesh {\n        const materials = this.getScene().materials;\n        let index: number;\n        for (index = materials.length - 1; index > -1; index--) {\n            if (materials[index].id === id) {\n                this.material = materials[index];\n                return this;\n            }\n        }\n        // Multi\n        const multiMaterials = this.getScene().multiMaterials;\n        for (index = multiMaterials.length - 1; index > -1; index--) {\n            if (multiMaterials[index].id === id) {\n                this.material = multiMaterials[index];\n                return this;\n            }\n        }\n        return this;\n    }\n    /**\n     * Returns as a new array populated with the mesh material and/or skeleton, if any.\n     * @returns an array of IAnimatable\n     */\n    public getAnimatables(): IAnimatable[] {\n        const results = new Array<IAnimatable>();\n        if (this.material) {\n            results.push(this.material);\n        }\n        if (this.skeleton) {\n            results.push(this.skeleton);\n        }\n        return results;\n    }\n    /**\n     * Modifies the mesh geometry according to the passed transformation matrix.\n     * This method returns nothing but it really modifies the mesh even if it's originally not set as updatable.\n     * The mesh normals are modified using the same transformation.\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\n     * @param transform defines the transform matrix to use\n     * @see https://doc.babylonjs.com/resources/baking_transformations\n     * @returns the current mesh\n     */\n    public bakeTransformIntoVertices(transform: Matrix): Mesh {\n        // Position\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n            return this;\n        }\n        const submeshes = this.subMeshes.splice(0);\n        this._resetPointsArrayCache();\n        let data = <FloatArray>this.getVerticesData(VertexBuffer.PositionKind);\n        let temp = new Array<number>();\n        let index: number;\n        for (index = 0; index < data.length; index += 3) {\n            Vector3.TransformCoordinates(Vector3.FromArray(data, index), transform).toArray(temp, index);\n        }\n        this.setVerticesData(VertexBuffer.PositionKind, temp, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.PositionKind)).isUpdatable());\n        // Normals\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n            data = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\n            temp = [];\n            for (index = 0; index < data.length; index += 3) {\n                Vector3.TransformNormal(Vector3.FromArray(data, index), transform).normalize().toArray(temp, index);\n            }\n            this.setVerticesData(VertexBuffer.NormalKind, temp, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.NormalKind)).isUpdatable());\n        }\n        // flip faces?\n        if (transform.determinant() < 0) {\n            this.flipFaces();\n        }\n        // Restore submeshes\n        this.releaseSubMeshes();\n        this.subMeshes = submeshes;\n        return this;\n    }\n    /**\n     * Modifies the mesh geometry according to its own current World Matrix.\n     * The mesh World Matrix is then reset.\n     * This method returns nothing but really modifies the mesh even if it's originally not set as updatable.\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\n     * @see https://doc.babylonjs.com/resources/baking_transformations\n     * @param bakeIndependenlyOfChildren indicates whether to preserve all child nodes' World Matrix during baking\n     * @returns the current mesh\n     */\n    public bakeCurrentTransformIntoVertices(bakeIndependenlyOfChildren: boolean = true): Mesh {\n        this.bakeTransformIntoVertices(this.computeWorldMatrix(true));\n        this.resetLocalMatrix(bakeIndependenlyOfChildren);\n        return this;\n    }\n    // Cache\n    /** @internal */\n    public get _positions(): Nullable<Vector3[]> {\n        if (this._internalAbstractMeshDataInfo._positions) {\n            return this._internalAbstractMeshDataInfo._positions;\n        }\n        if (this._geometry) {\n            return this._geometry._positions;\n        }\n        return null;\n    }\n    /** @internal */\n    public _resetPointsArrayCache(): Mesh {\n        if (this._geometry) {\n            this._geometry._resetPointsArrayCache();\n        }\n        return this;\n    }\n    /** @internal */\n    public _generatePointsArray(): boolean {\n        if (this._geometry) {\n            return this._geometry._generatePointsArray();\n        }\n        return false;\n    }\n    /**\n     * Returns a new Mesh object generated from the current mesh properties.\n     * This method must not get confused with createInstance()\n     * @param name is a string, the name given to the new mesh\n     * @param newParent can be any Node object (default `null`)\n     * @param doNotCloneChildren allows/denies the recursive cloning of the original mesh children if any (default `false`)\n     * @param clonePhysicsImpostor allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any (default `true`)\n     * @returns a new mesh\n     */\n    public clone(name: string = \"\", newParent: Nullable<Node> = null, doNotCloneChildren?: boolean, clonePhysicsImpostor: boolean = true): Mesh {\n        return new Mesh(name, this.getScene(), newParent, this, doNotCloneChildren, clonePhysicsImpostor);\n    }\n    /**\n     * Releases resources associated with this mesh.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\n        this.morphTargetManager = null;\n        if (this._geometry) {\n            this._geometry.releaseForMesh(this, true);\n        }\n        const internalDataInfo = this._internalMeshDataInfo;\n        if (internalDataInfo._onBeforeDrawObservable) {\n            internalDataInfo._onBeforeDrawObservable.clear();\n        }\n        if (internalDataInfo._onBeforeBindObservable) {\n            internalDataInfo._onBeforeBindObservable.clear();\n        }\n        if (internalDataInfo._onBeforeRenderObservable) {\n            internalDataInfo._onBeforeRenderObservable.clear();\n        }\n        if (internalDataInfo._onAfterRenderObservable) {\n            internalDataInfo._onAfterRenderObservable.clear();\n        }\n        if (internalDataInfo._onBetweenPassObservable) {\n            internalDataInfo._onBetweenPassObservable.clear();\n        }\n        // Sources\n        if (this._scene.useClonedMeshMap) {\n            if (internalDataInfo.meshMap) {\n                for (const uniqueId in internalDataInfo.meshMap) {\n                    const mesh = internalDataInfo.meshMap[uniqueId];\n                    if (mesh) {\n                        mesh._internalMeshDataInfo._source = null;\n                        internalDataInfo.meshMap[uniqueId] = undefined;\n                    }\n                }\n            }\n            if (internalDataInfo._source && internalDataInfo._source._internalMeshDataInfo.meshMap) {\n                internalDataInfo._source._internalMeshDataInfo.meshMap[this.uniqueId] = undefined;\n            }\n        }\n        else {\n            const meshes = this.getScene().meshes;\n            for (const abstractMesh of meshes) {\n                const mesh = abstractMesh as Mesh;\n                if (mesh._internalMeshDataInfo && mesh._internalMeshDataInfo._source && mesh._internalMeshDataInfo._source === this) {\n                    mesh._internalMeshDataInfo._source = null;\n                }\n            }\n        }\n        internalDataInfo._source = null;\n        // Instances\n        this._disposeInstanceSpecificData();\n        // Thin instances\n        this._disposeThinInstanceSpecificData();\n        if (this._internalMeshDataInfo._checkReadinessObserver) {\n            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\n        }\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\n    }\n    /** @internal */\n    public _disposeInstanceSpecificData() {\n        // Do nothing\n    }\n    /** @internal */\n    public _disposeThinInstanceSpecificData() {\n        // Do nothing\n    }\n    /** @internal */\n    public _invalidateInstanceVertexArrayObject() {\n        // Do nothing\n    }\n    /**\n     * Modifies the mesh geometry according to a displacement map.\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\n     * @param url is a string, the URL from the image file is to be downloaded.\n     * @param minHeight is the lower limit of the displacement.\n     * @param maxHeight is the upper limit of the displacement.\n     * @param onSuccess is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing.\n     * @param uvOffset is an optional vector2 used to offset UV.\n     * @param uvScale is an optional vector2 used to scale UV.\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\n     * @returns the Mesh.\n     */\n    public applyDisplacementMap(url: string, minHeight: number, maxHeight: number, onSuccess?: (mesh: Mesh) => void, uvOffset?: Vector2, uvScale?: Vector2, forceUpdate = false): Mesh {\n        const scene = this.getScene();\n        const onload = (img: HTMLImageElement | ImageBitmap) => {\n            // Getting height map data\n            const heightMapWidth = img.width;\n            const heightMapHeight = img.height;\n            const canvas = this.getEngine().createCanvas(heightMapWidth, heightMapHeight);\n            const context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\n            context.drawImage(img, 0, 0);\n            // Create VertexData from map data\n            //Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\n            const buffer = <Uint8Array>(<any>context.getImageData(0, 0, heightMapWidth, heightMapHeight).data);\n            this.applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale, forceUpdate);\n            //execute success callback, if set\n            if (onSuccess) {\n                onSuccess(this);\n            }\n        };\n        Tools.LoadImage(url, onload, () => { }, scene.offlineProvider);\n        return this;\n    }\n    /**\n     * Modifies the mesh geometry according to a displacementMap buffer.\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\n     * @param buffer is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\n     * @param heightMapWidth is the width of the buffer image.\n     * @param heightMapHeight is the height of the buffer image.\n     * @param minHeight is the lower limit of the displacement.\n     * @param maxHeight is the upper limit of the displacement.\n     * @param uvOffset is an optional vector2 used to offset UV.\n     * @param uvScale is an optional vector2 used to scale UV.\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\n     * @returns the Mesh.\n     */\n    public applyDisplacementMapFromBuffer(buffer: Uint8Array, heightMapWidth: number, heightMapHeight: number, minHeight: number, maxHeight: number, uvOffset?: Vector2, uvScale?: Vector2, forceUpdate = false): Mesh {\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind) || !this.isVerticesDataPresent(VertexBuffer.NormalKind) || !this.isVerticesDataPresent(VertexBuffer.UVKind)) {\n            Logger.Warn(\"Cannot call applyDisplacementMap: Given mesh is not complete. Position, Normal or UV are missing\");\n            return this;\n        }\n        const positions = <FloatArray>this.getVerticesData(VertexBuffer.PositionKind, true, true);\n        const normals = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\n        const uvs = <number[]>this.getVerticesData(VertexBuffer.UVKind);\n        let position = Vector3.Zero();\n        const normal = Vector3.Zero();\n        const uv = Vector2.Zero();\n        uvOffset = uvOffset || Vector2.Zero();\n        uvScale = uvScale || new Vector2(1, 1);\n        for (let index = 0; index < positions.length; index += 3) {\n            Vector3.FromArrayToRef(positions, index, position);\n            Vector3.FromArrayToRef(normals, index, normal);\n            Vector2.FromArrayToRef(uvs, (index / 3) * 2, uv);\n            // Compute height\n            const u = (Math.abs(uv.x * uvScale.x + (uvOffset.x % 1)) * (heightMapWidth - 1)) % heightMapWidth | 0;\n            const v = (Math.abs(uv.y * uvScale.y + (uvOffset.y % 1)) * (heightMapHeight - 1)) % heightMapHeight | 0;\n            const pos = (u + v * heightMapWidth) * 4;\n            const r = buffer[pos] / 255.0;\n            const g = buffer[pos + 1] / 255.0;\n            const b = buffer[pos + 2] / 255.0;\n            const gradient = r * 0.3 + g * 0.59 + b * 0.11;\n            normal.normalize();\n            normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);\n            position = position.add(normal);\n            position.toArray(positions, index);\n        }\n        VertexData.ComputeNormals(positions, this.getIndices(), normals);\n        if (forceUpdate) {\n            this.setVerticesData(VertexBuffer.PositionKind, positions);\n            this.setVerticesData(VertexBuffer.NormalKind, normals);\n            this.setVerticesData(VertexBuffer.UVKind, uvs);\n        }\n        else {\n            this.updateVerticesData(VertexBuffer.PositionKind, positions);\n            this.updateVerticesData(VertexBuffer.NormalKind, normals);\n        }\n        return this;\n    }\n    /**\n     * Modify the mesh to get a flat shading rendering.\n     * This means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\n     * Warning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated.\n     * @returns current mesh\n     */\n    public convertToFlatShadedMesh(): Mesh {\n        const kinds = this.getVerticesDataKinds();\n        const vbs: {\n            [key: string]: VertexBuffer;\n        } = {};\n        const data: {\n            [key: string]: FloatArray;\n        } = {};\n        const newdata: {\n            [key: string]: Array<number>;\n        } = {};\n        let updatableNormals = false;\n        let kindIndex: number;\n        let kind: string;\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n            kind = kinds[kindIndex];\n            const vertexBuffer = <VertexBuffer>this.getVertexBuffer(kind);\n            // Check data consistency\n            const vertexData = vertexBuffer.getData();\n            if (vertexData instanceof Array || vertexData instanceof Float32Array) {\n                if (vertexData.length === 0) {\n                    continue;\n                }\n            }\n            if (kind === VertexBuffer.NormalKind) {\n                updatableNormals = vertexBuffer.isUpdatable();\n                kinds.splice(kindIndex, 1);\n                kindIndex--;\n                continue;\n            }\n            vbs[kind] = vertexBuffer;\n            data[kind] = this.getVerticesData(kind)!;\n            newdata[kind] = [];\n        }\n        // Save previous submeshes\n        const previousSubmeshes = this.subMeshes.slice(0);\n        const indices = <IndicesArray>this.getIndices();\n        const totalIndices = this.getTotalIndices();\n        // Generating unique vertices per face\n        let index: number;\n        for (index = 0; index < totalIndices; index++) {\n            const vertexIndex = indices[index];\n            for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n                kind = kinds[kindIndex];\n                if (!vbs[kind]) {\n                    continue;\n                }\n                const stride = vbs[kind].getStrideSize();\n                for (let offset = 0; offset < stride; offset++) {\n                    newdata[kind].push(data[kind][vertexIndex * stride + offset]);\n                }\n            }\n        }\n        // Updating faces & normal\n        const normals = [];\n        const positions = newdata[VertexBuffer.PositionKind];\n        const useRightHandedSystem = this.getScene().useRightHandedSystem;\n        let flipNormalGeneration: boolean;\n        if (useRightHandedSystem) {\n            flipNormalGeneration = this.overrideMaterialSideOrientation === Constants.MATERIAL_CounterClockWiseSideOrientation;\n        }\n        else {\n            flipNormalGeneration = this.overrideMaterialSideOrientation === Constants.MATERIAL_ClockWiseSideOrientation;\n        }\n        for (index = 0; index < totalIndices; index += 3) {\n            indices[index] = index;\n            indices[index + 1] = index + 1;\n            indices[index + 2] = index + 2;\n            const p1 = Vector3.FromArray(positions, index * 3);\n            const p2 = Vector3.FromArray(positions, (index + 1) * 3);\n            const p3 = Vector3.FromArray(positions, (index + 2) * 3);\n            const p1p2 = p1.subtract(p2);\n            const p3p2 = p3.subtract(p2);\n            const normal = Vector3.Normalize(Vector3.Cross(p1p2, p3p2));\n            if (flipNormalGeneration) {\n                normal.scaleInPlace(-1);\n            }\n            // Store same normals for every vertex\n            for (let localIndex = 0; localIndex < 3; localIndex++) {\n                normals.push(normal.x);\n                normals.push(normal.y);\n                normals.push(normal.z);\n            }\n        }\n        this.setIndices(indices);\n        this.setVerticesData(VertexBuffer.NormalKind, normals, updatableNormals);\n        // Updating vertex buffers\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n            kind = kinds[kindIndex];\n            if (!newdata[kind]) {\n                continue;\n            }\n            this.setVerticesData(kind, newdata[kind], vbs[kind].isUpdatable());\n        }\n        // Updating submeshes\n        this.releaseSubMeshes();\n        for (let submeshIndex = 0; submeshIndex < previousSubmeshes.length; submeshIndex++) {\n            const previousOne = previousSubmeshes[submeshIndex];\n            SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\n        }\n        this.synchronizeInstances();\n        return this;\n    }\n    /**\n     * This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\n     * In other words, more vertices, no more indices and a single bigger VBO.\n     * The mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated.\n     * @returns current mesh\n     */\n    public convertToUnIndexedMesh(): Mesh {\n        const kinds = this.getVerticesDataKinds();\n        const vbs: {\n            [key: string]: VertexBuffer;\n        } = {};\n        const data: {\n            [key: string]: FloatArray;\n        } = {};\n        const newdata: {\n            [key: string]: Array<number>;\n        } = {};\n        let kindIndex: number;\n        let kind: string;\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n            kind = kinds[kindIndex];\n            const vertexBuffer = <VertexBuffer>this.getVertexBuffer(kind);\n            vbs[kind] = vertexBuffer;\n            data[kind] = <FloatArray>vbs[kind].getData();\n            newdata[kind] = [];\n        }\n        // Save previous submeshes\n        const previousSubmeshes = this.subMeshes.slice(0);\n        const indices = <IndicesArray>this.getIndices();\n        const totalIndices = this.getTotalIndices();\n        // Generating unique vertices per face\n        let index: number;\n        for (index = 0; index < totalIndices; index++) {\n            const vertexIndex = indices[index];\n            for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n                kind = kinds[kindIndex];\n                const stride = vbs[kind].getStrideSize();\n                for (let offset = 0; offset < stride; offset++) {\n                    newdata[kind].push(data[kind][vertexIndex * stride + offset]);\n                }\n            }\n        }\n        // Updating indices\n        for (index = 0; index < totalIndices; index += 3) {\n            indices[index] = index;\n            indices[index + 1] = index + 1;\n            indices[index + 2] = index + 2;\n        }\n        this.setIndices(indices);\n        // Updating vertex buffers\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n            kind = kinds[kindIndex];\n            this.setVerticesData(kind, newdata[kind], vbs[kind].isUpdatable(), vbs[kind].getStrideSize());\n        }\n        // Updating submeshes\n        this.releaseSubMeshes();\n        for (let submeshIndex = 0; submeshIndex < previousSubmeshes.length; submeshIndex++) {\n            const previousOne = previousSubmeshes[submeshIndex];\n            SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\n        }\n        this._unIndexed = true;\n        this.synchronizeInstances();\n        return this;\n    }\n    /**\n     * Inverses facet orientations.\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     * @param flipNormals will also inverts the normals\n     * @returns current mesh\n     */\n    public flipFaces(flipNormals: boolean = false): Mesh {\n        const vertex_data = VertexData.ExtractFromMesh(this);\n        let i: number;\n        if (flipNormals && this.isVerticesDataPresent(VertexBuffer.NormalKind) && vertex_data.normals) {\n            for (i = 0; i < vertex_data.normals.length; i++) {\n                vertex_data.normals[i] *= -1;\n            }\n        }\n        if (vertex_data.indices) {\n            let temp;\n            for (i = 0; i < vertex_data.indices.length; i += 3) {\n                // reassign indices\n                temp = vertex_data.indices[i + 1];\n                vertex_data.indices[i + 1] = vertex_data.indices[i + 2];\n                vertex_data.indices[i + 2] = temp;\n            }\n        }\n        vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n        return this;\n    }\n    /**\n     * Increase the number of facets and hence vertices in a mesh\n     * Vertex normals are interpolated from existing vertex normals\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     * @param numberPerEdge the number of new vertices to add to each edge of a facet, optional default 1\n     */\n    public increaseVertices(numberPerEdge: number = 1): void {\n        const vertex_data = VertexData.ExtractFromMesh(this);\n        const currentIndices = vertex_data.indices && !Array.isArray(vertex_data.indices) && Array.from ? Array.from(vertex_data.indices) : vertex_data.indices;\n        const positions = vertex_data.positions && !Array.isArray(vertex_data.positions) && Array.from ? Array.from(vertex_data.positions) : vertex_data.positions;\n        const uvs = vertex_data.uvs && !Array.isArray(vertex_data.uvs) && Array.from ? Array.from(vertex_data.uvs) : vertex_data.uvs;\n        const normals = vertex_data.normals && !Array.isArray(vertex_data.normals) && Array.from ? Array.from(vertex_data.normals) : vertex_data.normals;\n        if (!currentIndices || !positions) {\n            Logger.Warn(\"Couldn't increase number of vertices : VertexData must contain at least indices and positions\");\n        }\n        else {\n            vertex_data.indices = currentIndices;\n            vertex_data.positions = positions;\n            if (uvs) {\n                vertex_data.uvs = uvs;\n            }\n            if (normals) {\n                vertex_data.normals = normals;\n            }\n            const segments: number = numberPerEdge + 1; //segments per current facet edge, become sides of new facets\n            const tempIndices: Array<Array<number>> = new Array();\n            for (let i = 0; i < segments + 1; i++) {\n                tempIndices[i] = new Array();\n            }\n            let a: number; //vertex index of one end of a side\n            let b: number; //vertex index of other end of the side\n            const deltaPosition: Vector3 = new Vector3(0, 0, 0);\n            const deltaNormal: Vector3 = new Vector3(0, 0, 0);\n            const deltaUV: Vector2 = new Vector2(0, 0);\n            const indices: number[] = new Array();\n            const vertexIndex: number[] = new Array();\n            const side: Array<Array<Array<number>>> = new Array();\n            let len: number;\n            let positionPtr: number = positions.length;\n            let uvPtr: number;\n            if (uvs) {\n                uvPtr = uvs.length;\n            }\n            let normalsPtr: number;\n            if (normals) {\n                normalsPtr = normals.length;\n            }\n            for (let i = 0; i < currentIndices.length; i += 3) {\n                vertexIndex[0] = currentIndices[i];\n                vertexIndex[1] = currentIndices[i + 1];\n                vertexIndex[2] = currentIndices[i + 2];\n                for (let j = 0; j < 3; j++) {\n                    a = vertexIndex[j];\n                    b = vertexIndex[(j + 1) % 3];\n                    if (side[a] === undefined && side[b] === undefined) {\n                        side[a] = new Array();\n                        side[b] = new Array();\n                    }\n                    else {\n                        if (side[a] === undefined) {\n                            side[a] = new Array();\n                        }\n                        if (side[b] === undefined) {\n                            side[b] = new Array();\n                        }\n                    }\n                    if (side[a][b] === undefined && side[b][a] === undefined) {\n                        side[a][b] = [];\n                        deltaPosition.x = (positions[3 * b] - positions[3 * a]) / segments;\n                        deltaPosition.y = (positions[3 * b + 1] - positions[3 * a + 1]) / segments;\n                        deltaPosition.z = (positions[3 * b + 2] - positions[3 * a + 2]) / segments;\n                        if (normals) {\n                            deltaNormal.x = (normals[3 * b] - normals[3 * a]) / segments;\n                            deltaNormal.y = (normals[3 * b + 1] - normals[3 * a + 1]) / segments;\n                            deltaNormal.z = (normals[3 * b + 2] - normals[3 * a + 2]) / segments;\n                        }\n                        if (uvs) {\n                            deltaUV.x = (uvs[2 * b] - uvs[2 * a]) / segments;\n                            deltaUV.y = (uvs[2 * b + 1] - uvs[2 * a + 1]) / segments;\n                        }\n                        side[a][b].push(a);\n                        for (let k = 1; k < segments; k++) {\n                            side[a][b].push(positions.length / 3);\n                            positions[positionPtr++] = positions[3 * a] + k * deltaPosition.x;\n                            positions[positionPtr++] = positions[3 * a + 1] + k * deltaPosition.y;\n                            positions[positionPtr++] = positions[3 * a + 2] + k * deltaPosition.z;\n                            if (normals) {\n                                normals[normalsPtr!++] = normals[3 * a] + k * deltaNormal.x;\n                                normals[normalsPtr!++] = normals[3 * a + 1] + k * deltaNormal.y;\n                                normals[normalsPtr!++] = normals[3 * a + 2] + k * deltaNormal.z;\n                            }\n                            if (uvs) {\n                                uvs[uvPtr!++] = uvs[2 * a] + k * deltaUV.x;\n                                uvs[uvPtr!++] = uvs[2 * a + 1] + k * deltaUV.y;\n                            }\n                        }\n                        side[a][b].push(b);\n                        side[b][a] = new Array();\n                        len = side[a][b].length;\n                        for (let idx = 0; idx < len; idx++) {\n                            side[b][a][idx] = side[a][b][len - 1 - idx];\n                        }\n                    }\n                }\n                //Calculate positions, normals and uvs of new internal vertices\n                tempIndices[0][0] = currentIndices[i];\n                tempIndices[1][0] = side[currentIndices[i]][currentIndices[i + 1]][1];\n                tempIndices[1][1] = side[currentIndices[i]][currentIndices[i + 2]][1];\n                for (let k = 2; k < segments; k++) {\n                    tempIndices[k][0] = side[currentIndices[i]][currentIndices[i + 1]][k];\n                    tempIndices[k][k] = side[currentIndices[i]][currentIndices[i + 2]][k];\n                    deltaPosition.x = (positions[3 * tempIndices[k][k]] - positions[3 * tempIndices[k][0]]) / k;\n                    deltaPosition.y = (positions[3 * tempIndices[k][k] + 1] - positions[3 * tempIndices[k][0] + 1]) / k;\n                    deltaPosition.z = (positions[3 * tempIndices[k][k] + 2] - positions[3 * tempIndices[k][0] + 2]) / k;\n                    if (normals) {\n                        deltaNormal.x = (normals[3 * tempIndices[k][k]] - normals[3 * tempIndices[k][0]]) / k;\n                        deltaNormal.y = (normals[3 * tempIndices[k][k] + 1] - normals[3 * tempIndices[k][0] + 1]) / k;\n                        deltaNormal.z = (normals[3 * tempIndices[k][k] + 2] - normals[3 * tempIndices[k][0] + 2]) / k;\n                    }\n                    if (uvs) {\n                        deltaUV.x = (uvs[2 * tempIndices[k][k]] - uvs[2 * tempIndices[k][0]]) / k;\n                        deltaUV.y = (uvs[2 * tempIndices[k][k] + 1] - uvs[2 * tempIndices[k][0] + 1]) / k;\n                    }\n                    for (let j = 1; j < k; j++) {\n                        tempIndices[k][j] = positions.length / 3;\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0]] + j * deltaPosition.x;\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 1] + j * deltaPosition.y;\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 2] + j * deltaPosition.z;\n                        if (normals) {\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0]] + j * deltaNormal.x;\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0] + 1] + j * deltaNormal.y;\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0] + 2] + j * deltaNormal.z;\n                        }\n                        if (uvs) {\n                            uvs[uvPtr!++] = uvs[2 * tempIndices[k][0]] + j * deltaUV.x;\n                            uvs[uvPtr!++] = uvs[2 * tempIndices[k][0] + 1] + j * deltaUV.y;\n                        }\n                    }\n                }\n                tempIndices[segments] = side[currentIndices[i + 1]][currentIndices[i + 2]];\n                // reform indices\n                indices.push(tempIndices[0][0], tempIndices[1][0], tempIndices[1][1]);\n                for (let k = 1; k < segments; k++) {\n                    let j: number;\n                    for (j = 0; j < k; j++) {\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j + 1], tempIndices[k][j + 1]);\n                    }\n                    indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\n                }\n            }\n            vertex_data.indices = indices;\n            vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n        }\n    }\n    /**\n     * Force adjacent facets to share vertices and remove any facets that have all vertices in a line\n     * This will undo any application of covertToFlatShadedMesh\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     */\n    public forceSharedVertices(): void {\n        const vertex_data = VertexData.ExtractFromMesh(this);\n        const currentUVs = vertex_data.uvs;\n        const currentIndices = vertex_data.indices;\n        const currentPositions = vertex_data.positions;\n        const currentColors = vertex_data.colors;\n        const currentMatrixIndices = vertex_data.matricesIndices;\n        const currentMatrixWeights = vertex_data.matricesWeights;\n        const currentMatrixIndicesExtra = vertex_data.matricesIndicesExtra;\n        const currentMatrixWeightsExtra = vertex_data.matricesWeightsExtra;\n        if (currentIndices === void 0 || currentPositions === void 0 || currentIndices === null || currentPositions === null) {\n            Logger.Warn(\"VertexData contains empty entries\");\n        }\n        else {\n            const positions: Array<number> = new Array();\n            const indices: Array<number> = new Array();\n            const uvs: Array<number> = new Array();\n            const colors: Array<number> = new Array();\n            const matrixIndices: Array<number> = new Array();\n            const matrixWeights: Array<number> = new Array();\n            const matrixIndicesExtra: Array<number> = new Array();\n            const matrixWeightsExtra: Array<number> = new Array();\n            let pstring: Array<string> = new Array(); //lists facet vertex positions (a,b,c) as string \"a|b|c\"\n            let indexPtr: number = 0; // pointer to next available index value\n            const uniquePositions: {\n                [key: string]: number;\n            } = {}; // unique vertex positions\n            let ptr: number; // pointer to element in uniquePositions\n            let facet: Array<number>;\n            for (let i = 0; i < currentIndices.length; i += 3) {\n                facet = [currentIndices[i], currentIndices[i + 1], currentIndices[i + 2]]; //facet vertex indices\n                pstring = new Array();\n                for (let j = 0; j < 3; j++) {\n                    pstring[j] = \"\";\n                    for (let k = 0; k < 3; k++) {\n                        //small values make 0\n                        if (Math.abs(currentPositions[3 * facet[j] + k]) < 0.00000001) {\n                            currentPositions[3 * facet[j] + k] = 0;\n                        }\n                        pstring[j] += currentPositions[3 * facet[j] + k] + \"|\";\n                    }\n                }\n                //check facet vertices to see that none are repeated\n                // do not process any facet that has a repeated vertex, ie is a line\n                if (!(pstring[0] == pstring[1] || pstring[0] == pstring[2] || pstring[1] == pstring[2])) {\n                    //for each facet position check if already listed in uniquePositions\n                    // if not listed add to uniquePositions and set index pointer\n                    // if listed use its index in uniquePositions and new index pointer\n                    for (let j = 0; j < 3; j++) {\n                        ptr = uniquePositions[pstring[j]];\n                        if (ptr === undefined) {\n                            uniquePositions[pstring[j]] = indexPtr;\n                            ptr = indexPtr++;\n                            //not listed so add individual x, y, z coordinates to positions\n                            for (let k = 0; k < 3; k++) {\n                                positions.push(currentPositions[3 * facet[j] + k]);\n                            }\n                            if (currentColors !== null && currentColors !== void 0) {\n                                for (let k = 0; k < 4; k++) {\n                                    colors.push(currentColors[4 * facet[j] + k]);\n                                }\n                            }\n                            if (currentUVs !== null && currentUVs !== void 0) {\n                                for (let k = 0; k < 2; k++) {\n                                    uvs.push(currentUVs[2 * facet[j] + k]);\n                                }\n                            }\n                            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\n                                for (let k = 0; k < 4; k++) {\n                                    matrixIndices.push(currentMatrixIndices[4 * facet[j] + k]);\n                                }\n                            }\n                            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n                                for (let k = 0; k < 4; k++) {\n                                    matrixWeights.push(currentMatrixWeights[4 * facet[j] + k]);\n                                }\n                            }\n                            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\n                                for (let k = 0; k < 4; k++) {\n                                    matrixIndicesExtra.push(currentMatrixIndicesExtra[4 * facet[j] + k]);\n                                }\n                            }\n                            if (currentMatrixWeightsExtra !== null && currentMatrixWeightsExtra !== void 0) {\n                                for (let k = 0; k < 4; k++) {\n                                    matrixWeightsExtra.push(currentMatrixWeightsExtra[4 * facet[j] + k]);\n                                }\n                            }\n                        }\n                        // add new index pointer to indices array\n                        indices.push(ptr);\n                    }\n                }\n            }\n            const normals: Array<number> = new Array();\n            VertexData.ComputeNormals(positions, indices, normals);\n            //create new vertex data object and update\n            vertex_data.positions = positions;\n            vertex_data.indices = indices;\n            vertex_data.normals = normals;\n            if (currentUVs !== null && currentUVs !== void 0) {\n                vertex_data.uvs = uvs;\n            }\n            if (currentColors !== null && currentColors !== void 0) {\n                vertex_data.colors = colors;\n            }\n            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\n                vertex_data.matricesIndices = matrixIndices;\n            }\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n                vertex_data.matricesWeights = matrixWeights;\n            }\n            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\n                vertex_data.matricesIndicesExtra = matrixIndicesExtra;\n            }\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n                vertex_data.matricesWeightsExtra = matrixWeightsExtra;\n            }\n            vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n        }\n    }\n    // Instances\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/naming-convention\n    public static _instancedMeshFactory(name: string, mesh: Mesh): InstancedMesh {\n        throw _WarnImport(\"InstancedMesh\");\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public static _PhysicsImpostorParser(scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: any): PhysicsImpostor {\n        throw _WarnImport(\"PhysicsImpostor\");\n    }\n    /**\n     * Creates a new InstancedMesh object from the mesh model.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_instances\n     * @param name defines the name of the new instance\n     * @returns a new InstancedMesh\n     */\n    public createInstance(name: string): InstancedMesh {\n        return Mesh._instancedMeshFactory(name, this);\n    }\n    /**\n     * Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\n     * After this call, all the mesh instances have the same submeshes than the current mesh.\n     * @returns the current mesh\n     */\n    public synchronizeInstances(): Mesh {\n        for (let instanceIndex = 0; instanceIndex < this.instances.length; instanceIndex++) {\n            const instance = this.instances[instanceIndex];\n            instance._syncSubMeshes();\n        }\n        return this;\n    }\n    /**\n     * Optimization of the mesh's indices, in case a mesh has duplicated vertices.\n     * The function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\n     * This should be used together with the simplification to avoid disappearing triangles.\n     * @param successCallback an optional success callback to be called after the optimization finished.\n     * @returns the current mesh\n     */\n    public optimizeIndices(successCallback?: (mesh?: Mesh) => void): Mesh {\n        const indices = <IndicesArray>this.getIndices();\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!positions || !indices) {\n            return this;\n        }\n        const vectorPositions = new Array<Vector3>();\n        for (let pos = 0; pos < positions.length; pos = pos + 3) {\n            vectorPositions.push(Vector3.FromArray(positions, pos));\n        }\n        const dupes = new Array<number>();\n        AsyncLoop.SyncAsyncForLoop(vectorPositions.length, 40, (iteration) => {\n            const realPos = vectorPositions.length - 1 - iteration;\n            const testedPosition = vectorPositions[realPos];\n            for (let j = 0; j < realPos; ++j) {\n                const againstPosition = vectorPositions[j];\n                if (testedPosition.equals(againstPosition)) {\n                    dupes[realPos] = j;\n                    break;\n                }\n            }\n        }, () => {\n            for (let i = 0; i < indices.length; ++i) {\n                indices[i] = dupes[indices[i]] || indices[i];\n            }\n            //indices are now reordered\n            const originalSubMeshes = this.subMeshes.slice(0);\n            this.setIndices(indices);\n            this.subMeshes = originalSubMeshes;\n            if (successCallback) {\n                successCallback(this);\n            }\n        });\n        return this;\n    }\n    /**\n     * Serialize current mesh\n     * @param serializationObject defines the object which will receive the serialization data\n     */\n    public serialize(serializationObject: any = {}): any {\n        serializationObject.name = this.name;\n        serializationObject.id = this.id;\n        serializationObject.uniqueId = this.uniqueId;\n        serializationObject.type = this.getClassName();\n        if (Tags && Tags.HasTags(this)) {\n            serializationObject.tags = Tags.GetTags(this);\n        }\n        serializationObject.position = this.position.asArray();\n        if (this.rotationQuaternion) {\n            serializationObject.rotationQuaternion = this.rotationQuaternion.asArray();\n        }\n        else if (this.rotation) {\n            serializationObject.rotation = this.rotation.asArray();\n        }\n        serializationObject.scaling = this.scaling.asArray();\n        if (this._postMultiplyPivotMatrix) {\n            serializationObject.pivotMatrix = this.getPivotMatrix().asArray();\n        }\n        else {\n            serializationObject.localMatrix = this.getPivotMatrix().asArray();\n        }\n        serializationObject.isEnabled = this.isEnabled(false);\n        serializationObject.isVisible = this.isVisible;\n        serializationObject.infiniteDistance = this.infiniteDistance;\n        serializationObject.pickable = this.isPickable;\n        serializationObject.receiveShadows = this.receiveShadows;\n        serializationObject.billboardMode = this.billboardMode;\n        serializationObject.visibility = this.visibility;\n        serializationObject.checkCollisions = this.checkCollisions;\n        serializationObject.isBlocker = this.isBlocker;\n        serializationObject.overrideMaterialSideOrientation = this.overrideMaterialSideOrientation;\n        // Parent\n        if (this.parent) {\n            this.parent._serializeAsParent(serializationObject);\n        }\n        // Geometry\n        serializationObject.isUnIndexed = this.isUnIndexed;\n        const geometry = this._geometry;\n        if (geometry && this.subMeshes) {\n            serializationObject.geometryUniqueId = geometry.uniqueId;\n            serializationObject.geometryId = geometry.id;\n            // SubMeshes\n            serializationObject.subMeshes = [];\n            for (let subIndex = 0; subIndex < this.subMeshes.length; subIndex++) {\n                const subMesh = this.subMeshes[subIndex];\n                serializationObject.subMeshes.push({\n                    materialIndex: subMesh.materialIndex,\n                    verticesStart: subMesh.verticesStart,\n                    verticesCount: subMesh.verticesCount,\n                    indexStart: subMesh.indexStart,\n                    indexCount: subMesh.indexCount\n                });\n            }\n        }\n        // Material\n        if (this.material) {\n            if (!this.material.doNotSerialize) {\n                serializationObject.materialUniqueId = this.material.uniqueId;\n                serializationObject.materialId = this.material.id; // back compat\n            }\n        }\n        else {\n            this.material = null;\n            serializationObject.materialUniqueId = this._scene.defaultMaterial.uniqueId;\n            serializationObject.materialId = this._scene.defaultMaterial.id; // back compat\n        }\n        // Morph targets\n        if (this.morphTargetManager) {\n            serializationObject.morphTargetManagerId = this.morphTargetManager.uniqueId;\n        }\n        // Skeleton\n        if (this.skeleton) {\n            serializationObject.skeletonId = this.skeleton.id;\n            serializationObject.numBoneInfluencers = this.numBoneInfluencers;\n        }\n        // Physics\n        //TODO implement correct serialization for physics impostors.\n        if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\n            const impostor = this.getPhysicsImpostor();\n            if (impostor) {\n                serializationObject.physicsMass = impostor.getParam(\"mass\");\n                serializationObject.physicsFriction = impostor.getParam(\"friction\");\n                serializationObject.physicsRestitution = impostor.getParam(\"mass\");\n                serializationObject.physicsImpostor = impostor.type;\n            }\n        }\n        // Metadata\n        if (this.metadata) {\n            serializationObject.metadata = this.metadata;\n        }\n        // Instances\n        serializationObject.instances = [];\n        for (let index = 0; index < this.instances.length; index++) {\n            const instance = this.instances[index];\n            if (instance.doNotSerialize) {\n                continue;\n            }\n            const serializationInstance: any = {\n                name: instance.name,\n                id: instance.id,\n                isEnabled: instance.isEnabled(false),\n                isVisible: instance.isVisible,\n                isPickable: instance.isPickable,\n                checkCollisions: instance.checkCollisions,\n                position: instance.position.asArray(),\n                scaling: instance.scaling.asArray()\n            };\n            if (instance.parent) {\n                instance.parent._serializeAsParent(serializationInstance);\n            }\n            if (instance.rotationQuaternion) {\n                serializationInstance.rotationQuaternion = instance.rotationQuaternion.asArray();\n            }\n            else if (instance.rotation) {\n                serializationInstance.rotation = instance.rotation.asArray();\n            }\n            // Physics\n            //TODO implement correct serialization for physics impostors.\n            if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\n                const impostor = instance.getPhysicsImpostor();\n                if (impostor) {\n                    serializationInstance.physicsMass = impostor.getParam(\"mass\");\n                    serializationInstance.physicsFriction = impostor.getParam(\"friction\");\n                    serializationInstance.physicsRestitution = impostor.getParam(\"mass\");\n                    serializationInstance.physicsImpostor = impostor.type;\n                }\n            }\n            // Metadata\n            if (instance.metadata) {\n                serializationInstance.metadata = instance.metadata;\n            }\n            serializationObject.instances.push(serializationInstance);\n            // Animations\n            SerializationHelper.AppendSerializedAnimations(instance, serializationInstance);\n            serializationInstance.ranges = instance.serializeAnimationRanges();\n        }\n        // Thin instances\n        if (this._thinInstanceDataStorage.instancesCount && this._thinInstanceDataStorage.matrixData) {\n            serializationObject.thinInstances = {\n                instancesCount: this._thinInstanceDataStorage.instancesCount,\n                matrixData: Array.from(this._thinInstanceDataStorage.matrixData),\n                matrixBufferSize: this._thinInstanceDataStorage.matrixBufferSize,\n                enablePicking: this.thinInstanceEnablePicking\n            };\n            if (this._userThinInstanceBuffersStorage) {\n                const userThinInstance: any = {\n                    data: {},\n                    sizes: {},\n                    strides: {}\n                };\n                for (const kind in this._userThinInstanceBuffersStorage.data) {\n                    userThinInstance.data[kind] = Array.from(this._userThinInstanceBuffersStorage.data[kind]);\n                    userThinInstance.sizes[kind] = this._userThinInstanceBuffersStorage.sizes[kind];\n                    userThinInstance.strides[kind] = this._userThinInstanceBuffersStorage.strides[kind];\n                }\n                serializationObject.thinInstances.userThinInstance = userThinInstance;\n            }\n        }\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n        serializationObject.ranges = this.serializeAnimationRanges();\n        // Layer mask\n        serializationObject.layerMask = this.layerMask;\n        // Alpha\n        serializationObject.alphaIndex = this.alphaIndex;\n        serializationObject.hasVertexAlpha = this.hasVertexAlpha;\n        // Overlay\n        serializationObject.overlayAlpha = this.overlayAlpha;\n        serializationObject.overlayColor = this.overlayColor.asArray();\n        serializationObject.renderOverlay = this.renderOverlay;\n        // Fog\n        serializationObject.applyFog = this.applyFog;\n        // Action Manager\n        if (this.actionManager) {\n            serializationObject.actions = this.actionManager.serialize(this.name);\n        }\n        return serializationObject;\n    }\n    /** @internal */\n    public _syncGeometryWithMorphTargetManager() {\n        if (!this.geometry) {\n            return;\n        }\n        this._markSubMeshesAsAttributesDirty();\n        const morphTargetManager = this._internalAbstractMeshDataInfo._morphTargetManager;\n        if (morphTargetManager && morphTargetManager.vertexCount) {\n            if (morphTargetManager.vertexCount !== this.getTotalVertices()) {\n                Logger.Error(\"Mesh is incompatible with morph targets. Targets and mesh must all have the same vertices count.\");\n                this.morphTargetManager = null;\n                return;\n            }\n            if (morphTargetManager.isUsingTextureForTargets) {\n                return;\n            }\n            for (let index = 0; index < morphTargetManager.numInfluencers; index++) {\n                const morphTarget = morphTargetManager.getActiveTarget(index);\n                const positions = morphTarget.getPositions();\n                if (!positions) {\n                    Logger.Error(\"Invalid morph target. Target must have positions.\");\n                    return;\n                }\n                this.geometry.setVerticesData(VertexBuffer.PositionKind + index, positions, false, 3);\n                const normals = morphTarget.getNormals();\n                if (normals) {\n                    this.geometry.setVerticesData(VertexBuffer.NormalKind + index, normals, false, 3);\n                }\n                const tangents = morphTarget.getTangents();\n                if (tangents) {\n                    this.geometry.setVerticesData(VertexBuffer.TangentKind + index, tangents, false, 3);\n                }\n                const uvs = morphTarget.getUVs();\n                if (uvs) {\n                    this.geometry.setVerticesData(VertexBuffer.UVKind + \"_\" + index, uvs, false, 2);\n                }\n            }\n        }\n        else {\n            let index = 0;\n            // Positions\n            while (this.geometry.isVerticesDataPresent(VertexBuffer.PositionKind + index)) {\n                this.geometry.removeVerticesData(VertexBuffer.PositionKind + index);\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.NormalKind + index)) {\n                    this.geometry.removeVerticesData(VertexBuffer.NormalKind + index);\n                }\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.TangentKind + index)) {\n                    this.geometry.removeVerticesData(VertexBuffer.TangentKind + index);\n                }\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.UVKind + index)) {\n                    this.geometry.removeVerticesData(VertexBuffer.UVKind + \"_\" + index);\n                }\n                index++;\n            }\n        }\n    }\n    // Statics\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public static _GroundMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\n        throw _WarnImport(\"GroundMesh\");\n    };\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public static _GoldbergMeshParser = (parsedMesh: any, scene: Scene): GoldbergMesh => {\n        throw _WarnImport(\"GoldbergMesh\");\n    };\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public static _LinesMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\n        throw _WarnImport(\"LinesMesh\");\n    };\n    /**\n     * Returns a new Mesh object parsed from the source provided.\n     * @param parsedMesh is the source\n     * @param scene defines the hosting scene\n     * @param rootUrl is the root URL to prefix the `delayLoadingFile` property with\n     * @returns a new Mesh\n     */\n    public static Parse(parsedMesh: any, scene: Scene, rootUrl: string): Mesh {\n        let mesh: Mesh;\n        if (parsedMesh.type && parsedMesh.type === \"LinesMesh\") {\n            mesh = Mesh._LinesMeshParser(parsedMesh, scene);\n        }\n        else if (parsedMesh.type && parsedMesh.type === \"GroundMesh\") {\n            mesh = Mesh._GroundMeshParser(parsedMesh, scene);\n        }\n        else if (parsedMesh.type && parsedMesh.type === \"GoldbergMesh\") {\n            mesh = Mesh._GoldbergMeshParser(parsedMesh, scene);\n        }\n        else {\n            mesh = new Mesh(parsedMesh.name, scene);\n        }\n        mesh.id = parsedMesh.id;\n        mesh._waitingParsedUniqueId = parsedMesh.uniqueId;\n        if (Tags) {\n            Tags.AddTagsTo(mesh, parsedMesh.tags);\n        }\n        mesh.position = Vector3.FromArray(parsedMesh.position);\n        if (parsedMesh.metadata !== undefined) {\n            mesh.metadata = parsedMesh.metadata;\n        }\n        if (parsedMesh.rotationQuaternion) {\n            mesh.rotationQuaternion = Quaternion.FromArray(parsedMesh.rotationQuaternion);\n        }\n        else if (parsedMesh.rotation) {\n            mesh.rotation = Vector3.FromArray(parsedMesh.rotation);\n        }\n        mesh.scaling = Vector3.FromArray(parsedMesh.scaling);\n        if (parsedMesh.localMatrix) {\n            mesh.setPreTransformMatrix(Matrix.FromArray(parsedMesh.localMatrix));\n        }\n        else if (parsedMesh.pivotMatrix) {\n            mesh.setPivotMatrix(Matrix.FromArray(parsedMesh.pivotMatrix));\n        }\n        mesh.setEnabled(parsedMesh.isEnabled);\n        mesh.isVisible = parsedMesh.isVisible;\n        mesh.infiniteDistance = parsedMesh.infiniteDistance;\n        mesh.showBoundingBox = parsedMesh.showBoundingBox;\n        mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;\n        if (parsedMesh.applyFog !== undefined) {\n            mesh.applyFog = parsedMesh.applyFog;\n        }\n        if (parsedMesh.pickable !== undefined) {\n            mesh.isPickable = parsedMesh.pickable;\n        }\n        if (parsedMesh.alphaIndex !== undefined) {\n            mesh.alphaIndex = parsedMesh.alphaIndex;\n        }\n        mesh.receiveShadows = parsedMesh.receiveShadows;\n        mesh.billboardMode = parsedMesh.billboardMode;\n        if (parsedMesh.visibility !== undefined) {\n            mesh.visibility = parsedMesh.visibility;\n        }\n        mesh.checkCollisions = parsedMesh.checkCollisions;\n        mesh.overrideMaterialSideOrientation = parsedMesh.overrideMaterialSideOrientation;\n        if (parsedMesh.isBlocker !== undefined) {\n            mesh.isBlocker = parsedMesh.isBlocker;\n        }\n        mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;\n        // freezeWorldMatrix\n        if (parsedMesh.freezeWorldMatrix) {\n            mesh._waitingData.freezeWorldMatrix = parsedMesh.freezeWorldMatrix;\n        }\n        // Parent\n        if (parsedMesh.parentId !== undefined) {\n            mesh._waitingParentId = parsedMesh.parentId;\n        }\n        if (parsedMesh.parentInstanceIndex !== undefined) {\n            mesh._waitingParentInstanceIndex = parsedMesh.parentInstanceIndex;\n        }\n        // Actions\n        if (parsedMesh.actions !== undefined) {\n            mesh._waitingData.actions = parsedMesh.actions;\n        }\n        // Overlay\n        if (parsedMesh.overlayAlpha !== undefined) {\n            mesh.overlayAlpha = parsedMesh.overlayAlpha;\n        }\n        if (parsedMesh.overlayColor !== undefined) {\n            mesh.overlayColor = Color3.FromArray(parsedMesh.overlayColor);\n        }\n        if (parsedMesh.renderOverlay !== undefined) {\n            mesh.renderOverlay = parsedMesh.renderOverlay;\n        }\n        // Geometry\n        mesh.isUnIndexed = !!parsedMesh.isUnIndexed;\n        mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;\n        if (parsedMesh.delayLoadingFile) {\n            mesh.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\n            mesh.delayLoadingFile = rootUrl + parsedMesh.delayLoadingFile;\n            mesh.buildBoundingInfo(Vector3.FromArray(parsedMesh.boundingBoxMinimum), Vector3.FromArray(parsedMesh.boundingBoxMaximum));\n            if (parsedMesh._binaryInfo) {\n                mesh._binaryInfo = parsedMesh._binaryInfo;\n            }\n            mesh._delayInfo = [];\n            if (parsedMesh.hasUVs) {\n                mesh._delayInfo.push(VertexBuffer.UVKind);\n            }\n            if (parsedMesh.hasUVs2) {\n                mesh._delayInfo.push(VertexBuffer.UV2Kind);\n            }\n            if (parsedMesh.hasUVs3) {\n                mesh._delayInfo.push(VertexBuffer.UV3Kind);\n            }\n            if (parsedMesh.hasUVs4) {\n                mesh._delayInfo.push(VertexBuffer.UV4Kind);\n            }\n            if (parsedMesh.hasUVs5) {\n                mesh._delayInfo.push(VertexBuffer.UV5Kind);\n            }\n            if (parsedMesh.hasUVs6) {\n                mesh._delayInfo.push(VertexBuffer.UV6Kind);\n            }\n            if (parsedMesh.hasColors) {\n                mesh._delayInfo.push(VertexBuffer.ColorKind);\n            }\n            if (parsedMesh.hasMatricesIndices) {\n                mesh._delayInfo.push(VertexBuffer.MatricesIndicesKind);\n            }\n            if (parsedMesh.hasMatricesWeights) {\n                mesh._delayInfo.push(VertexBuffer.MatricesWeightsKind);\n            }\n            mesh._delayLoadingFunction = Geometry._ImportGeometry;\n            if (SceneLoaderFlags.ForceFullSceneLoadingForIncremental) {\n                mesh._checkDelayState();\n            }\n        }\n        else {\n            Geometry._ImportGeometry(parsedMesh, mesh);\n        }\n        // Material\n        if (parsedMesh.materialUniqueId) {\n            mesh._waitingMaterialId = parsedMesh.materialUniqueId;\n        }\n        else if (parsedMesh.materialId) {\n            mesh._waitingMaterialId = parsedMesh.materialId;\n        }\n        // Morph targets\n        if (parsedMesh.morphTargetManagerId > -1) {\n            mesh.morphTargetManager = scene.getMorphTargetManagerById(parsedMesh.morphTargetManagerId);\n        }\n        // Skeleton\n        if (parsedMesh.skeletonId !== undefined && parsedMesh.skeletonId !== null) {\n            mesh.skeleton = scene.getLastSkeletonById(parsedMesh.skeletonId);\n            if (parsedMesh.numBoneInfluencers) {\n                mesh.numBoneInfluencers = parsedMesh.numBoneInfluencers;\n            }\n        }\n        // Animations\n        if (parsedMesh.animations) {\n            for (let animationIndex = 0; animationIndex < parsedMesh.animations.length; animationIndex++) {\n                const parsedAnimation = parsedMesh.animations[animationIndex];\n                const internalClass = GetClass(\"BABYLON.Animation\");\n                if (internalClass) {\n                    mesh.animations.push(internalClass.Parse(parsedAnimation));\n                }\n            }\n            Node.ParseAnimationRanges(mesh, parsedMesh, scene);\n        }\n        if (parsedMesh.autoAnimate) {\n            scene.beginAnimation(mesh, parsedMesh.autoAnimateFrom, parsedMesh.autoAnimateTo, parsedMesh.autoAnimateLoop, parsedMesh.autoAnimateSpeed || 1.0);\n        }\n        // Layer Mask\n        if (parsedMesh.layerMask && !isNaN(parsedMesh.layerMask)) {\n            mesh.layerMask = Math.abs(parseInt(parsedMesh.layerMask));\n        }\n        else {\n            mesh.layerMask = 0x0fffffff;\n        }\n        // Physics\n        if (parsedMesh.physicsImpostor) {\n            Mesh._PhysicsImpostorParser(scene, mesh, parsedMesh);\n        }\n        // Levels\n        if (parsedMesh.lodMeshIds) {\n            mesh._waitingData.lods = {\n                ids: parsedMesh.lodMeshIds,\n                distances: parsedMesh.lodDistances ? parsedMesh.lodDistances : null,\n                coverages: parsedMesh.lodCoverages ? parsedMesh.lodCoverages : null\n            };\n        }\n        // Instances\n        if (parsedMesh.instances) {\n            for (let index = 0; index < parsedMesh.instances.length; index++) {\n                const parsedInstance = parsedMesh.instances[index];\n                const instance = mesh.createInstance(parsedInstance.name);\n                if (parsedInstance.id) {\n                    instance.id = parsedInstance.id;\n                }\n                if (Tags) {\n                    if (parsedInstance.tags) {\n                        Tags.AddTagsTo(instance, parsedInstance.tags);\n                    }\n                    else {\n                        Tags.AddTagsTo(instance, parsedMesh.tags);\n                    }\n                }\n                instance.position = Vector3.FromArray(parsedInstance.position);\n                if (parsedInstance.metadata !== undefined) {\n                    instance.metadata = parsedInstance.metadata;\n                }\n                if (parsedInstance.parentId !== undefined) {\n                    instance._waitingParentId = parsedInstance.parentId;\n                }\n                if (parsedInstance.parentInstanceIndex !== undefined) {\n                    instance._waitingParentInstanceIndex = parsedInstance.parentInstanceIndex;\n                }\n                if (parsedInstance.isEnabled !== undefined && parsedInstance.isEnabled !== null) {\n                    instance.setEnabled(parsedInstance.isEnabled);\n                }\n                if (parsedInstance.isVisible !== undefined && parsedInstance.isVisible !== null) {\n                    instance.isVisible = parsedInstance.isVisible;\n                }\n                if (parsedInstance.isPickable !== undefined && parsedInstance.isPickable !== null) {\n                    instance.isPickable = parsedInstance.isPickable;\n                }\n                if (parsedInstance.rotationQuaternion) {\n                    instance.rotationQuaternion = Quaternion.FromArray(parsedInstance.rotationQuaternion);\n                }\n                else if (parsedInstance.rotation) {\n                    instance.rotation = Vector3.FromArray(parsedInstance.rotation);\n                }\n                instance.scaling = Vector3.FromArray(parsedInstance.scaling);\n                if (parsedInstance.checkCollisions != undefined && parsedInstance.checkCollisions != null) {\n                    instance.checkCollisions = parsedInstance.checkCollisions;\n                }\n                if (parsedInstance.pickable != undefined && parsedInstance.pickable != null) {\n                    instance.isPickable = parsedInstance.pickable;\n                }\n                if (parsedInstance.showBoundingBox != undefined && parsedInstance.showBoundingBox != null) {\n                    instance.showBoundingBox = parsedInstance.showBoundingBox;\n                }\n                if (parsedInstance.showSubMeshesBoundingBox != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\n                    instance.showSubMeshesBoundingBox = parsedInstance.showSubMeshesBoundingBox;\n                }\n                if (parsedInstance.alphaIndex != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\n                    instance.alphaIndex = parsedInstance.alphaIndex;\n                }\n                // Physics\n                if (parsedInstance.physicsImpostor) {\n                    Mesh._PhysicsImpostorParser(scene, instance, parsedInstance);\n                }\n                // Animation\n                if (parsedInstance.animations) {\n                    for (let animationIndex = 0; animationIndex < parsedInstance.animations.length; animationIndex++) {\n                        const parsedAnimation = parsedInstance.animations[animationIndex];\n                        const internalClass = GetClass(\"BABYLON.Animation\");\n                        if (internalClass) {\n                            instance.animations.push(internalClass.Parse(parsedAnimation));\n                        }\n                    }\n                    Node.ParseAnimationRanges(instance, parsedInstance, scene);\n                    if (parsedInstance.autoAnimate) {\n                        scene.beginAnimation(instance, parsedInstance.autoAnimateFrom, parsedInstance.autoAnimateTo, parsedInstance.autoAnimateLoop, parsedInstance.autoAnimateSpeed || 1.0);\n                    }\n                }\n            }\n        }\n        // Thin instances\n        if (parsedMesh.thinInstances) {\n            const thinInstances = parsedMesh.thinInstances;\n            mesh.thinInstanceEnablePicking = !!thinInstances.enablePicking;\n            if (thinInstances.matrixData) {\n                mesh.thinInstanceSetBuffer(\"matrix\", new Float32Array(thinInstances.matrixData), 16, false);\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\n                mesh._thinInstanceDataStorage.instancesCount = thinInstances.instancesCount;\n            }\n            else {\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\n            }\n            if (parsedMesh.thinInstances.userThinInstance) {\n                const userThinInstance = parsedMesh.thinInstances.userThinInstance;\n                for (const kind in userThinInstance.data) {\n                    mesh.thinInstanceSetBuffer(kind, new Float32Array(userThinInstance.data[kind]), userThinInstance.strides[kind], false);\n                    mesh._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\n                }\n            }\n        }\n        return mesh;\n    }\n    // Skeletons\n    /**\n     * Prepare internal position array for software CPU skinning\n     * @returns original positions used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh\n     */\n    public setPositionsForCPUSkinning(): Nullable<Float32Array> {\n        const internalDataInfo = this._internalMeshDataInfo;\n        if (!internalDataInfo._sourcePositions) {\n            const source = this.getVerticesData(VertexBuffer.PositionKind);\n            if (!source) {\n                return internalDataInfo._sourcePositions;\n            }\n            internalDataInfo._sourcePositions = new Float32Array(<any>source);\n            if (!this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\n                this.setVerticesData(VertexBuffer.PositionKind, source, true);\n            }\n        }\n        return internalDataInfo._sourcePositions;\n    }\n    /**\n     * Prepare internal normal array for software CPU skinning\n     * @returns original normals used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh.\n     */\n    public setNormalsForCPUSkinning(): Nullable<Float32Array> {\n        const internalDataInfo = this._internalMeshDataInfo;\n        if (!internalDataInfo._sourceNormals) {\n            const source = this.getVerticesData(VertexBuffer.NormalKind);\n            if (!source) {\n                return internalDataInfo._sourceNormals;\n            }\n            internalDataInfo._sourceNormals = new Float32Array(<any>source);\n            if (!this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\n                this.setVerticesData(VertexBuffer.NormalKind, source, true);\n            }\n        }\n        return internalDataInfo._sourceNormals;\n    }\n    /**\n     * Updates the vertex buffer by applying transformation from the bones\n     * @param skeleton defines the skeleton to apply to current mesh\n     * @returns the current mesh\n     */\n    public applySkeleton(skeleton: Skeleton): Mesh {\n        if (!this.geometry) {\n            return this;\n        }\n        if (this.geometry._softwareSkinningFrameId == this.getScene().getFrameId()) {\n            return this;\n        }\n        this.geometry._softwareSkinningFrameId = this.getScene().getFrameId();\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n            return this;\n        }\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\n            return this;\n        }\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n            return this;\n        }\n        const hasNormals = this.isVerticesDataPresent(VertexBuffer.NormalKind);\n        const internalDataInfo = this._internalMeshDataInfo;\n        if (!internalDataInfo._sourcePositions) {\n            const submeshes = this.subMeshes.slice();\n            this.setPositionsForCPUSkinning();\n            this.subMeshes = submeshes;\n        }\n        if (hasNormals && !internalDataInfo._sourceNormals) {\n            this.setNormalsForCPUSkinning();\n        }\n        // positionsData checks for not being Float32Array will only pass at most once\n        let positionsData = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!positionsData) {\n            return this;\n        }\n        if (!(positionsData instanceof Float32Array)) {\n            positionsData = new Float32Array(positionsData);\n        }\n        // normalsData checks for not being Float32Array will only pass at most once\n        let normalsData = this.getVerticesData(VertexBuffer.NormalKind);\n        if (hasNormals) {\n            if (!normalsData) {\n                return this;\n            }\n            if (!(normalsData instanceof Float32Array)) {\n                normalsData = new Float32Array(normalsData);\n            }\n        }\n        const matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\n        const matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n        if (!matricesWeightsData || !matricesIndicesData) {\n            return this;\n        }\n        const needExtras = this.numBoneInfluencers > 4;\n        const matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\n        const matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\n        const skeletonMatrices = skeleton.getTransformMatrices(this);\n        const tempVector3 = Vector3.Zero();\n        const finalMatrix = new Matrix();\n        const tempMatrix = new Matrix();\n        let matWeightIdx = 0;\n        let inf: number;\n        for (let index = 0; index < positionsData.length; index += 3, matWeightIdx += 4) {\n            let weight: number;\n            for (inf = 0; inf < 4; inf++) {\n                weight = matricesWeightsData[matWeightIdx + inf];\n                if (weight > 0) {\n                    Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\n                    finalMatrix.addToSelf(tempMatrix);\n                }\n            }\n            if (needExtras) {\n                for (inf = 0; inf < 4; inf++) {\n                    weight = matricesWeightsExtraData![matWeightIdx + inf];\n                    if (weight > 0) {\n                        Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData![matWeightIdx + inf] * 16), weight, tempMatrix);\n                        finalMatrix.addToSelf(tempMatrix);\n                    }\n                }\n            }\n            Vector3.TransformCoordinatesFromFloatsToRef(internalDataInfo._sourcePositions![index], internalDataInfo._sourcePositions![index + 1], internalDataInfo._sourcePositions![index + 2], finalMatrix, tempVector3);\n            tempVector3.toArray(positionsData, index);\n            if (hasNormals) {\n                Vector3.TransformNormalFromFloatsToRef(internalDataInfo._sourceNormals![index], internalDataInfo._sourceNormals![index + 1], internalDataInfo._sourceNormals![index + 2], finalMatrix, tempVector3);\n                tempVector3.toArray(normalsData!, index);\n            }\n            finalMatrix.reset();\n        }\n        this.updateVerticesData(VertexBuffer.PositionKind, positionsData);\n        if (hasNormals) {\n            this.updateVerticesData(VertexBuffer.NormalKind, normalsData!);\n        }\n        return this;\n    }\n    // Tools\n    /**\n     * Returns an object containing a min and max Vector3 which are the minimum and maximum vectors of each mesh bounding box from the passed array, in the world coordinates\n     * @param meshes defines the list of meshes to scan\n     * @returns an object `{min:` Vector3`, max:` Vector3`}`\n     */\n    public static MinMax(meshes: AbstractMesh[]): {\n        min: Vector3;\n        max: Vector3;\n    } {\n        let minVector: Nullable<Vector3> = null;\n        let maxVector: Nullable<Vector3> = null;\n        meshes.forEach(function (mesh) {\n            const boundingInfo = mesh.getBoundingInfo();\n            const boundingBox = boundingInfo.boundingBox;\n            if (!minVector || !maxVector) {\n                minVector = boundingBox.minimumWorld;\n                maxVector = boundingBox.maximumWorld;\n            }\n            else {\n                minVector.minimizeInPlace(boundingBox.minimumWorld);\n                maxVector.maximizeInPlace(boundingBox.maximumWorld);\n            }\n        });\n        if (!minVector || !maxVector) {\n            return {\n                min: Vector3.Zero(),\n                max: Vector3.Zero()\n            };\n        }\n        return {\n            min: minVector,\n            max: maxVector\n        };\n    }\n    /**\n     * Returns the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array\n     * @param meshesOrMinMaxVector could be an array of meshes or a `{min:` Vector3`, max:` Vector3`}` object\n     * @returns a vector3\n     */\n    public static Center(meshesOrMinMaxVector: {\n        min: Vector3;\n        max: Vector3;\n    } | AbstractMesh[]): Vector3 {\n        const minMaxVector = meshesOrMinMaxVector instanceof Array ? Mesh.MinMax(meshesOrMinMaxVector) : meshesOrMinMaxVector;\n        return Vector3.Center(minMaxVector.min, minMaxVector.max);\n    }\n    /**\n     * Merge the array of meshes into a single mesh for performance reasons.\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\n     * @returns a new mesh\n     */\n    public static MergeMeshes(meshes: Array<Mesh>, disposeSource = true, allow32BitsIndices?: boolean, meshSubclass?: Mesh, subdivideWithSubMeshes?: boolean, multiMultiMaterials?: boolean) {\n        return runCoroutineSync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, false));\n    }\n    /**\n     * Merge the array of meshes into a single mesh for performance reasons.\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\n     * @returns a new mesh\n     */\n    public static MergeMeshesAsync(meshes: Array<Mesh>, disposeSource = true, allow32BitsIndices?: boolean, meshSubclass?: Mesh, subdivideWithSubMeshes?: boolean, multiMultiMaterials?: boolean) {\n        return runCoroutineAsync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, true), createYieldingScheduler());\n    }\n    private static *_MergeMeshesCoroutine(meshes: Array<Mesh>, disposeSource = true, allow32BitsIndices: boolean | undefined, meshSubclass: Mesh | undefined, subdivideWithSubMeshes: boolean | undefined, multiMultiMaterials: boolean | undefined, isAsync: boolean): Coroutine<Nullable<Mesh>> {\n        // Remove any null/undefined entries from the mesh array\n        meshes = meshes.filter(Boolean);\n        if (meshes.length === 0) {\n            return null;\n        }\n        let index: number;\n        if (!allow32BitsIndices) {\n            let totalVertices = 0;\n            // Counting vertices\n            for (index = 0; index < meshes.length; index++) {\n                totalVertices += meshes[index].getTotalVertices();\n                if (totalVertices >= 65536) {\n                    Logger.Warn(\"Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices\");\n                    return null;\n                }\n            }\n        }\n        if (multiMultiMaterials) {\n            subdivideWithSubMeshes = false;\n        }\n        const materialArray: Array<Material> = new Array<Material>();\n        const materialIndexArray: Array<number> = new Array<number>();\n        // Merge\n        const indiceArray: Array<number> = new Array<number>();\n        const currentOverrideMaterialSideOrientation = meshes[0].overrideMaterialSideOrientation;\n        for (index = 0; index < meshes.length; index++) {\n            const mesh = meshes[index];\n            if (mesh.isAnInstance) {\n                Logger.Warn(\"Cannot merge instance meshes.\");\n                return null;\n            }\n            if (currentOverrideMaterialSideOrientation !== mesh.overrideMaterialSideOrientation) {\n                Logger.Warn(\"Cannot merge meshes with different overrideMaterialSideOrientation values.\");\n                return null;\n            }\n            if (subdivideWithSubMeshes) {\n                indiceArray.push(mesh.getTotalIndices());\n            }\n            if (multiMultiMaterials) {\n                if (mesh.material) {\n                    const material = mesh.material;\n                    if (material instanceof MultiMaterial) {\n                        for (let matIndex = 0; matIndex < material.subMaterials.length; matIndex++) {\n                            if (materialArray.indexOf(<Material>material.subMaterials[matIndex]) < 0) {\n                                materialArray.push(<Material>material.subMaterials[matIndex]);\n                            }\n                        }\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\n                            materialIndexArray.push(materialArray.indexOf(<Material>material.subMaterials[mesh.subMeshes[subIndex].materialIndex]));\n                            indiceArray.push(mesh.subMeshes[subIndex].indexCount);\n                        }\n                    }\n                    else {\n                        if (materialArray.indexOf(<Material>material) < 0) {\n                            materialArray.push(<Material>material);\n                        }\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\n                            materialIndexArray.push(materialArray.indexOf(<Material>material));\n                            indiceArray.push(mesh.subMeshes[subIndex].indexCount);\n                        }\n                    }\n                }\n                else {\n                    for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\n                        materialIndexArray.push(0);\n                        indiceArray.push(mesh.subMeshes[subIndex].indexCount);\n                    }\n                }\n            }\n        }\n        const source = meshes[0];\n        const getVertexDataFromMesh = (mesh: Mesh) => {\n            const wm = mesh.computeWorldMatrix(true);\n            const vertexData = VertexData.ExtractFromMesh(mesh, false, false);\n            return [vertexData, wm] as const;\n        };\n        const [sourceVertexData, sourceTransform] = getVertexDataFromMesh(source);\n        if (isAsync) {\n            yield;\n        }\n        const meshVertexDatas = new Array<readonly [\n            VertexData,\n            Matrix\n        ]>(meshes.length - 1);\n        for (let i = 1; i < meshes.length; i++) {\n            meshVertexDatas[i - 1] = getVertexDataFromMesh(meshes[i]);\n            if (isAsync) {\n                yield;\n            }\n        }\n        const mergeCoroutine = sourceVertexData._mergeCoroutine(sourceTransform, meshVertexDatas, allow32BitsIndices, isAsync, !disposeSource);\n        let mergeCoroutineStep = mergeCoroutine.next();\n        while (!mergeCoroutineStep.done) {\n            if (isAsync) {\n                yield;\n            }\n            mergeCoroutineStep = mergeCoroutine.next();\n        }\n        const vertexData = mergeCoroutineStep.value;\n        if (!meshSubclass) {\n            meshSubclass = new Mesh(source.name + \"_merged\", source.getScene());\n        }\n        const applyToCoroutine = vertexData._applyToCoroutine(meshSubclass, undefined, isAsync);\n        let applyToCoroutineStep = applyToCoroutine.next();\n        while (!applyToCoroutineStep.done) {\n            if (isAsync) {\n                yield;\n            }\n            applyToCoroutineStep = applyToCoroutine.next();\n        }\n        // Setting properties\n        meshSubclass.checkCollisions = source.checkCollisions;\n        meshSubclass.overrideMaterialSideOrientation = source.overrideMaterialSideOrientation;\n        // Cleaning\n        if (disposeSource) {\n            for (index = 0; index < meshes.length; index++) {\n                meshes[index].dispose();\n            }\n        }\n        // Subdivide\n        if (subdivideWithSubMeshes || multiMultiMaterials) {\n            //-- removal of global submesh\n            meshSubclass.releaseSubMeshes();\n            index = 0;\n            let offset = 0;\n            //-- apply subdivision according to index table\n            while (index < indiceArray.length) {\n                SubMesh.CreateFromIndices(0, offset, indiceArray[index], meshSubclass, undefined, false);\n                offset += indiceArray[index];\n                index++;\n            }\n            for (const subMesh of meshSubclass.subMeshes) {\n                subMesh.refreshBoundingInfo();\n            }\n            meshSubclass.computeWorldMatrix(true);\n        }\n        if (multiMultiMaterials) {\n            const newMultiMaterial = new MultiMaterial(source.name + \"_merged\", source.getScene());\n            newMultiMaterial.subMaterials = materialArray;\n            for (let subIndex = 0; subIndex < meshSubclass.subMeshes.length; subIndex++) {\n                meshSubclass.subMeshes[subIndex].materialIndex = materialIndexArray[subIndex];\n            }\n            meshSubclass.material = newMultiMaterial;\n        }\n        else {\n            meshSubclass.material = source.material;\n        }\n        return meshSubclass;\n    }\n    /**\n     * @internal\n     */\n    public addInstance(instance: InstancedMesh) {\n        instance._indexInSourceMeshInstanceArray = this.instances.length;\n        this.instances.push(instance);\n    }\n    /**\n     * @internal\n     */\n    public removeInstance(instance: InstancedMesh) {\n        // Remove from mesh\n        const index = instance._indexInSourceMeshInstanceArray;\n        if (index != -1) {\n            if (index !== this.instances.length - 1) {\n                const last = this.instances[this.instances.length - 1];\n                this.instances[index] = last;\n                last._indexInSourceMeshInstanceArray = index;\n            }\n            instance._indexInSourceMeshInstanceArray = -1;\n            this.instances.pop();\n        }\n    }\n    /** @internal */\n    public _shouldConvertRHS() {\n        return this.overrideMaterialSideOrientation === Material.CounterClockWiseSideOrientation;\n    }\n}\nRegisterClass(\"BABYLON.Mesh\", Mesh);\n\n    import type { Color4 } from \"../Maths/math.color\";\nimport type { Vector4 } from \"../Maths/math.vector\";\nimport type { ICreateCapsuleOptions } from \"./Builders/capsuleBuilder\";\nimport type { GroundMesh } from \"./groundMesh\";\nimport type { LinesMesh } from \"./linesMesh\";\ndeclare module \"../Meshes/mesh\" {\n    interface Mesh {\n        /**\n         * Sets the mesh material by the material or multiMaterial `id` property\n         * @param id is a string identifying the material or the multiMaterial\n         * @returns the current mesh\n         * @deprecated Please use MeshBuilder instead Please use setMaterialById instead\n         */\n        setMaterialByID(id: string): Mesh;\n    }\n    namespace Mesh {\n        /**\n         * Creates a ribbon mesh.\n         * @see https://doc.babylonjs.com/how_to/parametric_shapes\n         * @param name defines the name of the mesh to create\n         * @param pathArray is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry.\n         * @param closeArray creates a seam between the first and the last paths of the path array (default is false)\n         * @param closePath creates a seam between the first and the last points of each path of the path array\n         * @param offset is taken in account only if the `pathArray` is containing a single path\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @param instance defines an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#ribbon)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateRibbon(name: string, pathArray: Vector3[][], closeArray: boolean, closePath: boolean, offset: number, scene?: Scene, updatable?: boolean, sideOrientation?: number, instance?: Mesh): Mesh;\n        /**\n         * Creates a plane polygonal mesh.  By default, this is a disc.\n         * @param name defines the name of the mesh to create\n         * @param radius sets the radius size (float) of the polygon (default 0.5)\n         * @param tessellation sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateDisc(name: string, radius: number, tessellation: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number): Mesh;\n        /**\n         * Creates a box mesh.\n         * @param name defines the name of the mesh to create\n         * @param size sets the size (float) of each box side (default 1)\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateBox(name: string, size: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number): Mesh;\n        /**\n         * Creates a sphere mesh.\n         * @param name defines the name of the mesh to create\n         * @param segments sets the sphere number of horizontal stripes (positive integer, default 32)\n         * @param diameter sets the diameter size (float) of the sphere (default 1)\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateSphere(name: string, segments: number, diameter: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh;\n        /**\n         * Creates a hemisphere mesh.\n         * @param name defines the name of the mesh to create\n         * @param segments sets the sphere number of horizontal stripes (positive integer, default 32)\n         * @param diameter sets the diameter size (float) of the sphere (default 1)\n         * @param scene defines the hosting scene\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateHemisphere(name: string, segments: number, diameter: number, scene?: Scene): Mesh;\n        /**\n         * Creates a cylinder or a cone mesh.\n         * @param name defines the name of the mesh to create\n         * @param height sets the height size (float) of the cylinder/cone (float, default 2)\n         * @param diameterTop set the top cap diameter (floats, default 1)\n         * @param diameterBottom set the bottom cap diameter (floats, default 1). This value can't be zero\n         * @param tessellation sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance\n         * @param subdivisions sets the number of rings along the cylinder height (positive integer, default 1)\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateCylinder(name: string, height: number, diameterTop: number, diameterBottom: number, tessellation: number, subdivisions: any, scene?: Scene, updatable?: any, sideOrientation?: number): Mesh;\n        // Torus  (Code from SharpDX.org)\n        /**\n         * Creates a torus mesh.\n         * @param name defines the name of the mesh to create\n         * @param diameter sets the diameter size (float) of the torus (default 1)\n         * @param thickness sets the diameter size of the tube of the torus (float, default 0.5)\n         * @param tessellation sets the number of torus sides (positive integer, default 16)\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateTorus(name: string, diameter: number, thickness: number, tessellation: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh;\n        /**\n         * Creates a torus knot mesh.\n         * @param name defines the name of the mesh to create\n         * @param radius sets the global radius size (float) of the torus knot (default 2)\n         * @param tube sets the diameter size of the tube of the torus (float, default 0.5)\n         * @param radialSegments sets the number of sides on each tube segments (positive integer, default 32)\n         * @param tubularSegments sets the number of tubes to decompose the knot into (positive integer, default 32)\n         * @param p the number of windings on X axis (positive integers, default 2)\n         * @param q the number of windings on Y axis (positive integers, default 3)\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateTorusKnot(name: string, radius: number, tube: number, radialSegments: number, tubularSegments: number, p: number, q: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh;\n        /**\n         * Creates a line mesh..\n         * @param name defines the name of the mesh to create\n         * @param points is an array successive Vector3\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param instance is an instance of an existing LineMesh object to be updated with the passed `points` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#lines-and-dashedlines).\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateLines(name: string, points: Vector3[], scene: Nullable<Scene>, updatable: boolean, instance?: Nullable<LinesMesh>): LinesMesh;\n        /**\n         * Creates a dashed line mesh.\n         * @param name defines the name of the mesh to create\n         * @param points is an array successive Vector3\n         * @param dashSize is the size of the dashes relatively the dash number (positive float, default 3)\n         * @param gapSize is the size of the gap between two successive dashes relatively the dash number (positive float, default 1)\n         * @param dashNb is the intended total number of dashes (positive integer, default 200)\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param instance is an instance of an existing LineMesh object to be updated with the passed `points` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#lines-and-dashedlines)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateDashedLines(name: string, points: Vector3[], dashSize: number, gapSize: number, dashNb: number, scene: Nullable<Scene>, updatable?: boolean, instance?: LinesMesh): LinesMesh;\n        /**\n         * Creates a polygon mesh.Please consider using the same method from the MeshBuilder class instead\n         * The polygon's shape will depend on the input parameters and is constructed parallel to a ground mesh.\n         * The parameter `shape` is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors.\n         * You can set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n         * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\n         * Remember you can only change the shape positions, not their number when updating a polygon.\n         * @see https://doc.babylonjs.com/how_to/parametric_shapes#non-regular-polygon\n         * @param name defines the name of the mesh to create\n         * @param shape is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\n         * @param scene defines the hosting scene\n         * @param holes is a required array of arrays of successive Vector3 used to defines holes in the polygon\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @param earcutInjection can be used to inject your own earcut reference\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreatePolygon(name: string, shape: Vector3[], scene: Scene, holes?: Vector3[][], updatable?: boolean, sideOrientation?: number, earcutInjection?: any): Mesh;\n        /**\n         * Creates an extruded polygon mesh, with depth in the Y direction..\n         * @see https://doc.babylonjs.com/how_to/parametric_shapes#extruded-non-regular-polygon\n         * @param name defines the name of the mesh to create\n         * @param shape is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\n         * @param depth defines the height of extrusion\n         * @param scene defines the hosting scene\n         * @param holes is a required array of arrays of successive Vector3 used to defines holes in the polygon\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @param earcutInjection can be used to inject your own earcut reference\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function ExtrudePolygon(name: string, shape: Vector3[], depth: number, scene: Scene, holes?: Vector3[][], updatable?: boolean, sideOrientation?: number, earcutInjection?: any): Mesh;\n        /**\n         * Creates an extruded shape mesh.\n         * The extrusion is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters.\n         * @see https://doc.babylonjs.com/how_to/parametric_shapes\n         * @see https://doc.babylonjs.com/how_to/parametric_shapes#extruded-shapes\n         * @param name defines the name of the mesh to create\n         * @param shape is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis\n         * @param path is a required array of successive Vector3. This is the axis curve the shape is extruded along\n         * @param scale is the value to scale the shape\n         * @param rotation is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve\n         * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @param instance is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#extruded-shape)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function ExtrudeShape(name: string, shape: Vector3[], path: Vector3[], scale: number, rotation: number, cap: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number, instance?: Mesh): Mesh;\n        /**\n         * Creates an custom extruded shape mesh.\n         * The custom extrusion is a parametric shape.\n         * It has no predefined shape. Its final shape will depend on the input parameters.\n         *\n         * @see https://doc.babylonjs.com/how_to/parametric_shapes#extruded-shapes\n         * @param name defines the name of the mesh to create\n         * @param shape is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis\n         * @param path is a required array of successive Vector3. This is the axis curve the shape is extruded along\n         * @param scaleFunction is a custom Javascript function called on each path point\n         * @param rotationFunction is a custom Javascript function called on each path point\n         * @param ribbonCloseArray forces the extrusion underlying ribbon to close all the paths in its `pathArray`\n         * @param ribbonClosePath forces the extrusion underlying ribbon to close its `pathArray`\n         * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @param instance is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters (https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#extruded-shape)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function ExtrudeShapeCustom(name: string, shape: Vector3[], path: Vector3[], scaleFunction: Nullable<{\n            (i: number, distance: number): number;\n        }>, rotationFunction: Nullable<{\n            (i: number, distance: number): number;\n        }>, ribbonCloseArray: boolean, ribbonClosePath: boolean, cap: number, scene: Scene, updatable?: boolean, sideOrientation?: number, instance?: Mesh): Mesh;\n        /**\n         * Creates lathe mesh.\n         * The lathe is a shape with a symmetry axis : a 2D model shape is rotated around this axis to design the lathe.\n         * @param name defines the name of the mesh to create\n         * @param shape is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be rotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero\n         * @param radius is the radius value of the lathe\n         * @param tessellation is the side number of the lathe.\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateLathe(name: string, shape: Vector3[], radius: number, tessellation: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh;\n        /**\n         * Creates a plane mesh.\n         * @param name defines the name of the mesh to create\n         * @param size sets the size (float) of both sides of the plane at once (default 1)\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreatePlane(name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh;\n        /**\n         * Creates a ground mesh.\n         * @param name defines the name of the mesh to create\n         * @param width set the width of the ground\n         * @param height set the height of the ground\n         * @param subdivisions sets the number of subdivisions per side\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateGround(name: string, width: number, height: number, subdivisions: number, scene?: Scene, updatable?: boolean): Mesh;\n        /**\n         * Creates a tiled ground mesh.\n         * @param name defines the name of the mesh to create\n         * @param xmin set the ground minimum X coordinate\n         * @param zmin set the ground minimum Y coordinate\n         * @param xmax set the ground maximum X coordinate\n         * @param zmax set the ground maximum Z coordinate\n         * @param subdivisions is an object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the numbers of subdivisions on the ground width and height. Each subdivision is called a tile\n         * @param precision is an object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the numbers of subdivisions on the ground width and height of each tile\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateTiledGround(name: string, xmin: number, zmin: number, xmax: number, zmax: number, subdivisions: {\n            w: number;\n            h: number;\n        }, precision: {\n            w: number;\n            h: number;\n        }, scene: Scene, updatable?: boolean): Mesh;\n        /**\n         * Creates a ground mesh from a height map.\n         * @see https://doc.babylonjs.com/babylon101/height_map\n         * @param name defines the name of the mesh to create\n         * @param url sets the URL of the height map image resource\n         * @param width set the ground width size\n         * @param height set the ground height size\n         * @param subdivisions sets the number of subdivision per side\n         * @param minHeight is the minimum altitude on the ground\n         * @param maxHeight is the maximum altitude on the ground\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param onReady  is a callback function that will be called  once the mesh is built (the height map download can last some time)\n         * @param alphaFilter will filter any data where the alpha channel is below this value, defaults 0 (all data visible)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateGroundFromHeightMap(name: string, url: string, width: number, height: number, subdivisions: number, minHeight: number, maxHeight: number, scene: Scene, updatable?: boolean, onReady?: (mesh: GroundMesh) => void, alphaFilter?: number): GroundMesh;\n        /**\n         * Creates a tube mesh.\n         * The tube is a parametric shape.\n         * It has no predefined shape. Its final shape will depend on the input parameters.\n         *\n         * @see https://doc.babylonjs.com/how_to/parametric_shapes\n         * @param name defines the name of the mesh to create\n         * @param path is a required array of successive Vector3. It is the curve used as the axis of the tube\n         * @param radius sets the tube radius size\n         * @param tessellation is the number of sides on the tubular surface\n         * @param radiusFunction is a custom function. If it is not null, it overrides the parameter `radius`. This function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path\n         * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\n         * @param scene defines the hosting scene\n         * @param updatable defines if the mesh must be flagged as updatable\n         * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation)\n         * @param instance is an instance of an existing Tube object to be updated with the passed `pathArray` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#tube)\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateTube(name: string, path: Vector3[], radius: number, tessellation: number, radiusFunction: {\n            (i: number, distance: number): number;\n        }, cap: number, scene: Scene, updatable?: boolean, sideOrientation?: number, instance?: Mesh): Mesh;\n        /**\n         * Creates a polyhedron mesh.\n         *.\n         * * The parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embedded types. Please refer to the type sheet in the tutorial to choose the wanted type\n         * * The parameter `size` (positive float, default 1) sets the polygon size\n         * * You can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value)\n         * * You can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`\n         * * A `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\n         * * You can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`)\n         * * To understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\n         * * The parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored\n         * * You can also set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n         * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\n         * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n         * @param name defines the name of the mesh to create\n         * @param options defines the options used to create the mesh\n         * @param scene defines the hosting scene\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreatePolyhedron(name: string, options: {\n            type?: number;\n            size?: number;\n            sizeX?: number;\n            sizeY?: number;\n            sizeZ?: number;\n            custom?: any;\n            faceUV?: Vector4[];\n            faceColors?: Color4[];\n            updatable?: boolean;\n            sideOrientation?: number;\n        }, scene: Scene): Mesh;\n        /**\n         * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\n         * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\n         * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value than `radius`)\n         * * The parameter `subdivisions` sets the number of subdivisions (positive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\n         * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\n         * * You can also set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n         * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\n         * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n         * @see https://doc.babylonjs.com/how_to/polyhedra_shapes#icosphere\n         * @param name defines the name of the mesh\n         * @param options defines the options used to create the mesh\n         * @param scene defines the hosting scene\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateIcoSphere(name: string, options: {\n            radius?: number;\n            flat?: boolean;\n            subdivisions?: number;\n            sideOrientation?: number;\n            updatable?: boolean;\n        }, scene: Scene): Mesh;\n        /**\n         * Creates a decal mesh.\n         *.\n         * A decal is a mesh usually applied as a model onto the surface of another mesh\n         * @param name  defines the name of the mesh\n         * @param sourceMesh defines the mesh receiving the decal\n         * @param position sets the position of the decal in world coordinates\n         * @param normal sets the normal of the mesh where the decal is applied onto in world coordinates\n         * @param size sets the decal scaling\n         * @param angle sets the angle to rotate the decal\n         * @returns a new Mesh\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateDecal(name: string, sourceMesh: AbstractMesh, position: Vector3, normal: Vector3, size: Vector3, angle: number): Mesh;\n        /** Creates a Capsule Mesh\n         * @param name defines the name of the mesh.\n         * @param options the constructors options used to shape the mesh.\n         * @param scene defines the scene the mesh is scoped to.\n         * @returns the capsule mesh\n         * @see https://doc.babylonjs.com/how_to/capsule_shape\n         * @deprecated Please use MeshBuilder instead\n         */\n        function CreateCapsule(name: string, options: ICreateCapsuleOptions, scene: Scene): Mesh;\n        /**\n         * Extends a mesh to a Goldberg mesh\n         * Warning  the mesh to convert MUST be an import of a perviously exported Goldberg mesh\n         * @param mesh the mesh to convert\n         * @returns the extended mesh\n         * @deprecated Please use ExtendMeshToGoldberg instead\n         */\n        function ExtendToGoldberg(mesh: Mesh): Mesh;\n    }\n}\n/**\n * @internal\n */\nMesh.prototype.setMaterialByID = function (id: string): Mesh {\n    return this.setMaterialById(id);\n};\nMesh.CreateDisc =\n    Mesh.CreateDisc ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateBox =\n    Mesh.CreateBox ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateSphere =\n    Mesh.CreateSphere ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateCylinder =\n    Mesh.CreateCylinder ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateTorusKnot =\n    Mesh.CreateTorusKnot ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateTorus =\n    Mesh.CreateTorus ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreatePlane =\n    Mesh.CreatePlane ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateGround =\n    Mesh.CreateGround ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateTiledGround =\n    Mesh.CreateTiledGround ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateGroundFromHeightMap =\n    Mesh.CreateGroundFromHeightMap ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateTube =\n    Mesh.CreateTube ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreatePolyhedron =\n    Mesh.CreatePolyhedron ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateIcoSphere =\n    Mesh.CreateIcoSphere ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateDecal =\n    Mesh.CreateDecal ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.CreateCapsule =\n    Mesh.CreateCapsule ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\nMesh.ExtendToGoldberg =\n    Mesh.ExtendToGoldberg ||\n        (() => {\n            throw new Error(\"Import MeshBuilder to populate this function\");\n        });\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable, FloatArray, IndicesArray, DeepImmutable } from \"../types\";\r\nimport type { Matrix, Vector2 } from \"../Maths/math.vector\";\r\nimport { Vector3, Vector4, TmpVectors } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { Color3 } from \"../Maths/math.color\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { nativeOverride } from \"../Misc/decorators\";\r\nimport type { Coroutine } from \"../Misc/coroutine\";\r\nimport { makeSyncFunction, runCoroutineSync } from \"../Misc/coroutine\";\r\nimport type { ICreateCapsuleOptions } from \"./Builders/capsuleBuilder\";\r\nimport { RuntimeError, ErrorCodes } from \"../Misc/error\";\r\n\r\ndeclare type Geometry = import(\"../Meshes/geometry\").Geometry;\r\ndeclare type Mesh = import(\"../Meshes/mesh\").Mesh;\r\n\r\ndeclare type PolyhedronData = import(\"./geodesicMesh\").PolyhedronData;\r\n\r\n/**\r\n * Define an interface for all classes that will get and set the data on vertices\r\n */\r\nexport interface IGetSetVerticesData {\r\n    /**\r\n     * Gets a boolean indicating if specific vertex data is present\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns true is data kind is present\r\n     */\r\n    isVerticesDataPresent(kind: string): boolean;\r\n    /**\r\n     * Gets a specific vertex data attached to this geometry. Float data is constructed if the vertex buffer data cannot be returned directly.\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns a float array containing vertex data\r\n     */\r\n    getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray>;\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the indices array or an empty array if the mesh has no geometry\r\n     */\r\n    getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray>;\r\n    /**\r\n     * Set specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the vertex data to use\r\n     * @param updatable defines if the vertex must be flagged as updatable (false as default)\r\n     * @param stride defines the stride to use (0 by default). This value is deduced from the kind value if not specified\r\n     */\r\n    setVerticesData(kind: string, data: FloatArray, updatable: boolean): void;\r\n    /**\r\n     * Update a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\r\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\r\n     */\r\n    updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): void;\r\n    /**\r\n     * Creates a new index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param totalVertices defines the total number of vertices (could be null)\r\n     * @param updatable defines if the index buffer must be flagged as updatable (false by default)\r\n     */\r\n    setIndices(indices: IndicesArray, totalVertices: Nullable<number>, updatable?: boolean): void;\r\n}\r\n\r\n/**\r\n * This class contains the various kinds of data on every vertex of a mesh used in determining its shape and appearance\r\n */\r\nexport class VertexData {\r\n    /**\r\n     * Mesh side orientation : usually the external or front surface\r\n     */\r\n    public static readonly FRONTSIDE = 0;\r\n    /**\r\n     * Mesh side orientation : usually the internal or back surface\r\n     */\r\n    public static readonly BACKSIDE = 1;\r\n    /**\r\n     * Mesh side orientation : both internal and external or front and back surfaces\r\n     */\r\n    public static readonly DOUBLESIDE = 2;\r\n    /**\r\n     * Mesh side orientation : by default, `FRONTSIDE`\r\n     */\r\n    public static readonly DEFAULTSIDE = 0;\r\n\r\n    /**\r\n     * An array of the x, y, z position of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public positions: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z normal vector of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public normals: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z tangent vector of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public tangents: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A second array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs2: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A third array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs3: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fourth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs4: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fifth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs5: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A sixth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs6: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the r, g, b, a, color of each vertex  [...., r, g, b, a, .....]\r\n     */\r\n    public colors: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of indices to the array of matrices produced by bones, each vertex have up to 4 indices (8 if the matricesIndicesExtra is set).\r\n     */\r\n    public matricesIndices: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of weights defining the weight of each indexed matrix in the final computation\r\n     */\r\n    public matricesWeights: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible indices\r\n     */\r\n    public matricesIndicesExtra: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible weights when the number of indices is extended\r\n     */\r\n    public matricesWeightsExtra: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of i, j, k the three vertex indices required for each triangular facet  [...., i, j, k .....]\r\n     */\r\n    public indices: Nullable<IndicesArray>;\r\n\r\n    /**\r\n     * Uses the passed data array to set the set the values for the specified kind of data\r\n     * @param data a linear array of floating numbers\r\n     * @param kind the type of data that is being set, eg positions, colors etc\r\n     */\r\n    public set(data: FloatArray, kind: string) {\r\n        if (!data.length) {\r\n            Logger.Warn(`Setting vertex data kind '${kind}' with an empty array`);\r\n        }\r\n\r\n        switch (kind) {\r\n            case VertexBuffer.PositionKind:\r\n                this.positions = data;\r\n                break;\r\n            case VertexBuffer.NormalKind:\r\n                this.normals = data;\r\n                break;\r\n            case VertexBuffer.TangentKind:\r\n                this.tangents = data;\r\n                break;\r\n            case VertexBuffer.UVKind:\r\n                this.uvs = data;\r\n                break;\r\n            case VertexBuffer.UV2Kind:\r\n                this.uvs2 = data;\r\n                break;\r\n            case VertexBuffer.UV3Kind:\r\n                this.uvs3 = data;\r\n                break;\r\n            case VertexBuffer.UV4Kind:\r\n                this.uvs4 = data;\r\n                break;\r\n            case VertexBuffer.UV5Kind:\r\n                this.uvs5 = data;\r\n                break;\r\n            case VertexBuffer.UV6Kind:\r\n                this.uvs6 = data;\r\n                break;\r\n            case VertexBuffer.ColorKind:\r\n                this.colors = data;\r\n                break;\r\n            case VertexBuffer.MatricesIndicesKind:\r\n                this.matricesIndices = data;\r\n                break;\r\n            case VertexBuffer.MatricesWeightsKind:\r\n                this.matricesWeights = data;\r\n                break;\r\n            case VertexBuffer.MatricesIndicesExtraKind:\r\n                this.matricesIndicesExtra = data;\r\n                break;\r\n            case VertexBuffer.MatricesWeightsExtraKind:\r\n                this.matricesWeightsExtra = data;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Associates the vertexData to the passed Mesh.\r\n     * Sets it as updatable or not (default `false`)\r\n     * @param mesh the mesh the vertexData is applied to\r\n     * @param updatable when used and having the value true allows new data to update the vertexData\r\n     * @returns the VertexData\r\n     */\r\n    public applyToMesh(mesh: Mesh, updatable?: boolean): VertexData {\r\n        this._applyTo(mesh, updatable, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Associates the vertexData to the passed Geometry.\r\n     * Sets it as updatable or not (default `false`)\r\n     * @param geometry the geometry the vertexData is applied to\r\n     * @param updatable when used and having the value true allows new data to update the vertexData\r\n     * @returns VertexData\r\n     */\r\n    public applyToGeometry(geometry: Geometry, updatable?: boolean): VertexData {\r\n        this._applyTo(geometry, updatable, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the associated mesh\r\n     * @param mesh the mesh to be updated\r\n     * @returns VertexData\r\n     */\r\n    public updateMesh(mesh: Mesh): VertexData {\r\n        this._update(mesh);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the associated geometry\r\n     * @param geometry the geometry to be updated\r\n     * @returns VertexData.\r\n     */\r\n    public updateGeometry(geometry: Geometry): VertexData {\r\n        this._update(geometry);\r\n        return this;\r\n    }\r\n\r\n    private readonly _applyTo = makeSyncFunction(this._applyToCoroutine.bind(this));\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public *_applyToCoroutine(meshOrGeometry: IGetSetVerticesData, updatable: boolean = false, isAsync: boolean): Coroutine<VertexData> {\r\n        if (this.positions) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.PositionKind, this.positions, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.normals) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.NormalKind, this.normals, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.tangents) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.TangentKind, this.tangents, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UVKind, this.uvs, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV2Kind, this.uvs2, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV3Kind, this.uvs3, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV4Kind, this.uvs4, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV5Kind, this.uvs5, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV6Kind, this.uvs6, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.colors) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.ColorKind, this.colors, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesIndicesKind, this.matricesIndices, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesWeightsKind, this.matricesWeights, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.indices) {\r\n            meshOrGeometry.setIndices(this.indices, null, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        } else {\r\n            meshOrGeometry.setIndices([], null);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _update(meshOrGeometry: IGetSetVerticesData, updateExtends?: boolean, makeItUnique?: boolean): VertexData {\r\n        if (this.positions) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.PositionKind, this.positions, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.normals) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.NormalKind, this.normals, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.TangentKind, this.tangents, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UVKind, this.uvs, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV2Kind, this.uvs2, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV3Kind, this.uvs3, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV4Kind, this.uvs4, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV5Kind, this.uvs5, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV6Kind, this.uvs6, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.colors) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.ColorKind, this.colors, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesIndicesKind, this.matricesIndices, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesWeightsKind, this.matricesWeights, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.indices) {\r\n            meshOrGeometry.setIndices(this.indices, null);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    @nativeOverride.filter((...[coordinates]: Parameters<typeof VertexData._TransformVector3Coordinates>) => !Array.isArray(coordinates))\r\n    private static _TransformVector3Coordinates(coordinates: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = coordinates.length) {\r\n        const coordinate = TmpVectors.Vector3[0];\r\n        const transformedCoordinate = TmpVectors.Vector3[1];\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            Vector3.FromArrayToRef(coordinates, index, coordinate);\r\n            Vector3.TransformCoordinatesToRef(coordinate, transformation, transformedCoordinate);\r\n            coordinates[index] = transformedCoordinate.x;\r\n            coordinates[index + 1] = transformedCoordinate.y;\r\n            coordinates[index + 2] = transformedCoordinate.z;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[normals]: Parameters<typeof VertexData._TransformVector3Normals>) => !Array.isArray(normals))\r\n    private static _TransformVector3Normals(normals: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = normals.length) {\r\n        const normal = TmpVectors.Vector3[0];\r\n        const transformedNormal = TmpVectors.Vector3[1];\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            Vector3.FromArrayToRef(normals, index, normal);\r\n            Vector3.TransformNormalToRef(normal, transformation, transformedNormal);\r\n            normals[index] = transformedNormal.x;\r\n            normals[index + 1] = transformedNormal.y;\r\n            normals[index + 2] = transformedNormal.z;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[normals]: Parameters<typeof VertexData._TransformVector4Normals>) => !Array.isArray(normals))\r\n    private static _TransformVector4Normals(normals: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = normals.length) {\r\n        const normal = TmpVectors.Vector4[0];\r\n        const transformedNormal = TmpVectors.Vector4[1];\r\n        for (let index = offset; index < offset + length; index += 4) {\r\n            Vector4.FromArrayToRef(normals, index, normal);\r\n            Vector4.TransformNormalToRef(normal, transformation, transformedNormal);\r\n            normals[index] = transformedNormal.x;\r\n            normals[index + 1] = transformedNormal.y;\r\n            normals[index + 2] = transformedNormal.z;\r\n            normals[index + 3] = transformedNormal.w;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[indices]: Parameters<typeof VertexData._FlipFaces>) => !Array.isArray(indices))\r\n    private static _FlipFaces(indices: IndicesArray, offset = 0, length = indices.length) {\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            const tmp = indices[index + 1];\r\n            indices[index + 1] = indices[index + 2];\r\n            indices[index + 2] = tmp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transforms each position and each normal of the vertexData according to the passed Matrix\r\n     * @param matrix the transforming matrix\r\n     * @returns the VertexData\r\n     */\r\n    public transform(matrix: Matrix): VertexData {\r\n        const flip = matrix.determinant() < 0;\r\n        if (this.positions) {\r\n            VertexData._TransformVector3Coordinates(this.positions, matrix);\r\n        }\r\n\r\n        if (this.normals) {\r\n            VertexData._TransformVector3Normals(this.normals, matrix);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            VertexData._TransformVector4Normals(this.tangents, matrix);\r\n        }\r\n\r\n        if (flip && this.indices) {\r\n            VertexData._FlipFaces(this.indices);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Merges the passed VertexData into the current one\r\n     * @param others the VertexData to be merged into the current one\r\n     * @param use32BitsIndices defines a boolean indicating if indices must be store in a 32 bits array\r\n     * @param forceCloneIndices defines a boolean indicating if indices are forced to be cloned\r\n     * @returns the modified VertexData\r\n     */\r\n    public merge(others: VertexData | VertexData[], use32BitsIndices = false, forceCloneIndices = false) {\r\n        const vertexDatas: [vertexData: VertexData, transform?: Matrix][] = Array.isArray(others) ? others.map((other) => [other, undefined]) : [[others, undefined]];\r\n        return runCoroutineSync(this._mergeCoroutine(undefined, vertexDatas, use32BitsIndices, false, forceCloneIndices));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public *_mergeCoroutine(\r\n        transform: Matrix | undefined,\r\n        vertexDatas: (readonly [vertexData: VertexData, transform?: Matrix])[],\r\n        use32BitsIndices = false,\r\n        isAsync: boolean,\r\n        forceCloneIndices: boolean\r\n    ): Coroutine<VertexData> {\r\n        this._validate();\r\n\r\n        const others = vertexDatas.map((vertexData) => vertexData[0]);\r\n\r\n        for (const other of others) {\r\n            other._validate();\r\n\r\n            if (\r\n                !this.normals !== !other.normals ||\r\n                !this.tangents !== !other.tangents ||\r\n                !this.uvs !== !other.uvs ||\r\n                !this.uvs2 !== !other.uvs2 ||\r\n                !this.uvs3 !== !other.uvs3 ||\r\n                !this.uvs4 !== !other.uvs4 ||\r\n                !this.uvs5 !== !other.uvs5 ||\r\n                !this.uvs6 !== !other.uvs6 ||\r\n                !this.colors !== !other.colors ||\r\n                !this.matricesIndices !== !other.matricesIndices ||\r\n                !this.matricesWeights !== !other.matricesWeights ||\r\n                !this.matricesIndicesExtra !== !other.matricesIndicesExtra ||\r\n                !this.matricesWeightsExtra !== !other.matricesWeightsExtra\r\n            ) {\r\n                throw new Error(\"Cannot merge vertex data that do not have the same set of attributes\");\r\n            }\r\n        }\r\n\r\n        const totalIndices = others.reduce((indexSum, vertexData) => indexSum + (vertexData.indices?.length ?? 0), this.indices?.length ?? 0);\r\n        const sliceIndices = forceCloneIndices || others.some((vertexData) => vertexData.indices === this.indices);\r\n        let indices = sliceIndices ? this.indices?.slice() : this.indices;\r\n        if (totalIndices > 0) {\r\n            let indicesOffset = indices?.length ?? 0;\r\n\r\n            if (!indices) {\r\n                indices = new Array<number>(totalIndices);\r\n            }\r\n\r\n            if (indices.length !== totalIndices) {\r\n                if (Array.isArray(indices)) {\r\n                    indices.length = totalIndices;\r\n                } else {\r\n                    const temp = use32BitsIndices || indices instanceof Uint32Array ? new Uint32Array(totalIndices) : new Uint16Array(totalIndices);\r\n                    temp.set(indices);\r\n                    indices = temp;\r\n                }\r\n\r\n                if (transform && transform.determinant() < 0) {\r\n                    VertexData._FlipFaces(indices, 0, indicesOffset);\r\n                }\r\n            }\r\n\r\n            let positionsOffset = this.positions ? this.positions.length / 3 : 0;\r\n            for (const [other, transform] of vertexDatas) {\r\n                if (other.indices) {\r\n                    for (let index = 0; index < other.indices.length; index++) {\r\n                        indices[indicesOffset + index] = other.indices[index] + positionsOffset;\r\n                    }\r\n\r\n                    if (transform && transform.determinant() < 0) {\r\n                        VertexData._FlipFaces(indices, indicesOffset, other.indices.length);\r\n                    }\r\n\r\n                    // The call to _validate already checked for positions\r\n                    positionsOffset += other.positions!.length / 3;\r\n                    indicesOffset += other.indices.length;\r\n\r\n                    if (isAsync) {\r\n                        yield;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.indices = indices!;\r\n\r\n        this.positions = VertexData._MergeElement(\r\n            VertexBuffer.PositionKind,\r\n            this.positions,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].positions, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.normals = VertexData._MergeElement(\r\n            VertexBuffer.NormalKind,\r\n            this.normals,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].normals, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.tangents = VertexData._MergeElement(\r\n            VertexBuffer.TangentKind,\r\n            this.tangents,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].tangents, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.uvs = VertexData._MergeElement(\r\n            VertexBuffer.UVKind,\r\n            this.uvs,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].uvs, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.uvs2 = VertexData._MergeElement(\r\n            VertexBuffer.UV2Kind,\r\n            this.uvs2,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].uvs2, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.uvs3 = VertexData._MergeElement(\r\n            VertexBuffer.UV3Kind,\r\n            this.uvs3,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].uvs3, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.uvs4 = VertexData._MergeElement(\r\n            VertexBuffer.UV4Kind,\r\n            this.uvs4,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].uvs4, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.uvs5 = VertexData._MergeElement(\r\n            VertexBuffer.UV5Kind,\r\n            this.uvs5,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].uvs5, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.uvs6 = VertexData._MergeElement(\r\n            VertexBuffer.UV6Kind,\r\n            this.uvs6,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].uvs6, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.colors = VertexData._MergeElement(\r\n            VertexBuffer.ColorKind,\r\n            this.colors,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].colors, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.matricesIndices = VertexData._MergeElement(\r\n            VertexBuffer.MatricesIndicesKind,\r\n            this.matricesIndices,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].matricesIndices, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.matricesWeights = VertexData._MergeElement(\r\n            VertexBuffer.MatricesWeightsKind,\r\n            this.matricesWeights,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].matricesWeights, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.matricesIndicesExtra = VertexData._MergeElement(\r\n            VertexBuffer.MatricesIndicesExtraKind,\r\n            this.matricesIndicesExtra,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].matricesIndicesExtra, other[1]])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        this.matricesWeightsExtra = VertexData._MergeElement(\r\n            VertexBuffer.MatricesWeightsExtraKind,\r\n            this.matricesWeightsExtra,\r\n            transform,\r\n            vertexDatas.map((other) => [other[0].matricesWeightsExtra, other[1]])\r\n        );\r\n\r\n        return this;\r\n    }\r\n\r\n    private static _MergeElement(\r\n        kind: string,\r\n        source: Nullable<FloatArray>,\r\n        transform: Matrix | undefined,\r\n        others: readonly (readonly [element: Nullable<FloatArray>, transform?: Matrix])[]\r\n    ): Nullable<FloatArray> {\r\n        const nonNullOthers = others.filter((other): other is [element: FloatArray, transform?: Matrix] => other[0] !== null && other[0] !== undefined);\r\n\r\n        // If there is no source to copy and no other non-null sources then skip this element.\r\n        if (!source && nonNullOthers.length == 0) {\r\n            return source;\r\n        }\r\n\r\n        if (!source) {\r\n            return this._MergeElement(kind, nonNullOthers[0][0], nonNullOthers[0][1], nonNullOthers.slice(1));\r\n        }\r\n\r\n        const len = nonNullOthers.reduce((sumLen, elements) => sumLen + elements[0].length, source.length);\r\n\r\n        const transformRange =\r\n            kind === VertexBuffer.PositionKind\r\n                ? VertexData._TransformVector3Coordinates\r\n                : kind === VertexBuffer.NormalKind\r\n                ? VertexData._TransformVector3Normals\r\n                : kind === VertexBuffer.TangentKind\r\n                ? VertexData._TransformVector4Normals\r\n                : () => {};\r\n\r\n        if (source instanceof Float32Array) {\r\n            // use non-loop method when the source is Float32Array\r\n            const ret32 = new Float32Array(len);\r\n            ret32.set(source);\r\n            transform && transformRange(ret32, transform, 0, source.length);\r\n\r\n            let offset = source.length;\r\n            for (const [vertexData, transform] of nonNullOthers) {\r\n                ret32.set(vertexData, offset);\r\n                transform && transformRange(ret32, transform, offset, vertexData.length);\r\n                offset += vertexData.length;\r\n            }\r\n            return ret32;\r\n        } else {\r\n            // don't use concat as it is super slow, just loop for other cases\r\n            const ret = new Array<number>(len);\r\n            for (let i = 0; i < source.length; i++) {\r\n                ret[i] = source[i];\r\n            }\r\n            transform && transformRange(ret, transform, 0, source.length);\r\n\r\n            let offset = source.length;\r\n            for (const [vertexData, transform] of nonNullOthers) {\r\n                for (let i = 0; i < vertexData.length; i++) {\r\n                    ret[offset + i] = vertexData[i];\r\n                }\r\n                transform && transformRange(ret, transform, offset, vertexData.length);\r\n                offset += vertexData.length;\r\n            }\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    private _validate(): void {\r\n        if (!this.positions) {\r\n            throw new RuntimeError(\"Positions are required\", ErrorCodes.MeshInvalidPositionsError);\r\n        }\r\n\r\n        const getElementCount = (kind: string, values: FloatArray) => {\r\n            const stride = VertexBuffer.DeduceStride(kind);\r\n            if (values.length % stride !== 0) {\r\n                throw new Error(\"The \" + kind + \"s array count must be a multiple of \" + stride);\r\n            }\r\n\r\n            return values.length / stride;\r\n        };\r\n\r\n        const positionsElementCount = getElementCount(VertexBuffer.PositionKind, this.positions);\r\n\r\n        const validateElementCount = (kind: string, values: FloatArray) => {\r\n            const elementCount = getElementCount(kind, values);\r\n            if (elementCount !== positionsElementCount) {\r\n                throw new Error(\"The \" + kind + \"s element count (\" + elementCount + \") does not match the positions count (\" + positionsElementCount + \")\");\r\n            }\r\n        };\r\n\r\n        if (this.normals) {\r\n            validateElementCount(VertexBuffer.NormalKind, this.normals);\r\n        }\r\n        if (this.tangents) {\r\n            validateElementCount(VertexBuffer.TangentKind, this.tangents);\r\n        }\r\n        if (this.uvs) {\r\n            validateElementCount(VertexBuffer.UVKind, this.uvs);\r\n        }\r\n        if (this.uvs2) {\r\n            validateElementCount(VertexBuffer.UV2Kind, this.uvs2);\r\n        }\r\n        if (this.uvs3) {\r\n            validateElementCount(VertexBuffer.UV3Kind, this.uvs3);\r\n        }\r\n        if (this.uvs4) {\r\n            validateElementCount(VertexBuffer.UV4Kind, this.uvs4);\r\n        }\r\n        if (this.uvs5) {\r\n            validateElementCount(VertexBuffer.UV5Kind, this.uvs5);\r\n        }\r\n        if (this.uvs6) {\r\n            validateElementCount(VertexBuffer.UV6Kind, this.uvs6);\r\n        }\r\n        if (this.colors) {\r\n            validateElementCount(VertexBuffer.ColorKind, this.colors);\r\n        }\r\n        if (this.matricesIndices) {\r\n            validateElementCount(VertexBuffer.MatricesIndicesKind, this.matricesIndices);\r\n        }\r\n        if (this.matricesWeights) {\r\n            validateElementCount(VertexBuffer.MatricesWeightsKind, this.matricesWeights);\r\n        }\r\n        if (this.matricesIndicesExtra) {\r\n            validateElementCount(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra);\r\n        }\r\n        if (this.matricesWeightsExtra) {\r\n            validateElementCount(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the VertexData\r\n     * @returns a serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        if (this.positions) {\r\n            serializationObject.positions = this.positions;\r\n        }\r\n\r\n        if (this.normals) {\r\n            serializationObject.normals = this.normals;\r\n        }\r\n\r\n        if (this.tangents) {\r\n            serializationObject.tangents = this.tangents;\r\n        }\r\n\r\n        if (this.uvs) {\r\n            serializationObject.uvs = this.uvs;\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            serializationObject.uvs2 = this.uvs2;\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            serializationObject.uvs3 = this.uvs3;\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            serializationObject.uvs4 = this.uvs4;\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            serializationObject.uvs5 = this.uvs5;\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            serializationObject.uvs6 = this.uvs6;\r\n        }\r\n\r\n        if (this.colors) {\r\n            serializationObject.colors = this.colors;\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            serializationObject.matricesIndices = this.matricesIndices;\r\n            serializationObject.matricesIndices._isExpanded = true;\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            serializationObject.matricesWeights = this.matricesWeights;\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            serializationObject.matricesIndicesExtra = this.matricesIndicesExtra;\r\n            serializationObject.matricesIndicesExtra._isExpanded = true;\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            serializationObject.matricesWeightsExtra = this.matricesWeightsExtra;\r\n        }\r\n\r\n        serializationObject.indices = this.indices;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Extracts the vertexData from a mesh\r\n     * @param mesh the mesh from which to extract the VertexData\r\n     * @param copyWhenShared defines if the VertexData must be cloned when shared between multiple meshes, optional, default false\r\n     * @param forceCopy indicating that the VertexData must be cloned, optional, default false\r\n     * @returns the object VertexData associated to the passed mesh\r\n     */\r\n    public static ExtractFromMesh(mesh: Mesh, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        return VertexData._ExtractFrom(mesh, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    /**\r\n     * Extracts the vertexData from the geometry\r\n     * @param geometry the geometry from which to extract the VertexData\r\n     * @param copyWhenShared defines if the VertexData must be cloned when the geometry is shared between multiple meshes, optional, default false\r\n     * @param forceCopy indicating that the VertexData must be cloned, optional, default false\r\n     * @returns the object VertexData associated to the passed mesh\r\n     */\r\n    public static ExtractFromGeometry(geometry: Geometry, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        return VertexData._ExtractFrom(geometry, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    private static _ExtractFrom(meshOrGeometry: IGetSetVerticesData, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        const result = new VertexData();\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            result.positions = meshOrGeometry.getVerticesData(VertexBuffer.PositionKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            result.normals = meshOrGeometry.getVerticesData(VertexBuffer.NormalKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            result.tangents = meshOrGeometry.getVerticesData(VertexBuffer.TangentKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            result.uvs = meshOrGeometry.getVerticesData(VertexBuffer.UVKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n            result.uvs2 = meshOrGeometry.getVerticesData(VertexBuffer.UV2Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV3Kind)) {\r\n            result.uvs3 = meshOrGeometry.getVerticesData(VertexBuffer.UV3Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV4Kind)) {\r\n            result.uvs4 = meshOrGeometry.getVerticesData(VertexBuffer.UV4Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV5Kind)) {\r\n            result.uvs5 = meshOrGeometry.getVerticesData(VertexBuffer.UV5Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV6Kind)) {\r\n            result.uvs6 = meshOrGeometry.getVerticesData(VertexBuffer.UV6Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            result.colors = meshOrGeometry.getVerticesData(VertexBuffer.ColorKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            result.matricesIndices = meshOrGeometry.getVerticesData(VertexBuffer.MatricesIndicesKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            result.matricesWeights = meshOrGeometry.getVerticesData(VertexBuffer.MatricesWeightsKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesIndicesExtraKind)) {\r\n            result.matricesIndicesExtra = meshOrGeometry.getVerticesData(VertexBuffer.MatricesIndicesExtraKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\r\n            result.matricesWeightsExtra = meshOrGeometry.getVerticesData(VertexBuffer.MatricesWeightsExtraKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        result.indices = meshOrGeometry.getIndices(copyWhenShared, forceCopy);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Ribbon\r\n     * @param options an object used to set the following optional parameters for the ribbon, required but can be empty\r\n     * * pathArray array of paths, each of which an array of successive Vector3\r\n     * * closeArray creates a seam between the first and the last paths of the pathArray, optional, default false\r\n     * * closePath creates a seam between the first and the last points of each path of the path array, optional, default false\r\n     * * offset a positive integer, only used when pathArray contains a single path (offset = 10 means the point 1 is joined to the point 11), default rounded half size of the pathArray length\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * * invertUV swaps in the U and V coordinates when applying a texture, optional, default false\r\n     * * uvs a linear array, of length 2 * number of vertices, of custom UV values, optional\r\n     * * colors a linear array, of length 4 * number of vertices, of custom color values, optional\r\n     * @param options.pathArray\r\n     * @param options.closeArray\r\n     * @param options.closePath\r\n     * @param options.offset\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @param options.invertUV\r\n     * @param options.uvs\r\n     * @param options.colors\r\n     * @returns the VertexData of the ribbon\r\n     * @deprecated use CreateRibbonVertexData instead\r\n     */\r\n    public static CreateRibbon(options: {\r\n        pathArray: Vector3[][];\r\n        closeArray?: boolean;\r\n        closePath?: boolean;\r\n        offset?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        invertUV?: boolean;\r\n        uvs?: Vector2[];\r\n        colors?: Color4[];\r\n    }): VertexData {\r\n        throw _WarnImport(\"ribbonBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a box\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n     * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n     * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n     * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n     * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n     * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param options.size\r\n     * @param options.width\r\n     * @param options.height\r\n     * @param options.depth\r\n     * @param options.faceUV\r\n     * @param options.faceColors\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @returns the VertexData of the box\r\n     * @deprecated Please use CreateBoxVertexData from the BoxBuilder file instead\r\n     */\r\n    public static CreateBox(options: {\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"boxBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a tiled box\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * faceTiles sets the pattern, tile size and number of tiles for a face\r\n     * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n     * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * @param options.pattern\r\n     * @param options.width\r\n     * @param options.height\r\n     * @param options.depth\r\n     * @param options.tileSize\r\n     * @param options.tileWidth\r\n     * @param options.tileHeight\r\n     * @param options.alignHorizontal\r\n     * @param options.alignVertical\r\n     * @param options.faceUV\r\n     * @param options.faceColors\r\n     * @param options.sideOrientation\r\n     * @returns the VertexData of the box\r\n     * @deprecated Please use CreateTiledBoxVertexData instead\r\n     */\r\n    public static CreateTiledBox(options: {\r\n        pattern?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n    }): VertexData {\r\n        throw _WarnImport(\"tiledBoxBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a tiled plane\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * pattern a limited pattern arrangement depending on the number\r\n     * * tileSize sets the width, height and depth of the tile to the value of size, optional default 1\r\n     * * tileWidth sets the width (x direction) of the tile, overwrites the width set by size, optional, default size\r\n     * * tileHeight sets the height (y direction) of the tile, overwrites the height set by size, optional, default size\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param options.pattern\r\n     * @param options.tileSize\r\n     * @param options.tileWidth\r\n     * @param options.tileHeight\r\n     * @param options.size\r\n     * @param options.width\r\n     * @param options.height\r\n     * @param options.alignHorizontal\r\n     * @param options.alignVertical\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @returns the VertexData of the tiled plane\r\n     * @deprecated use CreateTiledPlaneVertexData instead\r\n     */\r\n    public static CreateTiledPlane(options: {\r\n        pattern?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"tiledPlaneBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for an ellipsoid, defaults to a sphere\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * segments sets the number of horizontal strips optional, default 32\r\n     * * diameter sets the axes dimensions, diameterX, diameterY and diameterZ to the value of diameter, optional default 1\r\n     * * diameterX sets the diameterX (x direction) of the ellipsoid, overwrites the diameterX set by diameter, optional, default diameter\r\n     * * diameterY sets the diameterY (y direction) of the ellipsoid, overwrites the diameterY set by diameter, optional, default diameter\r\n     * * diameterZ sets the diameterZ (z direction) of the ellipsoid, overwrites the diameterZ set by diameter, optional, default diameter\r\n     * * arc a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the circumference (latitude) given by the arc value, optional, default 1\r\n     * * slice a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the height (latitude) given by the arc value, optional, default 1\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param options.segments\r\n     * @param options.diameter\r\n     * @param options.diameterX\r\n     * @param options.diameterY\r\n     * @param options.diameterZ\r\n     * @param options.arc\r\n     * @param options.slice\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @returns the VertexData of the ellipsoid\r\n     * @deprecated use CreateSphereVertexData instead\r\n     */\r\n    public static CreateSphere(options: {\r\n        segments?: number;\r\n        diameter?: number;\r\n        diameterX?: number;\r\n        diameterY?: number;\r\n        diameterZ?: number;\r\n        arc?: number;\r\n        slice?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"sphereBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a cylinder, cone or prism\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * height sets the height (y direction) of the cylinder, optional, default 2\r\n     * * diameterTop sets the diameter of the top of the cone, overwrites diameter,  optional, default diameter\r\n     * * diameterBottom sets the diameter of the bottom of the cone, overwrites diameter,  optional, default diameter\r\n     * * diameter sets the diameter of the top and bottom of the cone, optional default 1\r\n     * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n     * * subdivisions` the number of rings along the cylinder height, optional, default 1\r\n     * * arc a number from 0 to 1, to create an unclosed cylinder based on the fraction of the circumference given by the arc value, optional, default 1\r\n     * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * * hasRings when true makes each subdivision independently treated as a face for faceUV and faceColors, optional, default false\r\n     * * enclose when true closes an open cylinder by adding extra flat faces between the height axis and vertical edges, think cut cake\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param options.height\r\n     * @param options.diameterTop\r\n     * @param options.diameterBottom\r\n     * @param options.diameter\r\n     * @param options.tessellation\r\n     * @param options.subdivisions\r\n     * @param options.arc\r\n     * @param options.faceColors\r\n     * @param options.faceUV\r\n     * @param options.hasRings\r\n     * @param options.enclose\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @returns the VertexData of the cylinder, cone or prism\r\n     * @deprecated please use CreateCylinderVertexData instead\r\n     */\r\n    public static CreateCylinder(options: {\r\n        height?: number;\r\n        diameterTop?: number;\r\n        diameterBottom?: number;\r\n        diameter?: number;\r\n        tessellation?: number;\r\n        subdivisions?: number;\r\n        arc?: number;\r\n        faceColors?: Color4[];\r\n        faceUV?: Vector4[];\r\n        hasRings?: boolean;\r\n        enclose?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"cylinderBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a torus\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * diameter the diameter of the torus, optional default 1\r\n     * * thickness the diameter of the tube forming the torus, optional default 0.5\r\n     * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param options.diameter\r\n     * @param options.thickness\r\n     * @param options.tessellation\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @returns the VertexData of the torus\r\n     * @deprecated use CreateTorusVertexData instead\r\n     */\r\n    public static CreateTorus(options: {\r\n        diameter?: number;\r\n        thickness?: number;\r\n        tessellation?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"torusBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the LineSystem\r\n     * @param options an object used to set the following optional parameters for the LineSystem, required but can be empty\r\n     *  - lines an array of lines, each line being an array of successive Vector3\r\n     *  - colors an array of line colors, each of the line colors being an array of successive Color4, one per line point\r\n     * @param options.lines\r\n     * @param options.colors\r\n     * @returns the VertexData of the LineSystem\r\n     * @deprecated use CreateLineSystemVertexData instead\r\n     */\r\n    public static CreateLineSystem(options: { lines: Vector3[][]; colors?: Nullable<Color4[][]> }): VertexData {\r\n        throw _WarnImport(\"linesBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Create the VertexData for a DashedLines\r\n     * @param options an object used to set the following optional parameters for the DashedLines, required but can be empty\r\n     *  - points an array successive Vector3\r\n     *  - dashSize the size of the dashes relative to the dash number, optional, default 3\r\n     *  - gapSize the size of the gap between two successive dashes relative to the dash number, optional, default 1\r\n     *  - dashNb the intended total number of dashes, optional, default 200\r\n     * @param options.points\r\n     * @param options.dashSize\r\n     * @param options.gapSize\r\n     * @param options.dashNb\r\n     * @returns the VertexData for the DashedLines\r\n     * @deprecated use CreateDashedLinesVertexData instead\r\n     */\r\n    public static CreateDashedLines(options: { points: Vector3[]; dashSize?: number; gapSize?: number; dashNb?: number }): VertexData {\r\n        throw _WarnImport(\"linesBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Ground\r\n     * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n     *  - width the width (x direction) of the ground, optional, default 1\r\n     *  - height the height (z direction) of the ground, optional, default 1\r\n     *  - subdivisions the number of subdivisions per side, optional, default 1\r\n     * @param options.width\r\n     * @param options.height\r\n     * @param options.subdivisions\r\n     * @param options.subdivisionsX\r\n     * @param options.subdivisionsY\r\n     * @returns the VertexData of the Ground\r\n     * @deprecated Please use CreateGroundVertexData instead\r\n     */\r\n    public static CreateGround(options: { width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdivisionsY?: number }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a TiledGround by subdividing the ground into tiles\r\n     * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n     * * xmin the ground minimum X coordinate, optional, default -1\r\n     * * zmin the ground minimum Z coordinate, optional, default -1\r\n     * * xmax the ground maximum X coordinate, optional, default 1\r\n     * * zmax the ground maximum Z coordinate, optional, default 1\r\n     * * subdivisions a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the ground width and height creating 'tiles', default {w: 6, h: 6}\r\n     * * precision a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the tile width and height, default {w: 2, h: 2}\r\n     * @param options.xmin\r\n     * @param options.zmin\r\n     * @param options.xmax\r\n     * @param options.zmax\r\n     * @param options.subdivisions\r\n     * @param options.subdivisions.w\r\n     * @param options.subdivisions.h\r\n     * @param options.precision\r\n     * @param options.precision.w\r\n     * @param options.precision.h\r\n     * @returns the VertexData of the TiledGround\r\n     * @deprecated use CreateTiledGroundVertexData instead\r\n     */\r\n    public static CreateTiledGround(options: {\r\n        xmin: number;\r\n        zmin: number;\r\n        xmax: number;\r\n        zmax: number;\r\n        subdivisions?: { w: number; h: number };\r\n        precision?: { w: number; h: number };\r\n    }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the Ground designed from a heightmap\r\n     * @param options an object used to set the following parameters for the Ground, required and provided by CreateGroundFromHeightMap\r\n     * * width the width (x direction) of the ground\r\n     * * height the height (z direction) of the ground\r\n     * * subdivisions the number of subdivisions per side\r\n     * * minHeight the minimum altitude on the ground, optional, default 0\r\n     * * maxHeight the maximum altitude on the ground, optional default 1\r\n     * * colorFilter the filter to apply to the image pixel colors to compute the height, optional Color3, default (0.3, 0.59, 0.11)\r\n     * * buffer the array holding the image color data\r\n     * * bufferWidth the width of image\r\n     * * bufferHeight the height of image\r\n     * * alphaFilter Remove any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n     * @param options.width\r\n     * @param options.height\r\n     * @param options.subdivisions\r\n     * @param options.minHeight\r\n     * @param options.maxHeight\r\n     * @param options.colorFilter\r\n     * @param options.buffer\r\n     * @param options.bufferWidth\r\n     * @param options.bufferHeight\r\n     * @param options.alphaFilter\r\n     * @returns the VertexData of the Ground designed from a heightmap\r\n     * @deprecated use CreateGroundFromHeightMapVertexData instead\r\n     */\r\n    public static CreateGroundFromHeightMap(options: {\r\n        width: number;\r\n        height: number;\r\n        subdivisions: number;\r\n        minHeight: number;\r\n        maxHeight: number;\r\n        colorFilter: Color3;\r\n        buffer: Uint8Array;\r\n        bufferWidth: number;\r\n        bufferHeight: number;\r\n        alphaFilter: number;\r\n    }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Plane\r\n     * @param options an object used to set the following optional parameters for the plane, required but can be empty\r\n     * * size sets the width and height of the plane to the value of size, optional default 1\r\n     * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\r\n     * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param options.size\r\n     * @param options.width\r\n     * @param options.height\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @returns the VertexData of the box\r\n     * @deprecated use CreatePlaneVertexData instead\r\n     */\r\n    public static CreatePlane(options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n        throw _WarnImport(\"planeBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the Disc or regular Polygon\r\n     * @param options an object used to set the following optional parameters for the disc, required but can be empty\r\n     * * radius the radius of the disc, optional default 0.5\r\n     * * tessellation the number of polygon sides, optional, default 64\r\n     * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param options.radius\r\n     * @param options.tessellation\r\n     * @param options.arc\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @returns the VertexData of the box\r\n     * @deprecated use CreateDiscVertexData instead\r\n     */\r\n    public static CreateDisc(options: { radius?: number; tessellation?: number; arc?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n        throw _WarnImport(\"discBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for an irregular Polygon in the XoZ plane using a mesh built by polygonTriangulation.build()\r\n     * All parameters are provided by CreatePolygon as needed\r\n     * @param polygon a mesh built from polygonTriangulation.build()\r\n     * @param sideOrientation takes the values Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * @param fUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * @param fColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * @param frontUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param wrap a boolean, default false, when true and fUVs used texture is wrapped around all sides, when false texture is applied side\r\n     * @returns the VertexData of the Polygon\r\n     * @deprecated use CreatePolygonVertexData instead\r\n     */\r\n    public static CreatePolygon(polygon: Mesh, sideOrientation: number, fUV?: Vector4[], fColors?: Color4[], frontUVs?: Vector4, backUVs?: Vector4, wrap?: boolean): VertexData {\r\n        throw _WarnImport(\"polygonBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the IcoSphere\r\n     * @param options an object used to set the following optional parameters for the IcoSphere, required but can be empty\r\n     * * radius the radius of the IcoSphere, optional default 1\r\n     * * radiusX allows stretching in the x direction, optional, default radius\r\n     * * radiusY allows stretching in the y direction, optional, default radius\r\n     * * radiusZ allows stretching in the z direction, optional, default radius\r\n     * * flat when true creates a flat shaded mesh, optional, default true\r\n     * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param options.radius\r\n     * @param options.radiusX\r\n     * @param options.radiusY\r\n     * @param options.radiusZ\r\n     * @param options.flat\r\n     * @param options.subdivisions\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @returns the VertexData of the IcoSphere\r\n     * @deprecated use CreateIcoSphereVertexData instead\r\n     */\r\n    public static CreateIcoSphere(options: {\r\n        radius?: number;\r\n        radiusX?: number;\r\n        radiusY?: number;\r\n        radiusZ?: number;\r\n        flat?: boolean;\r\n        subdivisions?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"icoSphereBuilder\");\r\n    }\r\n\r\n    // inspired from // http://stemkoski.github.io/Three.js/Polyhedra.html\r\n    /**\r\n     * Creates the VertexData for a Polyhedron\r\n     * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n     * * type provided types are:\r\n     *  * 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\r\n     *  * 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\r\n     * * size the size of the IcoSphere, optional default 1\r\n     * * sizeX allows stretching in the x direction, optional, default size\r\n     * * sizeY allows stretching in the y direction, optional, default size\r\n     * * sizeZ allows stretching in the z direction, optional, default size\r\n     * * custom a number that overwrites the type to create from an extended set of polyhedron from https://www.babylonjs-playground.com/#21QRSK#15 with minimised editor\r\n     * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * * flat when true creates a flat shaded mesh, optional, default true\r\n     * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param options.type\r\n     * @param options.size\r\n     * @param options.sizeX\r\n     * @param options.sizeY\r\n     * @param options.sizeZ\r\n     * @param options.custom\r\n     * @param options.faceUV\r\n     * @param options.faceColors\r\n     * @param options.flat\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @returns the VertexData of the Polyhedron\r\n     * @deprecated use CreatePolyhedronVertexData instead\r\n     */\r\n    public static CreatePolyhedron(options: {\r\n        type?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        custom?: any;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        flat?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"polyhedronBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Capsule, inspired from https://github.com/maximeq/three-js-capsule-geometry/blob/master/src/CapsuleBufferGeometry.js\r\n     * @param options an object used to set the following optional parameters for the capsule, required but can be empty\r\n     * @returns the VertexData of the Capsule\r\n     * @deprecated Please use CreateCapsuleVertexData from the capsuleBuilder file instead\r\n     */\r\n    public static CreateCapsule(\r\n        options: ICreateCapsuleOptions = {\r\n            orientation: Vector3.Up(),\r\n            subdivisions: 2,\r\n            tessellation: 16,\r\n            height: 1,\r\n            radius: 0.25,\r\n            capSubdivisions: 6,\r\n        }\r\n    ): VertexData {\r\n        throw _WarnImport(\"capsuleBuilder\");\r\n    }\r\n\r\n    // based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n    /**\r\n     * Creates the VertexData for a TorusKnot\r\n     * @param options an object used to set the following optional parameters for the TorusKnot, required but can be empty\r\n     * * radius the radius of the torus knot, optional, default 2\r\n     * * tube the thickness of the tube, optional, default 0.5\r\n     * * radialSegments the number of sides on each tube segments, optional, default 32\r\n     * * tubularSegments the number of tubes to decompose the knot into, optional, default 32\r\n     * * p the number of windings around the z axis, optional,  default 2\r\n     * * q the number of windings around the x axis, optional,  default 3\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param options.radius\r\n     * @param options.tube\r\n     * @param options.radialSegments\r\n     * @param options.tubularSegments\r\n     * @param options.p\r\n     * @param options.q\r\n     * @param options.sideOrientation\r\n     * @param options.frontUVs\r\n     * @param options.backUVs\r\n     * @returns the VertexData of the Torus Knot\r\n     * @deprecated use CreateTorusKnotVertexData instead\r\n     */\r\n    public static CreateTorusKnot(options: {\r\n        radius?: number;\r\n        tube?: number;\r\n        radialSegments?: number;\r\n        tubularSegments?: number;\r\n        p?: number;\r\n        q?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"torusKnotBuilder\");\r\n    }\r\n\r\n    // Tools\r\n\r\n    /**\r\n     * Compute normals for given positions and indices\r\n     * @param positions an array of vertex positions, [...., x, y, z, ......]\r\n     * @param indices an array of indices in groups of three for each triangular facet, [...., i, j, k, ......]\r\n     * @param normals an array of vertex normals, [...., x, y, z, ......]\r\n     * @param options an object used to set the following optional parameters for the TorusKnot, optional\r\n     * * facetNormals : optional array of facet normals (vector3)\r\n     * * facetPositions : optional array of facet positions (vector3)\r\n     * * facetPartitioning : optional partitioning array. facetPositions is required for facetPartitioning computation\r\n     * * ratio : optional partitioning ratio / bounding box, required for facetPartitioning computation\r\n     * * bInfo : optional bounding info, required for facetPartitioning computation\r\n     * * bbSize : optional bounding box size data, required for facetPartitioning computation\r\n     * * subDiv : optional partitioning data about subdivisions on  each axis (int), required for facetPartitioning computation\r\n     * * useRightHandedSystem: optional boolean to for right handed system computation\r\n     * * depthSort : optional boolean to enable the facet depth sort computation\r\n     * * distanceTo : optional Vector3 to compute the facet depth from this location\r\n     * * depthSortedFacets : optional array of depthSortedFacets to store the facet distances from the reference location\r\n     * @param options.facetNormals\r\n     * @param options.facetPositions\r\n     * @param options.facetPartitioning\r\n     * @param options.ratio\r\n     * @param options.bInfo\r\n     * @param options.bbSize\r\n     * @param options.subDiv\r\n     * @param options.useRightHandedSystem\r\n     * @param options.depthSort\r\n     * @param options.distanceTo\r\n     * @param options.depthSortedFacets\r\n     */\r\n    public static ComputeNormals(\r\n        positions: any,\r\n        indices: any,\r\n        normals: any,\r\n        options?: {\r\n            facetNormals?: any;\r\n            facetPositions?: any;\r\n            facetPartitioning?: any;\r\n            ratio?: number;\r\n            bInfo?: any;\r\n            bbSize?: Vector3;\r\n            subDiv?: any;\r\n            useRightHandedSystem?: boolean;\r\n            depthSort?: boolean;\r\n            distanceTo?: Vector3;\r\n            depthSortedFacets?: any;\r\n        }\r\n    ): void {\r\n        // temporary scalar variables\r\n        let index = 0; // facet index\r\n        let p1p2x = 0.0; // p1p2 vector x coordinate\r\n        let p1p2y = 0.0; // p1p2 vector y coordinate\r\n        let p1p2z = 0.0; // p1p2 vector z coordinate\r\n        let p3p2x = 0.0; // p3p2 vector x coordinate\r\n        let p3p2y = 0.0; // p3p2 vector y coordinate\r\n        let p3p2z = 0.0; // p3p2 vector z coordinate\r\n        let faceNormalx = 0.0; // facet normal x coordinate\r\n        let faceNormaly = 0.0; // facet normal y coordinate\r\n        let faceNormalz = 0.0; // facet normal z coordinate\r\n        let length = 0.0; // facet normal length before normalization\r\n        let v1x = 0; // vector1 x index in the positions array\r\n        let v1y = 0; // vector1 y index in the positions array\r\n        let v1z = 0; // vector1 z index in the positions array\r\n        let v2x = 0; // vector2 x index in the positions array\r\n        let v2y = 0; // vector2 y index in the positions array\r\n        let v2z = 0; // vector2 z index in the positions array\r\n        let v3x = 0; // vector3 x index in the positions array\r\n        let v3y = 0; // vector3 y index in the positions array\r\n        let v3z = 0; // vector3 z index in the positions array\r\n        let computeFacetNormals = false;\r\n        let computeFacetPositions = false;\r\n        let computeFacetPartitioning = false;\r\n        let computeDepthSort = false;\r\n        let faceNormalSign = 1;\r\n        let ratio = 0;\r\n        let distanceTo: Nullable<Vector3> = null;\r\n        if (options) {\r\n            computeFacetNormals = options.facetNormals ? true : false;\r\n            computeFacetPositions = options.facetPositions ? true : false;\r\n            computeFacetPartitioning = options.facetPartitioning ? true : false;\r\n            faceNormalSign = options.useRightHandedSystem === true ? -1 : 1;\r\n            ratio = options.ratio || 0;\r\n            computeDepthSort = options.depthSort ? true : false;\r\n            distanceTo = <Vector3>options.distanceTo;\r\n            if (computeDepthSort) {\r\n                if (distanceTo === undefined) {\r\n                    distanceTo = Vector3.Zero();\r\n                }\r\n            }\r\n        }\r\n\r\n        // facetPartitioning reinit if needed\r\n        let xSubRatio = 0;\r\n        let ySubRatio = 0;\r\n        let zSubRatio = 0;\r\n        let subSq = 0;\r\n        if (computeFacetPartitioning && options && options.bbSize) {\r\n            //let bbSizeMax = options.bbSize.x > options.bbSize.y ? options.bbSize.x : options.bbSize.y;\r\n            //bbSizeMax = bbSizeMax > options.bbSize.z ? bbSizeMax : options.bbSize.z;\r\n            xSubRatio = (options.subDiv.X * ratio) / options.bbSize.x;\r\n            ySubRatio = (options.subDiv.Y * ratio) / options.bbSize.y;\r\n            zSubRatio = (options.subDiv.Z * ratio) / options.bbSize.z;\r\n            subSq = options.subDiv.max * options.subDiv.max;\r\n            options.facetPartitioning.length = 0;\r\n        }\r\n\r\n        // reset the normals\r\n        for (index = 0; index < positions.length; index++) {\r\n            normals[index] = 0.0;\r\n        }\r\n\r\n        // Loop : 1 indice triplet = 1 facet\r\n        const nbFaces = (indices.length / 3) | 0;\r\n        for (index = 0; index < nbFaces; index++) {\r\n            // get the indexes of the coordinates of each vertex of the facet\r\n            v1x = indices[index * 3] * 3;\r\n            v1y = v1x + 1;\r\n            v1z = v1x + 2;\r\n            v2x = indices[index * 3 + 1] * 3;\r\n            v2y = v2x + 1;\r\n            v2z = v2x + 2;\r\n            v3x = indices[index * 3 + 2] * 3;\r\n            v3y = v3x + 1;\r\n            v3z = v3x + 2;\r\n\r\n            p1p2x = positions[v1x] - positions[v2x]; // compute two vectors per facet : p1p2 and p3p2\r\n            p1p2y = positions[v1y] - positions[v2y];\r\n            p1p2z = positions[v1z] - positions[v2z];\r\n\r\n            p3p2x = positions[v3x] - positions[v2x];\r\n            p3p2y = positions[v3y] - positions[v2y];\r\n            p3p2z = positions[v3z] - positions[v2z];\r\n\r\n            // compute the face normal with the cross product\r\n            faceNormalx = faceNormalSign * (p1p2y * p3p2z - p1p2z * p3p2y);\r\n            faceNormaly = faceNormalSign * (p1p2z * p3p2x - p1p2x * p3p2z);\r\n            faceNormalz = faceNormalSign * (p1p2x * p3p2y - p1p2y * p3p2x);\r\n            // normalize this normal and store it in the array facetData\r\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\r\n            length = length === 0 ? 1.0 : length;\r\n            faceNormalx /= length;\r\n            faceNormaly /= length;\r\n            faceNormalz /= length;\r\n\r\n            if (computeFacetNormals && options) {\r\n                options.facetNormals[index].x = faceNormalx;\r\n                options.facetNormals[index].y = faceNormaly;\r\n                options.facetNormals[index].z = faceNormalz;\r\n            }\r\n\r\n            if (computeFacetPositions && options) {\r\n                // compute and the facet barycenter coordinates in the array facetPositions\r\n                options.facetPositions[index].x = (positions[v1x] + positions[v2x] + positions[v3x]) / 3.0;\r\n                options.facetPositions[index].y = (positions[v1y] + positions[v2y] + positions[v3y]) / 3.0;\r\n                options.facetPositions[index].z = (positions[v1z] + positions[v2z] + positions[v3z]) / 3.0;\r\n            }\r\n\r\n            if (computeFacetPartitioning && options) {\r\n                // store the facet indexes in arrays in the main facetPartitioning array :\r\n                // compute each facet vertex (+ facet barycenter) index in the partiniong array\r\n                const ox = Math.floor((options.facetPositions[index].x - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const oy = Math.floor((options.facetPositions[index].y - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const oz = Math.floor((options.facetPositions[index].z - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b1x = Math.floor((positions[v1x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b1y = Math.floor((positions[v1y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b1z = Math.floor((positions[v1z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b2x = Math.floor((positions[v2x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b2y = Math.floor((positions[v2y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b2z = Math.floor((positions[v2z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b3x = Math.floor((positions[v3x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b3y = Math.floor((positions[v3y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b3z = Math.floor((positions[v3z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n\r\n                const block_idx_v1 = b1x + options.subDiv.max * b1y + subSq * b1z;\r\n                const block_idx_v2 = b2x + options.subDiv.max * b2y + subSq * b2z;\r\n                const block_idx_v3 = b3x + options.subDiv.max * b3y + subSq * b3z;\r\n                const block_idx_o = ox + options.subDiv.max * oy + subSq * oz;\r\n\r\n                options.facetPartitioning[block_idx_o] = options.facetPartitioning[block_idx_o] ? options.facetPartitioning[block_idx_o] : new Array();\r\n                options.facetPartitioning[block_idx_v1] = options.facetPartitioning[block_idx_v1] ? options.facetPartitioning[block_idx_v1] : new Array();\r\n                options.facetPartitioning[block_idx_v2] = options.facetPartitioning[block_idx_v2] ? options.facetPartitioning[block_idx_v2] : new Array();\r\n                options.facetPartitioning[block_idx_v3] = options.facetPartitioning[block_idx_v3] ? options.facetPartitioning[block_idx_v3] : new Array();\r\n\r\n                // push each facet index in each block containing the vertex\r\n                options.facetPartitioning[block_idx_v1].push(index);\r\n                if (block_idx_v2 != block_idx_v1) {\r\n                    options.facetPartitioning[block_idx_v2].push(index);\r\n                }\r\n                if (!(block_idx_v3 == block_idx_v2 || block_idx_v3 == block_idx_v1)) {\r\n                    options.facetPartitioning[block_idx_v3].push(index);\r\n                }\r\n                if (!(block_idx_o == block_idx_v1 || block_idx_o == block_idx_v2 || block_idx_o == block_idx_v3)) {\r\n                    options.facetPartitioning[block_idx_o].push(index);\r\n                }\r\n            }\r\n\r\n            if (computeDepthSort && options && options.facetPositions) {\r\n                const dsf = options.depthSortedFacets[index];\r\n                dsf.ind = index * 3;\r\n                dsf.sqDistance = Vector3.DistanceSquared(options.facetPositions[index], distanceTo!);\r\n            }\r\n\r\n            // compute the normals anyway\r\n            normals[v1x] += faceNormalx; // accumulate all the normals per face\r\n            normals[v1y] += faceNormaly;\r\n            normals[v1z] += faceNormalz;\r\n            normals[v2x] += faceNormalx;\r\n            normals[v2y] += faceNormaly;\r\n            normals[v2z] += faceNormalz;\r\n            normals[v3x] += faceNormalx;\r\n            normals[v3y] += faceNormaly;\r\n            normals[v3z] += faceNormalz;\r\n        }\r\n        // last normalization of each normal\r\n        for (index = 0; index < normals.length / 3; index++) {\r\n            faceNormalx = normals[index * 3];\r\n            faceNormaly = normals[index * 3 + 1];\r\n            faceNormalz = normals[index * 3 + 2];\r\n\r\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\r\n            length = length === 0 ? 1.0 : length;\r\n            faceNormalx /= length;\r\n            faceNormaly /= length;\r\n            faceNormalz /= length;\r\n\r\n            normals[index * 3] = faceNormalx;\r\n            normals[index * 3 + 1] = faceNormaly;\r\n            normals[index * 3 + 2] = faceNormalz;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _ComputeSides(\r\n        sideOrientation: number,\r\n        positions: FloatArray,\r\n        indices: FloatArray | IndicesArray,\r\n        normals: FloatArray,\r\n        uvs: FloatArray,\r\n        frontUVs?: Vector4,\r\n        backUVs?: Vector4\r\n    ) {\r\n        const li: number = indices.length;\r\n        const ln: number = normals.length;\r\n        let i: number;\r\n        let n: number;\r\n        sideOrientation = sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n        switch (sideOrientation) {\r\n            case VertexData.FRONTSIDE:\r\n                // nothing changed\r\n                break;\r\n\r\n            case VertexData.BACKSIDE:\r\n                // indices\r\n                for (i = 0; i < li; i += 3) {\r\n                    const tmp = indices[i];\r\n                    indices[i] = indices[i + 2];\r\n                    indices[i + 2] = tmp;\r\n                }\r\n                // normals\r\n                for (n = 0; n < ln; n++) {\r\n                    normals[n] = -normals[n];\r\n                }\r\n                break;\r\n\r\n            case VertexData.DOUBLESIDE: {\r\n                // positions\r\n                const lp: number = positions.length;\r\n                const l: number = lp / 3;\r\n                for (let p = 0; p < lp; p++) {\r\n                    positions[lp + p] = positions[p];\r\n                }\r\n                // indices\r\n                for (i = 0; i < li; i += 3) {\r\n                    indices[i + li] = indices[i + 2] + l;\r\n                    indices[i + 1 + li] = indices[i + 1] + l;\r\n                    indices[i + 2 + li] = indices[i] + l;\r\n                }\r\n                // normals\r\n                for (n = 0; n < ln; n++) {\r\n                    normals[ln + n] = -normals[n];\r\n                }\r\n\r\n                // uvs\r\n                const lu: number = uvs.length;\r\n                let u: number = 0;\r\n                for (u = 0; u < lu; u++) {\r\n                    uvs[u + lu] = uvs[u];\r\n                }\r\n                frontUVs = frontUVs ? frontUVs : new Vector4(0.0, 0.0, 1.0, 1.0);\r\n                backUVs = backUVs ? backUVs : new Vector4(0.0, 0.0, 1.0, 1.0);\r\n                u = 0;\r\n                for (i = 0; i < lu / 2; i++) {\r\n                    uvs[u] = frontUVs.x + (frontUVs.z - frontUVs.x) * uvs[u];\r\n                    uvs[u + 1] = frontUVs.y + (frontUVs.w - frontUVs.y) * uvs[u + 1];\r\n                    uvs[u + lu] = backUVs.x + (backUVs.z - backUVs.x) * uvs[u + lu];\r\n                    uvs[u + lu + 1] = backUVs.y + (backUVs.w - backUVs.y) * uvs[u + lu + 1];\r\n                    u += 2;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Applies VertexData created from the imported parameters to the geometry\r\n     * @param parsedVertexData the parsed data from an imported file\r\n     * @param geometry the geometry to apply the VertexData to\r\n     */\r\n    public static ImportVertexData(parsedVertexData: any, geometry: Geometry) {\r\n        const vertexData = new VertexData();\r\n\r\n        // positions\r\n        const positions = parsedVertexData.positions;\r\n        if (positions) {\r\n            vertexData.set(positions, VertexBuffer.PositionKind);\r\n        }\r\n\r\n        // normals\r\n        const normals = parsedVertexData.normals;\r\n        if (normals) {\r\n            vertexData.set(normals, VertexBuffer.NormalKind);\r\n        }\r\n\r\n        // tangents\r\n        const tangents = parsedVertexData.tangents;\r\n        if (tangents) {\r\n            vertexData.set(tangents, VertexBuffer.TangentKind);\r\n        }\r\n\r\n        // uvs\r\n        const uvs = parsedVertexData.uvs;\r\n        if (uvs) {\r\n            vertexData.set(uvs, VertexBuffer.UVKind);\r\n        }\r\n\r\n        // uv2s\r\n        const uv2s = parsedVertexData.uv2s;\r\n        if (uv2s) {\r\n            vertexData.set(uv2s, VertexBuffer.UV2Kind);\r\n        }\r\n\r\n        // uv3s\r\n        const uv3s = parsedVertexData.uv3s;\r\n        if (uv3s) {\r\n            vertexData.set(uv3s, VertexBuffer.UV3Kind);\r\n        }\r\n\r\n        // uv4s\r\n        const uv4s = parsedVertexData.uv4s;\r\n        if (uv4s) {\r\n            vertexData.set(uv4s, VertexBuffer.UV4Kind);\r\n        }\r\n\r\n        // uv5s\r\n        const uv5s = parsedVertexData.uv5s;\r\n        if (uv5s) {\r\n            vertexData.set(uv5s, VertexBuffer.UV5Kind);\r\n        }\r\n\r\n        // uv6s\r\n        const uv6s = parsedVertexData.uv6s;\r\n        if (uv6s) {\r\n            vertexData.set(uv6s, VertexBuffer.UV6Kind);\r\n        }\r\n\r\n        // colors\r\n        const colors = parsedVertexData.colors;\r\n        if (colors) {\r\n            vertexData.set(Color4.CheckColors4(colors, positions.length / 3), VertexBuffer.ColorKind);\r\n        }\r\n\r\n        // matricesIndices\r\n        const matricesIndices = parsedVertexData.matricesIndices;\r\n        if (matricesIndices) {\r\n            vertexData.set(matricesIndices, VertexBuffer.MatricesIndicesKind);\r\n        }\r\n\r\n        // matricesWeights\r\n        const matricesWeights = parsedVertexData.matricesWeights;\r\n        if (matricesWeights) {\r\n            vertexData.set(matricesWeights, VertexBuffer.MatricesWeightsKind);\r\n        }\r\n\r\n        // indices\r\n        const indices = parsedVertexData.indices;\r\n        if (indices) {\r\n            vertexData.indices = indices;\r\n        }\r\n\r\n        geometry.setAllVerticesData(vertexData, parsedVertexData.updatable);\r\n    }\r\n}\r\n","import type { Mesh } from \"./mesh\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Class used to represent a specific level of detail of a mesh\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_lod\r\n */\r\nexport class MeshLODLevel {\r\n    /**\r\n     * Creates a new LOD level\r\n     * @param distanceOrScreenCoverage defines either the distance or the screen coverage where this level should start being displayed\r\n     * @param mesh defines the mesh to use to render this level\r\n     */\r\n    constructor(\r\n        /** Either distance from the center of the object to show this level or the screen coverage if `useLODScreenCoverage` is set to `true` on the mesh*/\r\n        public distanceOrScreenCoverage: number,\r\n        /** Defines the mesh to use to render this level */\r\n        public mesh: Nullable<Mesh>\r\n    ) {}\r\n}\r\n","import type { Nullable, IndicesArray, DeepImmutable, FloatArray } from \"../types\";\r\nimport type { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { IntersectionInfo } from \"../Collisions/intersectionInfo\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { extractMinAndMaxIndexed } from \"../Maths/math.functions\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport type { IMaterialContext } from \"../Engines/IMaterialContext\";\r\n\r\ndeclare type Collider = import(\"../Collisions/collider\").Collider;\r\ndeclare type Material = import(\"../Materials/material\").Material;\r\ndeclare type MaterialDefines = import(\"../Materials/materialDefines\").MaterialDefines;\r\ndeclare type MultiMaterial = import(\"../Materials/multiMaterial\").MultiMaterial;\r\ndeclare type AbstractMesh = import(\"./abstractMesh\").AbstractMesh;\r\ndeclare type Mesh = import(\"./mesh\").Mesh;\r\ndeclare type Ray = import(\"../Culling/ray\").Ray;\r\ndeclare type TrianglePickingPredicate = import(\"../Culling/ray\").TrianglePickingPredicate;\r\n\r\n/**\r\n * Defines a subdivision inside a mesh\r\n */\r\nexport class SubMesh implements ICullable {\r\n    private _engine: Engine;\r\n    /** @internal */\r\n    public _drawWrappers: Array<DrawWrapper>; // index in this array = pass id\r\n    private _mainDrawWrapperOverride: Nullable<DrawWrapper> = null;\r\n\r\n    /**\r\n     * Gets material defines used by the effect associated to the sub mesh\r\n     */\r\n    public get materialDefines(): Nullable<MaterialDefines> {\r\n        return this._mainDrawWrapperOverride ? (this._mainDrawWrapperOverride.defines as MaterialDefines) : (this._getDrawWrapper()?.defines as Nullable<MaterialDefines>);\r\n    }\r\n\r\n    /**\r\n     * Sets material defines used by the effect associated to the sub mesh\r\n     */\r\n    public set materialDefines(defines: Nullable<MaterialDefines>) {\r\n        const drawWrapper = this._mainDrawWrapperOverride ?? this._getDrawWrapper(undefined, true)!;\r\n        drawWrapper.defines = defines;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDrawWrapper(passId?: number, createIfNotExisting = false): DrawWrapper | undefined {\r\n        passId = passId ?? this._engine.currentRenderPassId;\r\n        let drawWrapper = this._drawWrappers[passId];\r\n        if (!drawWrapper && createIfNotExisting) {\r\n            this._drawWrappers[passId] = drawWrapper = new DrawWrapper(this._mesh.getScene().getEngine());\r\n        }\r\n        return drawWrapper;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _removeDrawWrapper(passId: number, disposeWrapper = true) {\r\n        if (disposeWrapper) {\r\n            this._drawWrappers[passId]?.dispose();\r\n        }\r\n        this._drawWrappers[passId] = undefined as any;\r\n    }\r\n\r\n    /**\r\n     * Gets associated (main) effect (possibly the effect override if defined)\r\n     */\r\n    public get effect(): Nullable<Effect> {\r\n        return this._mainDrawWrapperOverride ? this._mainDrawWrapperOverride.effect : this._getDrawWrapper()?.effect ?? null;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _drawWrapper(): DrawWrapper {\r\n        return this._mainDrawWrapperOverride ?? this._getDrawWrapper(undefined, true)!;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _drawWrapperOverride(): Nullable<DrawWrapper> {\r\n        return this._mainDrawWrapperOverride;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setMainDrawWrapperOverride(wrapper: Nullable<DrawWrapper>): void {\r\n        this._mainDrawWrapperOverride = wrapper;\r\n    }\r\n\r\n    /**\r\n     * Sets associated effect (effect used to render this submesh)\r\n     * @param effect defines the effect to associate with\r\n     * @param defines defines the set of defines used to compile this effect\r\n     * @param materialContext material context associated to the effect\r\n     * @param resetContext true to reset the draw context\r\n     */\r\n    public setEffect(effect: Nullable<Effect>, defines: Nullable<string | MaterialDefines> = null, materialContext?: IMaterialContext, resetContext = true) {\r\n        const drawWrapper = this._drawWrapper;\r\n        drawWrapper.setEffect(effect, defines, resetContext);\r\n        if (materialContext !== undefined) {\r\n            drawWrapper.materialContext = materialContext;\r\n        }\r\n        if (!effect) {\r\n            drawWrapper.defines = null;\r\n            drawWrapper.materialContext = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache\r\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\r\n     */\r\n    public resetDrawCache(passId?: number): void {\r\n        if (this._drawWrappers) {\r\n            if (passId !== undefined) {\r\n                this._removeDrawWrapper(passId);\r\n                return;\r\n            } else {\r\n                for (const drawWrapper of this._drawWrappers) {\r\n                    drawWrapper?.dispose();\r\n                }\r\n            }\r\n        }\r\n        this._drawWrappers = [];\r\n    }\r\n\r\n    /** @internal */\r\n    public _linesIndexCount: number = 0;\r\n    private _mesh: AbstractMesh;\r\n    private _renderingMesh: Mesh;\r\n    private _boundingInfo: BoundingInfo;\r\n    private _linesIndexBuffer: Nullable<DataBuffer> = null;\r\n    /** @internal */\r\n    public _lastColliderWorldVertices: Nullable<Vector3[]> = null;\r\n    /** @internal */\r\n    public _trianglePlanes: Plane[];\r\n    /** @internal */\r\n    public _lastColliderTransformMatrix: Nullable<Matrix> = null;\r\n    /** @internal */\r\n    public _wasDispatched = false;\r\n\r\n    /** @internal */\r\n    public _renderId = 0;\r\n    /** @internal */\r\n    public _alphaIndex: number = 0;\r\n    /** @internal */\r\n    public _distanceToCamera: number = 0;\r\n    /** @internal */\r\n    public _id: number;\r\n\r\n    private _currentMaterial: Nullable<Material> = null;\r\n\r\n    /**\r\n     * Add a new submesh to a mesh\r\n     * @param materialIndex defines the material index to use\r\n     * @param verticesStart defines vertex index start\r\n     * @param verticesCount defines vertices count\r\n     * @param indexStart defines index start\r\n     * @param indexCount defines indices count\r\n     * @param mesh defines the parent mesh\r\n     * @param renderingMesh defines an optional rendering mesh\r\n     * @param createBoundingBox defines if bounding box should be created for this submesh\r\n     * @returns the new submesh\r\n     */\r\n    public static AddToMesh(\r\n        materialIndex: number,\r\n        verticesStart: number,\r\n        verticesCount: number,\r\n        indexStart: number,\r\n        indexCount: number,\r\n        mesh: AbstractMesh,\r\n        renderingMesh?: Mesh,\r\n        createBoundingBox: boolean = true\r\n    ): SubMesh {\r\n        return new SubMesh(materialIndex, verticesStart, verticesCount, indexStart, indexCount, mesh, renderingMesh, createBoundingBox);\r\n    }\r\n\r\n    /**\r\n     * Creates a new submesh\r\n     * @param materialIndex defines the material index to use\r\n     * @param verticesStart defines vertex index start\r\n     * @param verticesCount defines vertices count\r\n     * @param indexStart defines index start\r\n     * @param indexCount defines indices count\r\n     * @param mesh defines the parent mesh\r\n     * @param renderingMesh defines an optional rendering mesh\r\n     * @param createBoundingBox defines if bounding box should be created for this submesh\r\n     * @param addToMesh defines a boolean indicating that the submesh must be added to the mesh.subMeshes array (true by default)\r\n     */\r\n    constructor(\r\n        /** the material index to use */\r\n        public materialIndex: number,\r\n        /** vertex index start */\r\n        public verticesStart: number,\r\n        /** vertices count */\r\n        public verticesCount: number,\r\n        /** index start */\r\n        public indexStart: number,\r\n        /** indices count */\r\n        public indexCount: number,\r\n        mesh: AbstractMesh,\r\n        renderingMesh?: Mesh,\r\n        createBoundingBox: boolean = true,\r\n        addToMesh = true\r\n    ) {\r\n        this._mesh = mesh;\r\n        this._renderingMesh = renderingMesh || <Mesh>mesh;\r\n        if (addToMesh) {\r\n            mesh.subMeshes.push(this);\r\n        }\r\n\r\n        this._engine = this._mesh.getScene().getEngine();\r\n        this.resetDrawCache();\r\n        this._trianglePlanes = [];\r\n\r\n        this._id = mesh.subMeshes.length - 1;\r\n\r\n        if (createBoundingBox) {\r\n            this.refreshBoundingInfo();\r\n            mesh.computeWorldMatrix(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if this submesh covers the entire parent mesh\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public get IsGlobal(): boolean {\r\n        return this.verticesStart === 0 && this.verticesCount === this._mesh.getTotalVertices() && this.indexStart === 0 && this.indexCount === this._mesh.getTotalIndices();\r\n    }\r\n\r\n    /**\r\n     * Returns the submesh BoundingInfo object\r\n     * @returns current bounding info (or mesh's one if the submesh is global)\r\n     */\r\n    public getBoundingInfo(): BoundingInfo {\r\n        if (this.IsGlobal) {\r\n            return this._mesh.getBoundingInfo();\r\n        }\r\n\r\n        return this._boundingInfo;\r\n    }\r\n\r\n    /**\r\n     * Sets the submesh BoundingInfo\r\n     * @param boundingInfo defines the new bounding info to use\r\n     * @returns the SubMesh\r\n     */\r\n    public setBoundingInfo(boundingInfo: BoundingInfo): SubMesh {\r\n        this._boundingInfo = boundingInfo;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh of the current submesh\r\n     * @returns the parent mesh\r\n     */\r\n    public getMesh(): AbstractMesh {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the rendering mesh of the submesh\r\n     * @returns the rendering mesh (could be different from parent mesh)\r\n     */\r\n    public getRenderingMesh(): Mesh {\r\n        return this._renderingMesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the replacement mesh of the submesh\r\n     * @returns the replacement mesh (could be different from parent mesh)\r\n     */\r\n    public getReplacementMesh(): Nullable<AbstractMesh> {\r\n        return this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : null;\r\n    }\r\n\r\n    /**\r\n     * Returns the effective mesh of the submesh\r\n     * @returns the effective mesh (could be different from parent mesh)\r\n     */\r\n    public getEffectiveMesh(): AbstractMesh {\r\n        const replacementMesh = this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : null;\r\n\r\n        return replacementMesh ? replacementMesh : this._renderingMesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the submesh material\r\n     * @param getDefaultMaterial Defines whether or not to get the default material if nothing has been defined.\r\n     * @returns null or the current material\r\n     */\r\n    public getMaterial(getDefaultMaterial = true): Nullable<Material> {\r\n        const rootMaterial = this._renderingMesh.getMaterialForRenderPass(this._engine.currentRenderPassId) ?? this._renderingMesh.material;\r\n\r\n        if (!rootMaterial) {\r\n            return getDefaultMaterial ? this._mesh.getScene().defaultMaterial : null;\r\n        } else if (this._isMultiMaterial(rootMaterial)) {\r\n            const effectiveMaterial = rootMaterial.getSubMaterial(this.materialIndex);\r\n\r\n            if (this._currentMaterial !== effectiveMaterial) {\r\n                this._currentMaterial = effectiveMaterial;\r\n                this.resetDrawCache();\r\n            }\r\n\r\n            return effectiveMaterial;\r\n        }\r\n\r\n        return rootMaterial;\r\n    }\r\n\r\n    private _isMultiMaterial(material: Material): material is MultiMaterial {\r\n        return (material as MultiMaterial).getSubMaterial !== undefined;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Sets a new updated BoundingInfo object to the submesh\r\n     * @param data defines an optional position array to use to determine the bounding info\r\n     * @returns the SubMesh\r\n     */\r\n    public refreshBoundingInfo(data: Nullable<FloatArray> = null): SubMesh {\r\n        this._lastColliderWorldVertices = null;\r\n\r\n        if (this.IsGlobal || !this._renderingMesh || !this._renderingMesh.geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (!data) {\r\n            data = this._renderingMesh.getVerticesData(VertexBuffer.PositionKind);\r\n        }\r\n\r\n        if (!data) {\r\n            this._boundingInfo = this._mesh.getBoundingInfo();\r\n            return this;\r\n        }\r\n\r\n        const indices = <IndicesArray>this._renderingMesh.getIndices();\r\n        let extend: { minimum: Vector3; maximum: Vector3 };\r\n\r\n        //is this the only submesh?\r\n        if (this.indexStart === 0 && this.indexCount === indices.length) {\r\n            const boundingInfo = this._renderingMesh.getBoundingInfo();\r\n\r\n            //the rendering mesh's bounding info can be used, it is the standard submesh for all indices.\r\n            extend = { minimum: boundingInfo.minimum.clone(), maximum: boundingInfo.maximum.clone() };\r\n        } else {\r\n            extend = extractMinAndMaxIndexed(data, indices, this.indexStart, this.indexCount, this._renderingMesh.geometry.boundingBias);\r\n        }\r\n\r\n        if (this._boundingInfo) {\r\n            this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\r\n        } else {\r\n            this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        return boundingInfo._checkCollision(collider);\r\n    }\r\n\r\n    /**\r\n     * Updates the submesh BoundingInfo\r\n     * @param world defines the world matrix to use to update the bounding info\r\n     * @returns the submesh\r\n     */\r\n    public updateBoundingInfo(world: DeepImmutable<Matrix>): SubMesh {\r\n        let boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            this.refreshBoundingInfo();\r\n            boundingInfo = this.getBoundingInfo();\r\n        }\r\n        if (boundingInfo) {\r\n            (<BoundingInfo>boundingInfo).update(world);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * True is the submesh bounding box intersects the frustum defined by the passed array of planes.\r\n     * @param frustumPlanes defines the frustum planes\r\n     * @returns true if the submesh is intersecting with the frustum\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            return false;\r\n        }\r\n        return boundingInfo.isInFrustum(frustumPlanes, this._mesh.cullingStrategy);\r\n    }\r\n\r\n    /**\r\n     * True is the submesh bounding box is completely inside the frustum defined by the passed array of planes\r\n     * @param frustumPlanes defines the frustum planes\r\n     * @returns true if the submesh is inside the frustum\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Plane[]): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            return false;\r\n        }\r\n        return boundingInfo.isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Renders the submesh\r\n     * @param enableAlphaMode defines if alpha needs to be used\r\n     * @returns the submesh\r\n     */\r\n    public render(enableAlphaMode: boolean): SubMesh {\r\n        this._renderingMesh.render(this, enableAlphaMode, this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : undefined);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getLinesIndexBuffer(indices: IndicesArray, engine: Engine): DataBuffer {\r\n        if (!this._linesIndexBuffer) {\r\n            const linesIndices = [];\r\n\r\n            for (let index = this.indexStart; index < this.indexStart + this.indexCount; index += 3) {\r\n                linesIndices.push(indices[index], indices[index + 1], indices[index + 1], indices[index + 2], indices[index + 2], indices[index]);\r\n            }\r\n\r\n            this._linesIndexBuffer = engine.createIndexBuffer(linesIndices);\r\n            this._linesIndexCount = linesIndices.length;\r\n        }\r\n        return this._linesIndexBuffer;\r\n    }\r\n\r\n    /**\r\n     * Checks if the submesh intersects with a ray\r\n     * @param ray defines the ray to test\r\n     * @returns true is the passed ray intersects the submesh bounding box\r\n     */\r\n    public canIntersects(ray: Ray): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            return false;\r\n        }\r\n        return ray.intersectsBox(boundingInfo.boundingBox);\r\n    }\r\n\r\n    /**\r\n     * Intersects current submesh with a ray\r\n     * @param ray defines the ray to test\r\n     * @param positions defines mesh's positions array\r\n     * @param indices defines mesh's indices array\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns intersection info or null if no intersection\r\n     */\r\n    public intersects(ray: Ray, positions: Vector3[], indices: IndicesArray, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<IntersectionInfo> {\r\n        const material = this.getMaterial();\r\n        if (!material) {\r\n            return null;\r\n        }\r\n        let step = 3;\r\n        let checkStopper = false;\r\n\r\n        switch (material.fillMode) {\r\n            case Constants.MATERIAL_PointListDrawMode:\r\n            case Constants.MATERIAL_LineLoopDrawMode:\r\n            case Constants.MATERIAL_LineStripDrawMode:\r\n            case Constants.MATERIAL_TriangleFanDrawMode:\r\n                return null;\r\n            case Constants.MATERIAL_TriangleStripDrawMode:\r\n                step = 1;\r\n                checkStopper = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // LineMesh first as it's also a Mesh...\r\n        if (material.fillMode === Constants.MATERIAL_LineListDrawMode) {\r\n            // Check if mesh is unindexed\r\n            if (!indices.length) {\r\n                return this._intersectUnIndexedLines(ray, positions, indices, (this._mesh as any).intersectionThreshold, fastCheck);\r\n            }\r\n            return this._intersectLines(ray, positions, indices, (this._mesh as any).intersectionThreshold, fastCheck);\r\n        } else {\r\n            // Check if mesh is unindexed\r\n            if (!indices.length && this._mesh._unIndexed) {\r\n                return this._intersectUnIndexedTriangles(ray, positions, indices, fastCheck, trianglePredicate);\r\n            }\r\n\r\n            return this._intersectTriangles(ray, positions, indices, step, checkStopper, fastCheck, trianglePredicate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectLines(ray: Ray, positions: Vector3[], indices: IndicesArray, intersectionThreshold: number, fastCheck?: boolean): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        // Line test\r\n        for (let index = this.indexStart; index < this.indexStart + this.indexCount; index += 2) {\r\n            const p0 = positions[indices[index]];\r\n            const p1 = positions[indices[index + 1]];\r\n\r\n            const length = ray.intersectionSegment(p0, p1, intersectionThreshold);\r\n            if (length < 0) {\r\n                continue;\r\n            }\r\n\r\n            if (fastCheck || !intersectInfo || length < intersectInfo.distance) {\r\n                intersectInfo = new IntersectionInfo(null, null, length);\r\n                intersectInfo.faceId = index / 2;\r\n                if (fastCheck) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return intersectInfo;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectUnIndexedLines(ray: Ray, positions: Vector3[], indices: IndicesArray, intersectionThreshold: number, fastCheck?: boolean): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        // Line test\r\n        for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 2) {\r\n            const p0 = positions[index];\r\n            const p1 = positions[index + 1];\r\n\r\n            const length = ray.intersectionSegment(p0, p1, intersectionThreshold);\r\n            if (length < 0) {\r\n                continue;\r\n            }\r\n\r\n            if (fastCheck || !intersectInfo || length < intersectInfo.distance) {\r\n                intersectInfo = new IntersectionInfo(null, null, length);\r\n                intersectInfo.faceId = index / 2;\r\n                if (fastCheck) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return intersectInfo;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectTriangles(\r\n        ray: Ray,\r\n        positions: Vector3[],\r\n        indices: IndicesArray,\r\n        step: number,\r\n        checkStopper: boolean,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate\r\n    ): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        // Triangles test\r\n        let faceId = -1;\r\n        for (let index = this.indexStart; index < this.indexStart + this.indexCount - (3 - step); index += step) {\r\n            faceId++;\r\n            const indexA = indices[index];\r\n            const indexB = indices[index + 1];\r\n            const indexC = indices[index + 2];\r\n\r\n            if (checkStopper && indexC === 0xffffffff) {\r\n                index += 2;\r\n                continue;\r\n            }\r\n\r\n            const p0 = positions[indexA];\r\n            const p1 = positions[indexB];\r\n            const p2 = positions[indexC];\r\n\r\n            // stay defensive and don't check against undefined positions.\r\n            if (!p0 || !p1 || !p2) {\r\n                continue;\r\n            }\r\n\r\n            if (trianglePredicate && !trianglePredicate(p0, p1, p2, ray)) {\r\n                continue;\r\n            }\r\n\r\n            const currentIntersectInfo = ray.intersectsTriangle(p0, p1, p2);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (currentIntersectInfo.distance < 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.faceId = faceId;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return intersectInfo;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectUnIndexedTriangles(\r\n        ray: Ray,\r\n        positions: Vector3[],\r\n        indices: IndicesArray,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate\r\n    ): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n        // Triangles test\r\n        for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 3) {\r\n            const p0 = positions[index];\r\n            const p1 = positions[index + 1];\r\n            const p2 = positions[index + 2];\r\n\r\n            if (trianglePredicate && !trianglePredicate(p0, p1, p2, ray)) {\r\n                continue;\r\n            }\r\n\r\n            const currentIntersectInfo = ray.intersectsTriangle(p0, p1, p2);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (currentIntersectInfo.distance < 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.faceId = index / 3;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return intersectInfo;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        if (this._linesIndexBuffer) {\r\n            this._linesIndexBuffer = null;\r\n        }\r\n    }\r\n\r\n    // Clone\r\n    /**\r\n     * Creates a new submesh from the passed mesh\r\n     * @param newMesh defines the new hosting mesh\r\n     * @param newRenderingMesh defines an optional rendering mesh\r\n     * @returns the new submesh\r\n     */\r\n    public clone(newMesh: AbstractMesh, newRenderingMesh?: Mesh): SubMesh {\r\n        const result = new SubMesh(this.materialIndex, this.verticesStart, this.verticesCount, this.indexStart, this.indexCount, newMesh, newRenderingMesh, false);\r\n\r\n        if (!this.IsGlobal) {\r\n            const boundingInfo = this.getBoundingInfo();\r\n\r\n            if (!boundingInfo) {\r\n                return result;\r\n            }\r\n\r\n            result._boundingInfo = new BoundingInfo(boundingInfo.minimum, boundingInfo.maximum);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Dispose\r\n\r\n    /**\r\n     * Release associated resources\r\n     */\r\n    public dispose(): void {\r\n        if (this._linesIndexBuffer) {\r\n            this._mesh.getScene().getEngine()._releaseBuffer(this._linesIndexBuffer);\r\n            this._linesIndexBuffer = null;\r\n        }\r\n\r\n        // Remove from mesh\r\n        const index = this._mesh.subMeshes.indexOf(this);\r\n        this._mesh.subMeshes.splice(index, 1);\r\n\r\n        this.resetDrawCache();\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"SubMesh\".\r\n     */\r\n    public getClassName(): string {\r\n        return \"SubMesh\";\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new submesh from indices data\r\n     * @param materialIndex the index of the main mesh material\r\n     * @param startIndex the index where to start the copy in the mesh indices array\r\n     * @param indexCount the number of indices to copy then from the startIndex\r\n     * @param mesh the main mesh to create the submesh from\r\n     * @param renderingMesh the optional rendering mesh\r\n     * @param createBoundingBox defines if bounding box should be created for this submesh\r\n     * @returns a new submesh\r\n     */\r\n    public static CreateFromIndices(\r\n        materialIndex: number,\r\n        startIndex: number,\r\n        indexCount: number,\r\n        mesh: AbstractMesh,\r\n        renderingMesh?: Mesh,\r\n        createBoundingBox: boolean = true\r\n    ): SubMesh {\r\n        let minVertexIndex = Number.MAX_VALUE;\r\n        let maxVertexIndex = -Number.MAX_VALUE;\r\n\r\n        const whatWillRender = renderingMesh || mesh;\r\n        const indices = whatWillRender!.getIndices()!;\r\n\r\n        for (let index = startIndex; index < startIndex + indexCount; index++) {\r\n            const vertexIndex = indices[index];\r\n\r\n            if (vertexIndex < minVertexIndex) {\r\n                minVertexIndex = vertexIndex;\r\n            }\r\n            if (vertexIndex > maxVertexIndex) {\r\n                maxVertexIndex = vertexIndex;\r\n            }\r\n        }\r\n\r\n        return new SubMesh(materialIndex, minVertexIndex, maxVertexIndex - minVertexIndex + 1, startIndex, indexCount, mesh, renderingMesh, createBoundingBox);\r\n    }\r\n}\r\n","import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { serialize, serializeAsVector3, serializeAsQuaternion, SerializationHelper } from \"../Misc/decorators\";\r\nimport { Observable } from \"../Misc/observable\";\r\n\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { Bone } from \"../Bones/bone\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Space } from \"../Maths/math.axis\";\r\n/**\r\n * A TransformNode is an object that is not rendered but can be used as a center of transformation. This can decrease memory usage and increase rendering speed compared to using an empty mesh as a parent and is less complicated than using a pivot matrix.\r\n * @see https://doc.babylonjs.com/how_to/transformnode\r\n */\r\nexport class TransformNode extends Node {\r\n    // Statics\r\n    /**\r\n     * Object will not rotate to face the camera\r\n     */\r\n    public static BILLBOARDMODE_NONE = 0;\r\n    /**\r\n     * Object will rotate to face the camera but only on the x axis\r\n     */\r\n    public static BILLBOARDMODE_X = 1;\r\n    /**\r\n     * Object will rotate to face the camera but only on the y axis\r\n     */\r\n    public static BILLBOARDMODE_Y = 2;\r\n    /**\r\n     * Object will rotate to face the camera but only on the z axis\r\n     */\r\n    public static BILLBOARDMODE_Z = 4;\r\n    /**\r\n     * Object will rotate to face the camera\r\n     */\r\n    public static BILLBOARDMODE_ALL = 7;\r\n    /**\r\n     * Object will rotate to face the camera's position instead of orientation\r\n     */\r\n    public static BILLBOARDMODE_USE_POSITION = 128;\r\n    /**\r\n     * Child transform with Billboard flags should or should not apply parent rotation (default if off)\r\n     */\r\n    public static BillboardUseParentOrientation: boolean = false;\r\n\r\n    private static _TmpRotation = Quaternion.Zero();\r\n    private static _TmpScaling = Vector3.Zero();\r\n    private static _TmpTranslation = Vector3.Zero();\r\n\r\n    private _forward = new Vector3(0, 0, 1);\r\n    private _up = new Vector3(0, 1, 0);\r\n    private _right = new Vector3(1, 0, 0);\r\n\r\n    // Properties\r\n    @serializeAsVector3(\"position\")\r\n    private _position = Vector3.Zero();\r\n\r\n    @serializeAsVector3(\"rotation\")\r\n    private _rotation = Vector3.Zero();\r\n\r\n    @serializeAsQuaternion(\"rotationQuaternion\")\r\n    private _rotationQuaternion: Nullable<Quaternion> = null;\r\n\r\n    @serializeAsVector3(\"scaling\")\r\n    protected _scaling = Vector3.One();\r\n    private _transformToBoneReferal: Nullable<TransformNode> = null;\r\n    private _currentParentWhenAttachingToBone: Nullable<Node>;\r\n    private _isAbsoluteSynced = false;\r\n\r\n    @serialize(\"billboardMode\")\r\n    private _billboardMode = TransformNode.BILLBOARDMODE_NONE;\r\n\r\n    /**\r\n     * Gets or sets the billboard mode. Default is 0.\r\n     *\r\n     * | Value | Type | Description |\r\n     * | --- | --- | --- |\r\n     * | 0 | BILLBOARDMODE_NONE |  |\r\n     * | 1 | BILLBOARDMODE_X |  |\r\n     * | 2 | BILLBOARDMODE_Y |  |\r\n     * | 4 | BILLBOARDMODE_Z |  |\r\n     * | 7 | BILLBOARDMODE_ALL |  |\r\n     *\r\n     */\r\n    public get billboardMode() {\r\n        return this._billboardMode;\r\n    }\r\n\r\n    public set billboardMode(value: number) {\r\n        if (this._billboardMode === value) {\r\n            return;\r\n        }\r\n        this._billboardMode = value;\r\n    }\r\n\r\n    private _preserveParentRotationForBillboard = false;\r\n    /**\r\n     * Gets or sets a boolean indicating that parent rotation should be preserved when using billboards.\r\n     * This could be useful for glTF objects where parent rotation helps converting from right handed to left handed\r\n     */\r\n    public get preserveParentRotationForBillboard() {\r\n        return this._preserveParentRotationForBillboard;\r\n    }\r\n\r\n    public set preserveParentRotationForBillboard(value: boolean) {\r\n        if (value === this._preserveParentRotationForBillboard) {\r\n            return;\r\n        }\r\n        this._preserveParentRotationForBillboard = value;\r\n    }\r\n\r\n    /**\r\n     * Multiplication factor on scale x/y/z when computing the world matrix. Eg. for a 1x1x1 cube setting this to 2 will make it a 2x2x2 cube\r\n     */\r\n    @serialize()\r\n    public scalingDeterminant = 1;\r\n\r\n    @serialize(\"infiniteDistance\")\r\n    private _infiniteDistance = false;\r\n\r\n    /**\r\n     * Gets or sets the distance of the object to max, often used by skybox\r\n     */\r\n    public get infiniteDistance() {\r\n        return this._infiniteDistance;\r\n    }\r\n\r\n    public set infiniteDistance(value: boolean) {\r\n        if (this._infiniteDistance === value) {\r\n            return;\r\n        }\r\n\r\n        this._infiniteDistance = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that non uniform scaling (when at least one component is different from others) should be ignored.\r\n     * By default the system will update normals to compensate\r\n     */\r\n    @serialize()\r\n    public ignoreNonUniformScaling = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that even if rotationQuaternion is defined, you can keep updating rotation property and Babylon.js will just mix both\r\n     */\r\n    @serialize()\r\n    public reIntegrateRotationIntoRotationQuaternion = false;\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _poseMatrix: Nullable<Matrix> = null;\r\n    /** @internal */\r\n    public _localMatrix = Matrix.Zero();\r\n\r\n    private _usePivotMatrix = false;\r\n    private _absolutePosition = Vector3.Zero();\r\n    private _absoluteScaling = Vector3.Zero();\r\n    private _absoluteRotationQuaternion = Quaternion.Identity();\r\n    private _pivotMatrix = Matrix.Identity();\r\n    private _pivotMatrixInverse: Matrix;\r\n    /** @internal */\r\n    public _postMultiplyPivotMatrix = false;\r\n\r\n    protected _isWorldMatrixFrozen = false;\r\n\r\n    /** @internal */\r\n    public _indexInSceneTransformNodesArray = -1;\r\n\r\n    /**\r\n     * An event triggered after the world matrix is updated\r\n     */\r\n    public onAfterWorldMatrixUpdateObservable = new Observable<TransformNode>();\r\n\r\n    constructor(name: string, scene: Nullable<Scene> = null, isPure = true) {\r\n        super(name, scene);\r\n\r\n        if (isPure) {\r\n            this.getScene().addTransformNode(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"TransformNode\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"TransformNode\";\r\n    }\r\n\r\n    /**\r\n     * Gets or set the node position (default is (0.0, 0.0, 0.0))\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this._position = newPosition;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * return true if a pivot has been set\r\n     * @returns true if a pivot matrix is used\r\n     */\r\n    public isUsingPivotMatrix(): boolean {\r\n        return this._usePivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the rotation property : a Vector3 defining the rotation value in radians around each local axis X, Y, Z  (default is (0.0, 0.0, 0.0)).\r\n     * If rotation quaternion is set, this Vector3 will be ignored and copy from the quaternion\r\n     */\r\n    public get rotation(): Vector3 {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(newRotation: Vector3) {\r\n        this._rotation = newRotation;\r\n        this._rotationQuaternion = null;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the scaling property : a Vector3 defining the node scaling along each local axis X, Y, Z (default is (1.0, 1.0, 1.0)).\r\n     */\r\n    public get scaling(): Vector3 {\r\n        return this._scaling;\r\n    }\r\n\r\n    public set scaling(newScaling: Vector3) {\r\n        this._scaling = newScaling;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the rotation Quaternion property : this a Quaternion object defining the node rotation by using a unit quaternion (undefined by default, but can be null).\r\n     * If set, only the rotationQuaternion is then used to compute the node rotation (ie. node.rotation will be ignored)\r\n     */\r\n    public get rotationQuaternion(): Nullable<Quaternion> {\r\n        return this._rotationQuaternion;\r\n    }\r\n\r\n    public set rotationQuaternion(quaternion: Nullable<Quaternion>) {\r\n        this._rotationQuaternion = quaternion;\r\n        //reset the rotation vector.\r\n        if (quaternion) {\r\n            this._rotation.setAll(0.0);\r\n        }\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * The forward direction of that transform in world space.\r\n     */\r\n    public get forward(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(0, 0, this.getScene().useRightHandedSystem ? -1.0 : 1.0, this.getWorldMatrix(), this._forward);\r\n        return this._forward.normalize();\r\n    }\r\n\r\n    /**\r\n     * The up direction of that transform in world space.\r\n     */\r\n    public get up(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(0, 1, 0, this.getWorldMatrix(), this._up);\r\n        return this._up.normalize();\r\n    }\r\n\r\n    /**\r\n     * The right direction of that transform in world space.\r\n     */\r\n    public get right(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(this.getScene().useRightHandedSystem ? -1.0 : 1.0, 0, 0, this.getWorldMatrix(), this._right);\r\n        return this._right.normalize();\r\n    }\r\n\r\n    /**\r\n     * Copies the parameter passed Matrix into the mesh Pose matrix.\r\n     * @param matrix the matrix to copy the pose from\r\n     * @returns this TransformNode.\r\n     */\r\n    public updatePoseMatrix(matrix: Matrix): TransformNode {\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = matrix.clone();\r\n            return this;\r\n        }\r\n        this._poseMatrix.copyFrom(matrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh Pose matrix.\r\n     * @returns the pose matrix\r\n     */\r\n    public getPoseMatrix(): Matrix {\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = Matrix.Identity();\r\n        }\r\n        return this._poseMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        const cache = this._cache;\r\n\r\n        if (this._billboardMode !== cache.billboardMode || this._billboardMode !== TransformNode.BILLBOARDMODE_NONE) {\r\n            return false;\r\n        }\r\n\r\n        if (cache.pivotMatrixUpdated) {\r\n            return false;\r\n        }\r\n\r\n        if (this._infiniteDistance) {\r\n            return false;\r\n        }\r\n\r\n        if (this._position._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        if (this._scaling._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        if ((this._rotationQuaternion && this._rotationQuaternion._isDirty) || this._rotation._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _initCache() {\r\n        super._initCache();\r\n\r\n        const cache = this._cache;\r\n        cache.localMatrixUpdated = false;\r\n        cache.billboardMode = -1;\r\n        cache.infiniteDistance = false;\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute position.\r\n     * Returns a Vector3.\r\n     */\r\n    public get absolutePosition(): Vector3 {\r\n        return this.getAbsolutePosition();\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute scaling.\r\n     * Returns a Vector3.\r\n     */\r\n    public get absoluteScaling(): Vector3 {\r\n        this._syncAbsoluteScalingAndRotation();\r\n        return this._absoluteScaling;\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute rotation.\r\n     * Returns a Quaternion.\r\n     */\r\n    public get absoluteRotationQuaternion(): Quaternion {\r\n        this._syncAbsoluteScalingAndRotation();\r\n        return this._absoluteRotationQuaternion;\r\n    }\r\n\r\n    /**\r\n     * Sets a new matrix to apply before all other transformation\r\n     * @param matrix defines the transform matrix\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPreTransformMatrix(matrix: Matrix): TransformNode {\r\n        return this.setPivotMatrix(matrix, false);\r\n    }\r\n\r\n    /**\r\n     * Sets a new pivot matrix to the current node\r\n     * @param matrix defines the new pivot matrix to use\r\n     * @param postMultiplyPivotMatrix defines if the pivot matrix must be cancelled in the world matrix. When this parameter is set to true (default), the inverse of the pivot matrix is also applied at the end to cancel the transformation effect\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPivotMatrix(matrix: DeepImmutable<Matrix>, postMultiplyPivotMatrix = true): TransformNode {\r\n        this._pivotMatrix.copyFrom(matrix);\r\n        this._usePivotMatrix = !this._pivotMatrix.isIdentity();\r\n\r\n        this._cache.pivotMatrixUpdated = true;\r\n        this._postMultiplyPivotMatrix = postMultiplyPivotMatrix;\r\n\r\n        if (this._postMultiplyPivotMatrix) {\r\n            if (!this._pivotMatrixInverse) {\r\n                this._pivotMatrixInverse = Matrix.Invert(this._pivotMatrix);\r\n            } else {\r\n                this._pivotMatrix.invertToRef(this._pivotMatrixInverse);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh pivot matrix.\r\n     * Default : Identity.\r\n     * @returns the matrix\r\n     */\r\n    public getPivotMatrix(): Matrix {\r\n        return this._pivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * Instantiate (when possible) or clone that node with its hierarchy\r\n     * @param newParent defines the new parent to use for the instance (or clone)\r\n     * @param options defines options to configure how copy is done\r\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\r\n     * @param onNewNodeCreated defines an option callback to call when a clone or an instance is created\r\n     * @returns an instance (or a clone) of the current node with its hierarchy\r\n     */\r\n    public instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean) },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const clone = this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true);\r\n\r\n        if (clone) {\r\n            if (onNewNodeCreated) {\r\n                onNewNodeCreated(this, clone);\r\n            }\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            child.instantiateHierarchy(clone, options, onNewNodeCreated);\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Prevents the World matrix to be computed any longer\r\n     * @param newWorldMatrix defines an optional matrix to use as world matrix\r\n     * @param decompose defines whether to decompose the given newWorldMatrix or directly assign\r\n     * @returns the TransformNode.\r\n     */\r\n    public freezeWorldMatrix(newWorldMatrix: Nullable<Matrix> = null, decompose = false): TransformNode {\r\n        if (newWorldMatrix) {\r\n            if (decompose) {\r\n                this._rotation.setAll(0);\r\n                this._rotationQuaternion = this._rotationQuaternion || Quaternion.Identity();\r\n                newWorldMatrix.decompose(this._scaling, this._rotationQuaternion, this._position);\r\n                this.computeWorldMatrix(true);\r\n            } else {\r\n                this._worldMatrix = newWorldMatrix;\r\n                this._absolutePosition.copyFromFloats(this._worldMatrix.m[12], this._worldMatrix.m[13], this._worldMatrix.m[14]);\r\n                this._afterComputeWorldMatrix();\r\n            }\r\n        } else {\r\n            this._isWorldMatrixFrozen = false; // no guarantee world is not already frozen, switch off temporarily\r\n            this.computeWorldMatrix(true);\r\n        }\r\n        this._isDirty = false;\r\n        this._isWorldMatrixFrozen = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Allows back the World matrix computation.\r\n     * @returns the TransformNode.\r\n     */\r\n    public unfreezeWorldMatrix() {\r\n        this._isWorldMatrixFrozen = false;\r\n        this.computeWorldMatrix(true);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * True if the World matrix has been frozen.\r\n     */\r\n    public get isWorldMatrixFrozen(): boolean {\r\n        return this._isWorldMatrixFrozen;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh absolute position in the World.\r\n     * @returns a Vector3.\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        this.computeWorldMatrix();\r\n        return this._absolutePosition;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh absolute position in the World from a Vector3 or an Array(3).\r\n     * @param absolutePosition the absolute position to set\r\n     * @returns the TransformNode.\r\n     */\r\n    public setAbsolutePosition(absolutePosition: Vector3): TransformNode {\r\n        if (!absolutePosition) {\r\n            return this;\r\n        }\r\n        let absolutePositionX;\r\n        let absolutePositionY;\r\n        let absolutePositionZ;\r\n        if (absolutePosition.x === undefined) {\r\n            if (arguments.length < 3) {\r\n                return this;\r\n            }\r\n            absolutePositionX = arguments[0];\r\n            absolutePositionY = arguments[1];\r\n            absolutePositionZ = arguments[2];\r\n        } else {\r\n            absolutePositionX = absolutePosition.x;\r\n            absolutePositionY = absolutePosition.y;\r\n            absolutePositionZ = absolutePosition.z;\r\n        }\r\n        if (this.parent) {\r\n            const invertParentWorldMatrix = TmpVectors.Matrix[0];\r\n            this.parent.getWorldMatrix().invertToRef(invertParentWorldMatrix);\r\n            Vector3.TransformCoordinatesFromFloatsToRef(absolutePositionX, absolutePositionY, absolutePositionZ, invertParentWorldMatrix, this.position);\r\n        } else {\r\n            this.position.x = absolutePositionX;\r\n            this.position.y = absolutePositionY;\r\n            this.position.z = absolutePositionZ;\r\n        }\r\n\r\n        this._absolutePosition.copyFrom(absolutePosition);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh position in its local space.\r\n     * @param vector3 the position to set in localspace\r\n     * @returns the TransformNode.\r\n     */\r\n    public setPositionWithLocalVector(vector3: Vector3): TransformNode {\r\n        this.computeWorldMatrix();\r\n        this.position = Vector3.TransformNormal(vector3, this._localMatrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh position in the local space from the current World matrix values.\r\n     * @returns a new Vector3.\r\n     */\r\n    public getPositionExpressedInLocalSpace(): Vector3 {\r\n        this.computeWorldMatrix();\r\n        const invLocalWorldMatrix = TmpVectors.Matrix[0];\r\n        this._localMatrix.invertToRef(invLocalWorldMatrix);\r\n        return Vector3.TransformNormal(this.position, invLocalWorldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Translates the mesh along the passed Vector3 in its local space.\r\n     * @param vector3 the distance to translate in localspace\r\n     * @returns the TransformNode.\r\n     */\r\n    public locallyTranslate(vector3: Vector3): TransformNode {\r\n        this.computeWorldMatrix(true);\r\n        this.position = Vector3.TransformCoordinates(vector3, this._localMatrix);\r\n        return this;\r\n    }\r\n\r\n    private static _LookAtVectorCache = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Orients a mesh towards a target point. Mesh must be drawn facing user.\r\n     * @param targetPoint the position (must be in same space as current mesh) to look at\r\n     * @param yawCor optional yaw (y-axis) correction in radians\r\n     * @param pitchCor optional pitch (x-axis) correction in radians\r\n     * @param rollCor optional roll (z-axis) correction in radians\r\n     * @param space the chosen space of the target\r\n     * @returns the TransformNode.\r\n     */\r\n    public lookAt(targetPoint: Vector3, yawCor: number = 0, pitchCor: number = 0, rollCor: number = 0, space: Space = Space.LOCAL): TransformNode {\r\n        const dv = TransformNode._LookAtVectorCache;\r\n        const pos = space === Space.LOCAL ? this.position : this.getAbsolutePosition();\r\n        targetPoint.subtractToRef(pos, dv);\r\n        this.setDirection(dv, yawCor, pitchCor, rollCor);\r\n\r\n        // Correct for parent's rotation offset\r\n        if (space === Space.WORLD && this.parent) {\r\n            if (this.rotationQuaternion) {\r\n                // Get local rotation matrix of the looking object\r\n                const rotationMatrix = TmpVectors.Matrix[0];\r\n                this.rotationQuaternion.toRotationMatrix(rotationMatrix);\r\n\r\n                // Offset rotation by parent's inverted rotation matrix to correct in world space\r\n                const parentRotationMatrix = TmpVectors.Matrix[1];\r\n                this.parent.getWorldMatrix().getRotationMatrixToRef(parentRotationMatrix);\r\n                parentRotationMatrix.invert();\r\n                rotationMatrix.multiplyToRef(parentRotationMatrix, rotationMatrix);\r\n                this.rotationQuaternion.fromRotationMatrix(rotationMatrix);\r\n            } else {\r\n                // Get local rotation matrix of the looking object\r\n                const quaternionRotation = TmpVectors.Quaternion[0];\r\n                Quaternion.FromEulerVectorToRef(this.rotation, quaternionRotation);\r\n                const rotationMatrix = TmpVectors.Matrix[0];\r\n                quaternionRotation.toRotationMatrix(rotationMatrix);\r\n\r\n                // Offset rotation by parent's inverted rotation matrix to correct in world space\r\n                const parentRotationMatrix = TmpVectors.Matrix[1];\r\n                this.parent.getWorldMatrix().getRotationMatrixToRef(parentRotationMatrix);\r\n                parentRotationMatrix.invert();\r\n                rotationMatrix.multiplyToRef(parentRotationMatrix, rotationMatrix);\r\n                quaternionRotation.fromRotationMatrix(rotationMatrix);\r\n                quaternionRotation.toEulerAnglesToRef(this.rotation);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 that is the localAxis, expressed in the mesh local space, rotated like the mesh.\r\n     * This Vector3 is expressed in the World space.\r\n     * @param localAxis axis to rotate\r\n     * @returns a new Vector3 that is the localAxis, expressed in the mesh local space, rotated like the mesh.\r\n     */\r\n    public getDirection(localAxis: Vector3): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getDirectionToRef(localAxis, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector3 \"result\" as the rotated Vector3 \"localAxis\" in the same rotation than the mesh.\r\n     * localAxis is expressed in the mesh local space.\r\n     * result is computed in the World space from the mesh World matrix.\r\n     * @param localAxis axis to rotate\r\n     * @param result the resulting transformnode\r\n     * @returns this TransformNode.\r\n     */\r\n    public getDirectionToRef(localAxis: Vector3, result: Vector3): TransformNode {\r\n        Vector3.TransformNormalToRef(localAxis, this.getWorldMatrix(), result);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets this transform node rotation to the given local axis.\r\n     * @param localAxis the axis in local space\r\n     * @param yawCor optional yaw (y-axis) correction in radians\r\n     * @param pitchCor optional pitch (x-axis) correction in radians\r\n     * @param rollCor optional roll (z-axis) correction in radians\r\n     * @returns this TransformNode\r\n     */\r\n    public setDirection(localAxis: Vector3, yawCor: number = 0, pitchCor: number = 0, rollCor: number = 0): TransformNode {\r\n        const yaw = -Math.atan2(localAxis.z, localAxis.x) + Math.PI / 2;\r\n        const len = Math.sqrt(localAxis.x * localAxis.x + localAxis.z * localAxis.z);\r\n        const pitch = -Math.atan2(localAxis.y, len);\r\n        if (this.rotationQuaternion) {\r\n            Quaternion.RotationYawPitchRollToRef(yaw + yawCor, pitch + pitchCor, rollCor, this.rotationQuaternion);\r\n        } else {\r\n            this.rotation.x = pitch + pitchCor;\r\n            this.rotation.y = yaw + yawCor;\r\n            this.rotation.z = rollCor;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a new pivot point to the current node\r\n     * @param point defines the new pivot point to use\r\n     * @param space defines if the point is in world or local space (local by default)\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPivotPoint(point: Vector3, space: Space = Space.LOCAL): TransformNode {\r\n        if (this.getScene().getRenderId() == 0) {\r\n            this.computeWorldMatrix(true);\r\n        }\r\n\r\n        const wm = this.getWorldMatrix();\r\n\r\n        if (space == Space.WORLD) {\r\n            const tmat = TmpVectors.Matrix[0];\r\n            wm.invertToRef(tmat);\r\n            point = Vector3.TransformCoordinates(point, tmat);\r\n        }\r\n\r\n        return this.setPivotMatrix(Matrix.Translation(-point.x, -point.y, -point.z), true);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the mesh pivot point coordinates in the local space.\r\n     * @returns the pivot point\r\n     */\r\n    public getPivotPoint(): Vector3 {\r\n        const point = Vector3.Zero();\r\n        this.getPivotPointToRef(point);\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Vector3 \"result\" with the coordinates of the mesh pivot point in the local space.\r\n     * @param result the vector3 to store the result\r\n     * @returns this TransformNode.\r\n     */\r\n    public getPivotPointToRef(result: Vector3): TransformNode {\r\n        result.x = -this._pivotMatrix.m[12];\r\n        result.y = -this._pivotMatrix.m[13];\r\n        result.z = -this._pivotMatrix.m[14];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the mesh pivot point World coordinates.\r\n     * @returns a new Vector3 set with the mesh pivot point World coordinates.\r\n     */\r\n    public getAbsolutePivotPoint(): Vector3 {\r\n        const point = Vector3.Zero();\r\n        this.getAbsolutePivotPointToRef(point);\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector3 \"result\" coordinates with the mesh pivot point World coordinates.\r\n     * @param result vector3 to store the result\r\n     * @returns this TransformNode.\r\n     */\r\n    public getAbsolutePivotPointToRef(result: Vector3): TransformNode {\r\n        this.getPivotPointToRef(result);\r\n        Vector3.TransformCoordinatesToRef(result, this.getWorldMatrix(), result);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Flag the transform node as dirty (Forcing it to update everything)\r\n     * @param property if set to \"rotation\" the objects rotationQuaternion will be set to null\r\n     * @returns this  node\r\n     */\r\n    public markAsDirty(property?: string): Node {\r\n        if (this._isDirty) {\r\n            return this;\r\n        }\r\n\r\n        // We need to explicitly update the children\r\n        // as the scene.evaluateActiveMeshes will not poll the transform nodes\r\n        if (this._children) {\r\n            for (const child of this._children) {\r\n                child.markAsDirty(property);\r\n            }\r\n        }\r\n        return super.markAsDirty(property);\r\n    }\r\n\r\n    /**\r\n     * Defines the passed node as the parent of the current node.\r\n     * The node will remain exactly where it is and its position / rotation will be updated accordingly.\r\n     * Note that if the mesh has a pivot matrix / point defined it will be applied after the parent was updated.\r\n     * In that case the node will not remain in the same space as it is, as the pivot will be applied.\r\n     * To avoid this, you can set updatePivot to true and the pivot will be updated to identity\r\n     * @see https://doc.babylonjs.com/how_to/parenting\r\n     * @param node the node ot set as the parent\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @param updatePivot if true, update the pivot matrix to keep the node in the same space as before\r\n     * @returns this TransformNode.\r\n     */\r\n    public setParent(node: Nullable<Node>, preserveScalingSign: boolean = false, updatePivot = false): TransformNode {\r\n        if (!node && !this.parent) {\r\n            return this;\r\n        }\r\n\r\n        const quatRotation = TmpVectors.Quaternion[0];\r\n        const position = TmpVectors.Vector3[0];\r\n        const scale = TmpVectors.Vector3[1];\r\n        const invParentMatrix = TmpVectors.Matrix[1];\r\n        Matrix.IdentityToRef(invParentMatrix);\r\n        const composedMatrix = TmpVectors.Matrix[0];\r\n        this.computeWorldMatrix(true);\r\n\r\n        let currentRotation = this.rotationQuaternion;\r\n        if (!currentRotation) {\r\n            currentRotation = TransformNode._TmpRotation;\r\n            Quaternion.RotationYawPitchRollToRef(this._rotation.y, this._rotation.x, this._rotation.z, currentRotation);\r\n        }\r\n\r\n        // current global transformation without pivot\r\n        Matrix.ComposeToRef(this.scaling, currentRotation, this.position, composedMatrix);\r\n        if (this.parent) {\r\n            composedMatrix.multiplyToRef(this.parent.computeWorldMatrix(true), composedMatrix);\r\n        }\r\n\r\n        // is a node was set, calculate the difference between this and the node\r\n        if (node) {\r\n            node.computeWorldMatrix(true).invertToRef(invParentMatrix);\r\n            composedMatrix.multiplyToRef(invParentMatrix, composedMatrix);\r\n        }\r\n        composedMatrix.decompose(scale, quatRotation, position, preserveScalingSign ? this : undefined);\r\n\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion.copyFrom(quatRotation);\r\n        } else {\r\n            quatRotation.toEulerAnglesToRef(this.rotation);\r\n        }\r\n\r\n        this.scaling.copyFrom(scale);\r\n        this.position.copyFrom(position);\r\n\r\n        this.parent = node;\r\n\r\n        if (updatePivot) {\r\n            this.setPivotMatrix(Matrix.Identity());\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _nonUniformScaling = false;\r\n    /**\r\n     * True if the scaling property of this object is non uniform eg. (1,2,1)\r\n     */\r\n    public get nonUniformScaling(): boolean {\r\n        return this._nonUniformScaling;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateNonUniformScalingState(value: boolean): boolean {\r\n        if (this._nonUniformScaling === value) {\r\n            return false;\r\n        }\r\n\r\n        this._nonUniformScaling = value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Attach the current TransformNode to another TransformNode associated with a bone\r\n     * @param bone Bone affecting the TransformNode\r\n     * @param affectedTransformNode TransformNode associated with the bone\r\n     * @returns this object\r\n     */\r\n    public attachToBone(bone: Bone, affectedTransformNode: TransformNode): TransformNode {\r\n        this._currentParentWhenAttachingToBone = this.parent;\r\n        this._transformToBoneReferal = affectedTransformNode;\r\n        this.parent = bone;\r\n\r\n        bone.getSkeleton().prepare();\r\n\r\n        if (bone.getWorldMatrix().determinant() < 0) {\r\n            this.scalingDeterminant *= -1;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Detach the transform node if its associated with a bone\r\n     * @param resetToPreviousParent Indicates if the parent that was in effect when attachToBone was called should be set back or if we should set parent to null instead (defaults to the latter)\r\n     * @returns this object\r\n     */\r\n    public detachFromBone(resetToPreviousParent = false): TransformNode {\r\n        if (!this.parent) {\r\n            if (resetToPreviousParent) {\r\n                this.parent = this._currentParentWhenAttachingToBone;\r\n            }\r\n            return this;\r\n        }\r\n\r\n        if (this.parent.getWorldMatrix().determinant() < 0) {\r\n            this.scalingDeterminant *= -1;\r\n        }\r\n        this._transformToBoneReferal = null;\r\n        if (resetToPreviousParent) {\r\n            this.parent = this._currentParentWhenAttachingToBone;\r\n        } else {\r\n            this.parent = null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private static _RotationAxisCache = new Quaternion();\r\n    /**\r\n     * Rotates the mesh around the axis vector for the passed angle (amount) expressed in radians, in the given space.\r\n     * space (default LOCAL) can be either Space.LOCAL, either Space.WORLD.\r\n     * Note that the property `rotationQuaternion` is then automatically updated and the property `rotation` is set to (0,0,0) and no longer used.\r\n     * The passed axis is also normalized.\r\n     * @param axis the axis to rotate around\r\n     * @param amount the amount to rotate in radians\r\n     * @param space Space to rotate in (Default: local)\r\n     * @returns the TransformNode.\r\n     */\r\n    public rotate(axis: Vector3, amount: number, space?: Space): TransformNode {\r\n        axis.normalize();\r\n        if (!this.rotationQuaternion) {\r\n            this.rotationQuaternion = this.rotation.toQuaternion();\r\n            this.rotation.setAll(0);\r\n        }\r\n        let rotationQuaternion: Quaternion;\r\n        if (!space || (space as any) === Space.LOCAL) {\r\n            rotationQuaternion = Quaternion.RotationAxisToRef(axis, amount, TransformNode._RotationAxisCache);\r\n            this.rotationQuaternion.multiplyToRef(rotationQuaternion, this.rotationQuaternion);\r\n        } else {\r\n            if (this.parent) {\r\n                const invertParentWorldMatrix = TmpVectors.Matrix[0];\r\n                this.parent.getWorldMatrix().invertToRef(invertParentWorldMatrix);\r\n                axis = Vector3.TransformNormal(axis, invertParentWorldMatrix);\r\n            }\r\n            rotationQuaternion = Quaternion.RotationAxisToRef(axis, amount, TransformNode._RotationAxisCache);\r\n            rotationQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates the mesh around the axis vector for the passed angle (amount) expressed in radians, in world space.\r\n     * Note that the property `rotationQuaternion` is then automatically updated and the property `rotation` is set to (0,0,0) and no longer used.\r\n     * The passed axis is also normalized. .\r\n     * Method is based on http://www.euclideanspace.com/maths/geometry/affine/aroundPoint/index.htm\r\n     * @param point the point to rotate around\r\n     * @param axis the axis to rotate around\r\n     * @param amount the amount to rotate in radians\r\n     * @returns the TransformNode\r\n     */\r\n    public rotateAround(point: Vector3, axis: Vector3, amount: number): TransformNode {\r\n        axis.normalize();\r\n        if (!this.rotationQuaternion) {\r\n            this.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\r\n            this.rotation.setAll(0);\r\n        }\r\n\r\n        const tmpVector = TmpVectors.Vector3[0];\r\n        const finalScale = TmpVectors.Vector3[1];\r\n        const finalTranslation = TmpVectors.Vector3[2];\r\n\r\n        const finalRotation = TmpVectors.Quaternion[0];\r\n\r\n        const translationMatrix = TmpVectors.Matrix[0]; // T\r\n        const translationMatrixInv = TmpVectors.Matrix[1]; // T'\r\n        const rotationMatrix = TmpVectors.Matrix[2]; // R\r\n        const finalMatrix = TmpVectors.Matrix[3]; // T' x R x T\r\n\r\n        point.subtractToRef(this.position, tmpVector);\r\n        Matrix.TranslationToRef(tmpVector.x, tmpVector.y, tmpVector.z, translationMatrix); // T\r\n        Matrix.TranslationToRef(-tmpVector.x, -tmpVector.y, -tmpVector.z, translationMatrixInv); // T'\r\n        Matrix.RotationAxisToRef(axis, amount, rotationMatrix); // R\r\n\r\n        translationMatrixInv.multiplyToRef(rotationMatrix, finalMatrix); // T' x R\r\n        finalMatrix.multiplyToRef(translationMatrix, finalMatrix); // T' x R x T\r\n\r\n        finalMatrix.decompose(finalScale, finalRotation, finalTranslation);\r\n\r\n        this.position.addInPlace(finalTranslation);\r\n        finalRotation.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the mesh along the axis vector for the passed distance in the given space.\r\n     * space (default LOCAL) can be either Space.LOCAL, either Space.WORLD.\r\n     * @param axis the axis to translate in\r\n     * @param distance the distance to translate\r\n     * @param space Space to rotate in (Default: local)\r\n     * @returns the TransformNode.\r\n     */\r\n    public translate(axis: Vector3, distance: number, space?: Space): TransformNode {\r\n        const displacementVector = axis.scale(distance);\r\n        if (!space || (space as any) === Space.LOCAL) {\r\n            const tempV3 = this.getPositionExpressedInLocalSpace().add(displacementVector);\r\n            this.setPositionWithLocalVector(tempV3);\r\n        } else {\r\n            this.setAbsolutePosition(this.getAbsolutePosition().add(displacementVector));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a rotation step to the mesh current rotation.\r\n     * x, y, z are Euler angles expressed in radians.\r\n     * This methods updates the current mesh rotation, either mesh.rotation, either mesh.rotationQuaternion if it's set.\r\n     * This means this rotation is made in the mesh local space only.\r\n     * It's useful to set a custom rotation order different from the BJS standard one YXZ.\r\n     * Example : this rotates the mesh first around its local X axis, then around its local Z axis, finally around its local Y axis.\r\n     * ```javascript\r\n     * mesh.addRotation(x1, 0, 0).addRotation(0, 0, z2).addRotation(0, 0, y3);\r\n     * ```\r\n     * Note that `addRotation()` accumulates the passed rotation values to the current ones and computes the .rotation or .rotationQuaternion updated values.\r\n     * Under the hood, only quaternions are used. So it's a little faster is you use .rotationQuaternion because it doesn't need to translate them back to Euler angles.\r\n     * @param x Rotation to add\r\n     * @param y Rotation to add\r\n     * @param z Rotation to add\r\n     * @returns the TransformNode.\r\n     */\r\n    public addRotation(x: number, y: number, z: number): TransformNode {\r\n        let rotationQuaternion;\r\n        if (this.rotationQuaternion) {\r\n            rotationQuaternion = this.rotationQuaternion;\r\n        } else {\r\n            rotationQuaternion = TmpVectors.Quaternion[1];\r\n            Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, rotationQuaternion);\r\n        }\r\n        const accumulation = TmpVectors.Quaternion[0];\r\n        Quaternion.RotationYawPitchRollToRef(y, x, z, accumulation);\r\n        rotationQuaternion.multiplyInPlace(accumulation);\r\n        if (!this.rotationQuaternion) {\r\n            rotationQuaternion.toEulerAnglesToRef(this.rotation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _getEffectiveParent(): Nullable<Node> {\r\n        return this.parent;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(force?: boolean): Matrix {\r\n        if (this._isWorldMatrixFrozen && !this._isDirty) {\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        const currentRenderId = this.getScene().getRenderId();\r\n        if (!this._isDirty && !force && (this._currentRenderId === currentRenderId || this.isSynchronized())) {\r\n            this._currentRenderId = currentRenderId;\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        const camera = <Camera>this.getScene().activeCamera;\r\n        const useBillboardPosition = (this._billboardMode & TransformNode.BILLBOARDMODE_USE_POSITION) !== 0;\r\n        const useBillboardPath = this._billboardMode !== TransformNode.BILLBOARDMODE_NONE && !this.preserveParentRotationForBillboard;\r\n\r\n        this._updateCache();\r\n        const cache = this._cache;\r\n        cache.pivotMatrixUpdated = false;\r\n        cache.billboardMode = this.billboardMode;\r\n        cache.infiniteDistance = this.infiniteDistance;\r\n        cache.parent = this._parentNode;\r\n\r\n        this._currentRenderId = currentRenderId;\r\n        this._childUpdateId += 1;\r\n        this._isDirty = false;\r\n        this._position._isDirty = false;\r\n        this._rotation._isDirty = false;\r\n        this._scaling._isDirty = false;\r\n        const parent = this._getEffectiveParent();\r\n\r\n        // Scaling\r\n        const scaling: Vector3 = TransformNode._TmpScaling;\r\n        let translation: Vector3 = this._position;\r\n\r\n        // Translation\r\n        if (this._infiniteDistance) {\r\n            if (!this.parent && camera) {\r\n                const cameraWorldMatrix = camera.getWorldMatrix();\r\n                const cameraGlobalPosition = new Vector3(cameraWorldMatrix.m[12], cameraWorldMatrix.m[13], cameraWorldMatrix.m[14]);\r\n\r\n                translation = TransformNode._TmpTranslation;\r\n                translation.copyFromFloats(this._position.x + cameraGlobalPosition.x, this._position.y + cameraGlobalPosition.y, this._position.z + cameraGlobalPosition.z);\r\n            }\r\n        }\r\n\r\n        // Scaling\r\n        scaling.copyFromFloats(this._scaling.x * this.scalingDeterminant, this._scaling.y * this.scalingDeterminant, this._scaling.z * this.scalingDeterminant);\r\n\r\n        // Rotation\r\n        let rotation: Quaternion;\r\n        if (this._rotationQuaternion) {\r\n            this._rotationQuaternion._isDirty = false;\r\n            rotation = this._rotationQuaternion;\r\n            if (this.reIntegrateRotationIntoRotationQuaternion) {\r\n                const len = this.rotation.lengthSquared();\r\n                if (len) {\r\n                    this._rotationQuaternion.multiplyInPlace(Quaternion.RotationYawPitchRoll(this._rotation.y, this._rotation.x, this._rotation.z));\r\n                    this._rotation.copyFromFloats(0, 0, 0);\r\n                }\r\n            }\r\n        } else {\r\n            rotation = TransformNode._TmpRotation;\r\n            Quaternion.RotationYawPitchRollToRef(this._rotation.y, this._rotation.x, this._rotation.z, rotation);\r\n        }\r\n\r\n        // Compose\r\n        if (this._usePivotMatrix) {\r\n            const scaleMatrix = TmpVectors.Matrix[1];\r\n            Matrix.ScalingToRef(scaling.x, scaling.y, scaling.z, scaleMatrix);\r\n\r\n            // Rotation\r\n            const rotationMatrix = TmpVectors.Matrix[0];\r\n            rotation.toRotationMatrix(rotationMatrix);\r\n\r\n            // Composing transformations\r\n            this._pivotMatrix.multiplyToRef(scaleMatrix, TmpVectors.Matrix[4]);\r\n            TmpVectors.Matrix[4].multiplyToRef(rotationMatrix, this._localMatrix);\r\n\r\n            // Post multiply inverse of pivotMatrix\r\n            if (this._postMultiplyPivotMatrix) {\r\n                this._localMatrix.multiplyToRef(this._pivotMatrixInverse, this._localMatrix);\r\n            }\r\n\r\n            this._localMatrix.addTranslationFromFloats(translation.x, translation.y, translation.z);\r\n        } else {\r\n            Matrix.ComposeToRef(scaling, rotation, translation, this._localMatrix);\r\n        }\r\n\r\n        // Parent\r\n        if (parent && parent.getWorldMatrix) {\r\n            if (force) {\r\n                parent.computeWorldMatrix(force);\r\n            }\r\n            if (useBillboardPath) {\r\n                if (this._transformToBoneReferal) {\r\n                    parent.getWorldMatrix().multiplyToRef(this._transformToBoneReferal.getWorldMatrix(), TmpVectors.Matrix[7]);\r\n                } else {\r\n                    TmpVectors.Matrix[7].copyFrom(parent.getWorldMatrix());\r\n                }\r\n\r\n                // Extract scaling and translation from parent\r\n                const translation = TmpVectors.Vector3[5];\r\n                const scale = TmpVectors.Vector3[6];\r\n                const orientation = TmpVectors.Quaternion[0];\r\n                TmpVectors.Matrix[7].decompose(scale, orientation, translation);\r\n                Matrix.ScalingToRef(scale.x, scale.y, scale.z, TmpVectors.Matrix[7]);\r\n                TmpVectors.Matrix[7].setTranslation(translation);\r\n\r\n                if (TransformNode.BillboardUseParentOrientation) {\r\n                    // set localMatrix translation to be transformed against parent's orientation.\r\n                    this._position.applyRotationQuaternionToRef(orientation, translation);\r\n                    this._localMatrix.setTranslation(translation);\r\n                }\r\n\r\n                this._localMatrix.multiplyToRef(TmpVectors.Matrix[7], this._worldMatrix);\r\n            } else {\r\n                if (this._transformToBoneReferal) {\r\n                    this._localMatrix.multiplyToRef(parent.getWorldMatrix(), TmpVectors.Matrix[6]);\r\n                    TmpVectors.Matrix[6].multiplyToRef(this._transformToBoneReferal.getWorldMatrix(), this._worldMatrix);\r\n                } else {\r\n                    this._localMatrix.multiplyToRef(parent.getWorldMatrix(), this._worldMatrix);\r\n                }\r\n            }\r\n            this._markSyncedWithParent();\r\n        } else {\r\n            this._worldMatrix.copyFrom(this._localMatrix);\r\n        }\r\n\r\n        // Billboarding based on camera orientation (testing PG:http://www.babylonjs-playground.com/#UJEIL#13)\r\n        if (useBillboardPath && camera && this.billboardMode && !useBillboardPosition) {\r\n            const storedTranslation = TmpVectors.Vector3[0];\r\n            this._worldMatrix.getTranslationToRef(storedTranslation); // Save translation\r\n\r\n            // Cancel camera rotation\r\n            TmpVectors.Matrix[1].copyFrom(camera.getViewMatrix());\r\n            TmpVectors.Matrix[1].setTranslationFromFloats(0, 0, 0);\r\n            TmpVectors.Matrix[1].invertToRef(TmpVectors.Matrix[0]);\r\n\r\n            if ((this.billboardMode & TransformNode.BILLBOARDMODE_ALL) !== TransformNode.BILLBOARDMODE_ALL) {\r\n                TmpVectors.Matrix[0].decompose(undefined, TmpVectors.Quaternion[0], undefined);\r\n                const eulerAngles = TmpVectors.Vector3[1];\r\n                TmpVectors.Quaternion[0].toEulerAnglesToRef(eulerAngles);\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_X) !== TransformNode.BILLBOARDMODE_X) {\r\n                    eulerAngles.x = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Y) !== TransformNode.BILLBOARDMODE_Y) {\r\n                    eulerAngles.y = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Z) !== TransformNode.BILLBOARDMODE_Z) {\r\n                    eulerAngles.z = 0;\r\n                }\r\n\r\n                Matrix.RotationYawPitchRollToRef(eulerAngles.y, eulerAngles.x, eulerAngles.z, TmpVectors.Matrix[0]);\r\n            }\r\n            this._worldMatrix.setTranslationFromFloats(0, 0, 0);\r\n            this._worldMatrix.multiplyToRef(TmpVectors.Matrix[0], this._worldMatrix);\r\n\r\n            // Restore translation\r\n            this._worldMatrix.setTranslation(TmpVectors.Vector3[0]);\r\n        }\r\n        // Billboarding based on camera position\r\n        else if (useBillboardPath && camera && this.billboardMode && useBillboardPosition) {\r\n            const storedTranslation = TmpVectors.Vector3[0];\r\n            // Save translation\r\n            this._worldMatrix.getTranslationToRef(storedTranslation);\r\n\r\n            // Compute camera position in local space\r\n            const cameraPosition = camera.globalPosition;\r\n            this._worldMatrix.invertToRef(TmpVectors.Matrix[1]);\r\n            const camInObjSpace = TmpVectors.Vector3[1];\r\n            Vector3.TransformCoordinatesToRef(cameraPosition, TmpVectors.Matrix[1], camInObjSpace);\r\n            camInObjSpace.normalize();\r\n\r\n            // Find the lookAt info in local space\r\n            const yaw = -Math.atan2(camInObjSpace.z, camInObjSpace.x) + Math.PI / 2;\r\n            const len = Math.sqrt(camInObjSpace.x * camInObjSpace.x + camInObjSpace.z * camInObjSpace.z);\r\n            const pitch = -Math.atan2(camInObjSpace.y, len);\r\n            Quaternion.RotationYawPitchRollToRef(yaw, pitch, 0, TmpVectors.Quaternion[0]);\r\n\r\n            if ((this.billboardMode & TransformNode.BILLBOARDMODE_ALL) !== TransformNode.BILLBOARDMODE_ALL) {\r\n                const eulerAngles = TmpVectors.Vector3[1];\r\n                TmpVectors.Quaternion[0].toEulerAnglesToRef(eulerAngles);\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_X) !== TransformNode.BILLBOARDMODE_X) {\r\n                    eulerAngles.x = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Y) !== TransformNode.BILLBOARDMODE_Y) {\r\n                    eulerAngles.y = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Z) !== TransformNode.BILLBOARDMODE_Z) {\r\n                    eulerAngles.z = 0;\r\n                }\r\n\r\n                Matrix.RotationYawPitchRollToRef(eulerAngles.y, eulerAngles.x, eulerAngles.z, TmpVectors.Matrix[0]);\r\n            } else {\r\n                Matrix.FromQuaternionToRef(TmpVectors.Quaternion[0], TmpVectors.Matrix[0]);\r\n            }\r\n\r\n            // Cancel translation\r\n            this._worldMatrix.setTranslationFromFloats(0, 0, 0);\r\n\r\n            // Rotate according to lookat (diff from local to lookat)\r\n            this._worldMatrix.multiplyToRef(TmpVectors.Matrix[0], this._worldMatrix);\r\n\r\n            // Restore translation\r\n            this._worldMatrix.setTranslation(TmpVectors.Vector3[0]);\r\n        }\r\n\r\n        // Normal matrix\r\n        if (!this.ignoreNonUniformScaling) {\r\n            if (this._scaling.isNonUniformWithinEpsilon(0.000001)) {\r\n                this._updateNonUniformScalingState(true);\r\n            } else if (parent && (<TransformNode>parent)._nonUniformScaling) {\r\n                this._updateNonUniformScalingState((<TransformNode>parent)._nonUniformScaling);\r\n            } else {\r\n                this._updateNonUniformScalingState(false);\r\n            }\r\n        } else {\r\n            this._updateNonUniformScalingState(false);\r\n        }\r\n\r\n        this._afterComputeWorldMatrix();\r\n\r\n        // Absolute position\r\n        this._absolutePosition.copyFromFloats(this._worldMatrix.m[12], this._worldMatrix.m[13], this._worldMatrix.m[14]);\r\n        this._isAbsoluteSynced = false;\r\n\r\n        // Callbacks\r\n        this.onAfterWorldMatrixUpdateObservable.notifyObservers(this);\r\n\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = Matrix.Invert(this._worldMatrix);\r\n        }\r\n\r\n        // Cache the determinant\r\n        this._worldMatrixDeterminantIsDirty = true;\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Resets this nodeTransform's local matrix to Matrix.Identity().\r\n     * @param independentOfChildren indicates if all child nodeTransform's world-space transform should be preserved.\r\n     */\r\n    public resetLocalMatrix(independentOfChildren: boolean = true): void {\r\n        this.computeWorldMatrix();\r\n        if (independentOfChildren) {\r\n            const children = this.getChildren();\r\n            for (let i = 0; i < children.length; ++i) {\r\n                const child = children[i] as TransformNode;\r\n                if (child) {\r\n                    child.computeWorldMatrix();\r\n                    const bakedMatrix = TmpVectors.Matrix[0];\r\n                    child._localMatrix.multiplyToRef(this._localMatrix, bakedMatrix);\r\n                    const tmpRotationQuaternion = TmpVectors.Quaternion[0];\r\n                    bakedMatrix.decompose(child.scaling, tmpRotationQuaternion, child.position);\r\n                    if (child.rotationQuaternion) {\r\n                        child.rotationQuaternion.copyFrom(tmpRotationQuaternion);\r\n                    } else {\r\n                        tmpRotationQuaternion.toEulerAnglesToRef(child.rotation);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.scaling.copyFromFloats(1, 1, 1);\r\n        this.position.copyFromFloats(0, 0, 0);\r\n        this.rotation.copyFromFloats(0, 0, 0);\r\n\r\n        //only if quaternion is already set\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion = Quaternion.Identity();\r\n        }\r\n        this._worldMatrix = Matrix.Identity();\r\n    }\r\n\r\n    protected _afterComputeWorldMatrix(): void {}\r\n\r\n    /**\r\n     * If you'd like to be called back after the mesh position, rotation or scaling has been updated.\r\n     * @param func callback function to add\r\n     *\r\n     * @returns the TransformNode.\r\n     */\r\n    public registerAfterWorldMatrixUpdate(func: (mesh: TransformNode) => void): TransformNode {\r\n        this.onAfterWorldMatrixUpdateObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a registered callback function.\r\n     * @param func callback function to remove\r\n     * @returns the TransformNode.\r\n     */\r\n    public unregisterAfterWorldMatrixUpdate(func: (mesh: TransformNode) => void): TransformNode {\r\n        this.onAfterWorldMatrixUpdateObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the position of the current mesh in camera space\r\n     * @param camera defines the camera to use\r\n     * @returns a position\r\n     */\r\n    public getPositionInCameraSpace(camera: Nullable<Camera> = null): Vector3 {\r\n        if (!camera) {\r\n            camera = <Camera>this.getScene().activeCamera;\r\n        }\r\n\r\n        return Vector3.TransformCoordinates(this.getAbsolutePosition(), camera.getViewMatrix());\r\n    }\r\n\r\n    /**\r\n     * Returns the distance from the mesh to the active camera\r\n     * @param camera defines the camera to use\r\n     * @returns the distance\r\n     */\r\n    public getDistanceToCamera(camera: Nullable<Camera> = null): number {\r\n        if (!camera) {\r\n            camera = <Camera>this.getScene().activeCamera;\r\n        }\r\n        return this.getAbsolutePosition().subtract(camera.globalPosition).length();\r\n    }\r\n\r\n    /**\r\n     * Clone the current transform node\r\n     * @param name Name of the new clone\r\n     * @param newParent New parent for the clone\r\n     * @param doNotCloneChildren Do not clone children hierarchy\r\n     * @returns the new transform node\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<TransformNode> {\r\n        const result = SerializationHelper.Clone(() => new TransformNode(name, this.getScene()), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        if (newParent) {\r\n            result.parent = newParent;\r\n        }\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            const directDescendants = this.getDescendants(true);\r\n            for (let index = 0; index < directDescendants.length; index++) {\r\n                const child = directDescendants[index];\r\n\r\n                if ((<any>child).clone) {\r\n                    (<any>child).clone(name + \".\" + child.name, result);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Serializes the objects information.\r\n     * @param currentSerializationObject defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(currentSerializationObject?: any): any {\r\n        const serializationObject = SerializationHelper.Serialize(this, currentSerializationObject);\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        serializationObject.localMatrix = this.getPivotMatrix().asArray();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Returns a new TransformNode object parsed from the source provided.\r\n     * @param parsedTransformNode is the source.\r\n     * @param scene the scene the object belongs to\r\n     * @param rootUrl is a string, it's the root URL to prefix the `delayLoadingFile` property with\r\n     * @returns a new TransformNode object parsed from the source provided.\r\n     */\r\n    public static Parse(parsedTransformNode: any, scene: Scene, rootUrl: string): TransformNode {\r\n        const transformNode = SerializationHelper.Parse(() => new TransformNode(parsedTransformNode.name, scene), parsedTransformNode, scene, rootUrl);\r\n\r\n        if (parsedTransformNode.localMatrix) {\r\n            transformNode.setPreTransformMatrix(Matrix.FromArray(parsedTransformNode.localMatrix));\r\n        } else if (parsedTransformNode.pivotMatrix) {\r\n            transformNode.setPivotMatrix(Matrix.FromArray(parsedTransformNode.pivotMatrix));\r\n        }\r\n\r\n        transformNode.setEnabled(parsedTransformNode.isEnabled);\r\n\r\n        transformNode._waitingParsedUniqueId = parsedTransformNode.uniqueId;\r\n\r\n        // Parent\r\n        if (parsedTransformNode.parentId !== undefined) {\r\n            transformNode._waitingParentId = parsedTransformNode.parentId;\r\n        }\r\n\r\n        if (parsedTransformNode.parentInstanceIndex !== undefined) {\r\n            transformNode._waitingParentInstanceIndex = parsedTransformNode.parentInstanceIndex;\r\n        }\r\n\r\n        return transformNode;\r\n    }\r\n\r\n    /**\r\n     * Get all child-transformNodes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of TransformNode\r\n     */\r\n    public getChildTransformNodes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): TransformNode[] {\r\n        const results: Array<TransformNode> = [];\r\n        this._getDescendants(results, directDescendantsOnly, (node: Node) => {\r\n            return (!predicate || predicate(node)) && node instanceof TransformNode;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this transform node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        // Remove from scene\r\n        this.getScene().removeTransformNode(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.transformNodes.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.transformNodes.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this.onAfterWorldMatrixUpdateObservable.clear();\r\n\r\n        if (doNotRecurse) {\r\n            const transformNodes = this.getChildTransformNodes(true);\r\n            for (const transformNode of transformNodes) {\r\n                transformNode.parent = null;\r\n                transformNode.computeWorldMatrix(true);\r\n            }\r\n        }\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * Uniformly scales the mesh to fit inside of a unit cube (1 X 1 X 1 units)\r\n     * @param includeDescendants Use the hierarchy's bounding box instead of the mesh's bounding box. Default is false\r\n     * @param ignoreRotation ignore rotation when computing the scale (ie. object will be axis aligned). Default is false\r\n     * @param predicate predicate that is passed in to getHierarchyBoundingVectors when selecting which object should be included when scaling\r\n     * @returns the current mesh\r\n     */\r\n    public normalizeToUnitCube(includeDescendants = true, ignoreRotation = false, predicate?: Nullable<(node: AbstractMesh) => boolean>): TransformNode {\r\n        let storedRotation: Nullable<Vector3> = null;\r\n        let storedRotationQuaternion: Nullable<Quaternion> = null;\r\n\r\n        if (ignoreRotation) {\r\n            if (this.rotationQuaternion) {\r\n                storedRotationQuaternion = this.rotationQuaternion.clone();\r\n                this.rotationQuaternion.copyFromFloats(0, 0, 0, 1);\r\n            } else if (this.rotation) {\r\n                storedRotation = this.rotation.clone();\r\n                this.rotation.copyFromFloats(0, 0, 0);\r\n            }\r\n        }\r\n\r\n        const boundingVectors = this.getHierarchyBoundingVectors(includeDescendants, predicate);\r\n        const sizeVec = boundingVectors.max.subtract(boundingVectors.min);\r\n        const maxDimension = Math.max(sizeVec.x, sizeVec.y, sizeVec.z);\r\n\r\n        if (maxDimension === 0) {\r\n            return this;\r\n        }\r\n\r\n        const scale = 1 / maxDimension;\r\n\r\n        this.scaling.scaleInPlace(scale);\r\n\r\n        if (ignoreRotation) {\r\n            if (this.rotationQuaternion && storedRotationQuaternion) {\r\n                this.rotationQuaternion.copyFrom(storedRotationQuaternion);\r\n            } else if (this.rotation && storedRotation) {\r\n                this.rotation.copyFrom(storedRotation);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _syncAbsoluteScalingAndRotation(): void {\r\n        if (!this._isAbsoluteSynced) {\r\n            this._worldMatrix.decompose(this._absoluteScaling, this._absoluteRotationQuaternion);\r\n            this._isAbsoluteSynced = true;\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\n// \"Coroutines are computer program components that generalize subroutines for non-preemptive multitasking, by allowing execution to be suspended and resumed.\"\r\n// https://en.wikipedia.org/wiki/Coroutine\r\n\r\n// In this implementation, coroutines are typically created via generator functions (function* with yield statements).\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\r\n\r\n// In this implementation, the generator function (possibly parameterized) is referred to as a coroutine factory, and the returned iterator is referred to as the coroutine.\r\n// Technically yielding generator functions are not required - anything that implements the contract of Coroutine<T> can be run as a coroutine.\r\n\r\n// The coroutine is started with the first call to next on the iterator, it is suspended with yield statements, and it is resumed with additional calls to next on the iterator.\r\n// To create an object satisfying the Coroutine<T> contract with a generator function, it must not yield values, but rather only void via a plain \"yield;\" statement.\r\n// Coroutines can call other coroutines via:\r\n// 1. yield* someOtherCoroutine(); // If the called coroutine does not return a value\r\n// 2. const result = yield* someOtherCoroutine(); // If the called coroutine returns a value\r\n\r\n// Coroutines are run with the runCoroutine function, which takes a Coroutine<T>, a CoroutineScheduler<T>, and a success and error callback.\r\n// A scheduler is responsible for scheduling the next step of a coroutine, either synchronously or asynchronously.\r\n\r\n/**\r\n * A Coroutine<T> is the intersection of:\r\n * 1. An Iterator that yields void, returns a T, and is not passed values with calls to next.\r\n * 2. An IterableIterator of void (since it only yields void).\r\n */\r\ntype CoroutineBase<TStep, TReturn> = Iterator<TStep, TReturn, void> & IterableIterator<TStep>;\r\n/** @internal */\r\nexport type Coroutine<T> = CoroutineBase<void, T>;\r\n/** @internal */\r\nexport type AsyncCoroutine<T> = CoroutineBase<void | Promise<void>, T>;\r\n\r\n// A CoroutineStep<T> represents a single step of a coroutine, and is an IteratorResult as returned from Coroutine<T>.next().\r\n/** @internal */\r\nexport type CoroutineStep<T> = IteratorResult<void, T>;\r\n\r\n// A CoroutineScheduler<T> is responsible for scheduling the call to Coroutine<T>.next and invokes the success or error callback after next is called.\r\n/** @internal */\r\nexport type CoroutineScheduler<T> = (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => void;\r\n\r\n// The inline scheduler simply steps the coroutine synchronously. This is useful for running a coroutine synchronously, and also as a helper function for other schedulers.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function inlineScheduler<T>(coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) {\r\n    try {\r\n        const step = coroutine.next();\r\n\r\n        if (step.done) {\r\n            onStep(step);\r\n        } else if (!step.value) {\r\n            // NOTE: The properties of step have been narrowed, but the type of step itself is not narrowed, so the cast below is the most type safe way to deal with this without instantiating a new object to hold the values.\r\n            onStep(step as { done: typeof step.done; value: typeof step.value });\r\n        } else {\r\n            step.value.then(() => {\r\n                step.value = undefined;\r\n                onStep(step as { done: typeof step.done; value: typeof step.value });\r\n            }, onError);\r\n        }\r\n    } catch (error) {\r\n        onError(error);\r\n    }\r\n}\r\n\r\n// The yielding scheduler steps the coroutine synchronously until the specified time interval has elapsed, then yields control so other operations can be performed.\r\n// A single instance of a yielding scheduler could be shared across multiple coroutines to yield when their collective work exceeds the threshold.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function createYieldingScheduler<T>(yieldAfterMS = 25) {\r\n    let startTime: number | undefined;\r\n    return (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => {\r\n        const currentTime = performance.now();\r\n\r\n        if (startTime === undefined || currentTime - startTime > yieldAfterMS) {\r\n            // If this is the first coroutine step, or if the time interval has elapsed, record a new start time, and schedule the coroutine step to happen later, effectively yielding control of the execution context.\r\n            startTime = currentTime;\r\n            setTimeout(() => {\r\n                inlineScheduler(coroutine, onStep, onError);\r\n            }, 0);\r\n        } else {\r\n            // Otherwise it is not time to yield yet, so step the coroutine synchronously.\r\n            inlineScheduler(coroutine, onStep, onError);\r\n        }\r\n    };\r\n}\r\n\r\n// Runs the specified coroutine with the specified scheduler. The success or error callback will be invoked when the coroutine finishes.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function runCoroutine<T>(\r\n    coroutine: AsyncCoroutine<T>,\r\n    scheduler: CoroutineScheduler<T>,\r\n    onSuccess: (result: T) => void,\r\n    onError: (error: any) => void,\r\n    abortSignal?: AbortSignal\r\n) {\r\n    const resume = () => {\r\n        let reschedule: boolean | undefined;\r\n\r\n        const onStep = (stepResult: CoroutineStep<T>) => {\r\n            if (stepResult.done) {\r\n                // If the coroutine is done, report success.\r\n                onSuccess(stepResult.value);\r\n            } else {\r\n                // If the coroutine is not done, resume the coroutine (via the scheduler).\r\n                if (reschedule === undefined) {\r\n                    // If reschedule is undefined at this point, then the coroutine must have stepped synchronously, so just flag another loop iteration.\r\n                    reschedule = true;\r\n                } else {\r\n                    // If reschedule is defined at this point, then the coroutine must have stepped asynchronously, so call resume to restart the step loop.\r\n                    resume();\r\n                }\r\n            }\r\n        };\r\n\r\n        do {\r\n            reschedule = undefined;\r\n\r\n            if (!abortSignal || !abortSignal.aborted) {\r\n                scheduler(coroutine, onStep, onError);\r\n            } else {\r\n                onError(new Error(\"Aborted\"));\r\n            }\r\n\r\n            if (reschedule === undefined) {\r\n                // If reschedule is undefined at this point, then the coroutine must have stepped asynchronously, so stop looping and let the coroutine be resumed later.\r\n                reschedule = false;\r\n            }\r\n        } while (reschedule);\r\n    };\r\n\r\n    resume();\r\n}\r\n\r\n// Runs the specified coroutine synchronously.\r\n/**\r\n * @internal\r\n */\r\nexport function runCoroutineSync<T>(coroutine: Coroutine<T>, abortSignal?: AbortSignal): T {\r\n    // Run the coroutine with the inline scheduler, storing the returned value, or re-throwing the error (since the error callback will be called synchronously by the inline scheduler).\r\n    let result: T | undefined;\r\n    runCoroutine(\r\n        coroutine,\r\n        inlineScheduler,\r\n        (r: T) => (result = r),\r\n        (e: any) => {\r\n            throw e;\r\n        },\r\n        abortSignal\r\n    );\r\n\r\n    // Synchronously return the result of the coroutine.\r\n    return result!;\r\n}\r\n\r\n// Runs the specified coroutine asynchronously with the specified scheduler.\r\n/**\r\n * @internal\r\n */\r\nexport function runCoroutineAsync<T>(coroutine: AsyncCoroutine<T>, scheduler: CoroutineScheduler<T>, abortSignal?: AbortSignal): Promise<T> {\r\n    // Run the coroutine with a yielding scheduler, resolving or rejecting the result promise when the coroutine finishes.\r\n    return new Promise((resolve, reject) => {\r\n        runCoroutine(coroutine, scheduler, resolve, reject, abortSignal);\r\n    });\r\n}\r\n\r\n/**\r\n * Given a function that returns a Coroutine<T>, produce a function with the same parameters that returns a T.\r\n * The returned function runs the coroutine synchronously.\r\n * @param coroutineFactory A function that returns a Coroutine<T>.\r\n * @param abortSignal\r\n * @returns A function that runs the coroutine synchronously.\r\n * @internal\r\n */\r\nexport function makeSyncFunction<TParams extends unknown[], TReturn>(\r\n    coroutineFactory: (...params: TParams) => Coroutine<TReturn>,\r\n    abortSignal?: AbortSignal\r\n): (...params: TParams) => TReturn {\r\n    return (...params: TParams) => {\r\n        // Run the coroutine synchronously.\r\n        return runCoroutineSync(coroutineFactory(...params), abortSignal);\r\n    };\r\n}\r\n\r\n/**\r\n * Given a function that returns a Coroutine<T>, product a function with the same parameters that returns a Promise<T>.\r\n * The returned function runs the coroutine asynchronously, yield control of the execution context occasionally to enable a more responsive experience.\r\n * @param coroutineFactory A function that returns a Coroutine<T>.\r\n * @param scheduler\r\n * @param abortSignal\r\n * @returns A function that runs the coroutine asynchronously.\r\n * @internal\r\n */\r\nexport function makeAsyncFunction<TParams extends unknown[], TReturn>(\r\n    coroutineFactory: (...params: TParams) => AsyncCoroutine<TReturn>,\r\n    scheduler: CoroutineScheduler<TReturn>,\r\n    abortSignal?: AbortSignal\r\n): (...params: TParams) => Promise<TReturn> {\r\n    return (...params: TParams) => {\r\n        // Run the coroutine asynchronously.\r\n        return runCoroutineAsync(coroutineFactory(...params), scheduler, abortSignal);\r\n    };\r\n}\r\n","import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * This class implement a typical dictionary using a string as key and the generic type T as value.\r\n * The underlying implementation relies on an associative array to ensure the best performances.\r\n * The value can be anything including 'null' but except 'undefined'\r\n */\r\nexport class StringDictionary<T> {\r\n    /**\r\n     * This will clear this dictionary and copy the content from the 'source' one.\r\n     * If the T value is a custom object, it won't be copied/cloned, the same object will be used\r\n     * @param source the dictionary to take the content from and copy to this dictionary\r\n     */\r\n    public copyFrom(source: StringDictionary<T>) {\r\n        this.clear();\r\n        source.forEach((t, v) => this.add(t, v));\r\n    }\r\n\r\n    /**\r\n     * Get a value based from its key\r\n     * @param key the given key to get the matching value from\r\n     * @returns the value if found, otherwise undefined is returned\r\n     */\r\n    public get(key: string): T | undefined {\r\n        const val = this._data[key];\r\n        if (val !== undefined) {\r\n            return val;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get a value from its key or add it if it doesn't exist.\r\n     * This method will ensure you that a given key/data will be present in the dictionary.\r\n     * @param key the given key to get the matching value from\r\n     * @param factory the factory that will create the value if the key is not present in the dictionary.\r\n     * The factory will only be invoked if there's no data for the given key.\r\n     * @returns the value corresponding to the key.\r\n     */\r\n    public getOrAddWithFactory(key: string, factory: (key: string) => T): T {\r\n        let val = this.get(key);\r\n        if (val !== undefined) {\r\n            return val;\r\n        }\r\n\r\n        val = factory(key);\r\n        if (val) {\r\n            this.add(key, val);\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Get a value from its key if present in the dictionary otherwise add it\r\n     * @param key the key to get the value from\r\n     * @param val if there's no such key/value pair in the dictionary add it with this value\r\n     * @returns the value corresponding to the key\r\n     */\r\n    public getOrAdd(key: string, val: T): T {\r\n        const curVal = this.get(key);\r\n        if (curVal !== undefined) {\r\n            return curVal;\r\n        }\r\n\r\n        this.add(key, val);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Check if there's a given key in the dictionary\r\n     * @param key the key to check for\r\n     * @returns true if the key is present, false otherwise\r\n     */\r\n    public contains(key: string): boolean {\r\n        return this._data[key] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Add a new key and its corresponding value\r\n     * @param key the key to add\r\n     * @param value the value corresponding to the key\r\n     * @returns true if the operation completed successfully, false if we couldn't insert the key/value because there was already this key in the dictionary\r\n     */\r\n    public add(key: string, value: T): boolean {\r\n        if (this._data[key] !== undefined) {\r\n            return false;\r\n        }\r\n        this._data[key] = value;\r\n        ++this._count;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Update a specific value associated to a key\r\n     * @param key defines the key to use\r\n     * @param value defines the value to store\r\n     * @returns true if the value was updated (or false if the key was not found)\r\n     */\r\n    public set(key: string, value: T): boolean {\r\n        if (this._data[key] === undefined) {\r\n            return false;\r\n        }\r\n        this._data[key] = value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the element of the given key and remove it from the dictionary\r\n     * @param key defines the key to search\r\n     * @returns the value associated with the key or null if not found\r\n     */\r\n    public getAndRemove(key: string): Nullable<T> {\r\n        const val = this.get(key);\r\n        if (val !== undefined) {\r\n            delete this._data[key];\r\n            --this._count;\r\n            return val;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Remove a key/value from the dictionary.\r\n     * @param key the key to remove\r\n     * @returns true if the item was successfully deleted, false if no item with such key exist in the dictionary\r\n     */\r\n    public remove(key: string): boolean {\r\n        if (this.contains(key)) {\r\n            delete this._data[key];\r\n            --this._count;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Clear the whole content of the dictionary\r\n     */\r\n    public clear() {\r\n        this._data = {};\r\n        this._count = 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the current count\r\n     */\r\n    public get count() {\r\n        return this._count;\r\n    }\r\n\r\n    /**\r\n     * Execute a callback on each key/val of the dictionary.\r\n     * Note that you can remove any element in this dictionary in the callback implementation\r\n     * @param callback the callback to execute on a given key/value pair\r\n     */\r\n    public forEach(callback: (key: string, val: T) => void) {\r\n        for (const cur in this._data) {\r\n            const val = this._data[cur];\r\n            callback(cur, val);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a callback on every occurrence of the dictionary until it returns a valid TRes object.\r\n     * If the callback returns null or undefined the method will iterate to the next key/value pair\r\n     * Note that you can remove any element in this dictionary in the callback implementation\r\n     * @param callback the callback to execute, if it return a valid T instanced object the enumeration will stop and the object will be returned\r\n     * @returns the first item\r\n     */\r\n    public first<TRes>(callback: (key: string, val: T) => TRes) {\r\n        for (const cur in this._data) {\r\n            const val = this._data[cur];\r\n            const res = callback(cur, val);\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _count = 0;\r\n    private _data: { [key: string]: T } = {};\r\n}\r\n","/**\r\n * Helper class used to generate session unique ID\r\n */\r\nexport class UniqueIdGenerator {\r\n    // Statics\r\n    private static _UniqueIdCounter = 1;\r\n\r\n    /**\r\n     * Gets an unique (relatively to the current scene) Id\r\n     */\r\n    public static get UniqueId() {\r\n        const result = this._UniqueIdCounter;\r\n        this._UniqueIdCounter++;\r\n        return result;\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"bakedVertexAnimation\";\nconst shader = `#ifdef BAKED_VERTEX_ANIMATION_TEXTURE\n{\r#ifdef INSTANCES\n#define BVASNAME bakedVertexAnimationSettingsInstanced\n#else\n#define BVASNAME bakedVertexAnimationSettings\n#endif\nfloat VATStartFrame=BVASNAME.x;\rfloat VATEndFrame=BVASNAME.y;\rfloat VATOffsetFrame=BVASNAME.z;\rfloat VATSpeed=BVASNAME.w;\rfloat totalFrames=VATEndFrame-VATStartFrame+1.0;\rfloat time=bakedVertexAnimationTime*VATSpeed/totalFrames;\rfloat frameCorrection=time<1.0 ? 0.0 : 1.0;\rfloat numOfFrames=totalFrames-frameCorrection;\rfloat VATFrameNum=fract(time)*numOfFrames;\rVATFrameNum=mod(VATFrameNum+VATOffsetFrame,numOfFrames);\rVATFrameNum=floor(VATFrameNum);\rVATFrameNum+=VATStartFrame+frameCorrection;\rmat4 VATInfluence;\rVATInfluence=readMatrixFromRawSamplerVAT(bakedVertexAnimationTexture,matricesIndices[0],VATFrameNum)*matricesWeights[0];\r#if NUM_BONE_INFLUENCERS>1\nVATInfluence+=readMatrixFromRawSamplerVAT(bakedVertexAnimationTexture,matricesIndices[1],VATFrameNum)*matricesWeights[1];\r#endif\n#if NUM_BONE_INFLUENCERS>2\nVATInfluence+=readMatrixFromRawSamplerVAT(bakedVertexAnimationTexture,matricesIndices[2],VATFrameNum)*matricesWeights[2];\r#endif\n#if NUM_BONE_INFLUENCERS>3\nVATInfluence+=readMatrixFromRawSamplerVAT(bakedVertexAnimationTexture,matricesIndices[3],VATFrameNum)*matricesWeights[3];\r#endif\n#if NUM_BONE_INFLUENCERS>4\nVATInfluence+=readMatrixFromRawSamplerVAT(bakedVertexAnimationTexture,matricesIndicesExtra[0],VATFrameNum)*matricesWeightsExtra[0];\r#endif\n#if NUM_BONE_INFLUENCERS>5\nVATInfluence+=readMatrixFromRawSamplerVAT(bakedVertexAnimationTexture,matricesIndicesExtra[1],VATFrameNum)*matricesWeightsExtra[1];\r#endif\n#if NUM_BONE_INFLUENCERS>6\nVATInfluence+=readMatrixFromRawSamplerVAT(bakedVertexAnimationTexture,matricesIndicesExtra[2],VATFrameNum)*matricesWeightsExtra[2];\r#endif\n#if NUM_BONE_INFLUENCERS>7\nVATInfluence+=readMatrixFromRawSamplerVAT(bakedVertexAnimationTexture,matricesIndicesExtra[3],VATFrameNum)*matricesWeightsExtra[3];\r#endif\nfinalWorld=finalWorld*VATInfluence;\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bakedVertexAnimation = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"bumpFragment\";\nconst shader = `vec2 uvOffset=vec2(0.0,0.0);\r#if defined(BUMP) || defined(PARALLAX) || defined(DETAIL)\n#ifdef NORMALXYSCALE\nfloat normalScale=1.0;\r#elif defined(BUMP)\nfloat normalScale=vBumpInfos.y;\r#else\nfloat normalScale=1.0;\r#endif\n#if defined(TANGENT) && defined(NORMAL)\nmat3 TBN=vTBN;\r#elif defined(BUMP)\nvec2 TBNUV=gl_FrontFacing ? vBumpUV : -vBumpUV;\rmat3 TBN=cotangent_frame(normalW*normalScale,vPositionW,TBNUV,vTangentSpaceParams);\r#else\nvec2 TBNUV=gl_FrontFacing ? vDetailUV : -vDetailUV;\rmat3 TBN=cotangent_frame(normalW*normalScale,vPositionW,TBNUV,vec2(1.,1.));\r#endif\n#elif defined(ANISOTROPIC)\n#if defined(TANGENT) && defined(NORMAL)\nmat3 TBN=vTBN;\r#else\nvec2 TBNUV=gl_FrontFacing ? vMainUV1 : -vMainUV1;\rmat3 TBN=cotangent_frame(normalW,vPositionW,TBNUV,vec2(1.,1.));\r#endif\n#endif\n#ifdef PARALLAX\nmat3 invTBN=transposeMat3(TBN);\r#ifdef PARALLAXOCCLUSION\nuvOffset=parallaxOcclusion(invTBN*-viewDirectionW,invTBN*normalW,vBumpUV,vBumpInfos.z);\r#else\nuvOffset=parallaxOffset(invTBN*viewDirectionW,vBumpInfos.z);\r#endif\n#endif\n#ifdef DETAIL\nvec4 detailColor=texture2D(detailSampler,vDetailUV+uvOffset);\rvec2 detailNormalRG=detailColor.wy*2.0-1.0;\rfloat detailNormalB=sqrt(1.-saturate(dot(detailNormalRG,detailNormalRG)));\rvec3 detailNormal=vec3(detailNormalRG,detailNormalB);\r#endif\n#ifdef BUMP\n#ifdef OBJECTSPACE_NORMALMAP\nnormalW=normalize(texture2D(bumpSampler,vBumpUV).xyz *2.0-1.0);\rnormalW=normalize(mat3(normalMatrix)*normalW);\r#elif !defined(DETAIL)\nnormalW=perturbNormal(TBN,texture2D(bumpSampler,vBumpUV+uvOffset).xyz,vBumpInfos.y);\r#else\nvec3 bumpNormal=texture2D(bumpSampler,vBumpUV+uvOffset).xyz*2.0-1.0;\r#if DETAIL_NORMALBLENDMETHOD==0 \ndetailNormal.xy*=vDetailInfos.z;\rvec3 blendedNormal=normalize(vec3(bumpNormal.xy+detailNormal.xy,bumpNormal.z*detailNormal.z));\r#elif DETAIL_NORMALBLENDMETHOD==1 \ndetailNormal.xy*=vDetailInfos.z;\rbumpNormal+=vec3(0.0,0.0,1.0);\rdetailNormal*=vec3(-1.0,-1.0,1.0);\rvec3 blendedNormal=bumpNormal*dot(bumpNormal,detailNormal)/bumpNormal.z-detailNormal;\r#endif\nnormalW=perturbNormalBase(TBN,blendedNormal,vBumpInfos.y);\r#endif\n#elif defined(DETAIL)\ndetailNormal.xy*=vDetailInfos.z;\rnormalW=perturbNormalBase(TBN,detailNormal,vDetailInfos.z);\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bumpFragment = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nimport \"./samplerFragmentDeclaration\";\n\nconst name = \"bumpFragmentFunctions\";\nconst shader = `#if defined(BUMP)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_SAMPLERNAME_,bump)\n#endif\n#if defined(DETAIL)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,DETAIL,_VARYINGNAME_,Detail,_SAMPLERNAME_,detail)\n#endif\n#if defined(BUMP) && defined(PARALLAX)\nconst float minSamples=4.;\rconst float maxSamples=15.;\rconst int iMaxSamples=15;\rvec2 parallaxOcclusion(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale) {\rfloat parallaxLimit=length(vViewDirCoT.xy)/vViewDirCoT.z;\rparallaxLimit*=parallaxScale;\rvec2 vOffsetDir=normalize(vViewDirCoT.xy);\rvec2 vMaxOffset=vOffsetDir*parallaxLimit;\rfloat numSamples=maxSamples+(dot(vViewDirCoT,vNormalCoT)*(minSamples-maxSamples));\rfloat stepSize=1.0/numSamples;\rfloat currRayHeight=1.0;\rvec2 vCurrOffset=vec2(0,0);\rvec2 vLastOffset=vec2(0,0);\rfloat lastSampledHeight=1.0;\rfloat currSampledHeight=1.0;\rfor (int i=0; i<iMaxSamples; i++)\r{\rcurrSampledHeight=texture2D(bumpSampler,texCoord+vCurrOffset).w;\rif (currSampledHeight>currRayHeight)\r{\rfloat delta1=currSampledHeight-currRayHeight;\rfloat delta2=(currRayHeight+stepSize)-lastSampledHeight;\rfloat ratio=delta1/(delta1+delta2);\rvCurrOffset=(ratio)* vLastOffset+(1.0-ratio)*vCurrOffset;\rbreak;\r}\relse\r{\rcurrRayHeight-=stepSize;\rvLastOffset=vCurrOffset;\rvCurrOffset+=stepSize*vMaxOffset;\rlastSampledHeight=currSampledHeight;\r}\r}\rreturn vCurrOffset;\r}\rvec2 parallaxOffset(vec3 viewDir,float heightScale)\r{\rfloat height=texture2D(bumpSampler,vBumpUV).w;\rvec2 texCoordOffset=heightScale*viewDir.xy*height;\rreturn -texCoordOffset;\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bumpFragmentFunctions = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"bumpFragmentMainFunctions\";\nconst shader = `#if defined(BUMP) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC) || defined(DETAIL)\n#if defined(TANGENT) && defined(NORMAL) \nvarying mat3 vTBN;\r#endif\n#ifdef OBJECTSPACE_NORMALMAP\nuniform mat4 normalMatrix;\r#endif\nvec3 perturbNormalBase(mat3 cotangentFrame,vec3 normal,float scale)\r{\r#ifdef NORMALXYSCALE\nnormal=normalize(normal*vec3(scale,scale,1.0));\r#endif\nreturn normalize(cotangentFrame*normal);\r}\rvec3 perturbNormal(mat3 cotangentFrame,vec3 textureSample,float scale)\r{\rreturn perturbNormalBase(cotangentFrame,textureSample*2.0-1.0,scale);\r}\rmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv,vec2 tangentSpaceParams)\r{\rvec3 dp1=dFdx(p);\rvec3 dp2=dFdy(p);\rvec2 duv1=dFdx(uv);\rvec2 duv2=dFdy(uv);\rvec3 dp2perp=cross(dp2,normal);\rvec3 dp1perp=cross(normal,dp1);\rvec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;\rvec3 bitangent=dp2perp*duv1.y+dp1perp*duv2.y;\rtangent*=tangentSpaceParams.x;\rbitangent*=tangentSpaceParams.y;\rfloat invmax=inversesqrt(max(dot(tangent,tangent),dot(bitangent,bitangent)));\rreturn mat3(tangent*invmax,bitangent*invmax,normal);\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bumpFragmentMainFunctions = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"bumpVertex\";\nconst shader = `#if defined(BUMP) || defined(PARALLAX) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC)\n#if defined(TANGENT) && defined(NORMAL)\nvec3 tbnNormal=normalize(normalUpdated);\rvec3 tbnTangent=normalize(tangentUpdated.xyz);\rvec3 tbnBitangent=cross(tbnNormal,tbnTangent)*tangentUpdated.w;\rvTBN=mat3(finalWorld)*mat3(tbnTangent,tbnBitangent,tbnNormal);\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bumpVertex = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"bumpVertexDeclaration\";\nconst shader = `#if defined(BUMP) || defined(PARALLAX) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC)\n#if defined(TANGENT) && defined(NORMAL) \nvarying mat3 vTBN;\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bumpVertexDeclaration = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"clipPlaneFragmentDeclaration\";\nconst shader = `#ifdef CLIPPLANE\nvarying float fClipDistance;\r#endif\n#ifdef CLIPPLANE2\nvarying float fClipDistance2;\r#endif\n#ifdef CLIPPLANE3\nvarying float fClipDistance3;\r#endif\n#ifdef CLIPPLANE4\nvarying float fClipDistance4;\r#endif\n#ifdef CLIPPLANE5\nvarying float fClipDistance5;\r#endif\n#ifdef CLIPPLANE6\nvarying float fClipDistance6;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const clipPlaneFragmentDeclaration = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"depthPrePass\";\nconst shader = `#ifdef DEPTHPREPASS\ngl_FragColor=vec4(0.,0.,0.,1.0);\rreturn;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const depthPrePass = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"fogVertex\";\nconst shader = `#ifdef FOG\nvFogDistance=(view*worldPos).xyz;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const fogVertex = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"instancesVertex\";\nconst shader = `#ifdef INSTANCES\nmat4 finalWorld=mat4(world0,world1,world2,world3);\r#if defined(PREPASS_VELOCITY) || defined(VELOCITY)\nmat4 finalPreviousWorld=mat4(previousWorld0,previousWorld1,previousWorld2,previousWorld3);\r#endif\n#ifdef THIN_INSTANCES\nfinalWorld=world*finalWorld;\r#if defined(PREPASS_VELOCITY) || defined(VELOCITY)\nfinalPreviousWorld=previousWorld*finalPreviousWorld;\r#endif\n#endif\n#else\nmat4 finalWorld=world;\r#if defined(PREPASS_VELOCITY) || defined(VELOCITY)\nmat4 finalPreviousWorld=previousWorld;\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const instancesVertex = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"lightFragment\";\nconst shader = `#ifdef LIGHT{X}\n#if defined(SHADOWONLY) || defined(LIGHTMAP) && defined(LIGHTMAPEXCLUDED{X}) && defined(LIGHTMAPNOSPECULAR{X})\n#else\n#ifdef PBR\n#ifdef SPOTLIGHT{X}\npreInfo=computePointAndSpotPreLightingInfo(light{X}.vLightData,viewDirectionW,normalW);\r#elif defined(POINTLIGHT{X})\npreInfo=computePointAndSpotPreLightingInfo(light{X}.vLightData,viewDirectionW,normalW);\r#elif defined(HEMILIGHT{X})\npreInfo=computeHemisphericPreLightingInfo(light{X}.vLightData,viewDirectionW,normalW);\r#elif defined(DIRLIGHT{X})\npreInfo=computeDirectionalPreLightingInfo(light{X}.vLightData,viewDirectionW,normalW);\r#endif\npreInfo.NdotV=NdotV;\r#ifdef SPOTLIGHT{X}\n#ifdef LIGHT_FALLOFF_GLTF{X}\npreInfo.attenuation=computeDistanceLightFalloff_GLTF(preInfo.lightDistanceSquared,light{X}.vLightFalloff.y);\rpreInfo.attenuation*=computeDirectionalLightFalloff_GLTF(light{X}.vLightDirection.xyz,preInfo.L,light{X}.vLightFalloff.z,light{X}.vLightFalloff.w);\r#elif defined(LIGHT_FALLOFF_PHYSICAL{X})\npreInfo.attenuation=computeDistanceLightFalloff_Physical(preInfo.lightDistanceSquared);\rpreInfo.attenuation*=computeDirectionalLightFalloff_Physical(light{X}.vLightDirection.xyz,preInfo.L,light{X}.vLightDirection.w);\r#elif defined(LIGHT_FALLOFF_STANDARD{X})\npreInfo.attenuation=computeDistanceLightFalloff_Standard(preInfo.lightOffset,light{X}.vLightFalloff.x);\rpreInfo.attenuation*=computeDirectionalLightFalloff_Standard(light{X}.vLightDirection.xyz,preInfo.L,light{X}.vLightDirection.w,light{X}.vLightData.w);\r#else\npreInfo.attenuation=computeDistanceLightFalloff(preInfo.lightOffset,preInfo.lightDistanceSquared,light{X}.vLightFalloff.x,light{X}.vLightFalloff.y);\rpreInfo.attenuation*=computeDirectionalLightFalloff(light{X}.vLightDirection.xyz,preInfo.L,light{X}.vLightDirection.w,light{X}.vLightData.w,light{X}.vLightFalloff.z,light{X}.vLightFalloff.w);\r#endif\n#elif defined(POINTLIGHT{X})\n#ifdef LIGHT_FALLOFF_GLTF{X}\npreInfo.attenuation=computeDistanceLightFalloff_GLTF(preInfo.lightDistanceSquared,light{X}.vLightFalloff.y);\r#elif defined(LIGHT_FALLOFF_PHYSICAL{X})\npreInfo.attenuation=computeDistanceLightFalloff_Physical(preInfo.lightDistanceSquared);\r#elif defined(LIGHT_FALLOFF_STANDARD{X})\npreInfo.attenuation=computeDistanceLightFalloff_Standard(preInfo.lightOffset,light{X}.vLightFalloff.x);\r#else\npreInfo.attenuation=computeDistanceLightFalloff(preInfo.lightOffset,preInfo.lightDistanceSquared,light{X}.vLightFalloff.x,light{X}.vLightFalloff.y);\r#endif\n#else\npreInfo.attenuation=1.0;\r#endif\n#ifdef HEMILIGHT{X}\npreInfo.roughness=roughness;\r#else\npreInfo.roughness=adjustRoughnessFromLightProperties(roughness,light{X}.vLightSpecular.a,preInfo.lightDistance);\r#endif\n#ifdef IRIDESCENCE\npreInfo.iridescenceIntensity=iridescenceIntensity;\r#endif\n#ifdef HEMILIGHT{X}\ninfo.diffuse=computeHemisphericDiffuseLighting(preInfo,light{X}.vLightDiffuse.rgb,light{X}.vLightGround);\r#elif defined(SS_TRANSLUCENCY)\ninfo.diffuse=computeDiffuseAndTransmittedLighting(preInfo,light{X}.vLightDiffuse.rgb,subSurfaceOut.transmittance);\r#else\ninfo.diffuse=computeDiffuseLighting(preInfo,light{X}.vLightDiffuse.rgb);\r#endif\n#ifdef SPECULARTERM\n#ifdef ANISOTROPIC\ninfo.specular=computeAnisotropicSpecularLighting(preInfo,viewDirectionW,normalW,anisotropicOut.anisotropicTangent,anisotropicOut.anisotropicBitangent,anisotropicOut.anisotropy,clearcoatOut.specularEnvironmentR0,specularEnvironmentR90,AARoughnessFactors.x,light{X}.vLightDiffuse.rgb);\r#else\ninfo.specular=computeSpecularLighting(preInfo,normalW,clearcoatOut.specularEnvironmentR0,specularEnvironmentR90,AARoughnessFactors.x,light{X}.vLightDiffuse.rgb);\r#endif\n#endif\n#ifdef SHEEN\n#ifdef SHEEN_LINKWITHALBEDO\npreInfo.roughness=sheenOut.sheenIntensity;\r#else\n#ifdef HEMILIGHT{X}\npreInfo.roughness=sheenOut.sheenRoughness;\r#else\npreInfo.roughness=adjustRoughnessFromLightProperties(sheenOut.sheenRoughness,light{X}.vLightSpecular.a,preInfo.lightDistance);\r#endif\n#endif\ninfo.sheen=computeSheenLighting(preInfo,normalW,sheenOut.sheenColor,specularEnvironmentR90,AARoughnessFactors.x,light{X}.vLightDiffuse.rgb);\r#endif\n#ifdef CLEARCOAT\n#ifdef HEMILIGHT{X}\npreInfo.roughness=clearcoatOut.clearCoatRoughness;\r#else\npreInfo.roughness=adjustRoughnessFromLightProperties(clearcoatOut.clearCoatRoughness,light{X}.vLightSpecular.a,preInfo.lightDistance);\r#endif\ninfo.clearCoat=computeClearCoatLighting(preInfo,clearcoatOut.clearCoatNormalW,clearcoatOut.clearCoatAARoughnessFactors.x,clearcoatOut.clearCoatIntensity,light{X}.vLightDiffuse.rgb);\r#ifdef CLEARCOAT_TINT\nabsorption=computeClearCoatLightingAbsorption(clearcoatOut.clearCoatNdotVRefract,preInfo.L,clearcoatOut.clearCoatNormalW,clearcoatOut.clearCoatColor,clearcoatOut.clearCoatThickness,clearcoatOut.clearCoatIntensity);\rinfo.diffuse*=absorption;\r#ifdef SPECULARTERM\ninfo.specular*=absorption;\r#endif\n#endif\ninfo.diffuse*=info.clearCoat.w;\r#ifdef SPECULARTERM\ninfo.specular*=info.clearCoat.w;\r#endif\n#ifdef SHEEN\ninfo.sheen*=info.clearCoat.w;\r#endif\n#endif\n#else\n#ifdef SPOTLIGHT{X}\ninfo=computeSpotLighting(viewDirectionW,normalW,light{X}.vLightData,light{X}.vLightDirection,light{X}.vLightDiffuse.rgb,light{X}.vLightSpecular.rgb,light{X}.vLightDiffuse.a,glossiness);\r#elif defined(HEMILIGHT{X})\ninfo=computeHemisphericLighting(viewDirectionW,normalW,light{X}.vLightData,light{X}.vLightDiffuse.rgb,light{X}.vLightSpecular.rgb,light{X}.vLightGround,glossiness);\r#elif defined(POINTLIGHT{X}) || defined(DIRLIGHT{X})\ninfo=computeLighting(viewDirectionW,normalW,light{X}.vLightData,light{X}.vLightDiffuse.rgb,light{X}.vLightSpecular.rgb,light{X}.vLightDiffuse.a,glossiness);\r#endif\n#endif\n#ifdef PROJECTEDLIGHTTEXTURE{X}\ninfo.diffuse*=computeProjectionTextureDiffuseLighting(projectionLightSampler{X},textureProjectionMatrix{X});\r#endif\n#endif\n#ifdef SHADOW{X}\n#ifdef SHADOWCSM{X}\nfor (int i=0; i<SHADOWCSMNUM_CASCADES{X}; i++) \r{\r#ifdef SHADOWCSM_RIGHTHANDED{X}\ndiff{X}=viewFrustumZ{X}[i]+vPositionFromCamera{X}.z;\r#else\ndiff{X}=viewFrustumZ{X}[i]-vPositionFromCamera{X}.z;\r#endif\nif (diff{X}>=0.) {\rindex{X}=i;\rbreak;\r}\r}\r#ifdef SHADOWCSMUSESHADOWMAXZ{X}\nif (index{X}>=0)\r#endif\n{\r#if defined(SHADOWPCF{X})\n#if defined(SHADOWLOWQUALITY{X})\nshadow=computeShadowWithCSMPCF1(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#elif defined(SHADOWMEDIUMQUALITY{X})\nshadow=computeShadowWithCSMPCF3(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#else\nshadow=computeShadowWithCSMPCF5(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWPCSS{X})\n#if defined(SHADOWLOWQUALITY{X})\nshadow=computeShadowWithCSMPCSS16(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#elif defined(SHADOWMEDIUMQUALITY{X})\nshadow=computeShadowWithCSMPCSS32(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#else\nshadow=computeShadowWithCSMPCSS64(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#endif\n#else\nshadow=computeShadowCSM(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#ifdef SHADOWCSMDEBUG{X}\nshadowDebug{X}=vec3(shadow)*vCascadeColorsMultiplier{X}[index{X}];\r#endif\n#ifndef SHADOWCSMNOBLEND{X}\nfloat frustumLength=frustumLengths{X}[index{X}];\rfloat diffRatio=clamp(diff{X}/frustumLength,0.,1.)*cascadeBlendFactor{X};\rif (index{X}<(SHADOWCSMNUM_CASCADES{X}-1) && diffRatio<1.)\r{\rindex{X}+=1;\rfloat nextShadow=0.;\r#if defined(SHADOWPCF{X})\n#if defined(SHADOWLOWQUALITY{X})\nnextShadow=computeShadowWithCSMPCF1(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#elif defined(SHADOWMEDIUMQUALITY{X})\nnextShadow=computeShadowWithCSMPCF3(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#else\nnextShadow=computeShadowWithCSMPCF5(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWPCSS{X})\n#if defined(SHADOWLOWQUALITY{X})\nnextShadow=computeShadowWithCSMPCSS16(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#elif defined(SHADOWMEDIUMQUALITY{X})\nnextShadow=computeShadowWithCSMPCSS32(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#else\nnextShadow=computeShadowWithCSMPCSS64(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#endif\n#else\nnextShadow=computeShadowCSM(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\nshadow=mix(nextShadow,shadow,diffRatio);\r#ifdef SHADOWCSMDEBUG{X}\nshadowDebug{X}=mix(vec3(nextShadow)*vCascadeColorsMultiplier{X}[index{X}],shadowDebug{X},diffRatio);\r#endif\n}\r#endif\n}\r#elif defined(SHADOWCLOSEESM{X})\n#if defined(SHADOWCUBE{X})\nshadow=computeShadowWithCloseESMCube(light{X}.vLightData.xyz,shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.z,light{X}.depthValues);\r#else\nshadow=computeShadowWithCloseESM(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.z,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWESM{X})\n#if defined(SHADOWCUBE{X})\nshadow=computeShadowWithESMCube(light{X}.vLightData.xyz,shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.z,light{X}.depthValues);\r#else\nshadow=computeShadowWithESM(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.z,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWPOISSON{X})\n#if defined(SHADOWCUBE{X})\nshadow=computeShadowWithPoissonSamplingCube(light{X}.vLightData.xyz,shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.x,light{X}.depthValues);\r#else\nshadow=computeShadowWithPoissonSampling(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWPCF{X})\n#if defined(SHADOWLOWQUALITY{X})\nshadow=computeShadowWithPCF1(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#elif defined(SHADOWMEDIUMQUALITY{X})\nshadow=computeShadowWithPCF3(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#else\nshadow=computeShadowWithPCF5(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWPCSS{X})\n#if defined(SHADOWLOWQUALITY{X})\nshadow=computeShadowWithPCSS16(vPositionFromLight{X},vDepthMetric{X},depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#elif defined(SHADOWMEDIUMQUALITY{X})\nshadow=computeShadowWithPCSS32(vPositionFromLight{X},vDepthMetric{X},depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#else\nshadow=computeShadowWithPCSS64(vPositionFromLight{X},vDepthMetric{X},depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#else\n#if defined(SHADOWCUBE{X})\nshadow=computeShadowCube(light{X}.vLightData.xyz,shadowSampler{X},light{X}.shadowsInfo.x,light{X}.depthValues);\r#else\nshadow=computeShadow(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#endif\n#ifdef SHADOWONLY\n#ifndef SHADOWINUSE\n#define SHADOWINUSE\n#endif\nglobalShadow+=shadow;\rshadowLightCount+=1.0;\r#endif\n#else\nshadow=1.;\r#endif\n#ifndef SHADOWONLY\n#ifdef CUSTOMUSERLIGHTING\ndiffuseBase+=computeCustomDiffuseLighting(info,diffuseBase,shadow);\r#ifdef SPECULARTERM\nspecularBase+=computeCustomSpecularLighting(info,specularBase,shadow);\r#endif\n#elif defined(LIGHTMAP) && defined(LIGHTMAPEXCLUDED{X})\ndiffuseBase+=lightmapColor.rgb*shadow;\r#ifdef SPECULARTERM\n#ifndef LIGHTMAPNOSPECULAR{X}\nspecularBase+=info.specular*shadow*lightmapColor.rgb;\r#endif\n#endif\n#ifdef CLEARCOAT\n#ifndef LIGHTMAPNOSPECULAR{X}\nclearCoatBase+=info.clearCoat.rgb*shadow*lightmapColor.rgb;\r#endif\n#endif\n#ifdef SHEEN\n#ifndef LIGHTMAPNOSPECULAR{X}\nsheenBase+=info.sheen.rgb*shadow;\r#endif\n#endif\n#else\n#ifdef SHADOWCSMDEBUG{X}\ndiffuseBase+=info.diffuse*shadowDebug{X};\r#else \ndiffuseBase+=info.diffuse*shadow;\r#endif\n#ifdef SPECULARTERM\nspecularBase+=info.specular*shadow;\r#endif\n#ifdef CLEARCOAT\nclearCoatBase+=info.clearCoat.rgb*shadow;\r#endif\n#ifdef SHEEN\nsheenBase+=info.sheen.rgb*shadow;\r#endif\n#endif\n#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const lightFragment = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"lightFragmentDeclaration\";\nconst shader = `#ifdef LIGHT{X}\nuniform vec4 vLightData{X};\runiform vec4 vLightDiffuse{X};\r#ifdef SPECULARTERM\nuniform vec4 vLightSpecular{X};\r#else\nvec4 vLightSpecular{X}=vec4(0.);\r#endif\n#ifdef SHADOW{X}\n#ifdef SHADOWCSM{X}\nuniform mat4 lightMatrix{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float viewFrustumZ{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float frustumLengths{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float cascadeBlendFactor{X};\rvarying vec4 vPositionFromLight{X}[SHADOWCSMNUM_CASCADES{X}];\rvarying float vDepthMetric{X}[SHADOWCSMNUM_CASCADES{X}];\rvarying vec4 vPositionFromCamera{X};\r#if defined(SHADOWPCSS{X})\nuniform highp sampler2DArrayShadow shadowSampler{X};\runiform highp sampler2DArray depthSampler{X};\runiform vec2 lightSizeUVCorrection{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float depthCorrection{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float penumbraDarkness{X};\r#elif defined(SHADOWPCF{X})\nuniform highp sampler2DArrayShadow shadowSampler{X};\r#else\nuniform highp sampler2DArray shadowSampler{X};\r#endif\n#ifdef SHADOWCSMDEBUG{X}\nconst vec3 vCascadeColorsMultiplier{X}[8]=vec3[8]\r(\rvec3 ( 1.5,0.0,0.0 ),\rvec3 ( 0.0,1.5,0.0 ),\rvec3 ( 0.0,0.0,5.5 ),\rvec3 ( 1.5,0.0,5.5 ),\rvec3 ( 1.5,1.5,0.0 ),\rvec3 ( 1.0,1.0,1.0 ),\rvec3 ( 0.0,1.0,5.5 ),\rvec3 ( 0.5,3.5,0.75 )\r);\rvec3 shadowDebug{X};\r#endif\n#ifdef SHADOWCSMUSESHADOWMAXZ{X}\nint index{X}=-1;\r#else\nint index{X}=SHADOWCSMNUM_CASCADES{X}-1;\r#endif\nfloat diff{X}=0.;\r#elif defined(SHADOWCUBE{X})\nuniform samplerCube shadowSampler{X};\r#else\nvarying vec4 vPositionFromLight{X};\rvarying float vDepthMetric{X};\r#if defined(SHADOWPCSS{X})\nuniform highp sampler2DShadow shadowSampler{X};\runiform highp sampler2D depthSampler{X};\r#elif defined(SHADOWPCF{X})\nuniform highp sampler2DShadow shadowSampler{X};\r#else\nuniform sampler2D shadowSampler{X};\r#endif\nuniform mat4 lightMatrix{X};\r#endif\nuniform vec4 shadowsInfo{X};\runiform vec2 depthValues{X};\r#endif\n#ifdef SPOTLIGHT{X}\nuniform vec4 vLightDirection{X};\runiform vec4 vLightFalloff{X};\r#elif defined(POINTLIGHT{X})\nuniform vec4 vLightFalloff{X};\r#elif defined(HEMILIGHT{X})\nuniform vec3 vLightGround{X};\r#endif\n#ifdef PROJECTEDLIGHTTEXTURE{X}\nuniform mat4 textureProjectionMatrix{X};\runiform sampler2D projectionLightSampler{X};\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const lightFragmentDeclaration = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"lightVxUboDeclaration\";\nconst shader = `#ifdef LIGHT{X}\nuniform Light{X}\r{\rvec4 vLightData;\rvec4 vLightDiffuse;\rvec4 vLightSpecular;\r#ifdef SPOTLIGHT{X}\nvec4 vLightDirection;\rvec4 vLightFalloff;\r#elif defined(POINTLIGHT{X})\nvec4 vLightFalloff;\r#elif defined(HEMILIGHT{X})\nvec3 vLightGround;\r#endif\nvec4 shadowsInfo;\rvec2 depthValues;\r} light{X};\r#ifdef SHADOW{X}\n#ifdef SHADOWCSM{X}\nuniform mat4 lightMatrix{X}[SHADOWCSMNUM_CASCADES{X}];\rvarying vec4 vPositionFromLight{X}[SHADOWCSMNUM_CASCADES{X}];\rvarying float vDepthMetric{X}[SHADOWCSMNUM_CASCADES{X}];\rvarying vec4 vPositionFromCamera{X};\r#elif defined(SHADOWCUBE{X})\n#else\nvarying vec4 vPositionFromLight{X};\rvarying float vDepthMetric{X};\runiform mat4 lightMatrix{X};\r#endif\n#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const lightVxUboDeclaration = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"morphTargetsVertexDeclaration\";\nconst shader = `#ifdef MORPHTARGETS\n#ifndef MORPHTARGETS_TEXTURE\nattribute vec3 position{X};\r#ifdef MORPHTARGETS_NORMAL\nattribute vec3 normal{X};\r#endif\n#ifdef MORPHTARGETS_TANGENT\nattribute vec3 tangent{X};\r#endif\n#ifdef MORPHTARGETS_UV\nattribute vec2 uv_{X};\r#endif\n#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const morphTargetsVertexDeclaration = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"morphTargetsVertexGlobalDeclaration\";\nconst shader = `#ifdef MORPHTARGETS\nuniform float morphTargetInfluences[NUM_MORPH_INFLUENCERS];\r#ifdef MORPHTARGETS_TEXTURE \nprecision mediump sampler2DArray; \runiform float morphTargetTextureIndices[NUM_MORPH_INFLUENCERS];\runiform vec3 morphTargetTextureInfo;\runiform sampler2DArray morphTargets;\rvec3 readVector3FromRawSampler(int targetIndex,float vertexIndex)\r{ \rfloat y=floor(vertexIndex/morphTargetTextureInfo.y);\rfloat x=vertexIndex-y*morphTargetTextureInfo.y;\rvec3 textureUV=vec3((x+0.5)/morphTargetTextureInfo.y,(y+0.5)/morphTargetTextureInfo.z,morphTargetTextureIndices[targetIndex]);\rreturn texture(morphTargets,textureUV).xyz;\r}\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const morphTargetsVertexGlobalDeclaration = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"prePassVertexDeclaration\";\nconst shader = `#ifdef PREPASS\n#ifdef PREPASS_DEPTH\nvarying vec3 vViewPos;\r#endif\n#ifdef PREPASS_VELOCITY\nuniform mat4 previousViewProjection;\rvarying vec4 vCurrentPosition;\rvarying vec4 vPreviousPosition;\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const prePassVertexDeclaration = { name, shader };\n","import type { Scene } from \"./scene\";\r\nimport type { Nullable } from \"./types\";\r\nimport type { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"./Meshes/transformNode\";\r\nimport type { Geometry } from \"./Meshes/geometry\";\r\nimport type { Skeleton } from \"./Bones/skeleton\";\r\nimport type { MorphTargetManager } from \"./Morph/morphTargetManager\";\r\nimport type { AssetContainer } from \"./assetContainer\";\r\nimport type { IParticleSystem } from \"./Particles/IParticleSystem\";\r\nimport type { AnimationGroup } from \"./Animations/animationGroup\";\r\nimport type { BaseTexture } from \"./Materials/Textures/baseTexture\";\r\nimport type { Material } from \"./Materials/material\";\r\nimport type { MultiMaterial } from \"./Materials/multiMaterial\";\r\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\r\nimport type { Camera } from \"./Cameras/camera\";\r\nimport type { Light } from \"./Lights/light\";\r\nimport type { Node } from \"./node\";\r\n\r\ndeclare type Animation = import(\"./Animations/animation\").Animation;\r\ndeclare type PostProcess = import(\"./PostProcesses/postProcess\").PostProcess;\r\n\r\n/**\r\n * Defines how the parser contract is defined.\r\n * These parsers are used to parse a list of specific assets (like particle systems, etc..)\r\n */\r\nexport type BabylonFileParser = (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => void;\r\n\r\n/**\r\n * Defines how the individual parser contract is defined.\r\n * These parser can parse an individual asset\r\n */\r\nexport type IndividualBabylonFileParser = (parsedData: any, scene: Scene, rootUrl: string) => any;\r\n\r\n/**\r\n * Base class of the scene acting as a container for the different elements composing a scene.\r\n * This class is dynamically extended by the different components of the scene increasing\r\n * flexibility and reducing coupling\r\n */\r\nexport abstract class AbstractScene {\r\n    /**\r\n     * Stores the list of available parsers in the application.\r\n     */\r\n    private static _BabylonFileParsers: { [key: string]: BabylonFileParser } = {};\r\n\r\n    /**\r\n     * Stores the list of available individual parsers in the application.\r\n     */\r\n    private static _IndividualBabylonFileParsers: { [key: string]: IndividualBabylonFileParser } = {};\r\n\r\n    /**\r\n     * Adds a parser in the list of available ones\r\n     * @param name Defines the name of the parser\r\n     * @param parser Defines the parser to add\r\n     */\r\n    public static AddParser(name: string, parser: BabylonFileParser): void {\r\n        this._BabylonFileParsers[name] = parser;\r\n    }\r\n\r\n    /**\r\n     * Gets a general parser from the list of available ones\r\n     * @param name Defines the name of the parser\r\n     * @returns the requested parser or null\r\n     */\r\n    public static GetParser(name: string): Nullable<BabylonFileParser> {\r\n        if (this._BabylonFileParsers[name]) {\r\n            return this._BabylonFileParsers[name];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Adds n individual parser in the list of available ones\r\n     * @param name Defines the name of the parser\r\n     * @param parser Defines the parser to add\r\n     */\r\n    public static AddIndividualParser(name: string, parser: IndividualBabylonFileParser): void {\r\n        this._IndividualBabylonFileParsers[name] = parser;\r\n    }\r\n\r\n    /**\r\n     * Gets an individual parser from the list of available ones\r\n     * @param name Defines the name of the parser\r\n     * @returns the requested parser or null\r\n     */\r\n    public static GetIndividualParser(name: string): Nullable<IndividualBabylonFileParser> {\r\n        if (this._IndividualBabylonFileParsers[name]) {\r\n            return this._IndividualBabylonFileParsers[name];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parser json data and populate both a scene and its associated container object\r\n     * @param jsonData Defines the data to parse\r\n     * @param scene Defines the scene to parse the data for\r\n     * @param container Defines the container attached to the parsing sequence\r\n     * @param rootUrl Defines the root url of the data\r\n     */\r\n    public static Parse(jsonData: any, scene: Scene, container: AssetContainer, rootUrl: string): void {\r\n        for (const parserName in this._BabylonFileParsers) {\r\n            if (Object.prototype.hasOwnProperty.call(this._BabylonFileParsers, parserName)) {\r\n                this._BabylonFileParsers[parserName](jsonData, scene, container, rootUrl);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the list of root nodes (ie. nodes with no parent)\r\n     */\r\n    public rootNodes = new Array<Node>();\r\n\r\n    /** All of the cameras added to this scene\r\n     * @see https://doc.babylonjs.com/babylon101/cameras\r\n     */\r\n    public cameras = new Array<Camera>();\r\n\r\n    /**\r\n     * All of the lights added to this scene\r\n     * @see https://doc.babylonjs.com/babylon101/lights\r\n     */\r\n    public lights = new Array<Light>();\r\n\r\n    /**\r\n     * All of the (abstract) meshes added to this scene\r\n     */\r\n    public meshes = new Array<AbstractMesh>();\r\n\r\n    /**\r\n     * The list of skeletons added to the scene\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons\r\n     */\r\n    public skeletons = new Array<Skeleton>();\r\n\r\n    /**\r\n     * All of the particle systems added to this scene\r\n     * @see https://doc.babylonjs.com/babylon101/particles\r\n     */\r\n    public particleSystems = new Array<IParticleSystem>();\r\n\r\n    /**\r\n     * Gets a list of Animations associated with the scene\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * All of the animation groups added to this scene\r\n     * @see https://doc.babylonjs.com/divingDeeper/animation/groupAnimations\r\n     */\r\n    public animationGroups = new Array<AnimationGroup>();\r\n\r\n    /**\r\n     * All of the multi-materials added to this scene\r\n     * @see https://doc.babylonjs.com/how_to/multi_materials\r\n     */\r\n    public multiMaterials = new Array<MultiMaterial>();\r\n\r\n    /**\r\n     * All of the materials added to this scene\r\n     * In the context of a Scene, it is not supposed to be modified manually.\r\n     * Any addition or removal should be done using the addMaterial and removeMaterial Scene methods.\r\n     * Note also that the order of the Material within the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/babylon101/materials\r\n     */\r\n    public materials = new Array<Material>();\r\n\r\n    /**\r\n     * The list of morph target managers added to the scene\r\n     * @see https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh\r\n     */\r\n    public morphTargetManagers = new Array<MorphTargetManager>();\r\n\r\n    /**\r\n     * The list of geometries used in the scene.\r\n     */\r\n    public geometries = new Array<Geometry>();\r\n\r\n    /**\r\n     * All of the transform nodes added to this scene\r\n     * In the context of a Scene, it is not supposed to be modified manually.\r\n     * Any addition or removal should be done using the addTransformNode and removeTransformNode Scene methods.\r\n     * Note also that the order of the TransformNode within the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/how_to/transformnode\r\n     */\r\n    public transformNodes = new Array<TransformNode>();\r\n\r\n    /**\r\n     * ActionManagers available on the scene.\r\n     * @deprecated\r\n     */\r\n    public actionManagers = new Array<AbstractActionManager>();\r\n\r\n    /**\r\n     * Textures to keep.\r\n     */\r\n    public textures = new Array<BaseTexture>();\r\n\r\n    /** @internal */\r\n    protected _environmentTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Texture used in all pbr material as the reflection texture.\r\n     * As in the majority of the scene they are the same (exception for multi room and so on),\r\n     * this is easier to reference from here than from all the materials.\r\n     */\r\n    public get environmentTexture(): Nullable<BaseTexture> {\r\n        return this._environmentTexture;\r\n    }\r\n\r\n    public set environmentTexture(value: Nullable<BaseTexture>) {\r\n        this._environmentTexture = value;\r\n    }\r\n\r\n    /**\r\n     * The list of postprocesses added to the scene\r\n     */\r\n    public postProcesses = new Array<PostProcess>();\r\n\r\n    /**\r\n     * @returns all meshes, lights, cameras, transformNodes and bones\r\n     */\r\n    public getNodes(): Array<Node> {\r\n        let nodes = new Array<Node>();\r\n        nodes = nodes.concat(this.meshes);\r\n        nodes = nodes.concat(this.lights);\r\n        nodes = nodes.concat(this.cameras);\r\n        nodes = nodes.concat(this.transformNodes); // dummies\r\n        this.skeletons.forEach((skeleton) => (nodes = nodes.concat(skeleton.bones)));\r\n        return nodes;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Scene } from \"./scene\";\r\nimport type { Nullable } from \"./types\";\r\nimport { Matrix, Vector3 } from \"./Maths/math.vector\";\r\nimport type { Engine } from \"./Engines/engine\";\r\nimport type { IBehaviorAware, Behavior } from \"./Behaviors/behavior\";\r\nimport { serialize } from \"./Misc/decorators\";\r\nimport type { Observer } from \"./Misc/observable\";\r\nimport { Observable } from \"./Misc/observable\";\r\nimport { EngineStore } from \"./Engines/engineStore\";\r\nimport { _WarnImport } from \"./Misc/devTools\";\r\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\r\nimport type { IInspectable } from \"./Misc/iInspectable\";\r\nimport type { AbstractScene } from \"./abstractScene\";\r\nimport type { IAccessibilityTag } from \"./IAccessibilityTag\";\r\n\r\ndeclare type Animatable = import(\"./Animations/animatable\").Animatable;\r\ndeclare type AnimationPropertiesOverride = import(\"./Animations/animationPropertiesOverride\").AnimationPropertiesOverride;\r\ndeclare type Animation = import(\"./Animations/animation\").Animation;\r\ndeclare type AnimationRange = import(\"./Animations/animationRange\").AnimationRange;\r\ndeclare type AbstractMesh = import(\"./Meshes/abstractMesh\").AbstractMesh;\r\n\r\n/**\r\n * Defines how a node can be built from a string name.\r\n */\r\nexport type NodeConstructor = (name: string, scene: Scene, options?: any) => () => Node;\r\n\r\n/** @internal */\r\nclass _InternalNodeDataInfo {\r\n    public _doNotSerialize = false;\r\n    public _isDisposed = false;\r\n    public _sceneRootNodesIndex = -1;\r\n    public _isEnabled = true;\r\n    public _isParentEnabled = true;\r\n    public _isReady = true;\r\n    public _onEnabledStateChangedObservable = new Observable<boolean>();\r\n    public _onClonedObservable = new Observable<Node>();\r\n}\r\n\r\n/**\r\n * Node is the basic class for all scene objects (Mesh, Light, Camera.)\r\n */\r\nexport class Node implements IBehaviorAware<Node> {\r\n    protected _isDirty = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _AnimationRangeFactory = (_name: string, _from: number, _to: number): AnimationRange => {\r\n        throw _WarnImport(\"AnimationRange\");\r\n    };\r\n\r\n    private static _NodeConstructors: { [key: string]: any } = {};\r\n\r\n    /**\r\n     * Add a new node constructor\r\n     * @param type defines the type name of the node to construct\r\n     * @param constructorFunc defines the constructor function\r\n     */\r\n    public static AddNodeConstructor(type: string, constructorFunc: NodeConstructor) {\r\n        this._NodeConstructors[type] = constructorFunc;\r\n    }\r\n\r\n    /**\r\n     * Returns a node constructor based on type name\r\n     * @param type defines the type name\r\n     * @param name defines the new node name\r\n     * @param scene defines the hosting scene\r\n     * @param options defines optional options to transmit to constructors\r\n     * @returns the new constructor or null\r\n     */\r\n    public static Construct(type: string, name: string, scene: Scene, options?: any): Nullable<() => Node> {\r\n        const constructorFunc = this._NodeConstructors[type];\r\n\r\n        if (!constructorFunc) {\r\n            return null;\r\n        }\r\n\r\n        return constructorFunc(name, scene, options);\r\n    }\r\n\r\n    private _nodeDataStorage = new _InternalNodeDataInfo();\r\n\r\n    /**\r\n     * Gets or sets the name of the node\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets the id of the node\r\n     */\r\n    @serialize()\r\n    public id: string;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets a string used to store user defined state for the node\r\n     */\r\n    @serialize()\r\n    public state = \"\";\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/how_to/debug_layer#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * Gets or sets the accessibility tag to describe the node for accessibility purpose.\r\n     */\r\n    public set accessibilityTag(value: Nullable<IAccessibilityTag>) {\r\n        this._accessibilityTag = value;\r\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    public get accessibilityTag() {\r\n        return this._accessibilityTag;\r\n    }\r\n\r\n    protected _accessibilityTag: Nullable<IAccessibilityTag> = null;\r\n\r\n    public onAccessibilityTagChangedObservable = new Observable<Nullable<IAccessibilityTag>>();\r\n\r\n    /**\r\n     * Gets or sets a boolean used to define if the node must be serialized\r\n     */\r\n    public get doNotSerialize() {\r\n        if (this._nodeDataStorage._doNotSerialize) {\r\n            return true;\r\n        }\r\n\r\n        if (this._parentNode) {\r\n            return this._parentNode.doNotSerialize;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public set doNotSerialize(value: boolean) {\r\n        this._nodeDataStorage._doNotSerialize = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /**\r\n     * Gets a list of Animations associated with the node\r\n     */\r\n    public animations = new Array<Animation>();\r\n    protected _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    /**\r\n     * Callback raised when the node is ready to be used\r\n     */\r\n    public onReady: Nullable<(node: Node) => void> = null;\r\n\r\n    /** @internal */\r\n    public _currentRenderId = -1;\r\n    private _parentUpdateId = -1;\r\n    /** @internal */\r\n    public _childUpdateId = -1;\r\n\r\n    /** @internal */\r\n    public _waitingParentId: Nullable<string> = null;\r\n    /** @internal */\r\n    public _waitingParentInstanceIndex: Nullable<string> = null;\r\n    /** @internal */\r\n    public _waitingParsedUniqueId: Nullable<number> = null;\r\n    /** @internal */\r\n    public _scene: Scene;\r\n    /** @internal */\r\n    public _cache: any = {};\r\n\r\n    protected _parentNode: Nullable<Node> = null;\r\n\r\n    /** @internal */\r\n    protected _children: Nullable<Node[]> = null;\r\n\r\n    /** @internal */\r\n    public _worldMatrix = Matrix.Identity();\r\n    /** @internal */\r\n    public _worldMatrixDeterminant = 0;\r\n    /** @internal */\r\n    public _worldMatrixDeterminantIsDirty = true;\r\n\r\n    /**\r\n     * Gets a boolean indicating if the node has been disposed\r\n     * @returns true if the node was disposed\r\n     */\r\n    public isDisposed(): boolean {\r\n        return this._nodeDataStorage._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the parent of the node (without keeping the current position in the scene)\r\n     * @see https://doc.babylonjs.com/how_to/parenting\r\n     */\r\n    public set parent(parent: Nullable<Node>) {\r\n        if (this._parentNode === parent) {\r\n            return;\r\n        }\r\n\r\n        const previousParentNode = this._parentNode;\r\n\r\n        // Remove self from list of children of parent\r\n        if (this._parentNode && this._parentNode._children !== undefined && this._parentNode._children !== null) {\r\n            const index = this._parentNode._children.indexOf(this);\r\n            if (index !== -1) {\r\n                this._parentNode._children.splice(index, 1);\r\n            }\r\n\r\n            if (!parent && !this._nodeDataStorage._isDisposed) {\r\n                this._addToSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        // Store new parent\r\n        this._parentNode = parent;\r\n\r\n        // Add as child to new parent\r\n        if (this._parentNode) {\r\n            if (this._parentNode._children === undefined || this._parentNode._children === null) {\r\n                this._parentNode._children = new Array<Node>();\r\n            }\r\n            this._parentNode._children.push(this);\r\n\r\n            if (!previousParentNode) {\r\n                this._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        // Enabled state\r\n        this._syncParentEnabledState();\r\n    }\r\n\r\n    public get parent(): Nullable<Node> {\r\n        return this._parentNode;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _serializeAsParent(serializationObject: any): void {\r\n        serializationObject.parentId = this.uniqueId;\r\n    }\r\n\r\n    /** @internal */\r\n    public _addToSceneRootNodes() {\r\n        if (this._nodeDataStorage._sceneRootNodesIndex === -1) {\r\n            this._nodeDataStorage._sceneRootNodesIndex = this._scene.rootNodes.length;\r\n            this._scene.rootNodes.push(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _removeFromSceneRootNodes() {\r\n        if (this._nodeDataStorage._sceneRootNodesIndex !== -1) {\r\n            const rootNodes = this._scene.rootNodes;\r\n            const lastIdx = rootNodes.length - 1;\r\n            rootNodes[this._nodeDataStorage._sceneRootNodesIndex] = rootNodes[lastIdx];\r\n            rootNodes[this._nodeDataStorage._sceneRootNodesIndex]._nodeDataStorage._sceneRootNodesIndex = this._nodeDataStorage._sceneRootNodesIndex;\r\n            this._scene.rootNodes.pop();\r\n            this._nodeDataStorage._sceneRootNodesIndex = -1;\r\n        }\r\n    }\r\n\r\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\r\n\r\n    /**\r\n     * Gets or sets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        if (!this._animationPropertiesOverride) {\r\n            return this._scene.animationPropertiesOverride;\r\n        }\r\n        return this._animationPropertiesOverride;\r\n    }\r\n\r\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\r\n        this._animationPropertiesOverride = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"Node\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"Node\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isNode = true;\r\n\r\n    /**\r\n     * An event triggered when the mesh is disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Node>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<Node>> = null;\r\n    /**\r\n     * Sets a callback that will be raised when the node will be disposed\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the enabled state of the node changes\r\n     */\r\n    public get onEnabledStateChangedObservable(): Observable<boolean> {\r\n        return this._nodeDataStorage._onEnabledStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the node is cloned\r\n     */\r\n    public get onClonedObservable(): Observable<Node> {\r\n        return this._nodeDataStorage._onClonedObservable;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Node\r\n     * @param name the name and id to be given to this node\r\n     * @param scene the scene this node will be added to\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = null) {\r\n        this.name = name;\r\n        this.id = name;\r\n        this._scene = <Scene>(scene || EngineStore.LastCreatedScene);\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._initCache();\r\n    }\r\n\r\n    /**\r\n     * Gets the scene of the node\r\n     * @returns a scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the engine of the node\r\n     * @returns a Engine\r\n     */\r\n    public getEngine(): Engine {\r\n        return this._scene.getEngine();\r\n    }\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Node>>();\r\n\r\n    /**\r\n     * Attach a behavior to the node\r\n     * @see https://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @param attachImmediately defines that the behavior must be attached even if the scene is still loading\r\n     * @returns the current Node\r\n     */\r\n    public addBehavior(behavior: Behavior<Node>, attachImmediately = false): Node {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        if (this._scene.isLoading && !attachImmediately) {\r\n            // We defer the attach when the scene will be loaded\r\n            this._scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see https://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current Node\r\n     */\r\n    public removeBehavior(behavior: Behavior<Node>): Node {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see https://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Node>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see https://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Node>> {\r\n        for (const behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the latest update of the World matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._currentRenderId !== this._scene.getRenderId()) {\r\n            this.computeWorldMatrix();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getWorldMatrixDeterminant(): number {\r\n        if (this._worldMatrixDeterminantIsDirty) {\r\n            this._worldMatrixDeterminantIsDirty = false;\r\n            this._worldMatrixDeterminant = this._worldMatrix.determinant();\r\n        }\r\n        return this._worldMatrixDeterminant;\r\n    }\r\n\r\n    /**\r\n     * Returns directly the latest state of the mesh World matrix.\r\n     * A Matrix is returned.\r\n     */\r\n    public get worldMatrixFromCache(): Matrix {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    // and call the parent class method\r\n    /** @internal */\r\n    public _initCache() {\r\n        this._cache = {};\r\n        this._cache.parent = undefined;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public updateCache(force?: boolean): void {\r\n        if (!force && this.isSynchronized()) {\r\n            return;\r\n        }\r\n\r\n        this._cache.parent = this.parent;\r\n\r\n        this._updateCache();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getActionManagerForTrigger(trigger?: number, _initialCall = true): Nullable<AbstractActionManager> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        return this.parent._getActionManagerForTrigger(trigger, false);\r\n    }\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    // and call the parent class method if !ignoreParentClass\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateCache(_ignoreParentClass?: boolean): void {}\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSyncedWithParent() {\r\n        if (this._parentNode) {\r\n            this._parentUpdateId = this._parentNode._childUpdateId;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public isSynchronizedWithParent(): boolean {\r\n        if (!this._parentNode) {\r\n            return true;\r\n        }\r\n\r\n        if (this._parentNode._isDirty || this._parentUpdateId !== this._parentNode._childUpdateId) {\r\n            return false;\r\n        }\r\n\r\n        return this._parentNode.isSynchronized();\r\n    }\r\n\r\n    /** @internal */\r\n    public isSynchronized(): boolean {\r\n        if (this._cache.parent !== this._parentNode) {\r\n            this._cache.parent = this._parentNode;\r\n            return false;\r\n        }\r\n\r\n        if (this._parentNode && !this.isSynchronizedWithParent()) {\r\n            return false;\r\n        }\r\n\r\n        return this._isSynchronized();\r\n    }\r\n\r\n    /**\r\n     * Is this node ready to be used/rendered\r\n     * @param _completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @returns true if the node is ready\r\n     */\r\n    public isReady(_completeCheck = false): boolean {\r\n        return this._nodeDataStorage._isReady;\r\n    }\r\n\r\n    /**\r\n     * Flag the  node as dirty (Forcing it to update everything)\r\n     * @param _property helps children apply precise \"dirtyfication\"\r\n     * @returns this node\r\n     */\r\n    public markAsDirty(_property?: string): Node {\r\n        this._currentRenderId = Number.MAX_VALUE;\r\n        this._isDirty = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Is this node enabled?\r\n     * If the node has a parent, all ancestors will be checked and false will be returned if any are false (not enabled), otherwise will return true\r\n     * @param checkAncestors indicates if this method should check the ancestors. The default is to check the ancestors. If set to false, the method will return the value of this node without checking ancestors\r\n     * @returns whether this node (and its parent) is enabled\r\n     */\r\n    public isEnabled(checkAncestors: boolean = true): boolean {\r\n        if (checkAncestors === false) {\r\n            return this._nodeDataStorage._isEnabled;\r\n        }\r\n\r\n        if (!this._nodeDataStorage._isEnabled) {\r\n            return false;\r\n        }\r\n\r\n        return this._nodeDataStorage._isParentEnabled;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _syncParentEnabledState() {\r\n        this._nodeDataStorage._isParentEnabled = this._parentNode ? this._parentNode.isEnabled() : true;\r\n\r\n        if (this._children) {\r\n            this._children.forEach((c) => {\r\n                c._syncParentEnabledState(); // Force children to update accordingly\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the enabled state of this node\r\n     * @param value defines the new enabled state\r\n     */\r\n    public setEnabled(value: boolean): void {\r\n        if (this._nodeDataStorage._isEnabled === value) {\r\n            return;\r\n        }\r\n        this._nodeDataStorage._isEnabled = value;\r\n        this._syncParentEnabledState();\r\n        this._nodeDataStorage._onEnabledStateChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Is this node a descendant of the given node?\r\n     * The function will iterate up the hierarchy until the ancestor was found or no more parents defined\r\n     * @param ancestor defines the parent node to inspect\r\n     * @returns a boolean indicating if this node is a descendant of the given node\r\n     */\r\n    public isDescendantOf(ancestor: Node): boolean {\r\n        if (this.parent) {\r\n            if (this.parent === ancestor) {\r\n                return true;\r\n            }\r\n\r\n            return this.parent.isDescendantOf(ancestor);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDescendants(results: Node[], directDescendantsOnly: boolean = false, predicate?: (node: Node) => boolean): void {\r\n        if (!this._children) {\r\n            return;\r\n        }\r\n\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            const item = this._children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants<T extends Node>(directDescendantsOnly?: boolean, predicate?: (node: Node) => node is T): T[];\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): Node[];\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): Node[] {\r\n        const results = new Array<Node>();\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes<T extends AbstractMesh>(directDescendantsOnly?: boolean, predicate?: (node: Node) => node is T): T[];\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): AbstractMesh[];\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): AbstractMesh[] {\r\n        const results: Array<AbstractMesh> = [];\r\n        this._getDescendants(results, directDescendantsOnly, (node: Node) => {\r\n            return (!predicate || predicate(node)) && (<AbstractMesh>node).cullingStrategy !== undefined;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren<T extends Node>(predicate?: (node: Node) => node is T, directDescendantsOnly?: boolean): T[];\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren(predicate?: (node: Node) => boolean, directDescendantsOnly?: boolean): Node[];\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren(predicate?: (node: Node) => boolean, directDescendantsOnly = true): Node[] {\r\n        return this.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setReady(state: boolean): void {\r\n        if (state === this._nodeDataStorage._isReady) {\r\n            return;\r\n        }\r\n\r\n        if (!state) {\r\n            this._nodeDataStorage._isReady = false;\r\n            return;\r\n        }\r\n\r\n        if (this.onReady) {\r\n            this.onReady(this);\r\n        }\r\n        this._nodeDataStorage._isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get an animation by name\r\n     * @param name defines the name of the animation to look for\r\n     * @returns null if not found else the requested animation\r\n     */\r\n    public getAnimationByName(name: string): Nullable<Animation> {\r\n        for (let i = 0; i < this.animations.length; i++) {\r\n            const animation = this.animations[i];\r\n\r\n            if (animation.name === name) {\r\n                return animation;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates an animation range for this node\r\n     * @param name defines the name of the range\r\n     * @param from defines the starting key\r\n     * @param to defines the end key\r\n     */\r\n    public createAnimationRange(name: string, from: number, to: number): void {\r\n        // check name not already in use\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = Node._AnimationRangeFactory(name, from, to);\r\n            for (let i = 0, nAnimations = this.animations.length; i < nAnimations; i++) {\r\n                if (this.animations[i]) {\r\n                    this.animations[i].createRange(name, from, to);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a specific animation range\r\n     * @param name defines the name of the range to delete\r\n     * @param deleteFrames defines if animation frames from the range must be deleted as well\r\n     */\r\n    public deleteAnimationRange(name: string, deleteFrames = true): void {\r\n        for (let i = 0, nAnimations = this.animations.length; i < nAnimations; i++) {\r\n            if (this.animations[i]) {\r\n                this.animations[i].deleteRange(name, deleteFrames);\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n    }\r\n\r\n    /**\r\n     * Get an animation range by name\r\n     * @param name defines the name of the animation range to look for\r\n     * @returns null if not found else the requested animation range\r\n     */\r\n    public getAnimationRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name] || null;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of all animation ranges defined on this node\r\n     * @returns an array\r\n     */\r\n    public getAnimationRanges(): Nullable<AnimationRange>[] {\r\n        const animationRanges: Nullable<AnimationRange>[] = [];\r\n        let name: string;\r\n        for (name in this._ranges) {\r\n            animationRanges.push(this._ranges[name]);\r\n        }\r\n        return animationRanges;\r\n    }\r\n\r\n    /**\r\n     * Will start the animation sequence\r\n     * @param name defines the range frames for animation sequence\r\n     * @param loop defines if the animation should loop (false by default)\r\n     * @param speedRatio defines the speed factor in which to run the animation (1 by default)\r\n     * @param onAnimationEnd defines a function to be executed when the animation ended (undefined by default)\r\n     * @returns the object created for this animation. If range does not exist, it will return null\r\n     */\r\n    public beginAnimation(name: string, loop?: boolean, speedRatio?: number, onAnimationEnd?: () => void): Nullable<Animatable> {\r\n        const range = this.getAnimationRange(name);\r\n\r\n        if (!range) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.beginAnimation(this, range.from, range.to, loop, speedRatio, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Serialize animation ranges into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public serializeAnimationRanges(): any {\r\n        const serializationRanges = [];\r\n        for (const name in this._ranges) {\r\n            const localRange = this._ranges[name];\r\n            if (!localRange) {\r\n                continue;\r\n            }\r\n            const range: any = {};\r\n            range.name = name;\r\n            range.from = localRange.from;\r\n            range.to = localRange.to;\r\n            serializationRanges.push(range);\r\n        }\r\n        return serializationRanges;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param _force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(_force?: boolean): Matrix {\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        this._nodeDataStorage._isDisposed = true;\r\n\r\n        if (!doNotRecurse) {\r\n            const nodes = this.getDescendants(true);\r\n            for (const node of nodes) {\r\n                node.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n            }\r\n        }\r\n\r\n        if (!this.parent) {\r\n            this._removeFromSceneRootNodes();\r\n        } else {\r\n            this.parent = null;\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n\r\n        this.onEnabledStateChangedObservable.clear();\r\n        this.onClonedObservable.clear();\r\n\r\n        // Behaviors\r\n        for (const behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n\r\n        this._behaviors.length = 0;\r\n\r\n        this.metadata = null;\r\n    }\r\n\r\n    /**\r\n     * Parse animation range data from a serialization object and store them into a given node\r\n     * @param node defines where to store the animation ranges\r\n     * @param parsedNode defines the serialization object to read data from\r\n     * @param _scene defines the hosting scene\r\n     */\r\n    public static ParseAnimationRanges(node: Node, parsedNode: any, _scene: Scene): void {\r\n        if (parsedNode.ranges) {\r\n            for (let index = 0; index < parsedNode.ranges.length; index++) {\r\n                const data = parsedNode.ranges[index];\r\n                node.createAnimationRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Return the minimum and maximum world vectors of the entire hierarchy under current node\r\n     * @param includeDescendants Include bounding info from descendants as well (true by default)\r\n     * @param predicate defines a callback function that can be customize to filter what meshes should be included in the list used to compute the bounding vectors\r\n     * @returns the new bounding vectors\r\n     */\r\n    public getHierarchyBoundingVectors(includeDescendants = true, predicate: Nullable<(abstractMesh: AbstractMesh) => boolean> = null): { min: Vector3; max: Vector3 } {\r\n        // Ensures that all world matrix will be recomputed.\r\n        this.getScene().incrementRenderId();\r\n\r\n        this.computeWorldMatrix(true);\r\n\r\n        let min: Vector3;\r\n        let max: Vector3;\r\n\r\n        const thisAbstractMesh = this as Node as AbstractMesh;\r\n        if (thisAbstractMesh.getBoundingInfo && thisAbstractMesh.subMeshes) {\r\n            // If this is an abstract mesh get its bounding info\r\n            const boundingInfo = thisAbstractMesh.getBoundingInfo();\r\n            min = boundingInfo.boundingBox.minimumWorld.clone();\r\n            max = boundingInfo.boundingBox.maximumWorld.clone();\r\n        } else {\r\n            min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n            max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            const descendants = this.getDescendants(false);\r\n\r\n            for (const descendant of descendants) {\r\n                const childMesh = <AbstractMesh>descendant;\r\n                childMesh.computeWorldMatrix(true);\r\n\r\n                // Filters meshes based on custom predicate function.\r\n                if (predicate && !predicate(childMesh)) {\r\n                    continue;\r\n                }\r\n\r\n                //make sure we have the needed params to get mix and max\r\n                if (!childMesh.getBoundingInfo || childMesh.getTotalVertices() === 0) {\r\n                    continue;\r\n                }\r\n\r\n                const childBoundingInfo = childMesh.getBoundingInfo();\r\n                const boundingBox = childBoundingInfo.boundingBox;\r\n\r\n                const minBox = boundingBox.minimumWorld;\r\n                const maxBox = boundingBox.maximumWorld;\r\n\r\n                Vector3.CheckExtends(minBox, min, max);\r\n                Vector3.CheckExtends(maxBox, min, max);\r\n            }\r\n        }\r\n\r\n        return {\r\n            min: min,\r\n            max: max,\r\n        };\r\n    }\r\n}\r\n","import type { Observable } from \"../Misc/observable\";\r\nimport { PointerInfoPre, PointerInfo, PointerEventTypes } from \"../Events/pointerEvents\";\r\nimport type { Nullable } from \"../types\";\r\nimport { AbstractActionManager } from \"../Actions/abstractActionManager\";\r\nimport { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport { Vector2, Matrix } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { ActionEvent } from \"../Actions/actionEvent\";\r\nimport { KeyboardEventTypes, KeyboardInfoPre, KeyboardInfo } from \"../Events/keyboardEvents\";\r\nimport { DeviceType, PointerInput } from \"../DeviceInput/InputDevices/deviceEnums\";\r\nimport type { IKeyboardEvent, IMouseEvent, IPointerEvent } from \"../Events/deviceInputEvents\";\r\nimport { DeviceSourceManager } from \"../DeviceInput/InputDevices/deviceSourceManager\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _ClickInfo {\r\n    private _singleClick = false;\r\n    private _doubleClick = false;\r\n    private _hasSwiped = false;\r\n    private _ignore = false;\r\n\r\n    public get singleClick(): boolean {\r\n        return this._singleClick;\r\n    }\r\n    public get doubleClick(): boolean {\r\n        return this._doubleClick;\r\n    }\r\n    public get hasSwiped(): boolean {\r\n        return this._hasSwiped;\r\n    }\r\n    public get ignore(): boolean {\r\n        return this._ignore;\r\n    }\r\n\r\n    public set singleClick(b: boolean) {\r\n        this._singleClick = b;\r\n    }\r\n    public set doubleClick(b: boolean) {\r\n        this._doubleClick = b;\r\n    }\r\n    public set hasSwiped(b: boolean) {\r\n        this._hasSwiped = b;\r\n    }\r\n    public set ignore(b: boolean) {\r\n        this._ignore = b;\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to manage all inputs for the scene.\r\n */\r\nexport class InputManager {\r\n    /** The distance in pixel that you have to move to prevent some events */\r\n    public static DragMovementThreshold = 10; // in pixels\r\n    /** Time in milliseconds to wait to raise long press events if button is still pressed */\r\n    public static LongPressDelay = 500; // in milliseconds\r\n    /** Time in milliseconds with two consecutive clicks will be considered as a double click */\r\n    public static DoubleClickDelay = 300; // in milliseconds\r\n    /** If you need to check double click without raising a single click at first click, enable this flag */\r\n    public static ExclusiveDoubleClickMode = false;\r\n\r\n    /** This is a defensive check to not allow control attachment prior to an already active one. If already attached, previous control is unattached before attaching the new one. */\r\n    private _alreadyAttached = false;\r\n    private _alreadyAttachedTo: Nullable<HTMLElement>;\r\n\r\n    // Pointers\r\n    private _onPointerMove: (evt: IMouseEvent) => void;\r\n    private _onPointerDown: (evt: IPointerEvent) => void;\r\n    private _onPointerUp: (evt: IPointerEvent) => void;\r\n\r\n    private _initClickEvent: (\r\n        obs1: Observable<PointerInfoPre>,\r\n        obs2: Observable<PointerInfo>,\r\n        evt: IPointerEvent,\r\n        cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void\r\n    ) => void;\r\n    private _initActionManager: (act: Nullable<AbstractActionManager>, clickInfo: _ClickInfo) => Nullable<AbstractActionManager>;\r\n    private _delayedSimpleClick: (btn: number, clickInfo: _ClickInfo, cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void) => void;\r\n    private _delayedSimpleClickTimeout: number;\r\n    private _previousDelayedSimpleClickTimeout: number;\r\n    private _meshPickProceed = false;\r\n\r\n    private _previousButtonPressed: number;\r\n    private _currentPickResult: Nullable<PickingInfo> = null;\r\n    private _previousPickResult: Nullable<PickingInfo> = null;\r\n    private _totalPointersPressed = 0;\r\n    private _doubleClickOccured = false;\r\n    private _isSwiping: boolean = false;\r\n    private _swipeButtonPressed: number = -1;\r\n\r\n    private _pointerOverMesh: Nullable<AbstractMesh>;\r\n\r\n    private _pickedDownMesh: Nullable<AbstractMesh>;\r\n    private _pickedUpMesh: Nullable<AbstractMesh>;\r\n\r\n    private _pointerX: number = 0;\r\n    private _pointerY: number = 0;\r\n    private _unTranslatedPointerX: number;\r\n    private _unTranslatedPointerY: number;\r\n    private _startingPointerPosition = new Vector2(0, 0);\r\n    private _previousStartingPointerPosition = new Vector2(0, 0);\r\n    private _startingPointerTime = 0;\r\n    private _previousStartingPointerTime = 0;\r\n    private _pointerCaptures: { [pointerId: number]: boolean } = {};\r\n    private _meshUnderPointerId: { [pointerId: number]: Nullable<AbstractMesh> } = {};\r\n    private _movePointerInfo: Nullable<PointerInfo> = null;\r\n\r\n    // Keyboard\r\n    private _onKeyDown: (evt: IKeyboardEvent) => void;\r\n    private _onKeyUp: (evt: IKeyboardEvent) => void;\r\n\r\n    private _scene: Scene;\r\n    private _deviceSourceManager: Nullable<DeviceSourceManager> = null;\r\n\r\n    /**\r\n     * Creates a new InputManager\r\n     * @param scene - defines the hosting scene\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh that is currently under the pointer\r\n     * @returns Mesh that the pointer is pointer is hovering over\r\n     */\r\n    public get meshUnderPointer(): Nullable<AbstractMesh> {\r\n        if (this._movePointerInfo) {\r\n            // Because _pointerOverMesh is populated as part of _pickMove, we need to force a pick to update it.\r\n            // Calling _pickMove calls _setCursorAndPointerOverMesh which calls setPointerOverMesh\r\n            this._movePointerInfo._generatePickInfo();\r\n            // Once we have what we need, we can clear _movePointerInfo because we don't need it anymore\r\n            this._movePointerInfo = null;\r\n        }\r\n        return this._pointerOverMesh;\r\n    }\r\n\r\n    /**\r\n     * When using more than one pointer (for example in XR) you can get the mesh under the specific pointer\r\n     * @param pointerId - the pointer id to use\r\n     * @returns The mesh under this pointer id or null if not found\r\n     */\r\n    public getMeshUnderPointerByPointerId(pointerId: number): Nullable<AbstractMesh> {\r\n        return this._meshUnderPointerId[pointerId] || null;\r\n    }\r\n\r\n    /**\r\n     * Gets the pointer coordinates in 2D without any translation (ie. straight out of the pointer event)\r\n     * @returns Vector with X/Y values directly from pointer event\r\n     */\r\n    public get unTranslatedPointer(): Vector2 {\r\n        return new Vector2(this._unTranslatedPointerX, this._unTranslatedPointerY);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current on-screen X position of the pointer\r\n     * @returns Translated X with respect to screen\r\n     */\r\n    public get pointerX(): number {\r\n        return this._pointerX;\r\n    }\r\n\r\n    public set pointerX(value: number) {\r\n        this._pointerX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current on-screen Y position of the pointer\r\n     * @returns Translated Y with respect to screen\r\n     */\r\n    public get pointerY(): number {\r\n        return this._pointerY;\r\n    }\r\n\r\n    public set pointerY(value: number) {\r\n        this._pointerY = value;\r\n    }\r\n\r\n    private _updatePointerPosition(evt: IPointerEvent): void {\r\n        const canvasRect = this._scene.getEngine().getInputElementClientRect();\r\n\r\n        if (!canvasRect) {\r\n            return;\r\n        }\r\n\r\n        this._pointerX = evt.clientX - canvasRect.left;\r\n        this._pointerY = evt.clientY - canvasRect.top;\r\n\r\n        this._unTranslatedPointerX = this._pointerX;\r\n        this._unTranslatedPointerY = this._pointerY;\r\n    }\r\n\r\n    private _processPointerMove(pickResult: Nullable<PickingInfo>, evt: IPointerEvent) {\r\n        const scene = this._scene;\r\n        const engine = scene.getEngine();\r\n        const canvas = engine.getInputElement();\r\n\r\n        if (canvas) {\r\n            canvas.tabIndex = engine.canvasTabIndex;\r\n\r\n            // Restore pointer\r\n            if (!scene.doNotHandleCursors) {\r\n                canvas.style.cursor = scene.defaultCursor;\r\n            }\r\n        }\r\n\r\n        this._setCursorAndPointerOverMesh(pickResult, evt.pointerId, scene);\r\n\r\n        for (const step of scene._pointerMoveStage) {\r\n            const isMeshPicked = pickResult?.pickedMesh ? true : false;\r\n            pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, isMeshPicked, canvas);\r\n        }\r\n\r\n        const type = evt.inputIndex >= PointerInput.MouseWheelX && evt.inputIndex <= PointerInput.MouseWheelZ ? PointerEventTypes.POINTERWHEEL : PointerEventTypes.POINTERMOVE;\r\n\r\n        if (scene.onPointerMove) {\r\n            // Because of lazy picking, we need to force a pick to update the pickResult\r\n            const pr = pickResult ? pickResult : this._pickMove(evt.pointerId);\r\n            scene.onPointerMove(evt, pr, type);\r\n        }\r\n\r\n        let pointerInfo: PointerInfo;\r\n        if (pickResult) {\r\n            pointerInfo = new PointerInfo(type, evt, pickResult);\r\n            this._setRayOnPointerInfo(pickResult, evt);\r\n        } else {\r\n            pointerInfo = new PointerInfo(type, evt, null, this);\r\n            this._movePointerInfo = pointerInfo;\r\n        }\r\n\r\n        if (scene.onPointerObservable.hasObservers()) {\r\n            scene.onPointerObservable.notifyObservers(pointerInfo, type);\r\n        }\r\n    }\r\n\r\n    // Pointers handling\r\n    /** @internal */\r\n    public _setRayOnPointerInfo(pickInfo: Nullable<PickingInfo>, event: IMouseEvent) {\r\n        const scene = this._scene;\r\n        if (pickInfo && scene._pickingAvailable) {\r\n            if (!pickInfo.ray) {\r\n                pickInfo.ray = scene.createPickingRay(event.offsetX, event.offsetY, Matrix.Identity(), scene.activeCamera);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _checkPrePointerObservable(pickResult: Nullable<PickingInfo>, evt: IPointerEvent, type: number) {\r\n        const scene = this._scene;\r\n        const pi = new PointerInfoPre(type, evt, this._unTranslatedPointerX, this._unTranslatedPointerY);\r\n        if (pickResult) {\r\n            pi.originalPickingInfo = pickResult;\r\n            pi.ray = pickResult.ray;\r\n            if (pickResult.originMesh) {\r\n                pi.nearInteractionPickingInfo = pickResult;\r\n            }\r\n        }\r\n\r\n        scene.onPrePointerObservable.notifyObservers(pi, type);\r\n        if (pi.skipOnPointerObservable) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _pickMove(pointerId: number): PickingInfo {\r\n        const scene = this._scene;\r\n        const pickResult = scene.pick(\r\n            this._unTranslatedPointerX,\r\n            this._unTranslatedPointerY,\r\n            scene.pointerMovePredicate,\r\n            false,\r\n            scene.cameraToUseForPointers,\r\n            scene.pointerMoveTrianglePredicate\r\n        );\r\n\r\n        this._setCursorAndPointerOverMesh(pickResult, pointerId, scene);\r\n\r\n        return pickResult;\r\n    }\r\n\r\n    private _setCursorAndPointerOverMesh(pickResult: Nullable<PickingInfo>, pointerId: number, scene: Scene) {\r\n        const engine = scene.getEngine();\r\n        const canvas = engine.getInputElement();\r\n\r\n        if (pickResult?.pickedMesh) {\r\n            this.setPointerOverMesh(pickResult.pickedMesh, pointerId, pickResult);\r\n\r\n            if (!scene.doNotHandleCursors && canvas && this._pointerOverMesh) {\r\n                const actionManager = this._pointerOverMesh._getActionManagerForTrigger();\r\n                if (actionManager && actionManager.hasPointerTriggers) {\r\n                    canvas.style.cursor = actionManager.hoverCursor || scene.hoverCursor;\r\n                }\r\n            }\r\n        } else {\r\n            this.setPointerOverMesh(null, pointerId, pickResult);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer move on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     */\r\n    public simulatePointerMove(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): void {\r\n        const evt = new PointerEvent(\"pointermove\", pointerEventInit);\r\n        evt.inputIndex = PointerInput.Move;\r\n\r\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERMOVE)) {\r\n            return;\r\n        }\r\n        this._processPointerMove(pickResult, evt);\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer down on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     */\r\n    public simulatePointerDown(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): void {\r\n        const evt = new PointerEvent(\"pointerdown\", pointerEventInit);\r\n        evt.inputIndex = evt.button + 2;\r\n\r\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERDOWN)) {\r\n            return;\r\n        }\r\n\r\n        this._processPointerDown(pickResult, evt);\r\n    }\r\n\r\n    private _processPointerDown(pickResult: Nullable<PickingInfo>, evt: IPointerEvent): void {\r\n        const scene = this._scene;\r\n        if (pickResult && pickResult.hit && pickResult.pickedMesh) {\r\n            this._pickedDownMesh = pickResult.pickedMesh;\r\n            const actionManager = pickResult.pickedMesh._getActionManagerForTrigger();\r\n            if (actionManager) {\r\n                if (actionManager.hasPickTriggers) {\r\n                    actionManager.processTrigger(Constants.ACTION_OnPickDownTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\r\n                    switch (evt.button) {\r\n                        case 0:\r\n                            actionManager.processTrigger(Constants.ACTION_OnLeftPickTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\r\n                            break;\r\n                        case 1:\r\n                            actionManager.processTrigger(Constants.ACTION_OnCenterPickTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\r\n                            break;\r\n                        case 2:\r\n                            actionManager.processTrigger(Constants.ACTION_OnRightPickTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                if (actionManager.hasSpecificTrigger(Constants.ACTION_OnLongPressTrigger)) {\r\n                    window.setTimeout(() => {\r\n                        const pickResult = scene.pick(\r\n                            this._unTranslatedPointerX,\r\n                            this._unTranslatedPointerY,\r\n                            (mesh: AbstractMesh): boolean =>\r\n                                <boolean>(\r\n                                    (mesh.isPickable &&\r\n                                        mesh.isVisible &&\r\n                                        mesh.isReady() &&\r\n                                        mesh.actionManager &&\r\n                                        mesh.actionManager.hasSpecificTrigger(Constants.ACTION_OnLongPressTrigger) &&\r\n                                        mesh === this._pickedDownMesh)\r\n                                ),\r\n                            false,\r\n                            scene.cameraToUseForPointers\r\n                        );\r\n\r\n                        if (pickResult && pickResult.hit && pickResult.pickedMesh && actionManager) {\r\n                            if (this._totalPointersPressed !== 0 && Date.now() - this._startingPointerTime > InputManager.LongPressDelay && !this._isPointerSwiping()) {\r\n                                this._startingPointerTime = 0;\r\n                                actionManager.processTrigger(Constants.ACTION_OnLongPressTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\r\n                            }\r\n                        }\r\n                    }, InputManager.LongPressDelay);\r\n                }\r\n            }\r\n        } else {\r\n            for (const step of scene._pointerDownStage) {\r\n                pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, evt, false);\r\n            }\r\n        }\r\n\r\n        if (pickResult) {\r\n            const type = PointerEventTypes.POINTERDOWN;\r\n\r\n            if (scene.onPointerDown) {\r\n                scene.onPointerDown(evt, pickResult, type);\r\n            }\r\n\r\n            if (scene.onPointerObservable.hasObservers()) {\r\n                const pi = new PointerInfo(type, evt, pickResult);\r\n                this._setRayOnPointerInfo(pickResult, evt);\r\n                scene.onPointerObservable.notifyObservers(pi, type);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @internals Boolean if delta for pointer exceeds drag movement threshold\r\n     */\r\n    public _isPointerSwiping(): boolean {\r\n        return this._isSwiping;\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer up on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     * @param doubleTap - indicates that the pointer up event should be considered as part of a double click (false by default)\r\n     */\r\n    public simulatePointerUp(pickResult: PickingInfo, pointerEventInit?: PointerEventInit, doubleTap?: boolean): void {\r\n        const evt = new PointerEvent(\"pointerup\", pointerEventInit);\r\n        evt.inputIndex = PointerInput.Move;\r\n        const clickInfo = new _ClickInfo();\r\n\r\n        if (doubleTap) {\r\n            clickInfo.doubleClick = true;\r\n        } else {\r\n            clickInfo.singleClick = true;\r\n        }\r\n\r\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERUP)) {\r\n            return;\r\n        }\r\n\r\n        this._processPointerUp(pickResult, evt, clickInfo);\r\n    }\r\n\r\n    private _processPointerUp(pickResult: Nullable<PickingInfo>, evt: IPointerEvent, clickInfo: _ClickInfo): void {\r\n        const scene = this._scene;\r\n        if (pickResult && pickResult.hit && pickResult.pickedMesh) {\r\n            this._pickedUpMesh = pickResult.pickedMesh;\r\n            if (this._pickedDownMesh === this._pickedUpMesh) {\r\n                if (scene.onPointerPick) {\r\n                    scene.onPointerPick(evt, pickResult);\r\n                }\r\n                if (clickInfo.singleClick && !clickInfo.ignore && scene.onPointerObservable.hasObservers()) {\r\n                    const type = PointerEventTypes.POINTERPICK;\r\n                    const pi = new PointerInfo(type, evt, pickResult);\r\n                    this._setRayOnPointerInfo(pickResult, evt);\r\n                    scene.onPointerObservable.notifyObservers(pi, type);\r\n                }\r\n            }\r\n            const actionManager = pickResult.pickedMesh._getActionManagerForTrigger();\r\n            if (actionManager && !clickInfo.ignore) {\r\n                actionManager.processTrigger(Constants.ACTION_OnPickUpTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\r\n\r\n                if (!clickInfo.hasSwiped && clickInfo.singleClick) {\r\n                    actionManager.processTrigger(Constants.ACTION_OnPickTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\r\n                }\r\n\r\n                const doubleClickActionManager = pickResult.pickedMesh._getActionManagerForTrigger(Constants.ACTION_OnDoublePickTrigger);\r\n                if (clickInfo.doubleClick && doubleClickActionManager) {\r\n                    doubleClickActionManager.processTrigger(Constants.ACTION_OnDoublePickTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\r\n                }\r\n            }\r\n        } else {\r\n            if (!clickInfo.ignore) {\r\n                for (const step of scene._pointerUpStage) {\r\n                    pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, evt, clickInfo.doubleClick);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._pickedDownMesh && this._pickedDownMesh !== this._pickedUpMesh) {\r\n            const pickedDownActionManager = this._pickedDownMesh._getActionManagerForTrigger(Constants.ACTION_OnPickOutTrigger);\r\n            if (pickedDownActionManager) {\r\n                pickedDownActionManager.processTrigger(Constants.ACTION_OnPickOutTrigger, ActionEvent.CreateNew(this._pickedDownMesh, evt));\r\n            }\r\n        }\r\n\r\n        let type = 0;\r\n        if (scene.onPointerObservable.hasObservers()) {\r\n            if (!clickInfo.ignore && !clickInfo.hasSwiped) {\r\n                if (clickInfo.singleClick && scene.onPointerObservable.hasSpecificMask(PointerEventTypes.POINTERTAP)) {\r\n                    type = PointerEventTypes.POINTERTAP;\r\n                } else if (clickInfo.doubleClick && scene.onPointerObservable.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP)) {\r\n                    type = PointerEventTypes.POINTERDOUBLETAP;\r\n                }\r\n                if (type) {\r\n                    const pi = new PointerInfo(type, evt, pickResult);\r\n                    this._setRayOnPointerInfo(pickResult, evt);\r\n                    scene.onPointerObservable.notifyObservers(pi, type);\r\n                }\r\n            }\r\n\r\n            if (!clickInfo.ignore) {\r\n                type = PointerEventTypes.POINTERUP;\r\n                const pi = new PointerInfo(type, evt, pickResult);\r\n                this._setRayOnPointerInfo(pickResult, evt);\r\n                scene.onPointerObservable.notifyObservers(pi, type);\r\n            }\r\n        }\r\n\r\n        if (scene.onPointerUp && !clickInfo.ignore) {\r\n            scene.onPointerUp(evt, pickResult, type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\r\n     * @param pointerId - defines the pointer id to use in a multi-touch scenario (0 by default)\r\n     * @returns true if the pointer was captured\r\n     */\r\n    public isPointerCaptured(pointerId = 0): boolean {\r\n        return this._pointerCaptures[pointerId];\r\n    }\r\n\r\n    /**\r\n     * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\r\n     * @param attachUp - defines if you want to attach events to pointerup\r\n     * @param attachDown - defines if you want to attach events to pointerdown\r\n     * @param attachMove - defines if you want to attach events to pointermove\r\n     * @param elementToAttachTo - defines the target DOM element to attach to (will use the canvas by default)\r\n     */\r\n    public attachControl(attachUp = true, attachDown = true, attachMove = true, elementToAttachTo: Nullable<HTMLElement> = null): void {\r\n        const scene = this._scene;\r\n        const engine = scene.getEngine();\r\n\r\n        if (!elementToAttachTo) {\r\n            elementToAttachTo = engine.getInputElement();\r\n        }\r\n\r\n        if (this._alreadyAttached) {\r\n            this.detachControl();\r\n        }\r\n\r\n        if (elementToAttachTo) {\r\n            this._alreadyAttachedTo = elementToAttachTo;\r\n        }\r\n        this._deviceSourceManager = new DeviceSourceManager(engine);\r\n\r\n        // Because this is only called from _initClickEvent, which is called in _onPointerUp, we'll use the pointerUpPredicate for the pick call\r\n        this._initActionManager = (act: Nullable<AbstractActionManager>): Nullable<AbstractActionManager> => {\r\n            if (!this._meshPickProceed) {\r\n                const pickResult =\r\n                    scene.skipPointerUpPicking || (scene._registeredActions === 0 && !scene.onPointerObservable.hasObservers())\r\n                        ? null\r\n                        : scene.pick(this._unTranslatedPointerX, this._unTranslatedPointerY, scene.pointerUpPredicate, false, scene.cameraToUseForPointers);\r\n                this._currentPickResult = pickResult;\r\n                if (pickResult) {\r\n                    act = pickResult.hit && pickResult.pickedMesh ? pickResult.pickedMesh._getActionManagerForTrigger() : null;\r\n                }\r\n                this._meshPickProceed = true;\r\n            }\r\n            return act;\r\n        };\r\n\r\n        this._delayedSimpleClick = (btn: number, clickInfo: _ClickInfo, cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void) => {\r\n            // double click delay is over and that no double click has been raised since, or the 2 consecutive keys pressed are different\r\n            if ((Date.now() - this._previousStartingPointerTime > InputManager.DoubleClickDelay && !this._doubleClickOccured) || btn !== this._previousButtonPressed) {\r\n                this._doubleClickOccured = false;\r\n                clickInfo.singleClick = true;\r\n                clickInfo.ignore = false;\r\n                cb(clickInfo, this._currentPickResult);\r\n            }\r\n        };\r\n\r\n        this._initClickEvent = (\r\n            obs1: Observable<PointerInfoPre>,\r\n            obs2: Observable<PointerInfo>,\r\n            evt: IPointerEvent,\r\n            cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void\r\n        ): void => {\r\n            const clickInfo = new _ClickInfo();\r\n            this._currentPickResult = null;\r\n            let act: Nullable<AbstractActionManager> = null;\r\n\r\n            let checkPicking =\r\n                obs1.hasSpecificMask(PointerEventTypes.POINTERPICK) ||\r\n                obs2.hasSpecificMask(PointerEventTypes.POINTERPICK) ||\r\n                obs1.hasSpecificMask(PointerEventTypes.POINTERTAP) ||\r\n                obs2.hasSpecificMask(PointerEventTypes.POINTERTAP) ||\r\n                obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) ||\r\n                obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\r\n            if (!checkPicking && AbstractActionManager) {\r\n                act = this._initActionManager(act, clickInfo);\r\n                if (act) {\r\n                    checkPicking = act.hasPickTriggers;\r\n                }\r\n            }\r\n\r\n            let needToIgnoreNext = false;\r\n\r\n            if (checkPicking) {\r\n                const btn = evt.button;\r\n                clickInfo.hasSwiped = this._isPointerSwiping();\r\n\r\n                if (!clickInfo.hasSwiped) {\r\n                    let checkSingleClickImmediately = !InputManager.ExclusiveDoubleClickMode;\r\n\r\n                    if (!checkSingleClickImmediately) {\r\n                        checkSingleClickImmediately = !obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) && !obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\r\n\r\n                        if (checkSingleClickImmediately && !AbstractActionManager.HasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger)) {\r\n                            act = this._initActionManager(act, clickInfo);\r\n                            if (act) {\r\n                                checkSingleClickImmediately = !act.hasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (checkSingleClickImmediately) {\r\n                        // single click detected if double click delay is over or two different successive keys pressed without exclusive double click or no double click required\r\n                        if (Date.now() - this._previousStartingPointerTime > InputManager.DoubleClickDelay || btn !== this._previousButtonPressed) {\r\n                            clickInfo.singleClick = true;\r\n                            cb(clickInfo, this._currentPickResult);\r\n                            needToIgnoreNext = true;\r\n                        }\r\n                    }\r\n                    // at least one double click is required to be check and exclusive double click is enabled\r\n                    else {\r\n                        // wait that no double click has been raised during the double click delay\r\n                        this._previousDelayedSimpleClickTimeout = this._delayedSimpleClickTimeout;\r\n                        this._delayedSimpleClickTimeout = window.setTimeout(this._delayedSimpleClick.bind(this, btn, clickInfo, cb), InputManager.DoubleClickDelay);\r\n                    }\r\n\r\n                    let checkDoubleClick = obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) || obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\r\n                    if (!checkDoubleClick && AbstractActionManager.HasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger)) {\r\n                        act = this._initActionManager(act, clickInfo);\r\n                        if (act) {\r\n                            checkDoubleClick = act.hasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger);\r\n                        }\r\n                    }\r\n                    if (checkDoubleClick) {\r\n                        // two successive keys pressed are equal, double click delay is not over and double click has not just occurred\r\n                        if (btn === this._previousButtonPressed && Date.now() - this._previousStartingPointerTime < InputManager.DoubleClickDelay && !this._doubleClickOccured) {\r\n                            // pointer has not moved for 2 clicks, it's a double click\r\n                            if (!clickInfo.hasSwiped && !this._isPointerSwiping()) {\r\n                                this._previousStartingPointerTime = 0;\r\n                                this._doubleClickOccured = true;\r\n                                clickInfo.doubleClick = true;\r\n                                clickInfo.ignore = false;\r\n                                if (InputManager.ExclusiveDoubleClickMode && this._previousDelayedSimpleClickTimeout) {\r\n                                    clearTimeout(this._previousDelayedSimpleClickTimeout);\r\n                                }\r\n                                this._previousDelayedSimpleClickTimeout = this._delayedSimpleClickTimeout;\r\n                                cb(clickInfo, this._currentPickResult);\r\n                            }\r\n                            // if the two successive clicks are too far, it's just two simple clicks\r\n                            else {\r\n                                this._doubleClickOccured = false;\r\n                                this._previousStartingPointerTime = this._startingPointerTime;\r\n                                this._previousStartingPointerPosition.x = this._startingPointerPosition.x;\r\n                                this._previousStartingPointerPosition.y = this._startingPointerPosition.y;\r\n                                this._previousButtonPressed = btn;\r\n                                if (InputManager.ExclusiveDoubleClickMode) {\r\n                                    if (this._previousDelayedSimpleClickTimeout) {\r\n                                        clearTimeout(this._previousDelayedSimpleClickTimeout);\r\n                                    }\r\n                                    this._previousDelayedSimpleClickTimeout = this._delayedSimpleClickTimeout;\r\n\r\n                                    cb(clickInfo, this._previousPickResult);\r\n                                } else {\r\n                                    cb(clickInfo, this._currentPickResult);\r\n                                }\r\n                            }\r\n                            needToIgnoreNext = true;\r\n                        }\r\n                        // just the first click of the double has been raised\r\n                        else {\r\n                            this._doubleClickOccured = false;\r\n                            this._previousStartingPointerTime = this._startingPointerTime;\r\n                            this._previousStartingPointerPosition.x = this._startingPointerPosition.x;\r\n                            this._previousStartingPointerPosition.y = this._startingPointerPosition.y;\r\n                            this._previousButtonPressed = btn!;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!needToIgnoreNext) {\r\n                cb(clickInfo, this._currentPickResult);\r\n            }\r\n        };\r\n\r\n        this._onPointerMove = (evt: IMouseEvent) => {\r\n            // preserve compatibility with Safari when pointerId is not present\r\n            if ((evt as IPointerEvent).pointerId === undefined) {\r\n                (evt as IPointerEvent as any).pointerId = 0;\r\n            }\r\n\r\n            this._updatePointerPosition(evt as IPointerEvent);\r\n\r\n            // PreObservable support\r\n            if (\r\n                this._checkPrePointerObservable(\r\n                    null,\r\n                    evt as IPointerEvent,\r\n                    evt.inputIndex >= PointerInput.MouseWheelX && evt.inputIndex <= PointerInput.MouseWheelZ ? PointerEventTypes.POINTERWHEEL : PointerEventTypes.POINTERMOVE\r\n                )\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (!scene.cameraToUseForPointers && !scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            if (scene.skipPointerMovePicking) {\r\n                this._processPointerMove(new PickingInfo(), evt as IPointerEvent);\r\n                return;\r\n            }\r\n\r\n            if (!scene.pointerMovePredicate) {\r\n                scene.pointerMovePredicate = (mesh: AbstractMesh): boolean =>\r\n                    mesh.isPickable &&\r\n                    mesh.isVisible &&\r\n                    mesh.isReady() &&\r\n                    mesh.isEnabled() &&\r\n                    (mesh.enablePointerMoveEvents || scene.constantlyUpdateMeshUnderPointer || mesh._getActionManagerForTrigger() !== null) &&\r\n                    (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0);\r\n            }\r\n\r\n            // Check if pointer leaves DragMovementThreshold range to determine if swipe is occurring\r\n            if (!this._isSwiping && this._swipeButtonPressed !== -1) {\r\n                this._isSwiping =\r\n                    Math.abs(this._startingPointerPosition.x - this._pointerX) > InputManager.DragMovementThreshold ||\r\n                    Math.abs(this._startingPointerPosition.y - this._pointerY) > InputManager.DragMovementThreshold;\r\n            }\r\n\r\n            const pickResult = scene._registeredActions > 0 ? this._pickMove((evt as IPointerEvent).pointerId) : null;\r\n            this._processPointerMove(pickResult, evt as IPointerEvent);\r\n        };\r\n\r\n        this._onPointerDown = (evt: IPointerEvent) => {\r\n            this._totalPointersPressed++;\r\n            this._pickedDownMesh = null;\r\n            this._meshPickProceed = false;\r\n\r\n            // preserve compatibility with Safari when pointerId is not present\r\n            if (evt.pointerId === undefined) {\r\n                (evt as any).pointerId = 0;\r\n            }\r\n\r\n            this._updatePointerPosition(evt);\r\n\r\n            if (this._swipeButtonPressed === -1) {\r\n                this._swipeButtonPressed = evt.button;\r\n            }\r\n\r\n            if (scene.preventDefaultOnPointerDown && elementToAttachTo) {\r\n                evt.preventDefault();\r\n                elementToAttachTo.focus();\r\n            }\r\n\r\n            this._startingPointerPosition.x = this._pointerX;\r\n            this._startingPointerPosition.y = this._pointerY;\r\n            this._startingPointerTime = Date.now();\r\n\r\n            // PreObservable support\r\n            if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERDOWN)) {\r\n                return;\r\n            }\r\n\r\n            if (!scene.cameraToUseForPointers && !scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            this._pointerCaptures[evt.pointerId] = true;\r\n\r\n            if (!scene.pointerDownPredicate) {\r\n                scene.pointerDownPredicate = (mesh: AbstractMesh): boolean => {\r\n                    return (\r\n                        mesh.isPickable &&\r\n                        mesh.isVisible &&\r\n                        mesh.isReady() &&\r\n                        mesh.isEnabled() &&\r\n                        (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0)\r\n                    );\r\n                };\r\n            }\r\n\r\n            // Meshes\r\n            this._pickedDownMesh = null;\r\n            let pickResult;\r\n            if (scene.skipPointerDownPicking || (scene._registeredActions === 0 && !scene.onPointerObservable.hasObservers())) {\r\n                pickResult = new PickingInfo();\r\n            } else {\r\n                pickResult = scene.pick(this._unTranslatedPointerX, this._unTranslatedPointerY, scene.pointerDownPredicate, false, scene.cameraToUseForPointers);\r\n            }\r\n\r\n            this._processPointerDown(pickResult, evt);\r\n        };\r\n\r\n        this._onPointerUp = (evt: IPointerEvent) => {\r\n            if (this._totalPointersPressed === 0) {\r\n                // We are attaching the pointer up to windows because of a bug in FF\r\n                return; // So we need to test it the pointer down was pressed before.\r\n            }\r\n\r\n            this._totalPointersPressed--;\r\n            this._pickedUpMesh = null;\r\n            this._meshPickProceed = false;\r\n\r\n            // preserve compatibility with Safari when pointerId is not present\r\n            if (evt.pointerId === undefined) {\r\n                (evt as any).pointerId = 0;\r\n            }\r\n\r\n            this._updatePointerPosition(evt);\r\n\r\n            if (scene.preventDefaultOnPointerUp && elementToAttachTo) {\r\n                evt.preventDefault();\r\n                elementToAttachTo.focus();\r\n            }\r\n\r\n            this._initClickEvent(scene.onPrePointerObservable, scene.onPointerObservable, evt, (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => {\r\n                // PreObservable support\r\n                if (scene.onPrePointerObservable.hasObservers()) {\r\n                    if (!clickInfo.ignore) {\r\n                        if (!clickInfo.hasSwiped) {\r\n                            if (clickInfo.singleClick && scene.onPrePointerObservable.hasSpecificMask(PointerEventTypes.POINTERTAP)) {\r\n                                if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERTAP)) {\r\n                                    return;\r\n                                }\r\n                            }\r\n                            if (clickInfo.doubleClick && scene.onPrePointerObservable.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP)) {\r\n                                if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERDOUBLETAP)) {\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERUP)) {\r\n                            // If we're skipping the next observable, we need to reset the swipe state before returning\r\n                            if (this._swipeButtonPressed === evt.button) {\r\n                                this._isSwiping = false;\r\n                                this._swipeButtonPressed = -1;\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this._pointerCaptures[evt.pointerId] = false;\r\n                if (!scene.cameraToUseForPointers && !scene.activeCamera) {\r\n                    return;\r\n                }\r\n\r\n                if (!scene.pointerUpPredicate) {\r\n                    scene.pointerUpPredicate = (mesh: AbstractMesh): boolean => {\r\n                        return (\r\n                            mesh.isPickable &&\r\n                            mesh.isVisible &&\r\n                            mesh.isReady() &&\r\n                            mesh.isEnabled() &&\r\n                            (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0)\r\n                        );\r\n                    };\r\n                }\r\n\r\n                // Meshes\r\n                if (!this._meshPickProceed && ((AbstractActionManager && AbstractActionManager.HasTriggers) || scene.onPointerObservable.hasObservers())) {\r\n                    this._initActionManager(null, clickInfo);\r\n                }\r\n                if (!pickResult) {\r\n                    pickResult = this._currentPickResult;\r\n                }\r\n\r\n                this._processPointerUp(pickResult, evt, clickInfo);\r\n\r\n                this._previousPickResult = this._currentPickResult;\r\n\r\n                if (this._swipeButtonPressed === evt.button) {\r\n                    this._isSwiping = false;\r\n                    this._swipeButtonPressed = -1;\r\n                }\r\n            });\r\n        };\r\n\r\n        this._onKeyDown = (evt: IKeyboardEvent) => {\r\n            const type = KeyboardEventTypes.KEYDOWN;\r\n            if (scene.onPreKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfoPre(type, evt);\r\n                scene.onPreKeyboardObservable.notifyObservers(pi, type);\r\n                if (pi.skipOnKeyboardObservable) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (scene.onKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfo(type, evt);\r\n                scene.onKeyboardObservable.notifyObservers(pi, type);\r\n            }\r\n\r\n            if (scene.actionManager) {\r\n                scene.actionManager.processTrigger(Constants.ACTION_OnKeyDownTrigger, ActionEvent.CreateNewFromScene(scene, evt));\r\n            }\r\n        };\r\n\r\n        this._onKeyUp = (evt: IKeyboardEvent) => {\r\n            const type = KeyboardEventTypes.KEYUP;\r\n            if (scene.onPreKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfoPre(type, evt);\r\n                scene.onPreKeyboardObservable.notifyObservers(pi, type);\r\n                if (pi.skipOnKeyboardObservable) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (scene.onKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfo(type, evt);\r\n                scene.onKeyboardObservable.notifyObservers(pi, type);\r\n            }\r\n\r\n            if (scene.actionManager) {\r\n                scene.actionManager.processTrigger(Constants.ACTION_OnKeyUpTrigger, ActionEvent.CreateNewFromScene(scene, evt));\r\n            }\r\n        };\r\n\r\n        // If a device connects that we can handle, wire up the observable\r\n        this._deviceSourceManager.onDeviceConnectedObservable.add((deviceSource) => {\r\n            if (deviceSource.deviceType === DeviceType.Mouse) {\r\n                deviceSource.onInputChangedObservable.add((eventData) => {\r\n                    if (\r\n                        eventData.inputIndex === PointerInput.LeftClick ||\r\n                        eventData.inputIndex === PointerInput.MiddleClick ||\r\n                        eventData.inputIndex === PointerInput.RightClick ||\r\n                        eventData.inputIndex === PointerInput.BrowserBack ||\r\n                        eventData.inputIndex === PointerInput.BrowserForward\r\n                    ) {\r\n                        if (attachDown && deviceSource.getInput(eventData.inputIndex) === 1) {\r\n                            this._onPointerDown(eventData);\r\n                        } else if (attachUp && deviceSource.getInput(eventData.inputIndex) === 0) {\r\n                            this._onPointerUp(eventData);\r\n                        }\r\n                    } else if (attachMove) {\r\n                        if (eventData.inputIndex === PointerInput.Move) {\r\n                            this._onPointerMove(eventData);\r\n                        } else if (\r\n                            eventData.inputIndex === PointerInput.MouseWheelX ||\r\n                            eventData.inputIndex === PointerInput.MouseWheelY ||\r\n                            eventData.inputIndex === PointerInput.MouseWheelZ\r\n                        ) {\r\n                            this._onPointerMove(eventData);\r\n                        }\r\n                    }\r\n                });\r\n            } else if (deviceSource.deviceType === DeviceType.Touch) {\r\n                deviceSource.onInputChangedObservable.add((eventData) => {\r\n                    if (eventData.inputIndex === PointerInput.LeftClick) {\r\n                        if (attachDown && deviceSource.getInput(eventData.inputIndex) === 1) {\r\n                            this._onPointerDown(eventData);\r\n                        } else if (attachUp && deviceSource.getInput(eventData.inputIndex) === 0) {\r\n                            this._onPointerUp(eventData);\r\n                        }\r\n                    }\r\n\r\n                    if (attachMove && eventData.inputIndex === PointerInput.Move) {\r\n                        this._onPointerMove(eventData);\r\n                    }\r\n                });\r\n            } else if (deviceSource.deviceType === DeviceType.Keyboard) {\r\n                deviceSource.onInputChangedObservable.add((eventData) => {\r\n                    if (eventData.type === \"keydown\") {\r\n                        this._onKeyDown(eventData);\r\n                    } else if (eventData.type === \"keyup\") {\r\n                        this._onKeyUp(eventData);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        this._alreadyAttached = true;\r\n    }\r\n\r\n    /**\r\n     * Detaches all event handlers\r\n     */\r\n    public detachControl() {\r\n        if (this._alreadyAttached) {\r\n            this._deviceSourceManager!.dispose();\r\n            this._deviceSourceManager = null;\r\n\r\n            // Cursor\r\n            if (this._alreadyAttachedTo && !this._scene.doNotHandleCursors) {\r\n                this._alreadyAttachedTo.style.cursor = this._scene.defaultCursor;\r\n            }\r\n\r\n            this._alreadyAttached = false;\r\n            this._alreadyAttachedTo = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force the value of meshUnderPointer\r\n     * @param mesh - defines the mesh to use\r\n     * @param pointerId - optional pointer id when using more than one pointer. Defaults to 0\r\n     * @param pickResult - optional pickingInfo data used to find mesh\r\n     */\r\n    public setPointerOverMesh(mesh: Nullable<AbstractMesh>, pointerId: number = 0, pickResult?: Nullable<PickingInfo>): void {\r\n        if (this._meshUnderPointerId[pointerId] === mesh && (!mesh || !mesh._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting)) {\r\n            return;\r\n        }\r\n\r\n        const underPointerMesh = this._meshUnderPointerId[pointerId];\r\n\r\n        let actionManager: Nullable<AbstractActionManager>;\r\n        if (underPointerMesh) {\r\n            actionManager = underPointerMesh._getActionManagerForTrigger(Constants.ACTION_OnPointerOutTrigger);\r\n            if (actionManager) {\r\n                actionManager.processTrigger(Constants.ACTION_OnPointerOutTrigger, ActionEvent.CreateNew(underPointerMesh, undefined, { pointerId }));\r\n            }\r\n        }\r\n\r\n        if (mesh) {\r\n            this._meshUnderPointerId[pointerId] = mesh;\r\n            this._pointerOverMesh = mesh;\r\n\r\n            actionManager = mesh._getActionManagerForTrigger(Constants.ACTION_OnPointerOverTrigger);\r\n            if (actionManager) {\r\n                actionManager.processTrigger(Constants.ACTION_OnPointerOverTrigger, ActionEvent.CreateNew(mesh, undefined, { pointerId, pickResult }));\r\n            }\r\n        } else {\r\n            delete this._meshUnderPointerId[pointerId];\r\n            this._pointerOverMesh = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh under the pointer\r\n     * @returns a Mesh or null if no mesh is under the pointer\r\n     */\r\n    public getPointerOverMesh(): Nullable<AbstractMesh> {\r\n        return this.meshUnderPointer;\r\n    }\r\n\r\n    /**\r\n     * @param mesh - Mesh to invalidate\r\n     * @internal\r\n     */\r\n    public _invalidateMesh(mesh: AbstractMesh) {\r\n        if (this._pointerOverMesh === mesh) {\r\n            this._pointerOverMesh = null;\r\n        }\r\n        if (this._pickedDownMesh === mesh) {\r\n            this._pickedDownMesh = null;\r\n        }\r\n        if (this._pickedUpMesh === mesh) {\r\n            this._pickedUpMesh = null;\r\n        }\r\n        for (const pointerId in this._meshUnderPointerId) {\r\n            if (this._meshUnderPointerId[pointerId] === mesh) {\r\n                delete this._meshUnderPointerId[pointerId];\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { Nullable } from \"./types\";\nimport { Tools } from \"./Misc/tools\";\nimport type { IAnimatable } from \"./Animations/animatable.interface\";\nimport { PrecisionDate } from \"./Misc/precisionDate\";\nimport type { Observer } from \"./Misc/observable\";\nimport { Observable } from \"./Misc/observable\";\nimport type { ISmartArrayLike } from \"./Misc/smartArray\";\nimport { SmartArrayNoDuplicate, SmartArray } from \"./Misc/smartArray\";\nimport { StringDictionary } from \"./Misc/stringDictionary\";\nimport { Tags } from \"./Misc/tags\";\nimport type { Vector2, Vector4 } from \"./Maths/math.vector\";\nimport { Vector3, Matrix, TmpVectors } from \"./Maths/math.vector\";\nimport type { IParticleSystem } from \"./Particles/IParticleSystem\";\nimport { AbstractScene } from \"./abstractScene\";\nimport { ImageProcessingConfiguration } from \"./Materials/imageProcessingConfiguration\";\nimport { UniformBuffer } from \"./Materials/uniformBuffer\";\nimport { PickingInfo } from \"./Collisions/pickingInfo\";\nimport type { ICollisionCoordinator } from \"./Collisions/collisionCoordinator\";\nimport type { PointerEventTypes, PointerInfoPre, PointerInfo } from \"./Events/pointerEvents\";\nimport type { KeyboardInfoPre, KeyboardInfo } from \"./Events/keyboardEvents\";\nimport { ActionEvent } from \"./Actions/actionEvent\";\nimport { PostProcessManager } from \"./PostProcesses/postProcessManager\";\nimport type { IOfflineProvider } from \"./Offline/IOfflineProvider\";\nimport type { RenderingGroupInfo, IRenderingManagerAutoClearSetup } from \"./Rendering/renderingManager\";\nimport { RenderingManager } from \"./Rendering/renderingManager\";\nimport type { ISceneComponent, ISceneSerializableComponent, SimpleStageAction, RenderTargetsStageAction, RenderTargetStageAction, MeshStageAction, EvaluateSubMeshStageAction, PreActiveMeshStageAction, CameraStageAction, RenderingGroupStageAction, RenderingMeshStageAction, PointerMoveStageAction, PointerUpDownStageAction, CameraStageFrameBufferAction, } from \"./sceneComponent\";\nimport { Stage } from \"./sceneComponent\";\nimport type { Engine } from \"./Engines/engine\";\nimport { Constants } from \"./Engines/constants\";\nimport { IsWindowObjectExist } from \"./Misc/domManagement\";\nimport { EngineStore } from \"./Engines/engineStore\";\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\nimport { _WarnImport } from \"./Misc/devTools\";\nimport type { WebRequest } from \"./Misc/webRequest\";\nimport { InputManager } from \"./Inputs/scene.inputManager\";\nimport { PerfCounter } from \"./Misc/perfCounter\";\nimport type { IFileRequest } from \"./Misc/fileRequest\";\nimport { Color4, Color3 } from \"./Maths/math.color\";\nimport type { Plane } from \"./Maths/math.plane\";\nimport { Frustum } from \"./Maths/math.frustum\";\nimport { UniqueIdGenerator } from \"./Misc/uniqueIdGenerator\";\nimport type { LoadFileError, RequestFileError, ReadFileError } from \"./Misc/fileTools\";\nimport { ReadFile, RequestFile, LoadFile } from \"./Misc/fileTools\";\nimport type { IClipPlanesHolder } from \"./Misc/interfaces/iClipPlanesHolder\";\nimport type { IPointerEvent } from \"./Events/deviceInputEvents\";\nimport { LightConstants } from \"./Lights/lightConstants\";\nimport { _ObserveArray } from \"./Misc/arrayTools\";\ndeclare type Ray = import(\"./Culling/ray\").Ray;\ndeclare type TrianglePickingPredicate = import(\"./Culling/ray\").TrianglePickingPredicate;\ndeclare type Animation = import(\"./Animations/animation\").Animation;\ndeclare type Animatable = import(\"./Animations/animatable\").Animatable;\ndeclare type AnimationGroup = import(\"./Animations/animationGroup\").AnimationGroup;\ndeclare type AnimationPropertiesOverride = import(\"./Animations/animationPropertiesOverride\").AnimationPropertiesOverride;\ndeclare type Collider = import(\"./Collisions/collider\").Collider;\ndeclare type PostProcess = import(\"./PostProcesses/postProcess\").PostProcess;\ndeclare type Material = import(\"./Materials/material\").Material;\ndeclare type AbstractMesh = import(\"./Meshes/abstractMesh\").AbstractMesh;\ndeclare type Light = import(\"./Lights/light\").Light;\ndeclare type Camera = import(\"./Cameras/camera\").Camera;\ndeclare type Texture = import(\"./Materials/Textures/texture\").Texture;\ndeclare type MultiMaterial = import(\"./Materials/multiMaterial\").MultiMaterial;\ndeclare type BaseTexture = import(\"./Materials/Textures/baseTexture\").BaseTexture;\ndeclare type TransformNode = import(\"./Meshes/transformNode\").TransformNode;\ndeclare type Skeleton = import(\"./Bones/skeleton\").Skeleton;\ndeclare type Bone = import(\"./Bones/bone\").Bone;\ndeclare type SubMesh = import(\"./Meshes/subMesh\").SubMesh;\ndeclare type Mesh = import(\"./Meshes/mesh\").Mesh;\ndeclare type Node = import(\"./node\").Node;\ndeclare type Geometry = import(\"./Meshes/geometry\").Geometry;\ndeclare type RenderTargetTexture = import(\"./Materials/Textures/renderTargetTexture\").RenderTargetTexture;\ndeclare type MorphTargetManager = import(\"./Morph/morphTargetManager\").MorphTargetManager;\ndeclare type Effect = import(\"./Materials/effect\").Effect;\ndeclare type MorphTarget = import(\"./Morph/morphTarget\").MorphTarget;\ndeclare type WebVRFreeCamera = import(\"./Cameras/VR/webVRCamera\").WebVRFreeCamera;\ndeclare type PerformanceViewerCollector = import(\"./Misc/PerformanceViewer/performanceViewerCollector\").PerformanceViewerCollector;\ndeclare type IAction = import(\"./Actions/action\").IAction;\n/**\n * Define an interface for all classes that will hold resources\n */\nexport interface IDisposable {\n    /**\n     * Releases all held resources\n     */\n    dispose(): void;\n}\n/** Interface defining initialization parameters for Scene class */\nexport interface SceneOptions {\n    /**\n     * Defines that scene should keep up-to-date a map of geometry to enable fast look-up by uniqueId\n     * It will improve performance when the number of geometries becomes important.\n     */\n    useGeometryUniqueIdsMap?: boolean;\n    /**\n     * Defines that each material of the scene should keep up-to-date a map of referencing meshes for fast disposing\n     * It will improve performance when the number of mesh becomes important, but might consume a bit more memory\n     */\n    useMaterialMeshMap?: boolean;\n    /**\n     * Defines that each mesh of the scene should keep up-to-date a map of referencing cloned meshes for fast disposing\n     * It will improve performance when the number of mesh becomes important, but might consume a bit more memory\n     */\n    useClonedMeshMap?: boolean;\n    /** Defines if the creation of the scene should impact the engine (Eg. UtilityLayer's scene) */\n    virtual?: boolean;\n}\n/**\n * Define how the scene should favor performance over ease of use\n */\nexport enum ScenePerformancePriority {\n    /** Default mode. No change. Performance will be treated as less important than backward compatibility */\n    BackwardCompatible,\n    /** Some performance options will be turned on trying to strike a balance between perf and ease of use */\n    Intermediate,\n    /** Performance will be top priority */\n    Aggressive\n}\n/**\n * Represents a scene to be rendered by the engine.\n * @see https://doc.babylonjs.com/features/scene\n */\nexport class Scene extends AbstractScene implements IAnimatable, IClipPlanesHolder {\n    /** The fog is deactivated */\n    public static readonly FOGMODE_NONE = 0;\n    /** The fog density is following an exponential function */\n    public static readonly FOGMODE_EXP = 1;\n    /** The fog density is following an exponential function faster than FOGMODE_EXP */\n    public static readonly FOGMODE_EXP2 = 2;\n    /** The fog density is following a linear function. */\n    public static readonly FOGMODE_LINEAR = 3;\n    /**\n     * Gets or sets the minimum deltatime when deterministic lock step is enabled\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n     */\n    public static MinDeltaTime = 1.0;\n    /**\n     * Gets or sets the maximum deltatime when deterministic lock step is enabled\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n     */\n    public static MaxDeltaTime = 1000.0;\n    /**\n     * Factory used to create the default material.\n     * @param scene The scene to create the material for\n     * @returns The default material\n     */\n    public static DefaultMaterialFactory(scene: Scene): Material {\n        throw _WarnImport(\"StandardMaterial\");\n    }\n    /**\n     * Factory used to create the a collision coordinator.\n     * @returns The collision coordinator\n     */\n    public static CollisionCoordinatorFactory(): ICollisionCoordinator {\n        throw _WarnImport(\"DefaultCollisionCoordinator\");\n    }\n    // Members\n    /** @internal */\n    public _inputManager = new InputManager(this);\n    /** Define this parameter if you are using multiple cameras and you want to specify which one should be used for pointer position */\n    public cameraToUseForPointers: Nullable<Camera> = null;\n    /** @internal */\n    public readonly _isScene = true;\n    /** @internal */\n    public _blockEntityCollection = false;\n    /**\n     * Gets or sets a boolean that indicates if the scene must clear the render buffer before rendering a frame\n     */\n    public autoClear = true;\n    /**\n     * Gets or sets a boolean that indicates if the scene must clear the depth and stencil buffers before rendering a frame\n     */\n    public autoClearDepthAndStencil = true;\n    /**\n     * Defines the color used to clear the render buffer (Default is (0.2, 0.2, 0.3, 1.0))\n     */\n    public clearColor: Color4 = new Color4(0.2, 0.2, 0.3, 1.0);\n    /**\n     * Defines the color used to simulate the ambient color (Default is (0, 0, 0))\n     */\n    public ambientColor = new Color3(0, 0, 0);\n    /**\n     * This is use to store the default BRDF lookup for PBR materials in your scene.\n     * It should only be one of the following (if not the default embedded one):\n     * * For uncorrelated BRDF (pbr.brdf.useEnergyConservation = false and pbr.brdf.useSmithVisibilityHeightCorrelated = false) : https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds\n     * * For correlated BRDF (pbr.brdf.useEnergyConservation = false and pbr.brdf.useSmithVisibilityHeightCorrelated = true) : https://assets.babylonjs.com/environments/correlatedBRDF.dds\n     * * For correlated multi scattering BRDF (pbr.brdf.useEnergyConservation = true and pbr.brdf.useSmithVisibilityHeightCorrelated = true) : https://assets.babylonjs.com/environments/correlatedMSBRDF.dds\n     * The material properties need to be setup according to the type of texture in use.\n     */\n    public environmentBRDFTexture: BaseTexture;\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    public get environmentTexture(): Nullable<BaseTexture> {\n        return this._environmentTexture;\n    }\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to set here than in all the materials.\n     */\n    public set environmentTexture(value: Nullable<BaseTexture>) {\n        if (this._environmentTexture === value) {\n            return;\n        }\n        this._environmentTexture = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    /**\n     * Intensity of the environment in all pbr material.\n     * This dims or reinforces the IBL lighting overall (reflection and diffuse).\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    public environmentIntensity: number = 1;\n    /** @internal */\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\n    /**\n     * Default image processing configuration used either in the rendering\n     * Forward main pass or through the imageProcessingPostProcess if present.\n     * As in the majority of the scene they are the same (exception for multi camera),\n     * this is easier to reference from here than from all the materials and post process.\n     *\n     * No setter as we it is a shared configuration, you can set the values instead.\n     */\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\n        return this._imageProcessingConfiguration;\n    }\n    private _performancePriority = ScenePerformancePriority.BackwardCompatible;\n    /**\n     * Gets or sets a value indicating how to treat performance relatively to ease of use and backward compatibility\n     */\n    public get performancePriority() {\n        return this._performancePriority;\n    }\n    public set performancePriority(value) {\n        if (value === this._performancePriority) {\n            return;\n        }\n        this._performancePriority = value;\n        switch (value) {\n            case ScenePerformancePriority.BackwardCompatible:\n                this.skipFrustumClipping = false;\n                this._renderingManager.maintainStateBetweenFrames = false;\n                this.skipPointerMovePicking = false;\n                this.autoClear = true;\n                break;\n            case ScenePerformancePriority.Intermediate:\n                this.skipFrustumClipping = false;\n                this._renderingManager.maintainStateBetweenFrames = false;\n                this.skipPointerMovePicking = true;\n                this.autoClear = false;\n                break;\n            case ScenePerformancePriority.Aggressive:\n                this.skipFrustumClipping = true;\n                this._renderingManager.maintainStateBetweenFrames = true;\n                this.skipPointerMovePicking = true;\n                this.autoClear = false;\n                break;\n        }\n    }\n    private _forceWireframe = false;\n    /**\n     * Gets or sets a boolean indicating if all rendering must be done in wireframe\n     */\n    public set forceWireframe(value: boolean) {\n        if (this._forceWireframe === value) {\n            return;\n        }\n        this._forceWireframe = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get forceWireframe(): boolean {\n        return this._forceWireframe;\n    }\n    private _skipFrustumClipping = false;\n    /**\n     * Gets or sets a boolean indicating if we should skip the frustum clipping part of the active meshes selection\n     */\n    public set skipFrustumClipping(value: boolean) {\n        if (this._skipFrustumClipping === value) {\n            return;\n        }\n        this._skipFrustumClipping = value;\n    }\n    public get skipFrustumClipping(): boolean {\n        return this._skipFrustumClipping;\n    }\n    private _forcePointsCloud = false;\n    /**\n     * Gets or sets a boolean indicating if all rendering must be done in point cloud\n     */\n    public set forcePointsCloud(value: boolean) {\n        if (this._forcePointsCloud === value) {\n            return;\n        }\n        this._forcePointsCloud = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get forcePointsCloud(): boolean {\n        return this._forcePointsCloud;\n    }\n    /**\n     * Gets or sets the active clipplane 1\n     */\n    public clipPlane: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 2\n     */\n    public clipPlane2: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 3\n     */\n    public clipPlane3: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 4\n     */\n    public clipPlane4: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 5\n     */\n    public clipPlane5: Nullable<Plane>;\n    /**\n     * Gets or sets the active clipplane 6\n     */\n    public clipPlane6: Nullable<Plane>;\n    /**\n     * Gets or sets a boolean indicating if animations are enabled\n     */\n    public animationsEnabled = true;\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\n    /**\n     * Gets or sets the animation properties override\n     */\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\n        return this._animationPropertiesOverride;\n    }\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\n        this._animationPropertiesOverride = value;\n    }\n    /**\n     * Gets or sets a boolean indicating if a constant deltatime has to be used\n     * This is mostly useful for testing purposes when you do not want the animations to scale with the framerate\n     */\n    public useConstantAnimationDeltaTime = false;\n    /**\n     * Gets or sets a boolean indicating if the scene must keep the meshUnderPointer property updated\n     * Please note that it requires to run a ray cast through the scene on every frame\n     */\n    public constantlyUpdateMeshUnderPointer = false;\n    /**\n     * Defines the HTML cursor to use when hovering over interactive elements\n     */\n    public hoverCursor = \"pointer\";\n    /**\n     * Defines the HTML default cursor to use (empty by default)\n     */\n    public defaultCursor: string = \"\";\n    /**\n     * Defines whether cursors are handled by the scene.\n     */\n    public doNotHandleCursors = false;\n    /**\n     * This is used to call preventDefault() on pointer down\n     * in order to block unwanted artifacts like system double clicks\n     */\n    public preventDefaultOnPointerDown = true;\n    /**\n     * This is used to call preventDefault() on pointer up\n     * in order to block unwanted artifacts like system double clicks\n     */\n    public preventDefaultOnPointerUp = true;\n    // Metadata\n    /**\n     * Gets or sets user defined metadata\n     */\n    public metadata: any = null;\n    /**\n     * For internal use only. Please do not use.\n     */\n    public reservedDataStore: any = null;\n    /**\n     * Gets the name of the plugin used to load this scene (null by default)\n     */\n    public loadingPluginName: string;\n    /**\n     * Use this array to add regular expressions used to disable offline support for specific urls\n     */\n    public disableOfflineSupportExceptionRules = new Array<RegExp>();\n    /**\n     * An event triggered when the scene is disposed.\n     */\n    public onDisposeObservable = new Observable<Scene>();\n    private _onDisposeObserver: Nullable<Observer<Scene>> = null;\n    /** Sets a function to be executed when this scene is disposed. */\n    public set onDispose(callback: () => void) {\n        if (this._onDisposeObserver) {\n            this.onDisposeObservable.remove(this._onDisposeObserver);\n        }\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    }\n    /**\n     * An event triggered before rendering the scene (right after animations and physics)\n     */\n    public onBeforeRenderObservable = new Observable<Scene>();\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>> = null;\n    /** Sets a function to be executed before rendering this scene */\n    public set beforeRender(callback: Nullable<() => void>) {\n        if (this._onBeforeRenderObserver) {\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n        }\n        if (callback) {\n            this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n        }\n    }\n    /**\n     * An event triggered after rendering the scene\n     */\n    public onAfterRenderObservable = new Observable<Scene>();\n    /**\n     * An event triggered after rendering the scene for an active camera (When scene.render is called this will be called after each camera)\n     * This is triggered for each \"sub\" camera in a Camera Rig unlike onAfterCameraRenderObservable\n     */\n    public onAfterRenderCameraObservable = new Observable<Camera>();\n    private _onAfterRenderObserver: Nullable<Observer<Scene>> = null;\n    /** Sets a function to be executed after rendering this scene */\n    public set afterRender(callback: Nullable<() => void>) {\n        if (this._onAfterRenderObserver) {\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n        }\n        if (callback) {\n            this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n        }\n    }\n    /**\n     * An event triggered before animating the scene\n     */\n    public onBeforeAnimationsObservable = new Observable<Scene>();\n    /**\n     * An event triggered after animations processing\n     */\n    public onAfterAnimationsObservable = new Observable<Scene>();\n    /**\n     * An event triggered before draw calls are ready to be sent\n     */\n    public onBeforeDrawPhaseObservable = new Observable<Scene>();\n    /**\n     * An event triggered after draw calls have been sent\n     */\n    public onAfterDrawPhaseObservable = new Observable<Scene>();\n    /**\n     * An event triggered when the scene is ready\n     */\n    public onReadyObservable = new Observable<Scene>();\n    /**\n     * An event triggered before rendering a camera\n     */\n    public onBeforeCameraRenderObservable = new Observable<Camera>();\n    private _onBeforeCameraRenderObserver: Nullable<Observer<Camera>> = null;\n    /** Sets a function to be executed before rendering a camera*/\n    public set beforeCameraRender(callback: () => void) {\n        if (this._onBeforeCameraRenderObserver) {\n            this.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        }\n        this._onBeforeCameraRenderObserver = this.onBeforeCameraRenderObservable.add(callback);\n    }\n    /**\n     * An event triggered after rendering a camera\n     * This is triggered for the full rig Camera only unlike onAfterRenderCameraObservable\n     */\n    public onAfterCameraRenderObservable = new Observable<Camera>();\n    private _onAfterCameraRenderObserver: Nullable<Observer<Camera>> = null;\n    /** Sets a function to be executed after rendering a camera*/\n    public set afterCameraRender(callback: () => void) {\n        if (this._onAfterCameraRenderObserver) {\n            this.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n        }\n        this._onAfterCameraRenderObserver = this.onAfterCameraRenderObservable.add(callback);\n    }\n    /**\n     * An event triggered when active meshes evaluation is about to start\n     */\n    public onBeforeActiveMeshesEvaluationObservable = new Observable<Scene>();\n    /**\n     * An event triggered when active meshes evaluation is done\n     */\n    public onAfterActiveMeshesEvaluationObservable = new Observable<Scene>();\n    /**\n     * An event triggered when particles rendering is about to start\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n     */\n    public onBeforeParticlesRenderingObservable = new Observable<Scene>();\n    /**\n     * An event triggered when particles rendering is done\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n     */\n    public onAfterParticlesRenderingObservable = new Observable<Scene>();\n    /**\n     * An event triggered when SceneLoader.Append or SceneLoader.Load or SceneLoader.ImportMesh were successfully executed\n     */\n    public onDataLoadedObservable = new Observable<Scene>();\n    /**\n     * An event triggered when a camera is created\n     */\n    public onNewCameraAddedObservable = new Observable<Camera>();\n    /**\n     * An event triggered when a camera is removed\n     */\n    public onCameraRemovedObservable = new Observable<Camera>();\n    /**\n     * An event triggered when a light is created\n     */\n    public onNewLightAddedObservable = new Observable<Light>();\n    /**\n     * An event triggered when a light is removed\n     */\n    public onLightRemovedObservable = new Observable<Light>();\n    /**\n     * An event triggered when a geometry is created\n     */\n    public onNewGeometryAddedObservable = new Observable<Geometry>();\n    /**\n     * An event triggered when a geometry is removed\n     */\n    public onGeometryRemovedObservable = new Observable<Geometry>();\n    /**\n     * An event triggered when a transform node is created\n     */\n    public onNewTransformNodeAddedObservable = new Observable<TransformNode>();\n    /**\n     * An event triggered when a transform node is removed\n     */\n    public onTransformNodeRemovedObservable = new Observable<TransformNode>();\n    /**\n     * An event triggered when a mesh is created\n     */\n    public onNewMeshAddedObservable = new Observable<AbstractMesh>();\n    /**\n     * An event triggered when a mesh is removed\n     */\n    public onMeshRemovedObservable = new Observable<AbstractMesh>();\n    /**\n     * An event triggered when a skeleton is created\n     */\n    public onNewSkeletonAddedObservable = new Observable<Skeleton>();\n    /**\n     * An event triggered when a skeleton is removed\n     */\n    public onSkeletonRemovedObservable = new Observable<Skeleton>();\n    /**\n     * An event triggered when a material is created\n     */\n    public onNewMaterialAddedObservable = new Observable<Material>();\n    /**\n     * An event triggered when a multi material is created\n     */\n    public onNewMultiMaterialAddedObservable = new Observable<MultiMaterial>();\n    /**\n     * An event triggered when a material is removed\n     */\n    public onMaterialRemovedObservable = new Observable<Material>();\n    /**\n     * An event triggered when a multi material is removed\n     */\n    public onMultiMaterialRemovedObservable = new Observable<MultiMaterial>();\n    /**\n     * An event triggered when a texture is created\n     */\n    public onNewTextureAddedObservable = new Observable<BaseTexture>();\n    /**\n     * An event triggered when a texture is removed\n     */\n    public onTextureRemovedObservable = new Observable<BaseTexture>();\n    /**\n     * An event triggered when render targets are about to be rendered\n     * Can happen multiple times per frame.\n     */\n    public onBeforeRenderTargetsRenderObservable = new Observable<Scene>();\n    /**\n     * An event triggered when render targets were rendered.\n     * Can happen multiple times per frame.\n     */\n    public onAfterRenderTargetsRenderObservable = new Observable<Scene>();\n    /**\n     * An event triggered before calculating deterministic simulation step\n     */\n    public onBeforeStepObservable = new Observable<Scene>();\n    /**\n     * An event triggered after calculating deterministic simulation step\n     */\n    public onAfterStepObservable = new Observable<Scene>();\n    /**\n     * An event triggered when the activeCamera property is updated\n     */\n    public onActiveCameraChanged = new Observable<Scene>();\n    /**\n     * An event triggered when the activeCameras property is updated\n     */\n    public onActiveCamerasChanged = new Observable<Scene>();\n    /**\n     * This Observable will be triggered before rendering each renderingGroup of each rendered camera.\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n     */\n    public onBeforeRenderingGroupObservable = new Observable<RenderingGroupInfo>();\n    /**\n     * This Observable will be triggered after rendering each renderingGroup of each rendered camera.\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n     */\n    public onAfterRenderingGroupObservable = new Observable<RenderingGroupInfo>();\n    /**\n     * This Observable will when a mesh has been imported into the scene.\n     */\n    public onMeshImportedObservable = new Observable<AbstractMesh>();\n    /**\n     * This Observable will when an animation file has been imported into the scene.\n     */\n    public onAnimationFileImportedObservable = new Observable<Scene>();\n    /**\n     * Gets or sets a user defined funtion to select LOD from a mesh and a camera.\n     * By default this function is undefined and Babylon.js will select LOD based on distance to camera\n     */\n    public customLODSelector: (mesh: AbstractMesh, camera: Camera) => Nullable<AbstractMesh>;\n    // Animations\n    /** @internal */\n    public _registeredForLateAnimationBindings = new SmartArrayNoDuplicate<any>(256);\n    // Pointers\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\n     */\n    public pointerDownPredicate: (Mesh: AbstractMesh) => boolean;\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\n     */\n    public pointerUpPredicate: (Mesh: AbstractMesh) => boolean;\n    /**\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\n     */\n    public pointerMovePredicate: (Mesh: AbstractMesh) => boolean;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\n     */\n    public skipPointerMovePicking = false;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\n     */\n    public skipPointerDownPicking = false;\n    /**\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\n     */\n    public skipPointerUpPicking = false;\n    /** Callback called when a pointer move is detected */\n    public onPointerMove: (evt: IPointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) => void;\n    /** Callback called when a pointer down is detected  */\n    public onPointerDown: (evt: IPointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) => void;\n    /** Callback called when a pointer up is detected  */\n    public onPointerUp: (evt: IPointerEvent, pickInfo: Nullable<PickingInfo>, type: PointerEventTypes) => void;\n    /** Callback called when a pointer pick is detected */\n    public onPointerPick: (evt: IPointerEvent, pickInfo: PickingInfo) => void;\n    /**\n     * Gets or sets a predicate used to select candidate faces for a pointer move event\n     */\n    public pointerMoveTrianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) => boolean) | undefined;\n    /**\n     * This observable event is triggered when any ponter event is triggered. It is registered during Scene.attachControl() and it is called BEFORE the 3D engine process anything (mesh/sprite picking for instance).\n     * You have the possibility to skip the process and the call to onPointerObservable by setting PointerInfoPre.skipOnPointerObservable to true\n     */\n    public onPrePointerObservable = new Observable<PointerInfoPre>();\n    /**\n     * Observable event triggered each time an input event is received from the rendering canvas\n     */\n    public onPointerObservable = new Observable<PointerInfo>();\n    /**\n     * Gets the pointer coordinates without any translation (ie. straight out of the pointer event)\n     */\n    public get unTranslatedPointer(): Vector2 {\n        return this._inputManager.unTranslatedPointer;\n    }\n    /**\n     * Gets or sets the distance in pixel that you have to move to prevent some events. Default is 10 pixels\n     */\n    public static get DragMovementThreshold() {\n        return InputManager.DragMovementThreshold;\n    }\n    public static set DragMovementThreshold(value: number) {\n        InputManager.DragMovementThreshold = value;\n    }\n    /**\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 500 ms\n     */\n    public static get LongPressDelay() {\n        return InputManager.LongPressDelay;\n    }\n    public static set LongPressDelay(value: number) {\n        InputManager.LongPressDelay = value;\n    }\n    /**\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 300 ms\n     */\n    public static get DoubleClickDelay() {\n        return InputManager.DoubleClickDelay;\n    }\n    public static set DoubleClickDelay(value: number) {\n        InputManager.DoubleClickDelay = value;\n    }\n    /** If you need to check double click without raising a single click at first click, enable this flag */\n    public static get ExclusiveDoubleClickMode() {\n        return InputManager.ExclusiveDoubleClickMode;\n    }\n    public static set ExclusiveDoubleClickMode(value: boolean) {\n        InputManager.ExclusiveDoubleClickMode = value;\n    }\n    /**\n     * Bind the current view position to an effect.\n     * @param effect The effect to be bound\n     * @param variableName name of the shader variable that will hold the eye position\n     * @param isVector3 true to indicates that variableName is a Vector3 and not a Vector4\n     * @returns the computed eye position\n     */\n    public bindEyePosition(effect: Nullable<Effect>, variableName = \"vEyePosition\", isVector3 = false): Vector4 {\n        const eyePosition = this._forcedViewPosition\n            ? this._forcedViewPosition\n            : this._mirroredCameraPosition\n                ? this._mirroredCameraPosition\n                : this.activeCamera!.globalPosition ?? (this.activeCamera as WebVRFreeCamera).devicePosition;\n        const invertNormal = this.useRightHandedSystem === (this._mirroredCameraPosition != null);\n        TmpVectors.Vector4[0].set(eyePosition.x, eyePosition.y, eyePosition.z, invertNormal ? -1 : 1);\n        if (effect) {\n            if (isVector3) {\n                effect.setFloat3(variableName, TmpVectors.Vector4[0].x, TmpVectors.Vector4[0].y, TmpVectors.Vector4[0].z);\n            }\n            else {\n                effect.setVector4(variableName, TmpVectors.Vector4[0]);\n            }\n        }\n        return TmpVectors.Vector4[0];\n    }\n    /**\n     * Update the scene ubo before it can be used in rendering processing\n     * @returns the scene UniformBuffer\n     */\n    public finalizeSceneUbo(): UniformBuffer {\n        const ubo = this.getSceneUniformBuffer();\n        const eyePosition = this.bindEyePosition(null);\n        ubo.updateFloat4(\"vEyePosition\", eyePosition.x, eyePosition.y, eyePosition.z, eyePosition.w);\n        ubo.update();\n        return ubo;\n    }\n    // Mirror\n    /** @internal */\n    public _mirroredCameraPosition: Nullable<Vector3>;\n    // Keyboard\n    /**\n     * This observable event is triggered when any keyboard event si raised and registered during Scene.attachControl()\n     * You have the possibility to skip the process and the call to onKeyboardObservable by setting KeyboardInfoPre.skipOnPointerObservable to true\n     */\n    public onPreKeyboardObservable = new Observable<KeyboardInfoPre>();\n    /**\n     * Observable event triggered each time an keyboard event is received from the hosting window\n     */\n    public onKeyboardObservable = new Observable<KeyboardInfo>();\n    // Coordinates system\n    private _useRightHandedSystem = false;\n    /**\n     * Gets or sets a boolean indicating if the scene must use right-handed coordinates system\n     */\n    public set useRightHandedSystem(value: boolean) {\n        if (this._useRightHandedSystem === value) {\n            return;\n        }\n        this._useRightHandedSystem = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get useRightHandedSystem(): boolean {\n        return this._useRightHandedSystem;\n    }\n    // Deterministic lockstep\n    private _timeAccumulator: number = 0;\n    private _currentStepId: number = 0;\n    private _currentInternalStep: number = 0;\n    /**\n     * Sets the step Id used by deterministic lock step\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n     * @param newStepId defines the step Id\n     */\n    public setStepId(newStepId: number): void {\n        this._currentStepId = newStepId;\n    }\n    /**\n     * Gets the step Id used by deterministic lock step\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n     * @returns the step Id\n     */\n    public getStepId(): number {\n        return this._currentStepId;\n    }\n    /**\n     * Gets the internal step used by deterministic lock step\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n     * @returns the internal step\n     */\n    public getInternalStep(): number {\n        return this._currentInternalStep;\n    }\n    // Fog\n    private _fogEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if fog is enabled on this scene\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * (Default is true)\n     */\n    public set fogEnabled(value: boolean) {\n        if (this._fogEnabled === value) {\n            return;\n        }\n        this._fogEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get fogEnabled(): boolean {\n        return this._fogEnabled;\n    }\n    private _fogMode = Scene.FOGMODE_NONE;\n    /**\n     * Gets or sets the fog mode to use\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * | mode | value |\n     * | --- | --- |\n     * | FOGMODE_NONE | 0 |\n     * | FOGMODE_EXP | 1 |\n     * | FOGMODE_EXP2 | 2 |\n     * | FOGMODE_LINEAR | 3 |\n     */\n    public set fogMode(value: number) {\n        if (this._fogMode === value) {\n            return;\n        }\n        this._fogMode = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\n    }\n    public get fogMode(): number {\n        return this._fogMode;\n    }\n    /**\n     * Gets or sets the fog color to use\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * (Default is Color3(0.2, 0.2, 0.3))\n     */\n    public fogColor = new Color3(0.2, 0.2, 0.3);\n    /**\n     * Gets or sets the fog density to use\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * (Default is 0.1)\n     */\n    public fogDensity = 0.1;\n    /**\n     * Gets or sets the fog start distance to use\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * (Default is 0)\n     */\n    public fogStart = 0;\n    /**\n     * Gets or sets the fog end distance to use\n     * @see https://doc.babylonjs.com/babylon101/environment#fog\n     * (Default is 1000)\n     */\n    public fogEnd = 1000.0;\n    /**\n     * Flag indicating that the frame buffer binding is handled by another component\n     */\n    public get prePass(): boolean {\n        return !!this.prePassRenderer && this.prePassRenderer.defaultRT.enabled;\n    }\n    /**\n     * Flag indicating if we need to store previous matrices when rendering\n     */\n    public needsPreviousWorldMatrices = false;\n    // Lights\n    private _shadowsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if shadows are enabled on this scene\n     */\n    public set shadowsEnabled(value: boolean) {\n        if (this._shadowsEnabled === value) {\n            return;\n        }\n        this._shadowsEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_LightDirtyFlag);\n    }\n    public get shadowsEnabled(): boolean {\n        return this._shadowsEnabled;\n    }\n    private _lightsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if lights are enabled on this scene\n     */\n    public set lightsEnabled(value: boolean) {\n        if (this._lightsEnabled === value) {\n            return;\n        }\n        this._lightsEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_LightDirtyFlag);\n    }\n    public get lightsEnabled(): boolean {\n        return this._lightsEnabled;\n    }\n    private _activeCameras: Nullable<Camera[]>;\n    private _unObserveActiveCameras: Nullable<() => void> = null;\n    /** All of the active cameras added to this scene. */\n    public get activeCameras(): Nullable<Camera[]> {\n        return this._activeCameras;\n    }\n    public set activeCameras(cameras: Nullable<Camera[]>) {\n        if (this._unObserveActiveCameras) {\n            this._unObserveActiveCameras();\n            this._unObserveActiveCameras = null;\n        }\n        if (cameras) {\n            this._unObserveActiveCameras = _ObserveArray(cameras, () => {\n                this.onActiveCamerasChanged.notifyObservers(this);\n            });\n        }\n        this._activeCameras = cameras;\n    }\n    /** @internal */\n    public _activeCamera: Nullable<Camera>;\n    /** Gets or sets the current active camera */\n    public get activeCamera(): Nullable<Camera> {\n        return this._activeCamera;\n    }\n    public set activeCamera(value: Nullable<Camera>) {\n        if (value === this._activeCamera) {\n            return;\n        }\n        this._activeCamera = value;\n        this.onActiveCameraChanged.notifyObservers(this);\n    }\n    private _defaultMaterial: Material;\n    /** The default material used on meshes when no material is affected */\n    public get defaultMaterial(): Material {\n        if (!this._defaultMaterial) {\n            this._defaultMaterial = Scene.DefaultMaterialFactory(this);\n        }\n        return this._defaultMaterial;\n    }\n    /** The default material used on meshes when no material is affected */\n    public set defaultMaterial(value: Material) {\n        this._defaultMaterial = value;\n    }\n    // Textures\n    private _texturesEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if textures are enabled on this scene\n     */\n    public set texturesEnabled(value: boolean) {\n        if (this._texturesEnabled === value) {\n            return;\n        }\n        this._texturesEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    public get texturesEnabled(): boolean {\n        return this._texturesEnabled;\n    }\n    // Physics\n    /**\n     * Gets or sets a boolean indicating if physic engines are enabled on this scene\n     */\n    public physicsEnabled = true;\n    // Particles\n    /**\n     * Gets or sets a boolean indicating if particles are enabled on this scene\n     */\n    public particlesEnabled = true;\n    // Sprites\n    /**\n     * Gets or sets a boolean indicating if sprites are enabled on this scene\n     */\n    public spritesEnabled = true;\n    // Skeletons\n    private _skeletonsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if skeletons are enabled on this scene\n     */\n    public set skeletonsEnabled(value: boolean) {\n        if (this._skeletonsEnabled === value) {\n            return;\n        }\n        this._skeletonsEnabled = value;\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_AttributesDirtyFlag);\n    }\n    public get skeletonsEnabled(): boolean {\n        return this._skeletonsEnabled;\n    }\n    // Lens flares\n    /**\n     * Gets or sets a boolean indicating if lens flares are enabled on this scene\n     */\n    public lensFlaresEnabled = true;\n    // Collisions\n    /**\n     * Gets or sets a boolean indicating if collisions are enabled on this scene\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\n     */\n    public collisionsEnabled = true;\n    private _collisionCoordinator: ICollisionCoordinator;\n    /** @internal */\n    public get collisionCoordinator(): ICollisionCoordinator {\n        if (!this._collisionCoordinator) {\n            this._collisionCoordinator = Scene.CollisionCoordinatorFactory();\n            this._collisionCoordinator.init(this);\n        }\n        return this._collisionCoordinator;\n    }\n    /**\n     * Defines the gravity applied to this scene (used only for collisions)\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\n     */\n    public gravity = new Vector3(0, -9.807, 0);\n    // Postprocesses\n    /**\n     * Gets or sets a boolean indicating if postprocesses are enabled on this scene\n     */\n    public postProcessesEnabled = true;\n    /**\n     * Gets the current postprocess manager\n     */\n    public postProcessManager: PostProcessManager;\n    // Customs render targets\n    /**\n     * Gets or sets a boolean indicating if render targets are enabled on this scene\n     */\n    public renderTargetsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if next render targets must be dumped as image for debugging purposes\n     * We recommend not using it and instead rely on Spector.js: http://spector.babylonjs.com\n     */\n    public dumpNextRenderTargets = false;\n    /**\n     * The list of user defined render targets added to the scene\n     */\n    public customRenderTargets = new Array<RenderTargetTexture>();\n    /**\n     * Defines if texture loading must be delayed\n     * If true, textures will only be loaded when they need to be rendered\n     */\n    public useDelayedTextureLoading: boolean;\n    /**\n     * Gets the list of meshes imported to the scene through SceneLoader\n     */\n    public importedMeshesFiles = new Array<string>();\n    // Probes\n    /**\n     * Gets or sets a boolean indicating if probes are enabled on this scene\n     */\n    public probesEnabled = true;\n    // Offline support\n    /**\n     * Gets or sets the current offline provider to use to store scene data\n     * @see https://doc.babylonjs.com/how_to/caching_resources_in_indexeddb\n     */\n    public offlineProvider: IOfflineProvider;\n    /**\n     * Gets or sets the action manager associated with the scene\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n     */\n    public actionManager: AbstractActionManager;\n    private _meshesForIntersections = new SmartArrayNoDuplicate<AbstractMesh>(256);\n    // Procedural textures\n    /**\n     * Gets or sets a boolean indicating if procedural textures are enabled on this scene\n     */\n    public proceduralTexturesEnabled = true;\n    // Private\n    private _engine: Engine;\n    // Performance counters\n    private _totalVertices = new PerfCounter();\n    /** @internal */\n    public _activeIndices = new PerfCounter();\n    /** @internal */\n    public _activeParticles = new PerfCounter();\n    /** @internal */\n    public _activeBones = new PerfCounter();\n    private _animationRatio: number;\n    /** @internal */\n    public _animationTimeLast: number;\n    /** @internal */\n    public _animationTime: number = 0;\n    /**\n     * Gets or sets a general scale for animation speed\n     * @see https://www.babylonjs-playground.com/#IBU2W7#3\n     */\n    public animationTimeScale: number = 1;\n    /** @internal */\n    public _cachedMaterial: Nullable<Material>;\n    /** @internal */\n    public _cachedEffect: Nullable<Effect>;\n    /** @internal */\n    public _cachedVisibility: Nullable<number>;\n    private _renderId = 0;\n    private _frameId = 0;\n    private _executeWhenReadyTimeoutId: Nullable<ReturnType<typeof setTimeout>> = null;\n    private _intermediateRendering = false;\n    private _defaultFrameBufferCleared = false;\n    private _viewUpdateFlag = -1;\n    private _projectionUpdateFlag = -1;\n    /** @internal */\n    public _toBeDisposed = new Array<Nullable<IDisposable>>(256);\n    private _activeRequests = new Array<IFileRequest>();\n    /** @internal */\n    public _pendingData = new Array();\n    private _isDisposed = false;\n    /**\n     * Gets or sets a boolean indicating that all submeshes of active meshes must be rendered\n     * Use this boolean to avoid computing frustum clipping on submeshes (This could help when you are CPU bound)\n     */\n    public dispatchAllSubMeshesOfActiveMeshes: boolean = false;\n    private _activeMeshes = new SmartArray<AbstractMesh>(256);\n    private _processedMaterials = new SmartArray<Material>(256);\n    private _renderTargets = new SmartArrayNoDuplicate<RenderTargetTexture>(256);\n    private _materialsRenderTargets = new SmartArrayNoDuplicate<RenderTargetTexture>(256);\n    /** @internal */\n    public _activeParticleSystems = new SmartArray<IParticleSystem>(256);\n    private _activeSkeletons = new SmartArrayNoDuplicate<Skeleton>(32);\n    private _softwareSkinnedMeshes = new SmartArrayNoDuplicate<Mesh>(32);\n    private _renderingManager: RenderingManager;\n    /**\n     * Gets the scene's rendering manager\n     */\n    public get renderingManager(): RenderingManager {\n        return this._renderingManager;\n    }\n    /** @internal */\n    public _activeAnimatables = new Array<Animatable>();\n    private _transformMatrix = Matrix.Zero();\n    private _sceneUbo: UniformBuffer;\n    /** @internal */\n    public _viewMatrix: Matrix;\n    /** @internal */\n    public _projectionMatrix: Matrix;\n    /** @internal */\n    public _forcedViewPosition: Nullable<Vector3>;\n    /** @internal */\n    public _frustumPlanes: Plane[];\n    /**\n     * Gets the list of frustum planes (built from the active camera)\n     */\n    public get frustumPlanes(): Plane[] {\n        return this._frustumPlanes;\n    }\n    /**\n     * Gets or sets a boolean indicating if lights must be sorted by priority (off by default)\n     * This is useful if there are more lights that the maximum simulteanous authorized\n     */\n    public requireLightSorting = false;\n    /** @internal */\n    public readonly useMaterialMeshMap: boolean;\n    /** @internal */\n    public readonly useClonedMeshMap: boolean;\n    private _externalData: StringDictionary<Object>;\n    private _uid: Nullable<string>;\n    /**\n     * @internal\n     * Backing store of defined scene components.\n     */\n    public _components: ISceneComponent[] = [];\n    /**\n     * @internal\n     * Backing store of defined scene components.\n     */\n    public _serializableComponents: ISceneSerializableComponent[] = [];\n    /**\n     * List of components to register on the next registration step.\n     */\n    private _transientComponents: ISceneComponent[] = [];\n    /**\n     * Registers the transient components if needed.\n     */\n    private _registerTransientComponents(): void {\n        // Register components that have been associated lately to the scene.\n        if (this._transientComponents.length > 0) {\n            for (const component of this._transientComponents) {\n                component.register();\n            }\n            this._transientComponents.length = 0;\n        }\n    }\n    /**\n     * @internal\n     * Add a component to the scene.\n     * Note that the ccomponent could be registered on th next frame if this is called after\n     * the register component stage.\n     * @param component Defines the component to add to the scene\n     */\n    public _addComponent(component: ISceneComponent) {\n        this._components.push(component);\n        this._transientComponents.push(component);\n        const serializableComponent = component as any;\n        if (serializableComponent.addFromContainer && serializableComponent.serialize) {\n            this._serializableComponents.push(serializableComponent);\n        }\n    }\n    /**\n     * @internal\n     * Gets a component from the scene.\n     * @param name defines the name of the component to retrieve\n     * @returns the component or null if not present\n     */\n    public _getComponent(name: string): Nullable<ISceneComponent> {\n        for (const component of this._components) {\n            if (component.name === name) {\n                return component;\n            }\n        }\n        return null;\n    }\n    /**\n     * @internal\n     * Defines the actions happening before camera updates.\n     */\n    public _beforeCameraUpdateStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening before clear the canvas.\n     */\n    public _beforeClearStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening before clear the canvas.\n     */\n    public _beforeRenderTargetClearStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * @internal\n     * Defines the actions when collecting render targets for the frame.\n     */\n    public _gatherRenderTargetsStage = Stage.Create<RenderTargetsStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening for one camera in the frame.\n     */\n    public _gatherActiveCameraRenderTargetsStage = Stage.Create<RenderTargetsStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening during the per mesh ready checks.\n     */\n    public _isReadyForMeshStage = Stage.Create<MeshStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening before evaluate active mesh checks.\n     */\n    public _beforeEvaluateActiveMeshStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening during the evaluate sub mesh checks.\n     */\n    public _evaluateSubMeshStage = Stage.Create<EvaluateSubMeshStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening during the active mesh stage.\n     */\n    public _preActiveMeshStage = Stage.Create<PreActiveMeshStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening during the per camera render target step.\n     */\n    public _cameraDrawRenderTargetStage = Stage.Create<CameraStageFrameBufferAction>();\n    /**\n     * @internal\n     * Defines the actions happening just before the active camera is drawing.\n     */\n    public _beforeCameraDrawStage = Stage.Create<CameraStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just before a render target is drawing.\n     */\n    public _beforeRenderTargetDrawStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just before a rendering group is drawing.\n     */\n    public _beforeRenderingGroupDrawStage = Stage.Create<RenderingGroupStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just before a mesh is drawing.\n     */\n    public _beforeRenderingMeshStage = Stage.Create<RenderingMeshStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after a mesh has been drawn.\n     */\n    public _afterRenderingMeshStage = Stage.Create<RenderingMeshStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after a rendering group has been drawn.\n     */\n    public _afterRenderingGroupDrawStage = Stage.Create<RenderingGroupStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after the active camera has been drawn.\n     */\n    public _afterCameraDrawStage = Stage.Create<CameraStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after the post processing\n     */\n    public _afterCameraPostProcessStage = Stage.Create<CameraStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after a render target has been drawn.\n     */\n    public _afterRenderTargetDrawStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * Defines the actions happening just after the post processing on a render target\n     */\n    public _afterRenderTargetPostProcessStage = Stage.Create<RenderTargetStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening just after rendering all cameras and computing intersections.\n     */\n    public _afterRenderStage = Stage.Create<SimpleStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer move event happens.\n     */\n    public _pointerMoveStage = Stage.Create<PointerMoveStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer down event happens.\n     */\n    public _pointerDownStage = Stage.Create<PointerUpDownStageAction>();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer up event happens.\n     */\n    public _pointerUpStage = Stage.Create<PointerUpDownStageAction>();\n    /**\n     * an optional map from Geometry Id to Geometry index in the 'geometries' array\n     */\n    private _geometriesByUniqueId: Nullable<{\n        [uniqueId: string]: number | undefined;\n    }> = null;\n    /**\n     * Creates a new Scene\n     * @param engine defines the engine to use to render this scene\n     * @param options defines the scene options\n     */\n    constructor(engine: Engine, options?: SceneOptions) {\n        super();\n        this.activeCameras = new Array<Camera>();\n        const fullOptions = {\n            useGeometryUniqueIdsMap: true,\n            useMaterialMeshMap: true,\n            useClonedMeshMap: true,\n            virtual: false,\n            ...options\n        };\n        this._engine = engine || EngineStore.LastCreatedEngine;\n        if (!fullOptions.virtual) {\n            EngineStore._LastCreatedScene = this;\n            this._engine.scenes.push(this);\n        }\n        else {\n            this._engine._virtualScenes.push(this);\n        }\n        this._uid = null;\n        this._renderingManager = new RenderingManager(this);\n        if (PostProcessManager) {\n            this.postProcessManager = new PostProcessManager(this);\n        }\n        if (IsWindowObjectExist()) {\n            this.attachControl();\n        }\n        // Uniform Buffer\n        this._createUbo();\n        // Default Image processing definition\n        if (ImageProcessingConfiguration) {\n            this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n        }\n        this.setDefaultCandidateProviders();\n        if (fullOptions.useGeometryUniqueIdsMap) {\n            this._geometriesByUniqueId = {};\n        }\n        this.useMaterialMeshMap = fullOptions.useMaterialMeshMap;\n        this.useClonedMeshMap = fullOptions.useClonedMeshMap;\n        if (!options || !options.virtual) {\n            this._engine.onNewSceneAddedObservable.notifyObservers(this);\n        }\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"Scene\" string\n     */\n    public getClassName(): string {\n        return \"Scene\";\n    }\n    private _defaultMeshCandidates: ISmartArrayLike<AbstractMesh> = {\n        data: [],\n        length: 0\n    };\n    /**\n     * @internal\n     */\n    public _getDefaultMeshCandidates(): ISmartArrayLike<AbstractMesh> {\n        this._defaultMeshCandidates.data = this.meshes;\n        this._defaultMeshCandidates.length = this.meshes.length;\n        return this._defaultMeshCandidates;\n    }\n    private _defaultSubMeshCandidates: ISmartArrayLike<SubMesh> = {\n        data: [],\n        length: 0\n    };\n    /**\n     * @internal\n     */\n    public _getDefaultSubMeshCandidates(mesh: AbstractMesh): ISmartArrayLike<SubMesh> {\n        this._defaultSubMeshCandidates.data = mesh.subMeshes;\n        this._defaultSubMeshCandidates.length = mesh.subMeshes.length;\n        return this._defaultSubMeshCandidates;\n    }\n    /**\n     * Sets the default candidate providers for the scene.\n     * This sets the getActiveMeshCandidates, getActiveSubMeshCandidates, getIntersectingSubMeshCandidates\n     * and getCollidingSubMeshCandidates to their default function\n     */\n    public setDefaultCandidateProviders(): void {\n        this.getActiveMeshCandidates = this._getDefaultMeshCandidates.bind(this);\n        this.getActiveSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n        this.getIntersectingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n        this.getCollidingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n    }\n    /**\n     * Gets the mesh that is currently under the pointer\n     */\n    public get meshUnderPointer(): Nullable<AbstractMesh> {\n        return this._inputManager.meshUnderPointer;\n    }\n    /**\n     * Gets or sets the current on-screen X position of the pointer\n     */\n    public get pointerX(): number {\n        return this._inputManager.pointerX;\n    }\n    public set pointerX(value: number) {\n        this._inputManager.pointerX = value;\n    }\n    /**\n     * Gets or sets the current on-screen Y position of the pointer\n     */\n    public get pointerY(): number {\n        return this._inputManager.pointerY;\n    }\n    public set pointerY(value: number) {\n        this._inputManager.pointerY = value;\n    }\n    /**\n     * Gets the cached material (ie. the latest rendered one)\n     * @returns the cached material\n     */\n    public getCachedMaterial(): Nullable<Material> {\n        return this._cachedMaterial;\n    }\n    /**\n     * Gets the cached effect (ie. the latest rendered one)\n     * @returns the cached effect\n     */\n    public getCachedEffect(): Nullable<Effect> {\n        return this._cachedEffect;\n    }\n    /**\n     * Gets the cached visibility state (ie. the latest rendered one)\n     * @returns the cached visibility state\n     */\n    public getCachedVisibility(): Nullable<number> {\n        return this._cachedVisibility;\n    }\n    /**\n     * Gets a boolean indicating if the current material / effect / visibility must be bind again\n     * @param material defines the current material\n     * @param effect defines the current effect\n     * @param visibility defines the current visibility state\n     * @returns true if one parameter is not cached\n     */\n    public isCachedMaterialInvalid(material: Material, effect: Effect, visibility: number = 1) {\n        return this._cachedEffect !== effect || this._cachedMaterial !== material || this._cachedVisibility !== visibility;\n    }\n    /**\n     * Gets the engine associated with the scene\n     * @returns an Engine\n     */\n    public getEngine(): Engine {\n        return this._engine;\n    }\n    /**\n     * Gets the total number of vertices rendered per frame\n     * @returns the total number of vertices rendered per frame\n     */\n    public getTotalVertices(): number {\n        return this._totalVertices.current;\n    }\n    /**\n     * Gets the performance counter for total vertices\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#instrumentation\n     */\n    public get totalVerticesPerfCounter(): PerfCounter {\n        return this._totalVertices;\n    }\n    /**\n     * Gets the total number of active indices rendered per frame (You can deduce the number of rendered triangles by dividing this number by 3)\n     * @returns the total number of active indices rendered per frame\n     */\n    public getActiveIndices(): number {\n        return this._activeIndices.current;\n    }\n    /**\n     * Gets the performance counter for active indices\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#instrumentation\n     */\n    public get totalActiveIndicesPerfCounter(): PerfCounter {\n        return this._activeIndices;\n    }\n    /**\n     * Gets the total number of active particles rendered per frame\n     * @returns the total number of active particles rendered per frame\n     */\n    public getActiveParticles(): number {\n        return this._activeParticles.current;\n    }\n    /**\n     * Gets the performance counter for active particles\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#instrumentation\n     */\n    public get activeParticlesPerfCounter(): PerfCounter {\n        return this._activeParticles;\n    }\n    /**\n     * Gets the total number of active bones rendered per frame\n     * @returns the total number of active bones rendered per frame\n     */\n    public getActiveBones(): number {\n        return this._activeBones.current;\n    }\n    /**\n     * Gets the performance counter for active bones\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#instrumentation\n     */\n    public get activeBonesPerfCounter(): PerfCounter {\n        return this._activeBones;\n    }\n    /**\n     * Gets the array of active meshes\n     * @returns an array of AbstractMesh\n     */\n    public getActiveMeshes(): SmartArray<AbstractMesh> {\n        return this._activeMeshes;\n    }\n    /**\n     * Gets the animation ratio (which is 1.0 is the scene renders at 60fps and 2 if the scene renders at 30fps, etc.)\n     * @returns a number\n     */\n    public getAnimationRatio(): number {\n        return this._animationRatio !== undefined ? this._animationRatio : 1;\n    }\n    /**\n     * Gets an unique Id for the current render phase\n     * @returns a number\n     */\n    public getRenderId(): number {\n        return this._renderId;\n    }\n    /**\n     * Gets an unique Id for the current frame\n     * @returns a number\n     */\n    public getFrameId(): number {\n        return this._frameId;\n    }\n    /** Call this function if you want to manually increment the render Id*/\n    public incrementRenderId(): void {\n        this._renderId++;\n    }\n    private _createUbo(): void {\n        this.setSceneUniformBuffer(this.createSceneUniformBuffer());\n    }\n    /**\n     * Use this method to simulate a pointer move on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @returns the current scene\n     */\n    public simulatePointerMove(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): Scene {\n        this._inputManager.simulatePointerMove(pickResult, pointerEventInit);\n        return this;\n    }\n    /**\n     * Use this method to simulate a pointer down on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @returns the current scene\n     */\n    public simulatePointerDown(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): Scene {\n        this._inputManager.simulatePointerDown(pickResult, pointerEventInit);\n        return this;\n    }\n    /**\n     * Use this method to simulate a pointer up on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @param doubleTap indicates that the pointer up event should be considered as part of a double click (false by default)\n     * @returns the current scene\n     */\n    public simulatePointerUp(pickResult: PickingInfo, pointerEventInit?: PointerEventInit, doubleTap?: boolean): Scene {\n        this._inputManager.simulatePointerUp(pickResult, pointerEventInit, doubleTap);\n        return this;\n    }\n    /**\n     * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\n     * @param pointerId defines the pointer id to use in a multi-touch scenario (0 by default)\n     * @returns true if the pointer was captured\n     */\n    public isPointerCaptured(pointerId = 0): boolean {\n        return this._inputManager.isPointerCaptured(pointerId);\n    }\n    /**\n     * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\n     * @param attachUp defines if you want to attach events to pointerup\n     * @param attachDown defines if you want to attach events to pointerdown\n     * @param attachMove defines if you want to attach events to pointermove\n     */\n    public attachControl(attachUp = true, attachDown = true, attachMove = true): void {\n        this._inputManager.attachControl(attachUp, attachDown, attachMove);\n    }\n    /** Detaches all event handlers*/\n    public detachControl() {\n        this._inputManager.detachControl();\n    }\n    /**\n     * This function will check if the scene can be rendered (textures are loaded, shaders are compiled)\n     * Delay loaded resources are not taking in account\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: true)\n     * @returns true if all required resources are ready\n     */\n    public isReady(checkRenderTargets = true): boolean {\n        if (this._isDisposed) {\n            return false;\n        }\n        let index: number;\n        const engine = this.getEngine();\n        let isReady = true;\n        // Pending data\n        if (this._pendingData.length > 0) {\n            isReady = false;\n        }\n        // Meshes\n        if (checkRenderTargets) {\n            this._processedMaterials.reset();\n            this._materialsRenderTargets.reset();\n        }\n        for (index = 0; index < this.meshes.length; index++) {\n            const mesh = this.meshes[index];\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\n                continue;\n            }\n            // Do not stop at the first encountered \"unready\" object as we want to ensure\n            // all materials are starting off their compilation in parallel.\n            if (!mesh.isReady(true)) {\n                isReady = false;\n                continue;\n            }\n            const hardwareInstancedRendering = mesh.hasThinInstances ||\n                mesh.getClassName() === \"InstancedMesh\" ||\n                mesh.getClassName() === \"InstancedLinesMesh\" ||\n                (engine.getCaps().instancedArrays && (<Mesh>mesh).instances.length > 0);\n            // Is Ready For Mesh\n            for (const step of this._isReadyForMeshStage) {\n                if (!step.action(mesh, hardwareInstancedRendering)) {\n                    isReady = false;\n                }\n            }\n            if (!checkRenderTargets) {\n                continue;\n            }\n            const mat = mesh.material || this.defaultMaterial;\n            if (mat) {\n                if (mat._storeEffectOnSubMeshes) {\n                    for (const subMesh of mesh.subMeshes) {\n                        const material = subMesh.getMaterial();\n                        if (material && material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n                            if (this._processedMaterials.indexOf(material) === -1) {\n                                this._processedMaterials.push(material);\n                                this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures!());\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (mat.hasRenderTargetTextures && mat.getRenderTargetTextures != null) {\n                        if (this._processedMaterials.indexOf(mat) === -1) {\n                            this._processedMaterials.push(mat);\n                            this._materialsRenderTargets.concatWithNoDuplicate(mat.getRenderTargetTextures!());\n                        }\n                    }\n                }\n            }\n        }\n        if (!isReady) {\n            return false;\n        }\n        // Effects\n        if (!engine.areAllEffectsReady()) {\n            return false;\n        }\n        // Render targets\n        if (checkRenderTargets) {\n            for (index = 0; index < this._materialsRenderTargets.length; ++index) {\n                const rtt = this._materialsRenderTargets.data[index];\n                if (!rtt.isReadyForRendering()) {\n                    return false;\n                }\n            }\n        }\n        // Geometries\n        for (index = 0; index < this.geometries.length; index++) {\n            const geometry = this.geometries[index];\n            if (geometry.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\n                return false;\n            }\n        }\n        // Post-processes\n        if (this.activeCameras && this.activeCameras.length > 0) {\n            for (const camera of this.activeCameras) {\n                if (!camera.isReady(true)) {\n                    return false;\n                }\n            }\n        }\n        else if (this.activeCamera) {\n            if (!this.activeCamera.isReady(true)) {\n                return false;\n            }\n        }\n        // Particles\n        for (const particleSystem of this.particleSystems) {\n            if (!particleSystem.isReady()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** Resets all cached information relative to material (including effect and visibility) */\n    public resetCachedMaterial(): void {\n        this._cachedMaterial = null;\n        this._cachedEffect = null;\n        this._cachedVisibility = null;\n    }\n    /**\n     * Registers a function to be called before every frame render\n     * @param func defines the function to register\n     */\n    public registerBeforeRender(func: () => void): void {\n        this.onBeforeRenderObservable.add(func);\n    }\n    /**\n     * Unregisters a function called before every frame render\n     * @param func defines the function to unregister\n     */\n    public unregisterBeforeRender(func: () => void): void {\n        this.onBeforeRenderObservable.removeCallback(func);\n    }\n    /**\n     * Registers a function to be called after every frame render\n     * @param func defines the function to register\n     */\n    public registerAfterRender(func: () => void): void {\n        this.onAfterRenderObservable.add(func);\n    }\n    /**\n     * Unregisters a function called after every frame render\n     * @param func defines the function to unregister\n     */\n    public unregisterAfterRender(func: () => void): void {\n        this.onAfterRenderObservable.removeCallback(func);\n    }\n    private _executeOnceBeforeRender(func: () => void): void {\n        const execFunc = () => {\n            func();\n            setTimeout(() => {\n                this.unregisterBeforeRender(execFunc);\n            });\n        };\n        this.registerBeforeRender(execFunc);\n    }\n    /**\n     * The provided function will run before render once and will be disposed afterwards.\n     * A timeout delay can be provided so that the function will be executed in N ms.\n     * The timeout is using the browser's native setTimeout so time percision cannot be guaranteed.\n     * @param func The function to be executed.\n     * @param timeout optional delay in ms\n     */\n    public executeOnceBeforeRender(func: () => void, timeout?: number): void {\n        if (timeout !== undefined) {\n            setTimeout(() => {\n                this._executeOnceBeforeRender(func);\n            }, timeout);\n        }\n        else {\n            this._executeOnceBeforeRender(func);\n        }\n    }\n    /**\n     * This function can help adding any object to the list of data awaited to be ready in order to check for a complete scene loading.\n     * @param data defines the object to wait for\n     */\n    public addPendingData(data: any): void {\n        this._pendingData.push(data);\n    }\n    /**\n     * Remove a pending data from the loading list which has previously been added with addPendingData.\n     * @param data defines the object to remove from the pending list\n     */\n    public removePendingData(data: any): void {\n        const wasLoading = this.isLoading;\n        const index = this._pendingData.indexOf(data);\n        if (index !== -1) {\n            this._pendingData.splice(index, 1);\n        }\n        if (wasLoading && !this.isLoading) {\n            this.onDataLoadedObservable.notifyObservers(this);\n        }\n    }\n    /**\n     * Returns the number of items waiting to be loaded\n     * @returns the number of items waiting to be loaded\n     */\n    public getWaitingItemsCount(): number {\n        return this._pendingData.length;\n    }\n    /**\n     * Returns a boolean indicating if the scene is still loading data\n     */\n    public get isLoading(): boolean {\n        return this._pendingData.length > 0;\n    }\n    /**\n     * Registers a function to be executed when the scene is ready\n     * @param {Function} func - the function to be executed\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n     */\n    public executeWhenReady(func: () => void, checkRenderTargets = false): void {\n        this.onReadyObservable.addOnce(func);\n        if (this._executeWhenReadyTimeoutId !== null) {\n            return;\n        }\n        this._checkIsReady(checkRenderTargets);\n    }\n    /**\n     * Returns a promise that resolves when the scene is ready\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n     * @returns A promise that resolves when the scene is ready\n     */\n    public whenReadyAsync(checkRenderTargets = false): Promise<void> {\n        return new Promise((resolve) => {\n            this.executeWhenReady(() => {\n                resolve();\n            }, checkRenderTargets);\n        });\n    }\n    /**\n     * @internal\n     */\n    public _checkIsReady(checkRenderTargets = false) {\n        this._registerTransientComponents();\n        if (this.isReady(checkRenderTargets)) {\n            this.onReadyObservable.notifyObservers(this);\n            this.onReadyObservable.clear();\n            this._executeWhenReadyTimeoutId = null;\n            return;\n        }\n        if (this._isDisposed) {\n            this.onReadyObservable.clear();\n            this._executeWhenReadyTimeoutId = null;\n            return;\n        }\n        this._executeWhenReadyTimeoutId = setTimeout(() => {\n            // Ensure materials effects are checked outside render loops\n            this.incrementRenderId();\n            this._checkIsReady(checkRenderTargets);\n        }, 100);\n    }\n    /**\n     * Gets all animatable attached to the scene\n     */\n    public get animatables(): Animatable[] {\n        return this._activeAnimatables;\n    }\n    /**\n     * Resets the last animation time frame.\n     * Useful to override when animations start running when loading a scene for the first time.\n     */\n    public resetLastAnimationTimeFrame(): void {\n        this._animationTimeLast = PrecisionDate.Now;\n    }\n    // Matrix\n    /**\n     * Gets the current view matrix\n     * @returns a Matrix\n     */\n    public getViewMatrix(): Matrix {\n        return this._viewMatrix;\n    }\n    /**\n     * Gets the current projection matrix\n     * @returns a Matrix\n     */\n    public getProjectionMatrix(): Matrix {\n        return this._projectionMatrix;\n    }\n    /**\n     * Gets the current transform matrix\n     * @returns a Matrix made of View * Projection\n     */\n    public getTransformMatrix(): Matrix {\n        return this._transformMatrix;\n    }\n    /**\n     * Sets the current transform matrix\n     * @param viewL defines the View matrix to use\n     * @param projectionL defines the Projection matrix to use\n     * @param viewR defines the right View matrix to use (if provided)\n     * @param projectionR defines the right Projection matrix to use (if provided)\n     */\n    public setTransformMatrix(viewL: Matrix, projectionL: Matrix, viewR?: Matrix, projectionR?: Matrix): void {\n        // clear the multiviewSceneUbo if no viewR and projectionR are defined\n        if (!viewR && !projectionR && this._multiviewSceneUbo) {\n            this._multiviewSceneUbo.dispose();\n            this._multiviewSceneUbo = null;\n        }\n        if (this._viewUpdateFlag === viewL.updateFlag && this._projectionUpdateFlag === projectionL.updateFlag) {\n            return;\n        }\n        this._viewUpdateFlag = viewL.updateFlag;\n        this._projectionUpdateFlag = projectionL.updateFlag;\n        this._viewMatrix = viewL;\n        this._projectionMatrix = projectionL;\n        this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\n        // Update frustum\n        if (!this._frustumPlanes) {\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\n        }\n        else {\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\n        }\n        if (this._multiviewSceneUbo && this._multiviewSceneUbo.useUbo) {\n            this._updateMultiviewUbo(viewR, projectionR);\n        }\n        else if (this._sceneUbo.useUbo) {\n            this._sceneUbo.updateMatrix(\"viewProjection\", this._transformMatrix);\n            this._sceneUbo.updateMatrix(\"view\", this._viewMatrix);\n            this._sceneUbo.updateMatrix(\"projection\", this._projectionMatrix);\n        }\n    }\n    /**\n     * Gets the uniform buffer used to store scene data\n     * @returns a UniformBuffer\n     */\n    public getSceneUniformBuffer(): UniformBuffer {\n        return this._multiviewSceneUbo ? this._multiviewSceneUbo : this._sceneUbo;\n    }\n    /**\n     * Creates a scene UBO\n     * @param name name of the uniform buffer (optional, for debugging purpose only)\n     * @returns a new ubo\n     */\n    public createSceneUniformBuffer(name?: string): UniformBuffer {\n        const sceneUbo = new UniformBuffer(this._engine, undefined, false, name ?? \"scene\");\n        sceneUbo.addUniform(\"viewProjection\", 16);\n        sceneUbo.addUniform(\"view\", 16);\n        sceneUbo.addUniform(\"projection\", 16);\n        sceneUbo.addUniform(\"vEyePosition\", 4);\n        return sceneUbo;\n    }\n    /**\n     * Sets the scene ubo\n     * @param ubo the ubo to set for the scene\n     */\n    public setSceneUniformBuffer(ubo: UniformBuffer): void {\n        this._sceneUbo = ubo;\n        this._viewUpdateFlag = -1;\n        this._projectionUpdateFlag = -1;\n    }\n    /**\n     * Gets an unique (relatively to the current scene) Id\n     * @returns an unique number for the scene\n     */\n    public getUniqueId() {\n        return UniqueIdGenerator.UniqueId;\n    }\n    /**\n     * Add a mesh to the list of scene's meshes\n     * @param newMesh defines the mesh to add\n     * @param recursive if all child meshes should also be added to the scene\n     */\n    public addMesh(newMesh: AbstractMesh, recursive = false) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.meshes.push(newMesh);\n        newMesh._resyncLightSources();\n        if (!newMesh.parent) {\n            newMesh._addToSceneRootNodes();\n        }\n        this.onNewMeshAddedObservable.notifyObservers(newMesh);\n        if (recursive) {\n            newMesh.getChildMeshes().forEach((m) => {\n                this.addMesh(m);\n            });\n        }\n    }\n    /**\n     * Remove a mesh for the list of scene's meshes\n     * @param toRemove defines the mesh to remove\n     * @param recursive if all child meshes should also be removed from the scene\n     * @returns the index where the mesh was in the mesh list\n     */\n    public removeMesh(toRemove: AbstractMesh, recursive = false): number {\n        const index = this.meshes.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if mesh found\n            this.meshes[index] = this.meshes[this.meshes.length - 1];\n            this.meshes.pop();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this._inputManager._invalidateMesh(toRemove);\n        this.onMeshRemovedObservable.notifyObservers(toRemove);\n        if (recursive) {\n            toRemove.getChildMeshes().forEach((m) => {\n                this.removeMesh(m);\n            });\n        }\n        return index;\n    }\n    /**\n     * Add a transform node to the list of scene's transform nodes\n     * @param newTransformNode defines the transform node to add\n     */\n    public addTransformNode(newTransformNode: TransformNode) {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (newTransformNode.getScene() === this && newTransformNode._indexInSceneTransformNodesArray !== -1) {\n            // Already there?\n            return;\n        }\n        newTransformNode._indexInSceneTransformNodesArray = this.transformNodes.length;\n        this.transformNodes.push(newTransformNode);\n        if (!newTransformNode.parent) {\n            newTransformNode._addToSceneRootNodes();\n        }\n        this.onNewTransformNodeAddedObservable.notifyObservers(newTransformNode);\n    }\n    /**\n     * Remove a transform node for the list of scene's transform nodes\n     * @param toRemove defines the transform node to remove\n     * @returns the index where the transform node was in the transform node list\n     */\n    public removeTransformNode(toRemove: TransformNode): number {\n        const index = toRemove._indexInSceneTransformNodesArray;\n        if (index !== -1) {\n            if (index !== this.transformNodes.length - 1) {\n                const lastNode = this.transformNodes[this.transformNodes.length - 1];\n                this.transformNodes[index] = lastNode;\n                lastNode._indexInSceneTransformNodesArray = index;\n            }\n            toRemove._indexInSceneTransformNodesArray = -1;\n            this.transformNodes.pop();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this.onTransformNodeRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a skeleton for the list of scene's skeletons\n     * @param toRemove defines the skeleton to remove\n     * @returns the index where the skeleton was in the skeleton list\n     */\n    public removeSkeleton(toRemove: Skeleton): number {\n        const index = this.skeletons.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if found\n            this.skeletons.splice(index, 1);\n            this.onSkeletonRemovedObservable.notifyObservers(toRemove);\n            // Clean active container\n            this._executeActiveContainerCleanup(this._activeSkeletons);\n        }\n        return index;\n    }\n    /**\n     * Remove a morph target for the list of scene's morph targets\n     * @param toRemove defines the morph target to remove\n     * @returns the index where the morph target was in the morph target list\n     */\n    public removeMorphTargetManager(toRemove: MorphTargetManager): number {\n        const index = this.morphTargetManagers.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if found\n            this.morphTargetManagers.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Remove a light for the list of scene's lights\n     * @param toRemove defines the light to remove\n     * @returns the index where the light was in the light list\n     */\n    public removeLight(toRemove: Light): number {\n        const index = this.lights.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from meshes\n            for (const mesh of this.meshes) {\n                mesh._removeLightSource(toRemove, false);\n            }\n            // Remove from the scene if mesh found\n            this.lights.splice(index, 1);\n            this.sortLightsByPriority();\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        this.onLightRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a camera for the list of scene's cameras\n     * @param toRemove defines the camera to remove\n     * @returns the index where the camera was in the camera list\n     */\n    public removeCamera(toRemove: Camera): number {\n        const index = this.cameras.indexOf(toRemove);\n        if (index !== -1) {\n            // Remove from the scene if mesh found\n            this.cameras.splice(index, 1);\n            if (!toRemove.parent) {\n                toRemove._removeFromSceneRootNodes();\n            }\n        }\n        // Remove from activeCameras\n        if (this.activeCameras) {\n            const index2 = this.activeCameras.indexOf(toRemove);\n            if (index2 !== -1) {\n                // Remove from the scene if mesh found\n                this.activeCameras.splice(index2, 1);\n            }\n        }\n        // Reset the activeCamera\n        if (this.activeCamera === toRemove) {\n            if (this.cameras.length > 0) {\n                this.activeCamera = this.cameras[0];\n            }\n            else {\n                this.activeCamera = null;\n            }\n        }\n        this.onCameraRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Remove a particle system for the list of scene's particle systems\n     * @param toRemove defines the particle system to remove\n     * @returns the index where the particle system was in the particle system list\n     */\n    public removeParticleSystem(toRemove: IParticleSystem): number {\n        const index = this.particleSystems.indexOf(toRemove);\n        if (index !== -1) {\n            this.particleSystems.splice(index, 1);\n            // Clean active container\n            this._executeActiveContainerCleanup(this._activeParticleSystems);\n        }\n        return index;\n    }\n    /**\n     * Remove a animation for the list of scene's animations\n     * @param toRemove defines the animation to remove\n     * @returns the index where the animation was in the animation list\n     */\n    public removeAnimation(toRemove: Animation): number {\n        const index = this.animations.indexOf(toRemove);\n        if (index !== -1) {\n            this.animations.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Will stop the animation of the given target\n     * @param target - the target\n     * @param animationName - the name of the animation to stop (all animations will be stopped if both this and targetMask are empty)\n     * @param targetMask - a function that determines if the animation should be stopped based on its target (all animations will be stopped if both this and animationName are empty)\n     */\n    public stopAnimation(target: any, animationName?: string, targetMask?: (target: any) => boolean): void {\n        // Do nothing as code will be provided by animation component\n    }\n    /**\n     * Removes the given animation group from this scene.\n     * @param toRemove The animation group to remove\n     * @returns The index of the removed animation group\n     */\n    public removeAnimationGroup(toRemove: AnimationGroup): number {\n        const index = this.animationGroups.indexOf(toRemove);\n        if (index !== -1) {\n            this.animationGroups.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Removes the given multi-material from this scene.\n     * @param toRemove The multi-material to remove\n     * @returns The index of the removed multi-material\n     */\n    public removeMultiMaterial(toRemove: MultiMaterial): number {\n        const index = this.multiMaterials.indexOf(toRemove);\n        if (index !== -1) {\n            this.multiMaterials.splice(index, 1);\n        }\n        this.onMultiMaterialRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Removes the given material from this scene.\n     * @param toRemove The material to remove\n     * @returns The index of the removed material\n     */\n    public removeMaterial(toRemove: Material): number {\n        const index = toRemove._indexInSceneMaterialArray;\n        if (index !== -1 && index < this.materials.length) {\n            if (index !== this.materials.length - 1) {\n                const lastMaterial = this.materials[this.materials.length - 1];\n                this.materials[index] = lastMaterial;\n                lastMaterial._indexInSceneMaterialArray = index;\n            }\n            toRemove._indexInSceneMaterialArray = -1;\n            this.materials.pop();\n        }\n        this.onMaterialRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Removes the given action manager from this scene.\n     * @deprecated\n     * @param toRemove The action manager to remove\n     * @returns The index of the removed action manager\n     */\n    public removeActionManager(toRemove: AbstractActionManager): number {\n        const index = this.actionManagers.indexOf(toRemove);\n        if (index !== -1) {\n            this.actionManagers.splice(index, 1);\n        }\n        return index;\n    }\n    /**\n     * Removes the given texture from this scene.\n     * @param toRemove The texture to remove\n     * @returns The index of the removed texture\n     */\n    public removeTexture(toRemove: BaseTexture): number {\n        const index = this.textures.indexOf(toRemove);\n        if (index !== -1) {\n            this.textures.splice(index, 1);\n        }\n        this.onTextureRemovedObservable.notifyObservers(toRemove);\n        return index;\n    }\n    /**\n     * Adds the given light to this scene\n     * @param newLight The light to add\n     */\n    public addLight(newLight: Light): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.lights.push(newLight);\n        this.sortLightsByPriority();\n        if (!newLight.parent) {\n            newLight._addToSceneRootNodes();\n        }\n        // Add light to all meshes (To support if the light is removed and then re-added)\n        for (const mesh of this.meshes) {\n            if (mesh.lightSources.indexOf(newLight) === -1) {\n                mesh.lightSources.push(newLight);\n                mesh._resyncLightSources();\n            }\n        }\n        this.onNewLightAddedObservable.notifyObservers(newLight);\n    }\n    /**\n     * Sorts the list list based on light priorities\n     */\n    public sortLightsByPriority(): void {\n        if (this.requireLightSorting) {\n            this.lights.sort(LightConstants.CompareLightsPriority);\n        }\n    }\n    /**\n     * Adds the given camera to this scene\n     * @param newCamera The camera to add\n     */\n    public addCamera(newCamera: Camera): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.cameras.push(newCamera);\n        this.onNewCameraAddedObservable.notifyObservers(newCamera);\n        if (!newCamera.parent) {\n            newCamera._addToSceneRootNodes();\n        }\n    }\n    /**\n     * Adds the given skeleton to this scene\n     * @param newSkeleton The skeleton to add\n     */\n    public addSkeleton(newSkeleton: Skeleton): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.skeletons.push(newSkeleton);\n        this.onNewSkeletonAddedObservable.notifyObservers(newSkeleton);\n    }\n    /**\n     * Adds the given particle system to this scene\n     * @param newParticleSystem The particle system to add\n     */\n    public addParticleSystem(newParticleSystem: IParticleSystem): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.particleSystems.push(newParticleSystem);\n    }\n    /**\n     * Adds the given animation to this scene\n     * @param newAnimation The animation to add\n     */\n    public addAnimation(newAnimation: Animation): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.animations.push(newAnimation);\n    }\n    /**\n     * Adds the given animation group to this scene.\n     * @param newAnimationGroup The animation group to add\n     */\n    public addAnimationGroup(newAnimationGroup: AnimationGroup): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.animationGroups.push(newAnimationGroup);\n    }\n    /**\n     * Adds the given multi-material to this scene\n     * @param newMultiMaterial The multi-material to add\n     */\n    public addMultiMaterial(newMultiMaterial: MultiMaterial): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.multiMaterials.push(newMultiMaterial);\n        this.onNewMultiMaterialAddedObservable.notifyObservers(newMultiMaterial);\n    }\n    /**\n     * Adds the given material to this scene\n     * @param newMaterial The material to add\n     */\n    public addMaterial(newMaterial: Material): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (newMaterial.getScene() === this && newMaterial._indexInSceneMaterialArray !== -1) {\n            // Already there??\n            return;\n        }\n        newMaterial._indexInSceneMaterialArray = this.materials.length;\n        this.materials.push(newMaterial);\n        this.onNewMaterialAddedObservable.notifyObservers(newMaterial);\n    }\n    /**\n     * Adds the given morph target to this scene\n     * @param newMorphTargetManager The morph target to add\n     */\n    public addMorphTargetManager(newMorphTargetManager: MorphTargetManager): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.morphTargetManagers.push(newMorphTargetManager);\n    }\n    /**\n     * Adds the given geometry to this scene\n     * @param newGeometry The geometry to add\n     */\n    public addGeometry(newGeometry: Geometry): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        if (this._geometriesByUniqueId) {\n            this._geometriesByUniqueId[newGeometry.uniqueId] = this.geometries.length;\n        }\n        this.geometries.push(newGeometry);\n    }\n    /**\n     * Adds the given action manager to this scene\n     * @deprecated\n     * @param newActionManager The action manager to add\n     */\n    public addActionManager(newActionManager: AbstractActionManager): void {\n        this.actionManagers.push(newActionManager);\n    }\n    /**\n     * Adds the given texture to this scene.\n     * @param newTexture The texture to add\n     */\n    public addTexture(newTexture: BaseTexture): void {\n        if (this._blockEntityCollection) {\n            return;\n        }\n        this.textures.push(newTexture);\n        this.onNewTextureAddedObservable.notifyObservers(newTexture);\n    }\n    /**\n     * Switch active camera\n     * @param newCamera defines the new active camera\n     * @param attachControl defines if attachControl must be called for the new active camera (default: true)\n     */\n    public switchActiveCamera(newCamera: Camera, attachControl = true): void {\n        const canvas = this._engine.getInputElement();\n        if (!canvas) {\n            return;\n        }\n        if (this.activeCamera) {\n            this.activeCamera.detachControl();\n        }\n        this.activeCamera = newCamera;\n        if (attachControl) {\n            newCamera.attachControl();\n        }\n    }\n    /**\n     * sets the active camera of the scene using its Id\n     * @param id defines the camera's Id\n     * @returns the new active camera or null if none found.\n     */\n    public setActiveCameraById(id: string): Nullable<Camera> {\n        const camera = this.getCameraById(id);\n        if (camera) {\n            this.activeCamera = camera;\n            return camera;\n        }\n        return null;\n    }\n    /**\n     * sets the active camera of the scene using its name\n     * @param name defines the camera's name\n     * @returns the new active camera or null if none found.\n     */\n    public setActiveCameraByName(name: string): Nullable<Camera> {\n        const camera = this.getCameraByName(name);\n        if (camera) {\n            this.activeCamera = camera;\n            return camera;\n        }\n        return null;\n    }\n    /**\n     * get an animation group using its name\n     * @param name defines the material's name\n     * @returns the animation group or null if none found.\n     */\n    public getAnimationGroupByName(name: string): Nullable<AnimationGroup> {\n        for (let index = 0; index < this.animationGroups.length; index++) {\n            if (this.animationGroups[index].name === name) {\n                return this.animationGroups[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Get a material using its unique id\n     * @param uniqueId defines the material's unique id\n     * @returns the material or null if none found.\n     */\n    public getMaterialByUniqueID(uniqueId: number): Nullable<Material> {\n        for (let index = 0; index < this.materials.length; index++) {\n            if (this.materials[index].uniqueId === uniqueId) {\n                return this.materials[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * get a material using its id\n     * @param id defines the material's Id\n     * @returns the material or null if none found.\n     */\n    public getMaterialById(id: string): Nullable<Material> {\n        for (let index = 0; index < this.materials.length; index++) {\n            if (this.materials[index].id === id) {\n                return this.materials[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a the last added material using a given id\n     * @param id defines the material's Id\n     * @param allowMultiMaterials determines whether multimaterials should be considered\n     * @returns the last material with the given id or null if none found.\n     */\n    public getLastMaterialById(id: string, allowMultiMaterials: boolean = false): Nullable<Material> {\n        for (let index = this.materials.length - 1; index >= 0; index--) {\n            if (this.materials[index].id === id) {\n                return this.materials[index];\n            }\n        }\n        if (allowMultiMaterials) {\n            for (let index = this.multiMaterials.length - 1; index >= 0; index--) {\n                if (this.multiMaterials[index].id === id) {\n                    return this.multiMaterials[index];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a material using its name\n     * @param name defines the material's name\n     * @returns the material or null if none found.\n     */\n    public getMaterialByName(name: string): Nullable<Material> {\n        for (let index = 0; index < this.materials.length; index++) {\n            if (this.materials[index].name === name) {\n                return this.materials[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Get a texture using its unique id\n     * @param uniqueId defines the texture's unique id\n     * @returns the texture or null if none found.\n     */\n    public getTextureByUniqueId(uniqueId: number): Nullable<BaseTexture> {\n        for (let index = 0; index < this.textures.length; index++) {\n            if (this.textures[index].uniqueId === uniqueId) {\n                return this.textures[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a texture using its name\n     * @param name defines the texture's name\n     * @returns the texture or null if none found.\n     */\n    public getTextureByName(name: string): Nullable<BaseTexture> {\n        for (let index = 0; index < this.textures.length; index++) {\n            if (this.textures[index].name === name) {\n                return this.textures[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its Id\n     * @param id defines the Id to look for\n     * @returns the camera or null if not found\n     */\n    public getCameraById(id: string): Nullable<Camera> {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].id === id) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its unique Id\n     * @param uniqueId defines the unique Id to look for\n     * @returns the camera or null if not found\n     */\n    public getCameraByUniqueId(uniqueId: number): Nullable<Camera> {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].uniqueId === uniqueId) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a camera using its name\n     * @param name defines the camera's name\n     * @returns the camera or null if none found.\n     */\n    public getCameraByName(name: string): Nullable<Camera> {\n        for (let index = 0; index < this.cameras.length; index++) {\n            if (this.cameras[index].name === name) {\n                return this.cameras[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a bone using its Id\n     * @param id defines the bone's Id\n     * @returns the bone or null if not found\n     */\n    public getBoneById(id: string): Nullable<Bone> {\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n            const skeleton = this.skeletons[skeletonIndex];\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n                if (skeleton.bones[boneIndex].id === id) {\n                    return skeleton.bones[boneIndex];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a bone using its id\n     * @param name defines the bone's name\n     * @returns the bone or null if not found\n     */\n    public getBoneByName(name: string): Nullable<Bone> {\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n            const skeleton = this.skeletons[skeletonIndex];\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n                if (skeleton.bones[boneIndex].name === name) {\n                    return skeleton.bones[boneIndex];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its name\n     * @param name defines the the light's name\n     * @returns the light or null if none found.\n     */\n    public getLightByName(name: string): Nullable<Light> {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].name === name) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its Id\n     * @param id defines the light's Id\n     * @returns the light or null if none found.\n     */\n    public getLightById(id: string): Nullable<Light> {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].id === id) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a light node using its scene-generated unique Id\n     * @param uniqueId defines the light's unique Id\n     * @returns the light or null if none found.\n     */\n    public getLightByUniqueId(uniqueId: number): Nullable<Light> {\n        for (let index = 0; index < this.lights.length; index++) {\n            if (this.lights[index].uniqueId === uniqueId) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a particle system by Id\n     * @param id defines the particle system Id\n     * @returns the corresponding system or null if none found\n     */\n    public getParticleSystemById(id: string): Nullable<IParticleSystem> {\n        for (let index = 0; index < this.particleSystems.length; index++) {\n            if (this.particleSystems[index].id === id) {\n                return this.particleSystems[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a geometry using its Id\n     * @param id defines the geometry's Id\n     * @returns the geometry or null if none found.\n     */\n    public getGeometryById(id: string): Nullable<Geometry> {\n        for (let index = 0; index < this.geometries.length; index++) {\n            if (this.geometries[index].id === id) {\n                return this.geometries[index];\n            }\n        }\n        return null;\n    }\n    private _getGeometryByUniqueId(uniqueId: number): Nullable<Geometry> {\n        if (this._geometriesByUniqueId) {\n            const index = this._geometriesByUniqueId[uniqueId];\n            if (index !== undefined) {\n                return this.geometries[index];\n            }\n        }\n        else {\n            for (let index = 0; index < this.geometries.length; index++) {\n                if (this.geometries[index].uniqueId === uniqueId) {\n                    return this.geometries[index];\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Add a new geometry to this scene\n     * @param geometry defines the geometry to be added to the scene.\n     * @param force defines if the geometry must be pushed even if a geometry with this id already exists\n     * @returns a boolean defining if the geometry was added or not\n     */\n    public pushGeometry(geometry: Geometry, force?: boolean): boolean {\n        if (!force && this._getGeometryByUniqueId(geometry.uniqueId)) {\n            return false;\n        }\n        this.addGeometry(geometry);\n        this.onNewGeometryAddedObservable.notifyObservers(geometry);\n        return true;\n    }\n    /**\n     * Removes an existing geometry\n     * @param geometry defines the geometry to be removed from the scene\n     * @returns a boolean defining if the geometry was removed or not\n     */\n    public removeGeometry(geometry: Geometry): boolean {\n        let index;\n        if (this._geometriesByUniqueId) {\n            index = this._geometriesByUniqueId[geometry.uniqueId];\n            if (index === undefined) {\n                return false;\n            }\n        }\n        else {\n            index = this.geometries.indexOf(geometry);\n            if (index < 0) {\n                return false;\n            }\n        }\n        if (index !== this.geometries.length - 1) {\n            const lastGeometry = this.geometries[this.geometries.length - 1];\n            if (lastGeometry) {\n                this.geometries[index] = lastGeometry;\n                if (this._geometriesByUniqueId) {\n                    this._geometriesByUniqueId[lastGeometry.uniqueId] = index;\n                }\n            }\n        }\n        if (this._geometriesByUniqueId) {\n            this._geometriesByUniqueId[geometry.uniqueId] = undefined;\n        }\n        this.geometries.pop();\n        this.onGeometryRemovedObservable.notifyObservers(geometry);\n        return true;\n    }\n    /**\n     * Gets the list of geometries attached to the scene\n     * @returns an array of Geometry\n     */\n    public getGeometries(): Geometry[] {\n        return this.geometries;\n    }\n    /**\n     * Gets the first added mesh found of a given Id\n     * @param id defines the Id to search for\n     * @returns the mesh found or null if not found at all\n     */\n    public getMeshById(id: string): Nullable<AbstractMesh> {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a list of meshes using their Id\n     * @param id defines the Id to search for\n     * @returns a list of meshes\n     */\n    public getMeshesById(id: string): Array<AbstractMesh> {\n        return this.meshes.filter(function (m) {\n            return m.id === id;\n        });\n    }\n    /**\n     * Gets the first added transform node found of a given Id\n     * @param id defines the Id to search for\n     * @returns the found transform node or null if not found at all.\n     */\n    public getTransformNodeById(id: string): Nullable<TransformNode> {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].id === id) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a transform node with its auto-generated unique Id\n     * @param uniqueId defines the unique Id to search for\n     * @returns the found transform node or null if not found at all.\n     */\n    public getTransformNodeByUniqueId(uniqueId: number): Nullable<TransformNode> {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].uniqueId === uniqueId) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a list of transform nodes using their Id\n     * @param id defines the Id to search for\n     * @returns a list of transform nodes\n     */\n    public getTransformNodesById(id: string): Array<TransformNode> {\n        return this.transformNodes.filter(function (m) {\n            return m.id === id;\n        });\n    }\n    /**\n     * Gets a mesh with its auto-generated unique Id\n     * @param uniqueId defines the unique Id to search for\n     * @returns the found mesh or null if not found at all.\n     */\n    public getMeshByUniqueId(uniqueId: number): Nullable<AbstractMesh> {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].uniqueId === uniqueId) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a the last added mesh using a given Id\n     * @param id defines the Id to search for\n     * @returns the found mesh or null if not found at all.\n     */\n    public getLastMeshById(id: string): Nullable<AbstractMesh> {\n        for (let index = this.meshes.length - 1; index >= 0; index--) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a the last added node (Mesh, Camera, Light) using a given Id\n     * @param id defines the Id to search for\n     * @returns the found node or null if not found at all\n     */\n    public getLastEntryById(id: string): Nullable<Node> {\n        let index: number;\n        for (index = this.meshes.length - 1; index >= 0; index--) {\n            if (this.meshes[index].id === id) {\n                return this.meshes[index];\n            }\n        }\n        for (index = this.transformNodes.length - 1; index >= 0; index--) {\n            if (this.transformNodes[index].id === id) {\n                return this.transformNodes[index];\n            }\n        }\n        for (index = this.cameras.length - 1; index >= 0; index--) {\n            if (this.cameras[index].id === id) {\n                return this.cameras[index];\n            }\n        }\n        for (index = this.lights.length - 1; index >= 0; index--) {\n            if (this.lights[index].id === id) {\n                return this.lights[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a node (Mesh, Camera, Light) using a given Id\n     * @param id defines the Id to search for\n     * @returns the found node or null if not found at all\n     */\n    public getNodeById(id: string): Nullable<Node> {\n        const mesh = this.getMeshById(id);\n        if (mesh) {\n            return mesh;\n        }\n        const transformNode = this.getTransformNodeById(id);\n        if (transformNode) {\n            return transformNode;\n        }\n        const light = this.getLightById(id);\n        if (light) {\n            return light;\n        }\n        const camera = this.getCameraById(id);\n        if (camera) {\n            return camera;\n        }\n        const bone = this.getBoneById(id);\n        if (bone) {\n            return bone;\n        }\n        return null;\n    }\n    /**\n     * Gets a node (Mesh, Camera, Light) using a given name\n     * @param name defines the name to search for\n     * @returns the found node or null if not found at all.\n     */\n    public getNodeByName(name: string): Nullable<Node> {\n        const mesh = this.getMeshByName(name);\n        if (mesh) {\n            return mesh;\n        }\n        const transformNode = this.getTransformNodeByName(name);\n        if (transformNode) {\n            return transformNode;\n        }\n        const light = this.getLightByName(name);\n        if (light) {\n            return light;\n        }\n        const camera = this.getCameraByName(name);\n        if (camera) {\n            return camera;\n        }\n        const bone = this.getBoneByName(name);\n        if (bone) {\n            return bone;\n        }\n        return null;\n    }\n    /**\n     * Gets a mesh using a given name\n     * @param name defines the name to search for\n     * @returns the found mesh or null if not found at all.\n     */\n    public getMeshByName(name: string): Nullable<AbstractMesh> {\n        for (let index = 0; index < this.meshes.length; index++) {\n            if (this.meshes[index].name === name) {\n                return this.meshes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a transform node using a given name\n     * @param name defines the name to search for\n     * @returns the found transform node or null if not found at all.\n     */\n    public getTransformNodeByName(name: string): Nullable<TransformNode> {\n        for (let index = 0; index < this.transformNodes.length; index++) {\n            if (this.transformNodes[index].name === name) {\n                return this.transformNodes[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\n     * @param id defines the Id to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    public getLastSkeletonById(id: string): Nullable<Skeleton> {\n        for (let index = this.skeletons.length - 1; index >= 0; index--) {\n            if (this.skeletons[index].id === id) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given auto generated unique id\n     * @param  uniqueId defines the unique id to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    public getSkeletonByUniqueId(uniqueId: number): Nullable<Skeleton> {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].uniqueId === uniqueId) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given id (if many are found, this function will pick the first one)\n     * @param id defines the id to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    public getSkeletonById(id: string): Nullable<Skeleton> {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].id === id) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a skeleton using a given name\n     * @param name defines the name to search for\n     * @returns the found skeleton or null if not found at all.\n     */\n    public getSkeletonByName(name: string): Nullable<Skeleton> {\n        for (let index = 0; index < this.skeletons.length; index++) {\n            if (this.skeletons[index].name === name) {\n                return this.skeletons[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target manager  using a given id (if many are found, this function will pick the last one)\n     * @param id defines the id to search for\n     * @returns the found morph target manager or null if not found at all.\n     */\n    public getMorphTargetManagerById(id: number): Nullable<MorphTargetManager> {\n        for (let index = 0; index < this.morphTargetManagers.length; index++) {\n            if (this.morphTargetManagers[index].uniqueId === id) {\n                return this.morphTargetManagers[index];\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target using a given id (if many are found, this function will pick the first one)\n     * @param id defines the id to search for\n     * @returns the found morph target or null if not found at all.\n     */\n    public getMorphTargetById(id: string): Nullable<MorphTarget> {\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n                const target = morphTargetManager.getTarget(index);\n                if (target.id === id) {\n                    return target;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a morph target using a given name (if many are found, this function will pick the first one)\n     * @param name defines the name to search for\n     * @returns the found morph target or null if not found at all.\n     */\n    public getMorphTargetByName(name: string): Nullable<MorphTarget> {\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n                const target = morphTargetManager.getTarget(index);\n                if (target.name === name) {\n                    return target;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a post process using a given name (if many are found, this function will pick the first one)\n     * @param name defines the name to search for\n     * @returns the found post process or null if not found at all.\n     */\n    public getPostProcessByName(name: string): Nullable<PostProcess> {\n        for (let postProcessIndex = 0; postProcessIndex < this.postProcesses.length; ++postProcessIndex) {\n            const postProcess = this.postProcesses[postProcessIndex];\n            if (postProcess.name === name) {\n                return postProcess;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a boolean indicating if the given mesh is active\n     * @param mesh defines the mesh to look for\n     * @returns true if the mesh is in the active list\n     */\n    public isActiveMesh(mesh: AbstractMesh): boolean {\n        return this._activeMeshes.indexOf(mesh) !== -1;\n    }\n    /**\n     * Return a unique id as a string which can serve as an identifier for the scene\n     */\n    public get uid(): string {\n        if (!this._uid) {\n            this._uid = Tools.RandomId();\n        }\n        return this._uid;\n    }\n    /**\n     * Add an externally attached data from its key.\n     * This method call will fail and return false, if such key already exists.\n     * If you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\n     * @param key the unique key that identifies the data\n     * @param data the data object to associate to the key for this Engine instance\n     * @returns true if no such key were already present and the data was added successfully, false otherwise\n     */\n    public addExternalData<T extends Object>(key: string, data: T): boolean {\n        if (!this._externalData) {\n            this._externalData = new StringDictionary<Object>();\n        }\n        return this._externalData.add(key, data);\n    }\n    /**\n     * Get an externally attached data from its key\n     * @param key the unique key that identifies the data\n     * @returns the associated data, if present (can be null), or undefined if not present\n     */\n    public getExternalData<T>(key: string): Nullable<T> {\n        if (!this._externalData) {\n            return null;\n        }\n        return <T>this._externalData.get(key);\n    }\n    /**\n     * Get an externally attached data from its key, create it using a factory if it's not already present\n     * @param key the unique key that identifies the data\n     * @param factory the factory that will be called to create the instance if and only if it doesn't exists\n     * @returns the associated data, can be null if the factory returned null.\n     */\n    public getOrAddExternalDataWithFactory<T extends Object>(key: string, factory: (k: string) => T): T {\n        if (!this._externalData) {\n            this._externalData = new StringDictionary<Object>();\n        }\n        return <T>this._externalData.getOrAddWithFactory(key, factory);\n    }\n    /**\n     * Remove an externally attached data from the Engine instance\n     * @param key the unique key that identifies the data\n     * @returns true if the data was successfully removed, false if it doesn't exist\n     */\n    public removeExternalData(key: string): boolean {\n        return this._externalData.remove(key);\n    }\n    private _evaluateSubMesh(subMesh: SubMesh, mesh: AbstractMesh, initialMesh: AbstractMesh, forcePush: boolean): void {\n        if (forcePush || subMesh.isInFrustum(this._frustumPlanes)) {\n            for (const step of this._evaluateSubMeshStage) {\n                step.action(mesh, subMesh);\n            }\n            const material = subMesh.getMaterial();\n            if (material !== null && material !== undefined) {\n                // Render targets\n                if (material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n                    if (this._processedMaterials.indexOf(material) === -1) {\n                        this._processedMaterials.push(material);\n                        this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures!());\n                    }\n                }\n                // Dispatch\n                this._renderingManager.dispatch(subMesh, mesh, material);\n            }\n        }\n    }\n    /**\n     * Clear the processed materials smart array preventing retention point in material dispose.\n     */\n    public freeProcessedMaterials(): void {\n        this._processedMaterials.dispose();\n    }\n    private _preventFreeActiveMeshesAndRenderingGroups = false;\n    /** Gets or sets a boolean blocking all the calls to freeActiveMeshes and freeRenderingGroups\n     * It can be used in order to prevent going through methods freeRenderingGroups and freeActiveMeshes several times to improve performance\n     * when disposing several meshes in a row or a hierarchy of meshes.\n     * When used, it is the responsibility of the user to blockfreeActiveMeshesAndRenderingGroups back to false.\n     */\n    public get blockfreeActiveMeshesAndRenderingGroups(): boolean {\n        return this._preventFreeActiveMeshesAndRenderingGroups;\n    }\n    public set blockfreeActiveMeshesAndRenderingGroups(value: boolean) {\n        if (this._preventFreeActiveMeshesAndRenderingGroups === value) {\n            return;\n        }\n        if (value) {\n            this.freeActiveMeshes();\n            this.freeRenderingGroups();\n        }\n        this._preventFreeActiveMeshesAndRenderingGroups = value;\n    }\n    /**\n     * Clear the active meshes smart array preventing retention point in mesh dispose.\n     */\n    public freeActiveMeshes(): void {\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\n            return;\n        }\n        this._activeMeshes.dispose();\n        if (this.activeCamera && this.activeCamera._activeMeshes) {\n            this.activeCamera._activeMeshes.dispose();\n        }\n        if (this.activeCameras) {\n            for (let i = 0; i < this.activeCameras.length; i++) {\n                const activeCamera = this.activeCameras[i];\n                if (activeCamera && activeCamera._activeMeshes) {\n                    activeCamera._activeMeshes.dispose();\n                }\n            }\n        }\n    }\n    /**\n     * Clear the info related to rendering groups preventing retention points during dispose.\n     */\n    public freeRenderingGroups(): void {\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\n            return;\n        }\n        if (this._renderingManager) {\n            this._renderingManager.freeRenderingGroups();\n        }\n        if (this.textures) {\n            for (let i = 0; i < this.textures.length; i++) {\n                const texture = this.textures[i];\n                if (texture && (<RenderTargetTexture>texture).renderList) {\n                    (<RenderTargetTexture>texture).freeRenderingGroups();\n                }\n            }\n        }\n    }\n    /** @internal */\n    public _isInIntermediateRendering(): boolean {\n        return this._intermediateRendering;\n    }\n    /**\n     * Lambda returning the list of potentially active meshes.\n     */\n    public getActiveMeshCandidates: () => ISmartArrayLike<AbstractMesh>;\n    /**\n     * Lambda returning the list of potentially active sub meshes.\n     */\n    public getActiveSubMeshCandidates: (mesh: AbstractMesh) => ISmartArrayLike<SubMesh>;\n    /**\n     * Lambda returning the list of potentially intersecting sub meshes.\n     */\n    public getIntersectingSubMeshCandidates: (mesh: AbstractMesh, localRay: Ray) => ISmartArrayLike<SubMesh>;\n    /**\n     * Lambda returning the list of potentially colliding sub meshes.\n     */\n    public getCollidingSubMeshCandidates: (mesh: AbstractMesh, collider: Collider) => ISmartArrayLike<SubMesh>;\n    /** @internal */\n    public _activeMeshesFrozen = false;\n    /** @internal */\n    public _activeMeshesFrozenButKeepClipping = false;\n    private _skipEvaluateActiveMeshesCompletely = false;\n    /**\n     * Use this function to stop evaluating active meshes. The current list will be keep alive between frames\n     * @param skipEvaluateActiveMeshes defines an optional boolean indicating that the evaluate active meshes step must be completely skipped\n     * @param onSuccess optional success callback\n     * @param onError optional error callback\n     * @param freezeMeshes defines if meshes should be frozen (true by default)\n     * @param keepFrustumCulling defines if you want to keep running the frustum clipping (false by default)\n     * @returns the current scene\n     */\n    public freezeActiveMeshes(skipEvaluateActiveMeshes = false, onSuccess?: () => void, onError?: (message: string) => void, freezeMeshes = true, keepFrustumCulling = false): Scene {\n        this.executeWhenReady(() => {\n            if (!this.activeCamera) {\n                onError && onError(\"No active camera found\");\n                return;\n            }\n            if (!this._frustumPlanes) {\n                this.updateTransformMatrix();\n            }\n            this._evaluateActiveMeshes();\n            this._activeMeshesFrozen = true;\n            this._activeMeshesFrozenButKeepClipping = keepFrustumCulling;\n            this._skipEvaluateActiveMeshesCompletely = skipEvaluateActiveMeshes;\n            if (freezeMeshes) {\n                for (let index = 0; index < this._activeMeshes.length; index++) {\n                    this._activeMeshes.data[index]._freeze();\n                }\n            }\n            onSuccess && onSuccess();\n        });\n        return this;\n    }\n    /**\n     * Use this function to restart evaluating active meshes on every frame\n     * @returns the current scene\n     */\n    public unfreezeActiveMeshes(): Scene {\n        for (let index = 0; index < this.meshes.length; index++) {\n            const mesh = this.meshes[index];\n            if (mesh._internalAbstractMeshDataInfo) {\n                mesh._internalAbstractMeshDataInfo._isActive = false;\n            }\n        }\n        for (let index = 0; index < this._activeMeshes.length; index++) {\n            this._activeMeshes.data[index]._unFreeze();\n        }\n        this._activeMeshesFrozen = false;\n        return this;\n    }\n    private _executeActiveContainerCleanup(container: SmartArray<any>) {\n        const isInFastMode = this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST;\n        if (!isInFastMode && this._activeMeshesFrozen && this._activeMeshes.length) {\n            return; // Do not execute in frozen mode\n        }\n        // We need to ensure we are not in the rendering loop\n        this.onBeforeRenderObservable.addOnce(() => container.dispose());\n    }\n    private _evaluateActiveMeshes(): void {\n        if (this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST) {\n            if (this._activeMeshes.length > 0) {\n                this.activeCamera?._activeMeshes.reset();\n                this._activeMeshes.reset();\n                this._renderingManager.reset();\n                this._processedMaterials.reset();\n                this._activeParticleSystems.reset();\n                this._activeSkeletons.reset();\n                this._softwareSkinnedMeshes.reset();\n            }\n            return;\n        }\n        if (this._activeMeshesFrozen && this._activeMeshes.length) {\n            if (!this._skipEvaluateActiveMeshesCompletely) {\n                const len = this._activeMeshes.length;\n                for (let i = 0; i < len; i++) {\n                    const mesh = this._activeMeshes.data[i];\n                    mesh.computeWorldMatrix();\n                }\n            }\n            if (this._activeParticleSystems) {\n                const psLength = this._activeParticleSystems.length;\n                for (let i = 0; i < psLength; i++) {\n                    this._activeParticleSystems.data[i].animate();\n                }\n            }\n            this._renderingManager.resetSprites();\n            return;\n        }\n        if (!this.activeCamera) {\n            return;\n        }\n        this.onBeforeActiveMeshesEvaluationObservable.notifyObservers(this);\n        this.activeCamera._activeMeshes.reset();\n        this._activeMeshes.reset();\n        this._renderingManager.reset();\n        this._processedMaterials.reset();\n        this._activeParticleSystems.reset();\n        this._activeSkeletons.reset();\n        this._softwareSkinnedMeshes.reset();\n        this._materialsRenderTargets.reset();\n        for (const step of this._beforeEvaluateActiveMeshStage) {\n            step.action();\n        }\n        // Determine mesh candidates\n        const meshes = this.getActiveMeshCandidates();\n        // Check each mesh\n        const len = meshes.length;\n        for (let i = 0; i < len; i++) {\n            const mesh = meshes.data[i];\n            mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = false;\n            if (mesh.isBlocked) {\n                continue;\n            }\n            this._totalVertices.addCount(mesh.getTotalVertices(), false);\n            if (!mesh.isReady() || !mesh.isEnabled() || mesh.scaling.hasAZeroComponent) {\n                continue;\n            }\n            mesh.computeWorldMatrix();\n            // Intersections\n            if (mesh.actionManager && mesh.actionManager.hasSpecificTriggers2(Constants.ACTION_OnIntersectionEnterTrigger, Constants.ACTION_OnIntersectionExitTrigger)) {\n                this._meshesForIntersections.pushNoDuplicate(mesh);\n            }\n            // Switch to current LOD\n            let meshToRender = this.customLODSelector ? this.customLODSelector(mesh, this.activeCamera) : mesh.getLOD(this.activeCamera);\n            mesh._internalAbstractMeshDataInfo._currentLOD = meshToRender;\n            mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = true;\n            if (meshToRender === undefined || meshToRender === null) {\n                continue;\n            }\n            // Compute world matrix if LOD is billboard\n            if (meshToRender !== mesh && meshToRender.billboardMode !== 0) {\n                meshToRender.computeWorldMatrix();\n            }\n            mesh._preActivate();\n            if (mesh.isVisible &&\n                mesh.visibility > 0 &&\n                (mesh.layerMask & this.activeCamera.layerMask) !== 0 &&\n                (this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh || mesh.isInFrustum(this._frustumPlanes))) {\n                this._activeMeshes.push(mesh);\n                this.activeCamera._activeMeshes.push(mesh);\n                if (meshToRender !== mesh) {\n                    meshToRender._activate(this._renderId, false);\n                }\n                for (const step of this._preActiveMeshStage) {\n                    step.action(mesh);\n                }\n                if (mesh._activate(this._renderId, false)) {\n                    if (!mesh.isAnInstance) {\n                        meshToRender._internalAbstractMeshDataInfo._onlyForInstances = false;\n                    }\n                    else {\n                        if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\n                            meshToRender = mesh;\n                        }\n                    }\n                    meshToRender._internalAbstractMeshDataInfo._isActive = true;\n                    this._activeMesh(mesh, meshToRender);\n                }\n                mesh._postActivate();\n            }\n        }\n        // Particle systems\n        if (this.particlesEnabled) {\n            this.onBeforeParticlesRenderingObservable.notifyObservers(this);\n            for (let particleIndex = 0; particleIndex < this.particleSystems.length; particleIndex++) {\n                const particleSystem = this.particleSystems[particleIndex];\n                if (!particleSystem.isStarted() || !particleSystem.emitter) {\n                    continue;\n                }\n                const emitter = <any>particleSystem.emitter;\n                if (!emitter.position || emitter.isEnabled()) {\n                    this._activeParticleSystems.push(particleSystem);\n                    particleSystem.animate();\n                    this._renderingManager.dispatchParticles(particleSystem);\n                }\n            }\n            this.onAfterParticlesRenderingObservable.notifyObservers(this);\n        }\n    }\n    private _activeMesh(sourceMesh: AbstractMesh, mesh: AbstractMesh): void {\n        if (this._skeletonsEnabled && mesh.skeleton !== null && mesh.skeleton !== undefined) {\n            if (this._activeSkeletons.pushNoDuplicate(mesh.skeleton)) {\n                mesh.skeleton.prepare();\n                this._activeBones.addCount(mesh.skeleton.bones.length, false);\n            }\n            if (!mesh.computeBonesUsingShaders) {\n                this._softwareSkinnedMeshes.pushNoDuplicate(<Mesh>mesh);\n            }\n        }\n        let forcePush = sourceMesh.hasInstances || sourceMesh.isAnInstance || this.dispatchAllSubMeshesOfActiveMeshes || this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh;\n        if (mesh && mesh.subMeshes && mesh.subMeshes.length > 0) {\n            const subMeshes = this.getActiveSubMeshCandidates(mesh);\n            const len = subMeshes.length;\n            forcePush = forcePush || len === 1;\n            for (let i = 0; i < len; i++) {\n                const subMesh = subMeshes.data[i];\n                this._evaluateSubMesh(subMesh, mesh, sourceMesh, forcePush);\n            }\n        }\n    }\n    /**\n     * Update the transform matrix to update from the current active camera\n     * @param force defines a boolean used to force the update even if cache is up to date\n     */\n    public updateTransformMatrix(force?: boolean): void {\n        if (!this.activeCamera) {\n            return;\n        }\n        if (this.activeCamera._renderingMultiview) {\n            const leftCamera = this.activeCamera._rigCameras[0];\n            const rightCamera = this.activeCamera._rigCameras[1];\n            this.setTransformMatrix(leftCamera.getViewMatrix(), leftCamera.getProjectionMatrix(force), rightCamera.getViewMatrix(), rightCamera.getProjectionMatrix(force));\n        }\n        else {\n            this.setTransformMatrix(this.activeCamera.getViewMatrix(), this.activeCamera.getProjectionMatrix(force));\n        }\n    }\n    private _bindFrameBuffer(camera: Nullable<Camera>, clear = true) {\n        if (camera && camera._multiviewTexture) {\n            camera._multiviewTexture._bindFrameBuffer();\n        }\n        else if (camera && camera.outputRenderTarget) {\n            camera.outputRenderTarget._bindFrameBuffer();\n        }\n        else {\n            if (!this._engine._currentFrameBufferIsDefaultFrameBuffer()) {\n                this._engine.restoreDefaultFramebuffer();\n            }\n        }\n        if (clear) {\n            this._clearFrameBuffer(camera);\n        }\n    }\n    private _clearFrameBuffer(camera: Nullable<Camera>) {\n        // we assume the framebuffer currently bound is the right one\n        if (camera && camera._multiviewTexture) {\n            // no clearing?\n        }\n        else if (camera && camera.outputRenderTarget) {\n            const rtt = camera.outputRenderTarget;\n            if (rtt.onClearObservable.hasObservers()) {\n                rtt.onClearObservable.notifyObservers(this._engine);\n            }\n            else if (!rtt.skipInitialClear) {\n                if (this.autoClear) {\n                    this._engine.clear(rtt.clearColor || this.clearColor, !rtt._cleared, true, true);\n                }\n                rtt._cleared = true;\n            }\n        }\n        else {\n            if (!this._defaultFrameBufferCleared) {\n                this._defaultFrameBufferCleared = true;\n                this._clear();\n            }\n            else {\n                this._engine.clear(null, false, true, true);\n            }\n        }\n    }\n    /** @internal */\n    public _allowPostProcessClearColor = true;\n    /**\n     * @internal\n     */\n    public _renderForCamera(camera: Camera, rigParent?: Camera, bindFrameBuffer = true): void {\n        if (camera && camera._skipRendering) {\n            return;\n        }\n        const engine = this._engine;\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n        this._activeCamera = camera;\n        if (!this.activeCamera) {\n            throw new Error(\"Active camera not set\");\n        }\n        // Viewport\n        engine.setViewport(this.activeCamera.viewport);\n        // Camera\n        this.resetCachedMaterial();\n        this._renderId++;\n        if (!this.prePass && bindFrameBuffer) {\n            let skipInitialClear = true;\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\n                skipInitialClear = camera.outputRenderTarget.skipInitialClear;\n                if (this.autoClear) {\n                    camera.outputRenderTarget.skipInitialClear = false;\n                }\n            }\n            this._bindFrameBuffer(this._activeCamera);\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\n                camera.outputRenderTarget.skipInitialClear = skipInitialClear;\n            }\n        }\n        this.updateTransformMatrix();\n        this.onBeforeCameraRenderObservable.notifyObservers(this.activeCamera);\n        // Meshes\n        this._evaluateActiveMeshes();\n        // Software skinning\n        for (let softwareSkinnedMeshIndex = 0; softwareSkinnedMeshIndex < this._softwareSkinnedMeshes.length; softwareSkinnedMeshIndex++) {\n            const mesh = this._softwareSkinnedMeshes.data[softwareSkinnedMeshIndex];\n            mesh.applySkeleton(<Skeleton>mesh.skeleton);\n        }\n        // Render targets\n        this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n        this._renderTargets.concatWithNoDuplicate(this._materialsRenderTargets);\n        if (camera.customRenderTargets && camera.customRenderTargets.length > 0) {\n            this._renderTargets.concatWithNoDuplicate(camera.customRenderTargets);\n        }\n        if (rigParent && rigParent.customRenderTargets && rigParent.customRenderTargets.length > 0) {\n            this._renderTargets.concatWithNoDuplicate(rigParent.customRenderTargets);\n        }\n        if (this.environmentTexture && this.environmentTexture.isRenderTarget) {\n            this._renderTargets.pushNoDuplicate(this.environmentTexture as RenderTargetTexture);\n        }\n        // Collects render targets from external components.\n        for (const step of this._gatherActiveCameraRenderTargetsStage) {\n            step.action(this._renderTargets);\n        }\n        let needRebind = false;\n        if (this.renderTargetsEnabled) {\n            this._intermediateRendering = true;\n            if (this._renderTargets.length > 0) {\n                Tools.StartPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n                for (let renderIndex = 0; renderIndex < this._renderTargets.length; renderIndex++) {\n                    const renderTarget = this._renderTargets.data[renderIndex];\n                    if (renderTarget._shouldRender()) {\n                        this._renderId++;\n                        const hasSpecialRenderTargetCamera = renderTarget.activeCamera && renderTarget.activeCamera !== this.activeCamera;\n                        renderTarget.render(<boolean>hasSpecialRenderTargetCamera, this.dumpNextRenderTargets);\n                        needRebind = true;\n                    }\n                }\n                Tools.EndPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n                this._renderId++;\n            }\n            for (const step of this._cameraDrawRenderTargetStage) {\n                needRebind = step.action(this.activeCamera) || needRebind;\n            }\n            this._intermediateRendering = false;\n        }\n        this._engine.currentRenderPassId = camera.outputRenderTarget?.renderPassId ?? camera.renderPassId ?? Constants.RENDERPASS_MAIN;\n        // Restore framebuffer after rendering to targets\n        if (needRebind && !this.prePass) {\n            this._bindFrameBuffer(this._activeCamera, false);\n        }\n        this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n        // Prepare Frame\n        if (this.postProcessManager && !camera._multiviewTexture && !this.prePass) {\n            this.postProcessManager._prepareFrame();\n        }\n        // Before Camera Draw\n        for (const step of this._beforeCameraDrawStage) {\n            step.action(this.activeCamera);\n        }\n        // Render\n        this.onBeforeDrawPhaseObservable.notifyObservers(this);\n        if (engine.snapshotRendering && engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST) {\n            this.finalizeSceneUbo();\n        }\n        this._renderingManager.render(null, null, true, true);\n        this.onAfterDrawPhaseObservable.notifyObservers(this);\n        // After Camera Draw\n        for (const step of this._afterCameraDrawStage) {\n            step.action(this.activeCamera);\n        }\n        // Finalize frame\n        if (this.postProcessManager && !camera._multiviewTexture) {\n            // if the camera has an output render target, render the post process to the render target\n            const texture = camera.outputRenderTarget ? camera.outputRenderTarget.renderTarget! : undefined;\n            this.postProcessManager._finalizeFrame(camera.isIntermediate, texture);\n        }\n        // After post process\n        for (const step of this._afterCameraPostProcessStage) {\n            step.action(this.activeCamera);\n        }\n        // Reset some special arrays\n        this._renderTargets.reset();\n        this.onAfterCameraRenderObservable.notifyObservers(this.activeCamera);\n    }\n    private _processSubCameras(camera: Camera, bindFrameBuffer = true): void {\n        if (camera.cameraRigMode === Constants.RIG_MODE_NONE || camera._renderingMultiview) {\n            if (camera._renderingMultiview && !this._multiviewSceneUbo) {\n                this._createMultiviewUbo();\n            }\n            this._renderForCamera(camera, undefined, bindFrameBuffer);\n            this.onAfterRenderCameraObservable.notifyObservers(camera);\n            return;\n        }\n        if (camera._useMultiviewToSingleView) {\n            this._renderMultiviewToSingleView(camera);\n        }\n        else {\n            // rig cameras\n            this.onBeforeCameraRenderObservable.notifyObservers(camera);\n            for (let index = 0; index < camera._rigCameras.length; index++) {\n                this._renderForCamera(camera._rigCameras[index], camera);\n            }\n        }\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n        this._activeCamera = camera;\n        this.updateTransformMatrix();\n        this.onAfterRenderCameraObservable.notifyObservers(camera);\n    }\n    private _checkIntersections(): void {\n        for (let index = 0; index < this._meshesForIntersections.length; index++) {\n            const sourceMesh = this._meshesForIntersections.data[index];\n            if (!sourceMesh.actionManager) {\n                continue;\n            }\n            for (let actionIndex = 0; sourceMesh.actionManager && actionIndex < sourceMesh.actionManager.actions.length; actionIndex++) {\n                const action: IAction = sourceMesh.actionManager.actions[actionIndex];\n                if (action.trigger === Constants.ACTION_OnIntersectionEnterTrigger || action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                    const parameters = action.getTriggerParameter();\n                    const otherMesh = parameters.mesh ? parameters.mesh : parameters;\n                    const areIntersecting = otherMesh.intersectsMesh(sourceMesh, parameters.usePreciseIntersection);\n                    const currentIntersectionInProgress = sourceMesh._intersectionsInProgress.indexOf(otherMesh);\n                    if (areIntersecting && currentIntersectionInProgress === -1) {\n                        if (action.trigger === Constants.ACTION_OnIntersectionEnterTrigger) {\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\n                        }\n                        else if (action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\n                        }\n                    }\n                    else if (!areIntersecting && currentIntersectionInProgress > -1) {\n                        //They intersected, and now they don't.\n                        //is this trigger an exit trigger? execute an event.\n                        if (action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n                        }\n                        //if this is an exit trigger, or no exit trigger exists, remove the id from the intersection in progress array.\n                        if (!sourceMesh.actionManager.hasSpecificTrigger(Constants.ACTION_OnIntersectionExitTrigger, (parameter) => {\n                            const parameterMesh = parameter.mesh ? parameter.mesh : parameter;\n                            return otherMesh === parameterMesh;\n                        }) ||\n                            action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\n                            sourceMesh._intersectionsInProgress.splice(currentIntersectionInProgress, 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    public _advancePhysicsEngineStep(step: number) {\n        // Do nothing. Code will be replaced if physics engine component is referenced\n    }\n    /**\n     * User updatable function that will return a deterministic frame time when engine is in deterministic lock step mode\n     */\n    public getDeterministicFrameTime: () => number = () => {\n        return this._engine.getTimeStep();\n    };\n    /** @internal */\n    public _animate(): void {\n        // Nothing to do as long as Animatable have not been imported.\n    }\n    /** Execute all animations (for a frame) */\n    public animate() {\n        if (this._engine.isDeterministicLockStep()) {\n            let deltaTime = Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime)) + this._timeAccumulator;\n            const defaultFrameTime = this._engine.getTimeStep();\n            const defaultFPS = 1000.0 / defaultFrameTime / 1000.0;\n            let stepsTaken = 0;\n            const maxSubSteps = this._engine.getLockstepMaxSteps();\n            let internalSteps = Math.floor(deltaTime / defaultFrameTime);\n            internalSteps = Math.min(internalSteps, maxSubSteps);\n            while (deltaTime > 0 && stepsTaken < internalSteps) {\n                this.onBeforeStepObservable.notifyObservers(this);\n                // Animations\n                this._animationRatio = defaultFrameTime * defaultFPS;\n                this._animate();\n                this.onAfterAnimationsObservable.notifyObservers(this);\n                // Physics\n                if (this.physicsEnabled) {\n                    this._advancePhysicsEngineStep(defaultFrameTime);\n                }\n                this.onAfterStepObservable.notifyObservers(this);\n                this._currentStepId++;\n                stepsTaken++;\n                deltaTime -= defaultFrameTime;\n            }\n            this._timeAccumulator = deltaTime < 0 ? 0 : deltaTime;\n        }\n        else {\n            // Animations\n            const deltaTime = this.useConstantAnimationDeltaTime ? 16 : Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime));\n            this._animationRatio = deltaTime * (60.0 / 1000.0);\n            this._animate();\n            this.onAfterAnimationsObservable.notifyObservers(this);\n            // Physics\n            if (this.physicsEnabled) {\n                this._advancePhysicsEngineStep(deltaTime);\n            }\n        }\n    }\n    private _clear(): void {\n        if (this.autoClearDepthAndStencil || this.autoClear) {\n            this._engine.clear(this.clearColor, this.autoClear || this.forceWireframe || this.forcePointsCloud, this.autoClearDepthAndStencil, this.autoClearDepthAndStencil);\n        }\n    }\n    private _checkCameraRenderTarget(camera: Nullable<Camera>) {\n        if (camera?.outputRenderTarget && !camera?.isRigCamera) {\n            camera.outputRenderTarget._cleared = false;\n        }\n        if (camera?.rigCameras?.length) {\n            for (let i = 0; i < camera.rigCameras.length; ++i) {\n                const rtt = camera.rigCameras[i].outputRenderTarget;\n                if (rtt) {\n                    rtt._cleared = false;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the draw wrappers cache of all meshes\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\n     */\n    public resetDrawCache(passId?: number): void {\n        if (!this.meshes) {\n            return;\n        }\n        for (const mesh of this.meshes) {\n            mesh.resetDrawCache(passId);\n        }\n    }\n    /**\n     * Render the scene\n     * @param updateCameras defines a boolean indicating if cameras must update according to their inputs (true by default)\n     * @param ignoreAnimations defines a boolean indicating if animations should not be executed (false by default)\n     */\n    public render(updateCameras = true, ignoreAnimations = false): void {\n        if (this.isDisposed) {\n            return;\n        }\n        if (this.onReadyObservable.hasObservers() && this._executeWhenReadyTimeoutId === null) {\n            this._checkIsReady();\n        }\n        this._frameId++;\n        this._defaultFrameBufferCleared = false;\n        this._checkCameraRenderTarget(this.activeCamera);\n        if (this.activeCameras?.length) {\n            this.activeCameras.forEach(this._checkCameraRenderTarget);\n        }\n        // Register components that have been associated lately to the scene.\n        this._registerTransientComponents();\n        this._activeParticles.fetchNewFrame();\n        this._totalVertices.fetchNewFrame();\n        this._activeIndices.fetchNewFrame();\n        this._activeBones.fetchNewFrame();\n        this._meshesForIntersections.reset();\n        this.resetCachedMaterial();\n        this.onBeforeAnimationsObservable.notifyObservers(this);\n        // Actions\n        if (this.actionManager) {\n            this.actionManager.processTrigger(Constants.ACTION_OnEveryFrameTrigger);\n        }\n        // Animations\n        if (!ignoreAnimations) {\n            this.animate();\n        }\n        // Before camera update steps\n        for (const step of this._beforeCameraUpdateStage) {\n            step.action();\n        }\n        // Update Cameras\n        if (updateCameras) {\n            if (this.activeCameras && this.activeCameras.length > 0) {\n                for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n                    const camera = this.activeCameras[cameraIndex];\n                    camera.update();\n                    if (camera.cameraRigMode !== Constants.RIG_MODE_NONE) {\n                        // rig cameras\n                        for (let index = 0; index < camera._rigCameras.length; index++) {\n                            camera._rigCameras[index].update();\n                        }\n                    }\n                }\n            }\n            else if (this.activeCamera) {\n                this.activeCamera.update();\n                if (this.activeCamera.cameraRigMode !== Constants.RIG_MODE_NONE) {\n                    // rig cameras\n                    for (let index = 0; index < this.activeCamera._rigCameras.length; index++) {\n                        this.activeCamera._rigCameras[index].update();\n                    }\n                }\n            }\n        }\n        // Before render\n        this.onBeforeRenderObservable.notifyObservers(this);\n        const engine = this.getEngine();\n        // Customs render targets\n        this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n        const currentActiveCamera = this.activeCameras?.length ? this.activeCameras[0] : this.activeCamera;\n        if (this.renderTargetsEnabled) {\n            Tools.StartPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n            this._intermediateRendering = true;\n            for (let customIndex = 0; customIndex < this.customRenderTargets.length; customIndex++) {\n                const renderTarget = this.customRenderTargets[customIndex];\n                if (renderTarget._shouldRender()) {\n                    this._renderId++;\n                    this.activeCamera = renderTarget.activeCamera || this.activeCamera;\n                    if (!this.activeCamera) {\n                        throw new Error(\"Active camera not set\");\n                    }\n                    // Viewport\n                    engine.setViewport(this.activeCamera.viewport);\n                    // Camera\n                    this.updateTransformMatrix();\n                    renderTarget.render(currentActiveCamera !== this.activeCamera, this.dumpNextRenderTargets);\n                }\n            }\n            Tools.EndPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n            this._intermediateRendering = false;\n            this._renderId++;\n        }\n        this._engine.currentRenderPassId = currentActiveCamera?.renderPassId ?? Constants.RENDERPASS_MAIN;\n        // Restore back buffer\n        this.activeCamera = currentActiveCamera;\n        if (this._activeCamera && this._activeCamera.cameraRigMode !== Constants.RIG_MODE_CUSTOM && !this.prePass) {\n            this._bindFrameBuffer(this._activeCamera, false);\n        }\n        this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n        for (const step of this._beforeClearStage) {\n            step.action();\n        }\n        // Clear\n        this._clearFrameBuffer(this.activeCamera);\n        // Collects render targets from external components.\n        for (const step of this._gatherRenderTargetsStage) {\n            step.action(this._renderTargets);\n        }\n        // Multi-cameras?\n        if (this.activeCameras && this.activeCameras.length > 0) {\n            for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n                this._processSubCameras(this.activeCameras[cameraIndex], cameraIndex > 0);\n            }\n        }\n        else {\n            if (!this.activeCamera) {\n                throw new Error(\"No camera defined\");\n            }\n            this._processSubCameras(this.activeCamera, !!this.activeCamera.outputRenderTarget);\n        }\n        // Intersection checks\n        this._checkIntersections();\n        // Executes the after render stage actions.\n        for (const step of this._afterRenderStage) {\n            step.action();\n        }\n        // After render\n        if (this.afterRender) {\n            this.afterRender();\n        }\n        this.onAfterRenderObservable.notifyObservers(this);\n        // Cleaning\n        if (this._toBeDisposed.length) {\n            for (let index = 0; index < this._toBeDisposed.length; index++) {\n                const data = this._toBeDisposed[index];\n                if (data) {\n                    data.dispose();\n                }\n            }\n            this._toBeDisposed.length = 0;\n        }\n        if (this.dumpNextRenderTargets) {\n            this.dumpNextRenderTargets = false;\n        }\n        this._activeBones.addCount(0, true);\n        this._activeIndices.addCount(0, true);\n        this._activeParticles.addCount(0, true);\n        this._engine.restoreDefaultFramebuffer();\n    }\n    /**\n     * Freeze all materials\n     * A frozen material will not be updatable but should be faster to render\n     */\n    public freezeMaterials(): void {\n        for (let i = 0; i < this.materials.length; i++) {\n            this.materials[i].freeze();\n        }\n    }\n    /**\n     * Unfreeze all materials\n     * A frozen material will not be updatable but should be faster to render\n     */\n    public unfreezeMaterials(): void {\n        for (let i = 0; i < this.materials.length; i++) {\n            this.materials[i].unfreeze();\n        }\n    }\n    /**\n     * Releases all held resources\n     */\n    public dispose(): void {\n        if (this.isDisposed) {\n            return;\n        }\n        this.beforeRender = null;\n        this.afterRender = null;\n        this.metadata = null;\n        this.skeletons.length = 0;\n        this.morphTargetManagers.length = 0;\n        this._transientComponents.length = 0;\n        this._isReadyForMeshStage.clear();\n        this._beforeEvaluateActiveMeshStage.clear();\n        this._evaluateSubMeshStage.clear();\n        this._preActiveMeshStage.clear();\n        this._cameraDrawRenderTargetStage.clear();\n        this._beforeCameraDrawStage.clear();\n        this._beforeRenderTargetDrawStage.clear();\n        this._beforeRenderingGroupDrawStage.clear();\n        this._beforeRenderingMeshStage.clear();\n        this._afterRenderingMeshStage.clear();\n        this._afterRenderingGroupDrawStage.clear();\n        this._afterCameraDrawStage.clear();\n        this._afterRenderTargetDrawStage.clear();\n        this._afterRenderStage.clear();\n        this._beforeCameraUpdateStage.clear();\n        this._beforeClearStage.clear();\n        this._gatherRenderTargetsStage.clear();\n        this._gatherActiveCameraRenderTargetsStage.clear();\n        this._pointerMoveStage.clear();\n        this._pointerDownStage.clear();\n        this._pointerUpStage.clear();\n        this.importedMeshesFiles = new Array<string>();\n        if (this.stopAllAnimations) {\n            this.stopAllAnimations();\n        }\n        this.resetCachedMaterial();\n        // Smart arrays\n        if (this.activeCamera) {\n            this.activeCamera._activeMeshes.dispose();\n            this.activeCamera = null;\n        }\n        this.activeCameras = null;\n        this._activeMeshes.dispose();\n        this._renderingManager.dispose();\n        this._processedMaterials.dispose();\n        this._activeParticleSystems.dispose();\n        this._activeSkeletons.dispose();\n        this._softwareSkinnedMeshes.dispose();\n        this._renderTargets.dispose();\n        this._materialsRenderTargets.dispose();\n        this._registeredForLateAnimationBindings.dispose();\n        this._meshesForIntersections.dispose();\n        this._toBeDisposed.length = 0;\n        // Abort active requests\n        const activeRequests = this._activeRequests.slice();\n        for (const request of activeRequests) {\n            request.abort();\n        }\n        this._activeRequests.length = 0;\n        // Events\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        this.onBeforeRenderObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onBeforeRenderTargetsRenderObservable.clear();\n        this.onAfterRenderTargetsRenderObservable.clear();\n        this.onAfterStepObservable.clear();\n        this.onBeforeStepObservable.clear();\n        this.onBeforeActiveMeshesEvaluationObservable.clear();\n        this.onAfterActiveMeshesEvaluationObservable.clear();\n        this.onBeforeParticlesRenderingObservable.clear();\n        this.onAfterParticlesRenderingObservable.clear();\n        this.onBeforeDrawPhaseObservable.clear();\n        this.onAfterDrawPhaseObservable.clear();\n        this.onBeforeAnimationsObservable.clear();\n        this.onAfterAnimationsObservable.clear();\n        this.onDataLoadedObservable.clear();\n        this.onBeforeRenderingGroupObservable.clear();\n        this.onAfterRenderingGroupObservable.clear();\n        this.onMeshImportedObservable.clear();\n        this.onBeforeCameraRenderObservable.clear();\n        this.onAfterCameraRenderObservable.clear();\n        this.onReadyObservable.clear();\n        this.onNewCameraAddedObservable.clear();\n        this.onCameraRemovedObservable.clear();\n        this.onNewLightAddedObservable.clear();\n        this.onLightRemovedObservable.clear();\n        this.onNewGeometryAddedObservable.clear();\n        this.onGeometryRemovedObservable.clear();\n        this.onNewTransformNodeAddedObservable.clear();\n        this.onTransformNodeRemovedObservable.clear();\n        this.onNewMeshAddedObservable.clear();\n        this.onMeshRemovedObservable.clear();\n        this.onNewSkeletonAddedObservable.clear();\n        this.onSkeletonRemovedObservable.clear();\n        this.onNewMaterialAddedObservable.clear();\n        this.onNewMultiMaterialAddedObservable.clear();\n        this.onMaterialRemovedObservable.clear();\n        this.onMultiMaterialRemovedObservable.clear();\n        this.onNewTextureAddedObservable.clear();\n        this.onTextureRemovedObservable.clear();\n        this.onPrePointerObservable.clear();\n        this.onPointerObservable.clear();\n        this.onPreKeyboardObservable.clear();\n        this.onKeyboardObservable.clear();\n        this.onActiveCameraChanged.clear();\n        this.detachControl();\n        // Detach cameras\n        const canvas = this._engine.getInputElement();\n        if (canvas) {\n            for (let index = 0; index < this.cameras.length; index++) {\n                this.cameras[index].detachControl();\n            }\n        }\n        // Release animation groups\n        this._disposeList(this.animationGroups);\n        // Release lights\n        this._disposeList(this.lights);\n        // Release meshes\n        this._disposeList(this.meshes, (item) => item.dispose(true));\n        this._disposeList(this.transformNodes, (item) => item.dispose(true));\n        // Release cameras\n        const cameras = this.cameras;\n        this._disposeList(cameras);\n        // Release materials\n        if (this._defaultMaterial) {\n            this._defaultMaterial.dispose();\n        }\n        this._disposeList(this.multiMaterials);\n        this._disposeList(this.materials);\n        // Release particles\n        this._disposeList(this.particleSystems);\n        // Release postProcesses\n        this._disposeList(this.postProcesses);\n        // Release textures\n        this._disposeList(this.textures);\n        // Release morph targets\n        this._disposeList(this.morphTargetManagers);\n        // Release UBO\n        this._sceneUbo.dispose();\n        if (this._multiviewSceneUbo) {\n            this._multiviewSceneUbo.dispose();\n        }\n        // Post-processes\n        this.postProcessManager.dispose();\n        // Components\n        this._disposeList(this._components);\n        // Remove from engine\n        let index = this._engine.scenes.indexOf(this);\n        if (index > -1) {\n            this._engine.scenes.splice(index, 1);\n        }\n        if (EngineStore._LastCreatedScene === this) {\n            if (this._engine.scenes.length > 0) {\n                EngineStore._LastCreatedScene = this._engine.scenes[this._engine.scenes.length - 1];\n            }\n            else {\n                EngineStore._LastCreatedScene = null;\n            }\n        }\n        index = this._engine._virtualScenes.indexOf(this);\n        if (index > -1) {\n            this._engine._virtualScenes.splice(index, 1);\n        }\n        this._engine.wipeCaches(true);\n        this._isDisposed = true;\n    }\n    private _disposeList<T extends IDisposable>(items: T[], callback?: (item: T) => void): void {\n        const itemsCopy = items.slice(0);\n        callback = callback ?? ((item) => item.dispose());\n        for (const item of itemsCopy) {\n            callback(item);\n        }\n        items.length = 0;\n    }\n    /**\n     * Gets if the scene is already disposed\n     */\n    public get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n    /**\n     * Call this function to reduce memory footprint of the scene.\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\n     */\n    public clearCachedVertexData(): void {\n        for (let meshIndex = 0; meshIndex < this.meshes.length; meshIndex++) {\n            const mesh = this.meshes[meshIndex];\n            const geometry = (<Mesh>mesh).geometry;\n            if (geometry) {\n                geometry.clearCachedData();\n            }\n        }\n    }\n    /**\n     * This function will remove the local cached buffer data from texture.\n     * It will save memory but will prevent the texture from being rebuilt\n     */\n    public cleanCachedTextureBuffer(): void {\n        for (const baseTexture of this.textures) {\n            const buffer = (<Texture>baseTexture)._buffer;\n            if (buffer) {\n                (<Texture>baseTexture)._buffer = null;\n            }\n        }\n    }\n    /**\n     * Get the world extend vectors with an optional filter\n     *\n     * @param filterPredicate the predicate - which meshes should be included when calculating the world size\n     * @returns {{ min: Vector3; max: Vector3 }} min and max vectors\n     */\n    public getWorldExtends(filterPredicate?: (mesh: AbstractMesh) => boolean): {\n        min: Vector3;\n        max: Vector3;\n    } {\n        const min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        const max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        filterPredicate = filterPredicate || (() => true);\n        this.meshes.filter(filterPredicate).forEach((mesh) => {\n            mesh.computeWorldMatrix(true);\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0 || mesh.infiniteDistance) {\n                return;\n            }\n            const boundingInfo = mesh.getBoundingInfo();\n            const minBox = boundingInfo.boundingBox.minimumWorld;\n            const maxBox = boundingInfo.boundingBox.maximumWorld;\n            Vector3.CheckExtends(minBox, min, max);\n            Vector3.CheckExtends(maxBox, min, max);\n        });\n        return {\n            min: min,\n            max: max\n        };\n    }\n    // Picking\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n     * @param camera defines the camera to use for the picking\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\n     * @returns a Ray\n     */\n    public createPickingRay(x: number, y: number, world: Nullable<Matrix>, camera: Nullable<Camera>, cameraViewSpace = false): Ray {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n     * @param result defines the ray where to store the picking ray\n     * @param camera defines the camera to use for the picking\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\n     * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\n     * @returns the current scene\n     */\n    public createPickingRayToRef(x: number, y: number, world: Nullable<Matrix>, result: Ray, camera: Nullable<Camera>, cameraViewSpace = false, enableDistantPicking = false): Scene {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param camera defines the camera to use for the picking\n     * @returns a Ray\n     */\n    public createPickingRayInCameraSpace(x: number, y: number, camera?: Camera): Ray {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Creates a ray that can be used to pick in the scene\n     * @param x defines the x coordinate of the origin (on-screen)\n     * @param y defines the y coordinate of the origin (on-screen)\n     * @param result defines the ray where to store the picking ray\n     * @param camera defines the camera to use for the picking\n     * @returns the current scene\n     */\n    public createPickingRayInCameraSpaceToRef(x: number, y: number, result: Ray, camera?: Camera): Scene {\n        throw _WarnImport(\"Ray\");\n    }\n    /** @internal */\n    public get _pickingAvailable(): boolean {\n        return false;\n    }\n    /** @internal */\n    public _registeredActions: number = 0;\n    /** Launch a ray to try to pick a mesh in the scene\n     * @param x position on screen\n     * @param y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns a PickingInfo\n     */\n    public pick(x: number, y: number, predicate?: (mesh: AbstractMesh) => boolean, fastCheck?: boolean, camera?: Nullable<Camera>, trianglePredicate?: TrianglePickingPredicate): PickingInfo {\n        // Dummy info if picking as not been imported\n        return new PickingInfo();\n    }\n    /** Launch a ray to try to pick a mesh in the scene using only bounding information of the main mesh (not using submeshes)\n     * @param x position on screen\n     * @param y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @returns a PickingInfo (Please note that some info will not be set like distance, bv, bu and everything that cannot be capture by only using bounding infos)\n     */\n    public pickWithBoundingInfo(x: number, y: number, predicate?: (mesh: AbstractMesh) => boolean, fastCheck?: boolean, camera?: Nullable<Camera>): Nullable<PickingInfo> {\n        // Dummy info if picking as not been imported\n        return new PickingInfo();\n    }\n    /** Use the given ray to pick a mesh in the scene\n     * @param ray The ray to use to pick meshes\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must have isPickable set to true\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns a PickingInfo\n     */\n    public pickWithRay(ray: Ray, predicate?: (mesh: AbstractMesh) => boolean, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo> {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Launch a ray to try to pick a mesh in the scene\n     * @param x X position on screen\n     * @param y Y position on screen\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param camera camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns an array of PickingInfo\n     */\n    public multiPick(x: number, y: number, predicate?: (mesh: AbstractMesh) => boolean, camera?: Camera, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Launch a ray to try to pick a mesh in the scene\n     * @param ray Ray to use\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n     * @returns an array of PickingInfo\n     */\n    public multiPickWithRay(ray: Ray, predicate?: (mesh: AbstractMesh) => boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\n        throw _WarnImport(\"Ray\");\n    }\n    /**\n     * Force the value of meshUnderPointer\n     * @param mesh defines the mesh to use\n     * @param pointerId optional pointer id when using more than one pointer\n     * @param pickResult optional pickingInfo data used to find mesh\n     */\n    public setPointerOverMesh(mesh: Nullable<AbstractMesh>, pointerId?: number, pickResult?: Nullable<PickingInfo>): void {\n        this._inputManager.setPointerOverMesh(mesh, pointerId, pickResult);\n    }\n    /**\n     * Gets the mesh under the pointer\n     * @returns a Mesh or null if no mesh is under the pointer\n     */\n    public getPointerOverMesh(): Nullable<AbstractMesh> {\n        return this._inputManager.getPointerOverMesh();\n    }\n    // Misc.\n    /** @internal */\n    public _rebuildGeometries(): void {\n        for (const geometry of this.geometries) {\n            geometry._rebuild();\n        }\n        for (const mesh of this.meshes) {\n            mesh._rebuild();\n        }\n        if (this.postProcessManager) {\n            this.postProcessManager._rebuild();\n        }\n        for (const component of this._components) {\n            component.rebuild();\n        }\n        for (const system of this.particleSystems) {\n            system.rebuild();\n        }\n        if (this.spriteManagers) {\n            for (const spriteMgr of this.spriteManagers) {\n                spriteMgr.rebuild();\n            }\n        }\n    }\n    /** @internal */\n    public _rebuildTextures(): void {\n        for (const texture of this.textures) {\n            texture._rebuild();\n        }\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\n    }\n    // Tags\n    private _getByTags(list: any[], tagsQuery: string, forEach?: (item: any) => void): any[] {\n        if (tagsQuery === undefined) {\n            // returns the complete list (could be done with Tags.MatchesQuery but no need to have a for-loop here)\n            return list;\n        }\n        const listByTags = [];\n        forEach =\n            forEach ||\n                ((item: any) => {\n                    return;\n                });\n        for (const i in list) {\n            const item = list[i];\n            if (Tags && Tags.MatchesQuery(item, tagsQuery)) {\n                listByTags.push(item);\n                forEach(item);\n            }\n        }\n        return listByTags;\n    }\n    /**\n     * Get a list of meshes by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Mesh\n     */\n    public getMeshesByTags(tagsQuery: string, forEach?: (mesh: AbstractMesh) => void): Mesh[] {\n        return this._getByTags(this.meshes, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of cameras by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Camera\n     */\n    public getCamerasByTags(tagsQuery: string, forEach?: (camera: Camera) => void): Camera[] {\n        return this._getByTags(this.cameras, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of lights by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Light\n     */\n    public getLightsByTags(tagsQuery: string, forEach?: (light: Light) => void): Light[] {\n        return this._getByTags(this.lights, tagsQuery, forEach);\n    }\n    /**\n     * Get a list of materials by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of Material\n     */\n    public getMaterialByTags(tagsQuery: string, forEach?: (material: Material) => void): Material[] {\n        return this._getByTags(this.materials, tagsQuery, forEach).concat(this._getByTags(this.multiMaterials, tagsQuery, forEach));\n    }\n    /**\n     * Get a list of transform nodes by tags\n     * @param tagsQuery defines the tags query to use\n     * @param forEach defines a predicate used to filter results\n     * @returns an array of TransformNode\n     */\n    public getTransformNodesByTags(tagsQuery: string, forEach?: (transform: TransformNode) => void): TransformNode[] {\n        return this._getByTags(this.transformNodes, tagsQuery, forEach);\n    }\n    /**\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\n     * This allowed control for front to back rendering or reversly depending of the special needs.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\n     */\n    public setRenderingOrder(renderingGroupId: number, opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null, alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null, transparentSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null): void {\n        this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\n    }\n    /**\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\n     * @param depth Automatically clears depth between groups if true and autoClear is true.\n     * @param stencil Automatically clears stencil between groups if true and autoClear is true.\n     */\n    public setRenderingAutoClearDepthStencil(renderingGroupId: number, autoClearDepthStencil: boolean, depth = true, stencil = true): void {\n        this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth, stencil);\n    }\n    /**\n     * Gets the current auto clear configuration for one rendering group of the rendering\n     * manager.\n     * @param index the rendering group index to get the information for\n     * @returns The auto clear setup for the requested rendering group\n     */\n    public getAutoClearDepthStencilSetup(index: number): IRenderingManagerAutoClearSetup {\n        return this._renderingManager.getAutoClearDepthStencilSetup(index);\n    }\n    private _blockMaterialDirtyMechanism = false;\n    /** Gets or sets a boolean blocking all the calls to markAllMaterialsAsDirty (ie. the materials won't be updated if they are out of sync) */\n    public get blockMaterialDirtyMechanism(): boolean {\n        return this._blockMaterialDirtyMechanism;\n    }\n    public set blockMaterialDirtyMechanism(value: boolean) {\n        if (this._blockMaterialDirtyMechanism === value) {\n            return;\n        }\n        this._blockMaterialDirtyMechanism = value;\n        if (!value) {\n            // Do a complete update\n            this.markAllMaterialsAsDirty(Constants.MATERIAL_AllDirtyFlag);\n        }\n    }\n    /**\n     * Will flag all materials as dirty to trigger new shader compilation\n     * @param flag defines the flag used to specify which material part must be marked as dirty\n     * @param predicate If not null, it will be used to specify if a material has to be marked as dirty\n     */\n    public markAllMaterialsAsDirty(flag: number, predicate?: (mat: Material) => boolean): void {\n        if (this._blockMaterialDirtyMechanism) {\n            return;\n        }\n        for (const material of this.materials) {\n            if (predicate && !predicate(material)) {\n                continue;\n            }\n            material.markAsDirty(flag);\n        }\n    }\n    /**\n     * @internal\n     */\n    public _loadFile(fileOrUrl: File | string, onSuccess: (data: string | ArrayBuffer, responseURL?: string) => void, onProgress?: (ev: ProgressEvent) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onError?: (request?: WebRequest, exception?: LoadFileError) => void, onOpened?: (request: WebRequest) => void): IFileRequest {\n        const request = LoadFile(fileOrUrl, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @internal\n     */\n    public _loadFileAsync(fileOrUrl: File | string, onProgress?: (data: any) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onOpened?: (request: WebRequest) => void): Promise<string | ArrayBuffer> {\n        return new Promise((resolve, reject) => {\n            this._loadFile(fileOrUrl, (data) => {\n                resolve(data);\n            }, onProgress, useOfflineSupport, useArrayBuffer, (request, exception) => {\n                reject(exception);\n            }, onOpened);\n        });\n    }\n    /**\n     * @internal\n     */\n    public _requestFile(url: string, onSuccess: (data: string | ArrayBuffer, request?: WebRequest) => void, onProgress?: (ev: ProgressEvent) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onError?: (error: RequestFileError) => void, onOpened?: (request: WebRequest) => void): IFileRequest {\n        const request = RequestFile(url, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @internal\n     */\n    public _requestFileAsync(url: string, onProgress?: (ev: ProgressEvent) => void, useOfflineSupport?: boolean, useArrayBuffer?: boolean, onOpened?: (request: WebRequest) => void): Promise<string | ArrayBuffer> {\n        return new Promise((resolve, reject) => {\n            this._requestFile(url, (data) => {\n                resolve(data);\n            }, onProgress, useOfflineSupport, useArrayBuffer, (error) => {\n                reject(error);\n            }, onOpened);\n        });\n    }\n    /**\n     * @internal\n     */\n    public _readFile(file: File, onSuccess: (data: string | ArrayBuffer) => void, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean, onError?: (error: ReadFileError) => void): IFileRequest {\n        const request = ReadFile(file, onSuccess, onProgress, useArrayBuffer, onError);\n        this._activeRequests.push(request);\n        request.onCompleteObservable.add((request) => {\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n        });\n        return request;\n    }\n    /**\n     * @internal\n     */\n    public _readFileAsync(file: File, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\n        return new Promise((resolve, reject) => {\n            this._readFile(file, (data) => {\n                resolve(data);\n            }, onProgress, useArrayBuffer, (error) => {\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Internal perfCollector instance used for sharing between inspector and playground.\n     * Marked as protected to allow sharing between prototype extensions, but disallow access at toplevel.\n     */\n    protected _perfCollector: Nullable<PerformanceViewerCollector> = null;\n    /**\n     * This method gets the performance collector belonging to the scene, which is generally shared with the inspector.\n     * @returns the perf collector belonging to the scene.\n     */\n    public getPerfCollector(): PerformanceViewerCollector {\n        throw _WarnImport(\"performanceViewerSceneExtension\");\n    }\n}\n\n    declare module \"./scene\" {\n    interface Scene {\n        /**\n         * Sets the active camera of the scene using its Id\n         * @param id defines the camera's Id\n         * @returns the new active camera or null if none found.\n         * @deprecated Please use setActiveCameraById instead\n         */\n        setActiveCameraByID(id: string): Nullable<Camera>;\n        /**\n         * Get a material using its id\n         * @param id defines the material's Id\n         * @returns the material or null if none found.\n         * @deprecated Please use getMaterialById instead\n         */\n        getMaterialByID(id: string): Nullable<Material>;\n        /**\n         * Gets a the last added material using a given id\n         * @param id defines the material's Id\n         * @returns the last material with the given id or null if none found.\n         * @deprecated Please use getLastMaterialById instead\n         */\n        getLastMaterialByID(id: string): Nullable<Material>;\n        /**\n         * Get a texture using its unique id\n         * @param uniqueId defines the texture's unique id\n         * @returns the texture or null if none found.\n         * @deprecated Please use getTextureByUniqueId instead\n         */\n        getTextureByUniqueID(uniqueId: number): Nullable<BaseTexture>;\n        /**\n         * Gets a camera using its Id\n         * @param id defines the Id to look for\n         * @returns the camera or null if not found\n         * @deprecated Please use getCameraById instead\n         */\n        getCameraByID(id: string): Nullable<Camera>;\n        /**\n         * Gets a camera using its unique Id\n         * @param uniqueId defines the unique Id to look for\n         * @returns the camera or null if not found\n         * @deprecated Please use getCameraByUniqueId instead\n         */\n        getCameraByUniqueID(uniqueId: number): Nullable<Camera>;\n        /**\n         * Gets a bone using its Id\n         * @param id defines the bone's Id\n         * @returns the bone or null if not found\n         * @deprecated Please use getBoneById instead\n         */\n        getBoneByID(id: string): Nullable<Bone>;\n        /**\n         * Gets a light node using its Id\n         * @param id defines the light's Id\n         * @returns the light or null if none found.\n         * @deprecated Please use getLightById instead\n         */\n        getLightByID(id: string): Nullable<Light>;\n        /**\n         * Gets a light node using its scene-generated unique Id\n         * @param uniqueId defines the light's unique Id\n         * @returns the light or null if none found.\n         * @deprecated Please use getLightByUniqueId instead\n         */\n        getLightByUniqueID(uniqueId: number): Nullable<Light>;\n        /**\n         * Gets a particle system by Id\n         * @param id defines the particle system Id\n         * @returns the corresponding system or null if none found\n         * @deprecated Please use getParticleSystemById instead\n         */\n        getParticleSystemByID(id: string): Nullable<IParticleSystem>;\n        /**\n         * Gets a geometry using its Id\n         * @param id defines the geometry's Id\n         * @returns the geometry or null if none found.\n         * @deprecated Please use getGeometryById instead\n         */\n        getGeometryByID(id: string): Nullable<Geometry>;\n        /**\n         * Gets the first added mesh found of a given Id\n         * @param id defines the Id to search for\n         * @returns the mesh found or null if not found at all\n         * @deprecated Please use getMeshById instead\n         */\n        getMeshByID(id: string): Nullable<AbstractMesh>;\n        /**\n         * Gets a mesh with its auto-generated unique Id\n         * @param uniqueId defines the unique Id to search for\n         * @returns the found mesh or null if not found at all.\n         * @deprecated Please use getMeshByUniqueId instead\n         */\n        getMeshByUniqueID(uniqueId: number): Nullable<AbstractMesh>;\n        /**\n         * Gets a the last added mesh using a given Id\n         * @param id defines the Id to search for\n         * @returns the found mesh or null if not found at all.\n         * @deprecated Please use getLastMeshById instead\n         */\n        getLastMeshByID(id: string): Nullable<AbstractMesh>;\n        /**\n         * Gets a list of meshes using their Id\n         * @param id defines the Id to search for\n         * @returns a list of meshes\n         * @deprecated Please use getMeshesById instead\n         */\n        getMeshesByID(id: string): Array<AbstractMesh>;\n        /**\n         * Gets the first added transform node found of a given Id\n         * @param id defines the Id to search for\n         * @returns the found transform node or null if not found at all.\n         * @deprecated Please use getTransformNodeById instead\n         */\n        getTransformNodeByID(id: string): Nullable<TransformNode>;\n        /**\n         * Gets a transform node with its auto-generated unique Id\n         * @param uniqueId defines the unique Id to search for\n         * @returns the found transform node or null if not found at all.\n         * @deprecated Please use getTransformNodeByUniqueId instead\n         */\n        getTransformNodeByUniqueID(uniqueId: number): Nullable<TransformNode>;\n        /**\n         * Gets a list of transform nodes using their Id\n         * @param id defines the Id to search for\n         * @returns a list of transform nodes\n         * @deprecated Please use getTransformNodesById instead\n         */\n        getTransformNodesByID(id: string): Array<TransformNode>;\n        /**\n         * Gets a node (Mesh, Camera, Light) using a given Id\n         * @param id defines the Id to search for\n         * @returns the found node or null if not found at all\n         * @deprecated Please use getNodeById instead\n         */\n        getNodeByID(id: string): Nullable<Node>;\n        /**\n         * Gets a the last added node (Mesh, Camera, Light) using a given Id\n         * @param id defines the Id to search for\n         * @returns the found node or null if not found at all\n         * @deprecated Please use getLastEntryById instead\n         */\n        getLastEntryByID(id: string): Nullable<Node>;\n        /**\n         * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\n         * @param id defines the Id to search for\n         * @returns the found skeleton or null if not found at all.\n         * @deprecated Please use getLastSkeletonById instead\n         */\n        getLastSkeletonByID(id: string): Nullable<Skeleton>;\n    }\n}\n/**\n * @internal\n */\nScene.prototype.setActiveCameraByID = function (id: string): Nullable<Camera> {\n    return this.setActiveCameraById(id);\n};\nScene.prototype.getLastMaterialByID = function (id: string): Nullable<Material> {\n    return this.getLastMaterialById(id);\n};\nScene.prototype.getMaterialByID = function (id: string): Nullable<Material> {\n    return this.getMaterialById(id);\n};\nScene.prototype.getTextureByUniqueID = function (uniqueId: number): Nullable<BaseTexture> {\n    return this.getTextureByUniqueId(uniqueId);\n};\nScene.prototype.getCameraByID = function (id: string): Nullable<Camera> {\n    return this.getCameraById(id);\n};\nScene.prototype.getCameraByUniqueID = function (uniqueId: number): Nullable<Camera> {\n    return this.getCameraByUniqueId(uniqueId);\n};\nScene.prototype.getBoneByID = function (id: string): Nullable<Bone> {\n    return this.getBoneById(id);\n};\nScene.prototype.getLightByID = function (id: string): Nullable<Light> {\n    return this.getLightById(id);\n};\nScene.prototype.getLightByUniqueID = function (uniqueId: number): Nullable<Light> {\n    return this.getLightByUniqueId(uniqueId);\n};\nScene.prototype.getParticleSystemByID = function (id: string): Nullable<IParticleSystem> {\n    return this.getParticleSystemById(id);\n};\nScene.prototype.getGeometryByID = function (id: string): Nullable<Geometry> {\n    return this.getGeometryById(id);\n};\nScene.prototype.getMeshByID = function (id: string): Nullable<AbstractMesh> {\n    return this.getMeshById(id);\n};\nScene.prototype.getMeshesByID = function (id: string): Array<AbstractMesh> {\n    return this.getMeshesById(id);\n};\nScene.prototype.getTransformNodeByID = function (id: string): Nullable<TransformNode> {\n    return this.getTransformNodeById(id);\n};\nScene.prototype.getTransformNodeByUniqueID = function (uniqueId: number): Nullable<TransformNode> {\n    return this.getTransformNodeByUniqueId(uniqueId);\n};\nScene.prototype.getTransformNodesByID = function (id: string): Array<TransformNode> {\n    return this.getTransformNodesById(id);\n};\nScene.prototype.getMeshByUniqueID = function (uniqueId: number): Nullable<AbstractMesh> {\n    return this.getMeshByUniqueId(uniqueId);\n};\nScene.prototype.getLastMeshByID = function (id: string): Nullable<AbstractMesh> {\n    return this.getLastMeshById(id);\n};\nScene.prototype.getLastEntryByID = function (id: string): Nullable<Node> {\n    return this.getLastEntryById(id);\n};\nScene.prototype.getNodeByID = function (id: string): Nullable<Node> {\n    return this.getNodeById(id);\n};\nScene.prototype.getLastSkeletonByID = function (id: string): Nullable<Skeleton> {\n    return this.getLastSkeletonById(id);\n};\n","import type { Scene } from \"./scene\";\r\nimport type { SmartArrayNoDuplicate } from \"./Misc/smartArray\";\r\nimport type { Nullable } from \"./types\";\r\nimport type { PickingInfo } from \"./Collisions/pickingInfo\";\r\nimport type { AbstractScene } from \"./abstractScene\";\r\nimport type { IPointerEvent } from \"./Events/deviceInputEvents\";\r\n\r\ndeclare type Mesh = import(\"./Meshes/mesh\").Mesh;\r\ndeclare type Effect = import(\"./Materials/effect\").Effect;\r\ndeclare type Camera = import(\"./Cameras/camera\").Camera;\r\ndeclare type AbstractMesh = import(\"./Meshes/abstractMesh\").AbstractMesh;\r\ndeclare type SubMesh = import(\"./Meshes/subMesh\").SubMesh;\r\ndeclare type RenderTargetTexture = import(\"./Materials/Textures/renderTargetTexture\").RenderTargetTexture;\r\n\r\n/**\r\n * Groups all the scene component constants in one place to ease maintenance.\r\n * @internal\r\n */\r\nexport class SceneComponentConstants {\r\n    public static readonly NAME_EFFECTLAYER = \"EffectLayer\";\r\n    public static readonly NAME_LAYER = \"Layer\";\r\n    public static readonly NAME_LENSFLARESYSTEM = \"LensFlareSystem\";\r\n    public static readonly NAME_BOUNDINGBOXRENDERER = \"BoundingBoxRenderer\";\r\n    public static readonly NAME_PARTICLESYSTEM = \"ParticleSystem\";\r\n    public static readonly NAME_GAMEPAD = \"Gamepad\";\r\n    public static readonly NAME_SIMPLIFICATIONQUEUE = \"SimplificationQueue\";\r\n    public static readonly NAME_GEOMETRYBUFFERRENDERER = \"GeometryBufferRenderer\";\r\n    public static readonly NAME_PREPASSRENDERER = \"PrePassRenderer\";\r\n    public static readonly NAME_DEPTHRENDERER = \"DepthRenderer\";\r\n    public static readonly NAME_DEPTHPEELINGRENDERER = \"DepthPeelingRenderer\";\r\n    public static readonly NAME_POSTPROCESSRENDERPIPELINEMANAGER = \"PostProcessRenderPipelineManager\";\r\n    public static readonly NAME_SPRITE = \"Sprite\";\r\n    public static readonly NAME_SUBSURFACE = \"SubSurface\";\r\n    public static readonly NAME_OUTLINERENDERER = \"Outline\";\r\n    public static readonly NAME_PROCEDURALTEXTURE = \"ProceduralTexture\";\r\n    public static readonly NAME_SHADOWGENERATOR = \"ShadowGenerator\";\r\n    public static readonly NAME_OCTREE = \"Octree\";\r\n    public static readonly NAME_PHYSICSENGINE = \"PhysicsEngine\";\r\n    public static readonly NAME_AUDIO = \"Audio\";\r\n\r\n    public static readonly STEP_ISREADYFORMESH_EFFECTLAYER = 0;\r\n\r\n    public static readonly STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_PREACTIVEMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_CAMERADRAWRENDERTARGET_EFFECTLAYER = 1;\r\n\r\n    public static readonly STEP_BEFORECAMERADRAW_PREPASS = 0;\r\n    public static readonly STEP_BEFORECAMERADRAW_EFFECTLAYER = 1;\r\n    public static readonly STEP_BEFORECAMERADRAW_LAYER = 2;\r\n\r\n    public static readonly STEP_BEFORERENDERTARGETDRAW_PREPASS = 0;\r\n    public static readonly STEP_BEFORERENDERTARGETDRAW_LAYER = 1;\r\n\r\n    public static readonly STEP_BEFORERENDERINGMESH_PREPASS = 0;\r\n    public static readonly STEP_BEFORERENDERINGMESH_OUTLINE = 1;\r\n\r\n    public static readonly STEP_AFTERRENDERINGMESH_PREPASS = 0;\r\n    public static readonly STEP_AFTERRENDERINGMESH_OUTLINE = 1;\r\n\r\n    public static readonly STEP_AFTERRENDERINGGROUPDRAW_EFFECTLAYER_DRAW = 0;\r\n    public static readonly STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER = 1;\r\n\r\n    public static readonly STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE = 0;\r\n    public static readonly STEP_BEFORECAMERAUPDATE_GAMEPAD = 1;\r\n\r\n    public static readonly STEP_BEFORECLEAR_PROCEDURALTEXTURE = 0;\r\n    public static readonly STEP_BEFORECLEAR_PREPASS = 1;\r\n\r\n    public static readonly STEP_BEFORERENDERTARGETCLEAR_PREPASS = 0;\r\n\r\n    public static readonly STEP_AFTERRENDERTARGETDRAW_PREPASS = 0;\r\n    public static readonly STEP_AFTERRENDERTARGETDRAW_LAYER = 1;\r\n\r\n    public static readonly STEP_AFTERCAMERADRAW_PREPASS = 0;\r\n    public static readonly STEP_AFTERCAMERADRAW_EFFECTLAYER = 1;\r\n    public static readonly STEP_AFTERCAMERADRAW_LENSFLARESYSTEM = 2;\r\n    public static readonly STEP_AFTERCAMERADRAW_EFFECTLAYER_DRAW = 3;\r\n    public static readonly STEP_AFTERCAMERADRAW_LAYER = 4;\r\n\r\n    public static readonly STEP_AFTERCAMERAPOSTPROCESS_LAYER = 0;\r\n\r\n    public static readonly STEP_AFTERRENDERTARGETPOSTPROCESS_LAYER = 0;\r\n\r\n    public static readonly STEP_AFTERRENDER_AUDIO = 0;\r\n\r\n    public static readonly STEP_GATHERRENDERTARGETS_DEPTHRENDERER = 0;\r\n    public static readonly STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER = 1;\r\n    public static readonly STEP_GATHERRENDERTARGETS_SHADOWGENERATOR = 2;\r\n    public static readonly STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER = 3;\r\n\r\n    public static readonly STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER = 0;\r\n\r\n    public static readonly STEP_POINTERMOVE_SPRITE = 0;\r\n    public static readonly STEP_POINTERDOWN_SPRITE = 0;\r\n    public static readonly STEP_POINTERUP_SPRITE = 0;\r\n}\r\n\r\n/**\r\n * This represents a scene component.\r\n *\r\n * This is used to decouple the dependency the scene is having on the different workloads like\r\n * layers, post processes...\r\n */\r\nexport interface ISceneComponent {\r\n    /**\r\n     * The name of the component. Each component must have a unique name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    scene: Scene;\r\n\r\n    /**\r\n     * Register the component to one instance of a scene.\r\n     */\r\n    register(): void;\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    rebuild(): void;\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\n/**\r\n * This represents a SERIALIZABLE scene component.\r\n *\r\n * This extends Scene Component to add Serialization methods on top.\r\n */\r\nexport interface ISceneSerializableComponent extends ISceneComponent {\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    addFromContainer(container: AbstractScene): void;\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    removeFromContainer(container: AbstractScene, dispose?: boolean): void;\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    serialize(serializationObject: any): void;\r\n}\r\n\r\n/**\r\n * Strong typing of a Mesh related stage step action\r\n */\r\nexport type MeshStageAction = (mesh: AbstractMesh, hardwareInstancedRendering: boolean) => boolean;\r\n\r\n/**\r\n * Strong typing of a Evaluate Sub Mesh related stage step action\r\n */\r\nexport type EvaluateSubMeshStageAction = (mesh: AbstractMesh, subMesh: SubMesh) => void;\r\n\r\n/**\r\n * Strong typing of a pre active Mesh related stage step action\r\n */\r\nexport type PreActiveMeshStageAction = (mesh: AbstractMesh) => void;\r\n\r\n/**\r\n * Strong typing of a Camera related stage step action\r\n */\r\nexport type CameraStageAction = (camera: Camera) => void;\r\n\r\n/**\r\n * Strong typing of a Camera Frame buffer related stage step action\r\n */\r\nexport type CameraStageFrameBufferAction = (camera: Camera) => boolean;\r\n\r\n/**\r\n * Strong typing of a Render Target related stage step action\r\n */\r\nexport type RenderTargetStageAction = (renderTarget: RenderTargetTexture, faceIndex?: number, layer?: number) => void;\r\n\r\n/**\r\n * Strong typing of a RenderingGroup related stage step action\r\n */\r\nexport type RenderingGroupStageAction = (renderingGroupId: number) => void;\r\n\r\n/**\r\n * Strong typing of a Mesh Render related stage step action\r\n */\r\nexport type RenderingMeshStageAction = (mesh: Mesh, subMesh: SubMesh, batch: any, effect: Nullable<Effect>) => void;\r\n\r\n/**\r\n * Strong typing of a simple stage step action\r\n */\r\nexport type SimpleStageAction = () => void;\r\n\r\n/**\r\n * Strong typing of a render target action.\r\n */\r\nexport type RenderTargetsStageAction = (renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>) => void;\r\n\r\n/**\r\n * Strong typing of a pointer move action.\r\n */\r\nexport type PointerMoveStageAction = (\r\n    unTranslatedPointerX: number,\r\n    unTranslatedPointerY: number,\r\n    pickResult: Nullable<PickingInfo>,\r\n    isMeshPicked: boolean,\r\n    element: Nullable<HTMLElement>\r\n) => Nullable<PickingInfo>;\r\n\r\n/**\r\n * Strong typing of a pointer up/down action.\r\n */\r\nexport type PointerUpDownStageAction = (\r\n    unTranslatedPointerX: number,\r\n    unTranslatedPointerY: number,\r\n    pickResult: Nullable<PickingInfo>,\r\n    evt: IPointerEvent,\r\n    doubleClick: boolean\r\n) => Nullable<PickingInfo>;\r\n\r\n/**\r\n * Representation of a stage in the scene (Basically a list of ordered steps)\r\n * @internal\r\n */\r\nexport class Stage<T extends Function> extends Array<{ index: number; component: ISceneComponent; action: T }> {\r\n    /**\r\n     * Hide ctor from the rest of the world.\r\n     * @param items The items to add.\r\n     */\r\n    private constructor(items?: { index: number; component: ISceneComponent; action: T }[]) {\r\n        super(...(<any>items));\r\n    }\r\n\r\n    /**\r\n     * Creates a new Stage.\r\n     * @returns A new instance of a Stage\r\n     */\r\n    static Create<T extends Function>(): Stage<T> {\r\n        return Object.create(Stage.prototype);\r\n    }\r\n\r\n    /**\r\n     * Registers a step in an ordered way in the targeted stage.\r\n     * @param index Defines the position to register the step in\r\n     * @param component Defines the component attached to the step\r\n     * @param action Defines the action to launch during the step\r\n     */\r\n    public registerStep(index: number, component: ISceneComponent, action: T): void {\r\n        let i = 0;\r\n        let maxIndex = Number.MAX_VALUE;\r\n        for (; i < this.length; i++) {\r\n            const step = this[i];\r\n            maxIndex = step.index;\r\n            if (index < maxIndex) {\r\n                break;\r\n            }\r\n        }\r\n        this.splice(i, 0, { index, component, action: action.bind(component) });\r\n    }\r\n\r\n    /**\r\n     * Clears all the steps from the stage.\r\n     */\r\n    public clear(): void {\r\n        this.length = 0;\r\n    }\r\n}\r\n"],"names":["AbstractActionManager","hoverCursor","actions","Array","isRecursive","HasTriggers","t","Triggers","Object","prototype","hasOwnProperty","call","HasPickTriggers","tAsInt","parseInt","static","trigger","ActionEvent","constructor","source","pointerX","pointerY","meshUnderPointer","sourceEvent","additionalData","evt","scene","getScene","prim","pointerPos","x","y","Camera","N","name","position","setActiveOnSceneIfNoneActive","super","_position","_upVector","_orthoLeft","_orthoRight","_orthoBottom","_orthoTop","fov","projectionPlaneTilt","minZ","maxZ","inertia","_mode","PERSPECTIVE_CAMERA","isIntermediate","viewport","layerMask","fovMode","FOVMODE_VERTICAL_FIXED","cameraRigMode","RIG_MODE_NONE","customRenderTargets","outputRenderTarget","onViewMatrixChangedObservable","onProjectionMatrixChangedObservable","onAfterCheckInputsObservable","onRestoreStateObservable","isRigCamera","_rigCameras","_webvrViewMatrix","_skipRendering","_projectionMatrix","_postProcesses","_activeMeshes","_globalPosition","_computedViewMatrix","_doNotComputeProjectionMatrix","_transformMatrix","_refreshFrustumPlanes","_absoluteRotation","_isCamera","_isLeftCamera","_isRightCamera","this","addCamera","activeCamera","renderPassId","getEngine","createRenderPassId","newPosition","upVector","vec","screenArea","mode","Math","tan","getAspectRatio","halfWidth","getRenderWidth","halfHeight","getRenderHeight","orthoRight","orthoLeft","orthoTop","orthoBottom","value","rigCamera","storeState","_stateStored","_storedFov","_restoreStateValues","restoreState","notifyObservers","getClassName","toString","fullDetails","ret","animations","i","length","applyVerticalCorrection","rot","absoluteRotation","toEulerAngles","_scene","useRightHandedSystem","globalPosition","getActiveMeshes","isActiveMesh","mesh","indexOf","isReady","completeCheck","pp","_initCache","_cache","Number","MAX_VALUE","undefined","aspectRatio","renderWidth","renderHeight","_updateCache","ignoreParentClass","copyFrom","_isSynchronized","_isSynchronizedViewMatrix","_isSynchronizedProjectionMatrix","equals","isSynchronizedWithParent","check","engine","attachControl","_ignored","_noPreventDefault","detachControl","update","_checkInputs","_updateRigCameras","rigCameras","rigPostProcess","_rigPostProcess","_getFirstPostProcess","ppIndex","_cascadePostProcessesToRigCams","firstPostProcess","markTextureDirty","len","cam","getEffectName","slice","concat","attachPostProcess","postProcess","insertAt","isReusable","push","splice","prePassRenderer","markAsDirty","detachPostProcess","idx","getWorldMatrix","getViewMatrix","_worldMatrix","_getViewMatrix","force","updateCache","_currentRenderId","getRenderId","_childUpdateId","_cameraRigParams","vrPreViewMatrix","multiplyToRef","parent","invertToRef","freezeProjectionMatrix","projection","unfreezeProjectionMatrix","getProjectionMatrix","reverseDepth","useReverseDepthBuffer","isNDCHalfZRange","getTransformationMatrix","_updateFrustumPlanes","_frustumPlanes","isInFrustum","target","checkRigCameras","result","forEach","isCompletelyInFrustum","getForwardRay","transform","origin","getForwardRayToRef","refRay","dispose","doNotRecurse","disposeMaterialAndTextures","clear","inputs","stopAnimation","removeCamera","camera","pop","_parentContainer","index","cameras","releaseRenderPassId","isLeftCamera","isRightCamera","leftCamera","rightCamera","getLeftTarget","getTarget","getRightTarget","setCameraRigMode","rigParams","interaxialDistance","stereoHalfAngle","createRigCamera","_setRigMode","_getVRProjectionMatrix","vrMetrics","aspectRatioFov","vrWorkMatrix","vrHMatrix","_updateCameraRotationMatrix","_updateWebVRCameraRotationMatrix","_getWebVRProjectionMatrix","_getWebVRViewMatrix","setCameraRigParameter","cameraIndex","RIG_MODE_STEREOSCOPIC_ANAGLYPH","_setupInputs","serialize","serializationObject","uniqueId","type","_serializeAsParent","ranges","serializeAnimationRanges","isEnabled","clone","newParent","GetConstructorFromName","isStereoscopicSideBySide","onClonedObservable","getDirection","localAxis","getDirectionToRef","decompose","interaxial_distance","_CreateDefaultParsedCamera","computeWorldMatrix","parsedCamera","construct","parentId","_waitingParentId","parentInstanceIndex","_waitingParentInstanceIndex","parse","setPosition","copyFromFloats","setTarget","animationIndex","parsedAnimation","internalClass","Parse","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","setEnabled","ORTHOGRAPHIC_CAMERA","FOVMODE_HORIZONTAL_FIXED","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED","RIG_MODE_STEREOSCOPIC_OVERUNDER","RIG_MODE_STEREOSCOPIC_INTERLACED","RIG_MODE_VR","RIG_MODE_WEBVR","RIG_MODE_CUSTOM","ForceAttachControlToAlwaysPreventDefault","IntersectionInfo","bu","bv","distance","faceId","subMeshId","_MeshCollisionData","_checkCollisions","_collisionMask","_collisionGroup","_surroundingMeshes","_collider","_oldPositionForCollisions","_diffPositionForCollisions","_collisionResponse","PickingInfo","hit","pickedPoint","pickedMesh","subMeshFaceId","pickedSprite","thinInstanceIndex","ray","originMesh","aimTransform","gripTransform","getNormal","useWorldCoordinates","useVerticesNormals","isVerticesDataPresent","indices","getIndices","normals","getVerticesData","normal0","normal1","normal2","scale","z","positions","vertex1","vertex2","vertex3","p1p2","subtract","p3p2","direction","negateInPlace","wm","nonUniformScaling","setTranslationFromFloats","invert","transposeToRef","normalize","getTextureCoordinates","uvs","uv0","uv1","uv2","BoundingBox","min","max","worldMatrix","vectors","center","centerWorld","extendSize","extendSizeWorld","directions","vectorsWorld","minimumWorld","maximumWorld","minimum","maximum","_drawWrapperFront","_drawWrapperBack","reConstruct","minX","minY","maxX","maxY","addToRef","scaleInPlace","subtractToRef","_update","factor","tmpVectors","_TmpVector3","diff","normalizeFromLength","newRadius","world","minWorld","maxWorld","isIdentity","setAll","v","minimizeInPlace","maximizeInPlace","m","frustumPlanes","IsInFrustum","IsCompletelyInFrustum","intersectsPoint","point","pointX","pointY","pointZ","delta","intersectsSphere","sphere","IntersectsSphere","radiusWorld","intersectsMinMax","myMin","myMax","myMinX","myMinY","myMinZ","myMaxX","myMaxY","myMaxZ","box0","box1","minPoint","maxPoint","sphereCenter","sphereRadius","vector","boundingVectors","p","frustumPlane","dotCoordinate","canReturnFalse","_result0","_result1","computeBoxExtents","axis","box","r","abs","axisOverlap","BoundingInfo","_isLocked","boundingBox","boundingSphere","isLocked","centerOn","extend","subtractInPlace","addInPlace","encapsulate","encapsulateBoundingInfo","toEncapsulate","add","strategy","isCenterInFrustum","diagonalLength","_checkCollision","collider","_canDoCollision","intersects","boundingInfo","precise","BoundingSphere","radius","tempRadiusVector","tempVector","squareDistance","sphere0","sphere1","radiusSum","matrix","DeviceType","PointerInput","NativePointerInput","DualShockInput","DualSenseInput","XboxInput","SwitchInput","DeviceSource","deviceInputSystem","deviceType","deviceSlot","onInputChangedObservable","_deviceInputSystem","getInput","inputIndex","pollInput","DeviceEventFactory","currentState","elementToAttachTo","_CreateKeyboardEvent","_CreateWheelEvent","_CreatePointerEvent","_CreateMouseEvent","pointerId","pointerType","button","deltaMode","deltaX","deltaY","deltaZ","_CreateEvent","movementX","movementY","offsetX","getBoundingClientRect","offsetY","_CheckNonCharacterKeys","clientX","clientY","key","String","fromCharCode","keyCode","isKeyboardActive","isDeviceAvailable","altKey","ctrlKey","metaKey","shiftKey","NativeDeviceInputSystem","onDeviceConnected","onDeviceDisconnected","onInputChanged","_nativeInput","_native","DeviceInputSystem","CreateDeviceEvent","_createDummyNativeInput","MAX_POINTER_INPUTS","keys","WebDeviceInputSystem","_inputs","_keyboardActive","_pointerActive","_usingSafari","_usingMacOS","test","navigator","platform","_keyboardDownEvent","_keyboardUpEvent","_keyboardBlurEvent","_pointerMoveEvent","_pointerDownEvent","_pointerUpEvent","_pointerCancelEvent","_pointerWheelEvent","_pointerBlurEvent","_eventsAttached","_mouseId","_isUsingFirefox","userAgent","_maxTouchPoints","_pointerInputClearObserver","_gamepadConnectedEvent","_gamepadDisconnectedEvent","_eventPrefix","_engine","_onDeviceConnected","_onDeviceDisconnected","_onInputChanged","_enableEvents","_metaKeys","_onEngineViewChanged","device","_updateDevice","currentValue","_elementToAttachTo","_disableEvents","inputElement","getInputElement","deviceSlotKey","tabIndex","canvasTabIndex","_handleKeyActions","_handlePointerActions","_handleGamepadActions","_checkForConnectedDevices","removeEventListener","_wheelEventName","window","onEndFrameObservable","remove","getGamepads","gamepads","gamepad","_addGamePad","matchMedia","matches","_addPointerDevice","_getGamepadDeviceType","id","_gamepads","_registerDevice","buttons","axes","currentX","currentY","pointer","numberOfInputs","fill","_unregisterDevice","kbKey","deviceEvent","includes","addEventListener","maxTouchPoints","_activeTouchIds","_getPointerType","previousHorizontal","previousVertical","document","pointerLockElement","setPointerCapture","e","hasPointerCapture","releasePointerCapture","createElement","onmousewheel","passiveSupported","noop","options","defineProperty","get","wheelDelta","passive","gp","valueOf","deviceName","search","touches","InternalDeviceSourceManager","_registeredManagers","_refCount","registerManager","manager","_devices","_addDevice","unregisterManager","numberOfDeviceTypes","deviceSource","_removeDevice","eventData","DeviceSourceManager","_firstDevice","_deviceSourceManager","onDeviceConnectedObservable","observer","devices","notifyObserver","onDeviceDisconnectedObservable","_onDisposeObserver","onDisposeObservable","getDeviceSource","getDeviceSources","filter","_updateFirstDevices","DeviceInputEventType","EventConstants","DOM_DELTA_PIXEL","DOM_DELTA_LINE","DOM_DELTA_PAGE","KeyboardEventTypes","KEYDOWN","KEYUP","KeyboardInfo","event","KeyboardInfoPre","skipOnKeyboardObservable","skipOnPointerObservable","PointerEventTypes","POINTERDOWN","POINTERUP","POINTERMOVE","POINTERWHEEL","POINTERPICK","POINTERTAP","POINTERDOUBLETAP","PointerInfoBase","PointerInfoPre","localX","localY","originalPickingInfo","localPosition","PointerInfo","pickInfo","inputManager","_pickInfo","_inputManager","_generatePickInfo","_pickMove","_setRayOnPointerInfo","LightConstants","a","b","shadowEnabled","renderPriority","FALLOFF_DEFAULT","FALLOFF_PHYSICAL","FALLOFF_GLTF","FALLOFF_STANDARD","LIGHTMAP_DEFAULT","LIGHTMAP_SPECULAR","LIGHTMAP_SHADOWSONLY","INTENSITYMODE_AUTOMATIC","INTENSITYMODE_LUMINOUSPOWER","INTENSITYMODE_LUMINOUSINTENSITY","INTENSITYMODE_ILLUMINANCE","INTENSITYMODE_LUMINANCE","LIGHTTYPEID_POINTLIGHT","LIGHTTYPEID_DIRECTIONALLIGHT","LIGHTTYPEID_SPOTLIGHT","LIGHTTYPEID_HEMISPHERICLIGHT","SceneLoaderFlags","ForceFullSceneLoadingForIncremental","_ForceFullSceneLoadingForIncremental","ShowLoadingScreen","_ShowLoadingScreen","loggingLevel","_LoggingLevel","CleanBoneMatrixWeights","_CleanBoneMatrixWeights","ColorCurves","_dirty","_tempColor","_globalCurve","_highlightsCurve","_midtonesCurve","_shadowsCurve","_positiveCurve","_negativeCurve","_globalHue","_globalDensity","_globalSaturation","_globalExposure","_highlightsHue","_highlightsDensity","_highlightsSaturation","_highlightsExposure","_midtonesHue","_midtonesDensity","_midtonesSaturation","_midtonesExposure","_shadowsHue","_shadowsDensity","_shadowsSaturation","_shadowsExposure","globalHue","globalDensity","globalSaturation","globalExposure","highlightsHue","highlightsDensity","highlightsSaturation","highlightsExposure","midtonesHue","midtonesDensity","midtonesSaturation","midtonesExposure","shadowsHue","shadowsDensity","shadowsSaturation","shadowsExposure","colorCurves","effect","positiveUniform","neutralUniform","negativeUniform","_getColorGradingDataToRef","setFloat4","g","uniformsList","hue","density","saturation","exposure","_Clamp","_ApplyColorGradingSliderNonlinear","_FromHSBToRef","scaleToRef","pow","brightness","h","s","floor","f","q","EffectFallbacks","_defines","_currentRank","_maxRank","_mesh","unBindMesh","addFallback","rank","define","addCPUSkinningFallback","hasMoreFallbacks","reduce","currentDefines","computeBonesUsingShaders","numBoneInfluencers","replace","_bonesComputationForcedToCPU","meshes","otherMesh","material","getEffect","subMeshes","subMesh","currentFallbacks","ImageProcessingConfigurationDefines","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","DITHER","IMAGEPROCESSINGPOSTPROCESS","EXPOSURE","SKIPFINALCOLORCLAMP","rebuild","ImageProcessingConfiguration","_colorCurvesEnabled","_colorGradingEnabled","_colorGradingWithGreenDepth","_colorGradingBGR","_exposure","_toneMappingEnabled","_toneMappingType","TONEMAPPING_STANDARD","_contrast","vignetteStretch","vignetteCentreX","vignetteCentreY","vignetteWeight","vignetteColor","vignetteCameraFov","_vignetteBlendMode","VIGNETTEMODE_MULTIPLY","_vignetteEnabled","_ditheringEnabled","_ditheringIntensity","_skipFinalColorClamp","_applyByPostProcess","_isEnabled","onUpdateParameters","colorCurvesEnabled","_updateParameters","colorGradingTexture","_colorGradingTexture","colorGradingEnabled","colorGradingWithGreenDepth","colorGradingBGR","toneMappingEnabled","toneMappingType","contrast","vignetteBlendMode","vignetteEnabled","ditheringEnabled","ditheringIntensity","skipFinalColorClamp","applyByPostProcess","uniforms","defines","samplersList","prepareDefines","forPostProcess","_VIGNETTEMODE_MULTIPLY","is3D","bind","overrideAspectRatio","inverseWidth","inverseHeight","setFloat2","setFloat","vignetteScaleY","vignetteScaleX","vignetteScaleGeometricMean","sqrt","vignettePower","setTexture","textureSize","getSize","height","level","VIGNETTEMODE_OPAQUE","_VIGNETTEMODE_OPAQUE","MaterialDetailMapDefines","DETAIL","DETAILDIRECTUV","DETAIL_NORMALBLENDMETHOD","DetailMapConfiguration","addToPluginList","_texture","diffuseBlendLevel","roughnessBlendLevel","bumpLevel","_normalBlendMethod","_internalMarkAllSubMeshesAsTexturesDirty","_dirtyCallbacks","_markAllSubMeshesAsTexturesDirty","_enable","isReadyForSubMesh","_areTexturesDirty","texturesEnabled","getCaps","standardDerivatives","bindForSubMesh","uniformBuffer","isFrozen","_material","useUbo","isSync","updateFloat4","coordinatesIndex","hasTexture","texture","getActiveTextures","activeTextures","getAnimatables","animatables","forceDisposeTextures","getSamplers","samplers","getUniforms","ubo","size","MaterialStencilState","reset","enabled","mask","func","funcRef","funcMask","opStencilFail","opDepthFail","opStencilDepthPass","_func","_funcRef","_funcMask","_opStencilFail","_opDepthFail","_opStencilDepthPass","_mask","_enabled","copyTo","stencilState","rootUrl","Material","doNotAdd","shadowDepthWrapper","allowShaderHotSwapping","metadata","reservedDataStore","checkReadyOnEveryCall","checkReadyOnlyOnce","state","_alpha","_backFaceCulling","_cullBackFaces","_blockDirtyMechanism","onCompiled","onError","getRenderTargetTextures","doNotSerialize","_storeEffectOnSubMeshes","_onUnBindObservable","_onBindObserver","_alphaMode","_needDepthPrePass","disableDepthWrite","disableColorWrite","forceDepthWrite","depthFunction","separateCullingPass","_fogEnabled","pointSize","zOffset","zOffsetUnits","stencil","_useUBO","_fillMode","TriangleFillMode","_cachedDepthWriteState","_cachedColorWriteState","_cachedDepthFunctionState","_indexInSceneMaterialArray","meshMap","_uniformBufferLayoutBuilt","_eventInfo","_callbackPluginEventGeneric","_callbackPluginEventIsReadyForSubMesh","_callbackPluginEventPrepareDefines","_callbackPluginEventPrepareDefinesBeforeAttributes","_callbackPluginEventHardBindForSubMesh","_callbackPluginEventBindForSubMesh","_callbackPluginEventHasRenderTargetTextures","_callbackPluginEventFillRenderTargetTextures","_forceAlphaTest","_transparencyMode","setScene","getUniqueId","_materialContext","createMaterialContext","_drawWrapper","materialContext","sideOrientation","ClockWiseSideOrientation","CounterClockWiseSideOrientation","_uniformBuffer","supportsUniformBuffers","addMaterial","useMaterialMeshMap","OnEventObservable","canRenderToMRT","alpha","oldValue","MiscDirtyFlag","backFaceCulling","TextureDirtyFlag","cullBackFaces","blockDirtyMechanism","markDirty","atomicMaterialsUpdate","callback","hasRenderTargetTextures","onDispose","onBindObservable","_onBindObservable","onBind","onUnBindObservable","onEffectCreatedObservable","_onEffectCreatedObservable","alphaMode","needDepthPrePass","isPrePassCapable","fogEnabled","wireframe","WireFrameFillMode","LineListDrawMode","LineLoopDrawMode","LineStripDrawMode","forceWireframe","fillMode","pointsCloud","PointFillMode","PointListDrawMode","forcePointsCloud","_getDrawWrapper","_setDrawWrapper","drawWrapper","freeze","unfreeze","useInstances","materialDefines","transparencyMode","MATERIAL_ALPHATESTANDBLEND","_markAllSubMeshesAsTexturesAndMiscDirty","_disableAlphaBlending","MATERIAL_OPAQUE","MATERIAL_ALPHATEST","needAlphaBlending","needAlphaBlendingForMesh","visibility","hasVertexAlpha","needAlphaTesting","_shouldTurnAlphaTestOn","getAlphaTestTexture","getMaterial","_wasPreviouslyReady","_wasPreviouslyUsingInstances","_preBind","overrideOrientation","reverse","enableEffect","setState","buildUniformLayout","create","bindOnlyWorldMatrix","bindView","_needToBindSceneUbo","setMatrix","bindViewProjection","getTransformMatrix","bindEyePosition","variableName","_afterBind","_cachedMaterial","getSceneUniformBuffer","finalizeSceneUbo","_cachedVisibility","getDepthWrite","setDepthWrite","getColorWrite","setColorWrite","getDepthFunction","setDepthFunction","unbind","getBindedMeshes","meshId","forceCompilation","localOptions","clipPlane","currentHotSwapingState","checkReady","clipPlaneState","allDone","lastError","tempSubMesh","_renderId","getCompilationError","allFallbacksProcessed","setTimeout","forceCompilationAsync","Promise","resolve","reject","reason","flag","blockMaterialDirtyMechanism","_DirtyCallbackArray","_TextureDirtyCallBack","LightDirtyFlag","_LightsDirtyCallBack","FresnelDirtyFlag","_FresnelDirtyCallBack","AttributesDirtyFlag","_AttributeDirtyCallBack","_MiscDirtyCallBack","PrePassDirtyFlag","_PrePassDirtyCallBack","_markAllSubMeshesAsDirty","_RunDirtyCallBacks","resetCachedMaterial","resetDrawCache","_drawWrappers","markAllAsDirty","_markScenePrePassDirty","enablePrePassRenderer","_markAllSubMeshesAsAllDirty","_AllDirtyCallBack","_markAllSubMeshesAsImageProcessingDirty","_ImageProcessingDirtyCallBack","_markAllSubMeshesAsFresnelDirty","_markAllSubMeshesAsFresnelAndMiscDirty","_FresnelAndMiscDirtyCallBack","_markAllSubMeshesAsLightsDirty","_markAllSubMeshesAsAttributesDirty","_markAllSubMeshesAsMiscDirty","_markAllSubMeshesAsPrePassDirty","_TextureAndMiscDirtyCallBack","setPrePassRenderer","forceDisposeEffect","notBoundToMesh","freeProcessedMaterials","removeMaterial","materials","releaseVertexArrayObject","sourceMesh","geometry","_releaseVertexArrayObject","parsedMaterial","customType","overloadedAlbedo","BABYLON","LegacyPBRMaterial","_loadedUniqueId","TriangleStripDrawMode","TriangleFanDrawMode","AllDirtyFlag","MATERIAL_ALPHABLEND","MATERIAL_NORMALBLENDMETHOD_WHITEOUT","MATERIAL_NORMALBLENDMETHOD_RNM","markAsImageProcessingDirty","markAsTexturesDirty","markAsFresnelDirty","markAsMiscDirty","markAsPrePassDirty","markAsLightDirty","markAsAttributesDirty","cb","MaterialDefines","externalProperties","_keys","_isDirty","_areLightsDirty","_areLightsDisposed","_areAttributesDirty","_areFresnelDirty","_areMiscDirty","_arePrePassDirty","_areImageProcessingDirty","_normals","_uvs","_needNormals","_needUVs","_externalProperties","prop","_setDefaultValue","isDirty","markAsProcessed","markAsUnprocessed","disposed","isEqual","other","cloneTo","defValue","default","MaterialFlags","DiffuseTextureEnabled","_DiffuseTextureEnabled","DetailTextureEnabled","_DetailTextureEnabled","AmbientTextureEnabled","_AmbientTextureEnabled","OpacityTextureEnabled","_OpacityTextureEnabled","ReflectionTextureEnabled","_ReflectionTextureEnabled","EmissiveTextureEnabled","_EmissiveTextureEnabled","SpecularTextureEnabled","_SpecularTextureEnabled","BumpTextureEnabled","_BumpTextureEnabled","LightmapTextureEnabled","_LightmapTextureEnabled","RefractionTextureEnabled","_RefractionTextureEnabled","ColorGradingTextureEnabled","_ColorGradingTextureEnabled","FresnelEnabled","_FresnelEnabled","ClearCoatTextureEnabled","_ClearCoatTextureEnabled","ClearCoatBumpTextureEnabled","_ClearCoatBumpTextureEnabled","ClearCoatTintTextureEnabled","_ClearCoatTintTextureEnabled","SheenTextureEnabled","_SheenTextureEnabled","AnisotropicTextureEnabled","_AnisotropicTextureEnabled","ThicknessTextureEnabled","_ThicknessTextureEnabled","RefractionIntensityTextureEnabled","_RefractionIntensityTextureEnabled","TranslucencyIntensityTextureEnabled","_TranslucencyIntensityTextureEnabled","IridescenceTextureEnabled","_IridescenceTextureEnabled","MaterialHelper","sceneUbo","bindToEffect","optimizeUVAllocation","getTextureMatrix","isIdentityAs3x2","updateMatrix","applyFog","fogMode","useLogarithmicDepth","alphaTest","GetFogState","useClipPlane","useThinInstances","changed","useClipPlane1","useClipPlane2","useClipPlane3","useClipPlane4","useClipPlane5","useClipPlane6","clipPlane2","clipPlane3","clipPlane4","clipPlane5","clipPlane6","useBones","skeleton","materialSupportsBoneTexture","isUsingTextureForMatrices","bones","nonExcluded","excludedSkinnedMesh","morphTargetManager","supportsUVs","supportsTangents","supportsNormals","numInfluencers","isUsingTextureForTargets","bakedVertexAnimationManager","useVertexColor","useMorphTargets","useVertexAlpha","useBakedVertexAnimation","hasVertexColors","useVertexColors","hasInstances","hasThinInstances","PrepareDefinesForBones","PrepareDefinesForMorphTargets","PrepareDefinesForBakedVertexAnimation","previousMultiview","MULTIVIEW","getViewCount","previousDefine","ORDER_INDEPENDENT_TRANSPARENCY","previousDefine16Bits","ORDER_INDEPENDENT_TRANSPARENCY_16BITS","useOrderIndependentTransparency","textureFloatLinearFiltering","previousPrePass","PREPASS","texturesList","SCENE_MRT_COUNT","mrtCount","getIndex","light","lightIndex","specularSupported","needNormals","needRebuild","prepareLightSpecificDefines","falloffType","specular","equalsFloats","specularEnabled","receiveShadows","shadowsEnabled","shadowGenerator","getShadowGenerator","shadowMap","getShadowMap","renderList","lightmapMode","maxSimultaneousLights","disableLighting","lightsEnabled","lightSources","PrepareDefinesForLight","caps","textureFloatRender","textureHalfFloatRender","textureHalfFloatLinearFiltering","projectedLightTexture","uniformBuffersList","updateOnlyBuffersList","uniformsListOrOptions","uniformsNames","uniformBuffersNames","PrepareUniformsAndSamplersForLight","fallbacks","lightFallbackRank","attribs","influencers","_TmpMorphInfluencers","NUM_MORPH_INFLUENCERS","PrepareAttributesForMorphTargets","maxAttributesCount","maxVertexAttribs","normal","tangent","uv","PushAttributesForInstances","INSTANCESCOLOR","needsPreviousMatrices","transferToEffect","useSpecular","_bindLight","BindLight","linearSpace","fogStart","fogEnd","fogDensity","fogColor","toLinearSpaceToRef","_TempFogColor","setColor3","prePassConfiguration","getUniformIndex","boneTexture","getTransformMatrixTexture","matrices","getTransformMatrices","setMatrices","previousBones","_CopyBonesTransformationMatrices","set","abstractMesh","setFloatArray","influences","log","LN2","MaterialPluginBase","priority","enable","registerForExtraEvents","pluginManager","_pluginDefineNames","_pluginManager","_addPlugin","markAllDefinesAsDirty","_activatePlugin","hardBindForSubMesh","getCustomCode","shaderType","collectDefines","prepareDefinesBeforeAttributes","fillRenderTargetTextures","renderTargets","addFallbacks","currentRank","getAttributes","attributes","getUniformBuffersNames","ubos","plugin","MaterialPluginEvent","MaterialPluginManager","_plugins","_activePlugins","_activePluginsForExtraEvents","pluginClassName","_MaterialPluginClassToMainDefine","_MaterialPluginCounter","_handlePluginEvent","sort","_codeInjectionPoints","defineNamesFromPlugins","_collectPointNames","_defineNamesFromPlugins","_handlePluginEventIsReadyForSubMesh","_handlePluginEventPrepareDefinesBeforeAttributes","_handlePluginEventPrepareDefines","_handlePluginEventBindForSubMesh","_handlePluginEventHasRenderTargetTextures","_handlePluginEventFillRenderTargetTextures","_handlePluginEventHardBindForSubMesh","getPlugin","info","defineNames","fallbackRank","_uniformList","_samplerList","_uboList","customCode","_injectCustomCode","_uboDeclaration","_vertexDeclaration","_fragmentDeclaration","uniform","addUniform","vertex","fragment","pointName","existingCallback","code","points","injectedCode","charAt","rx","RegExp","substring","match","exec","newCode","fullPointName","plugins","inited","RegisterMaterialPlugin","pluginName","factory","existing","_factory","UnregisterMaterialPlugin","UnregisterAllMaterialPlugins","MultiMaterial","_waitingSubMaterialsUniqueIds","multiMaterials","subMaterials","_subMaterials","_hookArray","getChildren","array","oldPush","items","apply","oldSplice","deleteCount","deleted","getSubMaterial","defaultMaterial","map","subMaterial","cloneChildren","newMultiMaterial","current","tags","materialsUniqueIds","matIndex","subMat","forceDisposeChildren","parsedMultiMaterial","multiMaterial","subMatId","getLastMaterialById","PrePassConfiguration","previousWorldMatrices","currentRTisSceneRT","previousViewProjection","currentViewProjection","updateFlag","_lastUpdateFrameId","frameId","PushMaterial","storeEffectOnSubMeshes","_normalMatrix","_activeEffect","_isReadyForSubMesh","bindOnlyNormalMatrix","normalMatrix","_cachedEffect","_mustRebind","isCachedMaterialInvalid","Float32Array","_instanceDataStorage"],"sourceRoot":""}