{"version":3,"file":"js/967.babylonBundle.js","mappings":"uQAAA,QAAe,IAA0B,uCCAzC,EAAe,IAA0B,uCCqBlC,MAAMA,EAAb,cACI,KAAAC,YAAcC,MACVC,EACAC,KAGA,MAAMC,EAAQ,IAAI,IAAMF,GAGlBG,EAAS,IAAI,IACf,kBACA,EACAC,KAAKC,GAAK,EACV,GACA,IAAI,IAAQ,EAAG,EAAG,GAClBH,GA0CJ,OAtCAC,EAAOG,UAAU,YAGjBH,EAAOI,cAAcN,GAAQ,GAE7BE,EAAOK,oBAAqB,EAG5BN,EAAMO,mBAAqB,IAAI,IAAYC,EAAiBR,GAG5D,IAAI,IAAmB,CACnBS,cAAeD,EACfE,cAAc,GACfV,GAGW,IAAI,IACd,QACA,IAAI,IAAQ,EAAG,EAAG,GAClBA,GAIEW,UAAY,UAES,oBACvB,GACA,GACA,EACAX,OACAY,EACA,SAISC,OAAO,GAAGC,QAAQC,aAAa,IAErCf,CAAK,CAEpB,EAEA,YAAmBL,C","sources":["webpack://pro-racer/./assets/glb/samsung-controller.glb","webpack://pro-racer/./assets/environment/room.env","webpack://pro-racer/./src/scenes/loadModelAndEnv.ts"],"sourcesContent":["export default __webpack_public_path__ + \"4bf4f35110efeb71a363c4d654c5c13f.glb\";","export default __webpack_public_path__ + \"fa8d79b17b6be7285a4edd38e874fd1f.env\";","import { Engine } from \"@babylonjs/core/Engines/engine\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\nimport { CreateSceneClass } from \"../createScene\";\r\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader\";\r\nimport { CubeTexture } from \"@babylonjs/core/Materials/Textures/cubeTexture\";\r\nimport { EnvironmentHelper } from \"@babylonjs/core/Helpers/environmentHelper\";\r\n\r\n// required imports\r\nimport \"@babylonjs/core/Loading/loadingScreen\";\r\nimport \"@babylonjs/loaders/glTF\";\r\nimport \"@babylonjs/core/Materials/standardMaterial\";\r\nimport \"@babylonjs/core/Materials/Textures/Loaders/envTextureLoader\";\r\n\r\n\r\n// digital assets\r\nimport controllerModel from \"../../assets/glb/samsung-controller.glb\";\r\nimport roomEnvironment from \"../../assets/environment/room.env\"\r\n\r\nexport class LoadModelAndEnvScene implements CreateSceneClass {\r\n    createScene = async (\r\n        engine: Engine,\r\n        canvas: HTMLCanvasElement\r\n    ): Promise<Scene> => {\r\n        // This creates a basic Babylon Scene object (non-mesh)\r\n        const scene = new Scene(engine);\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        const camera = new ArcRotateCamera(\r\n            \"my first camera\",\r\n            0,\r\n            Math.PI / 3,\r\n            10,\r\n            new Vector3(0, 0, 0),\r\n            scene\r\n        );\r\n\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(Vector3.Zero());\r\n\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, true);\r\n\r\n        camera.useFramingBehavior = true;\r\n\r\n        // load the environment file\r\n        scene.environmentTexture = new CubeTexture(roomEnvironment, scene);\r\n\r\n        // if not setting the envtext of the scene, we have to load the DDS module as well\r\n        new EnvironmentHelper( {\r\n            skyboxTexture: roomEnvironment,\r\n            createGround: false\r\n        }, scene)\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        const light = new HemisphericLight(\r\n            \"light\",\r\n            new Vector3(0, 1, 0),\r\n            scene\r\n        );\r\n\r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        light.intensity = 0.7;\r\n\r\n        const importResult = await SceneLoader.ImportMeshAsync(\r\n            \"\",\r\n            \"\",\r\n            controllerModel,\r\n            scene,\r\n            undefined,\r\n            \".glb\"\r\n        );\r\n\r\n        // just scale it so we can see it better\r\n        importResult.meshes[0].scaling.scaleInPlace(10);\r\n\r\n        return scene;\r\n    };\r\n}\r\n\r\nexport default new LoadModelAndEnvScene();\r\n"],"names":["LoadModelAndEnvScene","createScene","async","engine","canvas","scene","camera","Math","PI","setTarget","attachControl","useFramingBehavior","environmentTexture","room","skyboxTexture","createGround","intensity","undefined","meshes","scaling","scaleInPlace"],"sourceRoot":""}