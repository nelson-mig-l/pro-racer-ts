{"version":3,"file":"js/967.babylonBundle.js","mappings":"uQAAA,QAAe,IAA0B,uCCAzC,EAAe,IAA0B,uCCqBlC,MAAMA,EAAb,cACI,KAAAC,YAAcC,MACVC,EACAC,KAGA,MAAMC,EAAQ,IAAI,IAAMF,GAGlBG,EAAS,IAAI,IACf,kBACA,EACAC,KAAKC,GAAK,EACV,GACA,IAAI,IAAQ,EAAG,EAAG,GAClBH,GA0CJ,OAtCAC,EAAOG,UAAU,YAGjBH,EAAOI,cAAcN,GAAQ,GAE7BE,EAAOK,oBAAqB,EAG5BN,EAAMO,mBAAqB,IAAI,IAAYC,EAAiBR,GAG5D,IAAI,IAAmB,CACnBS,cAAeD,EACfE,cAAc,GACfV,GAGW,IAAI,IACd,QACA,IAAI,IAAQ,EAAG,EAAG,GAClBA,GAIEW,UAAY,UAES,oBACvB,GACA,GACA,EACAX,OACAY,EACA,SAISC,OAAO,GAAGC,QAAQC,aAAa,IAErCf,CAAK,CAEpB,EAEA,YAAmBL,C","sources":["webpack://pro-racer/./assets/glb/samsung-controller.glb","webpack://pro-racer/./assets/environment/room.env","webpack://pro-racer/./src/scenes/loadModelAndEnv.ts"],"sourcesContent":["export default __webpack_public_path__ + \"4bf4f35110efeb71a363c4d654c5c13f.glb\";","export default __webpack_public_path__ + \"fa8d79b17b6be7285a4edd38e874fd1f.env\";","import { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\nimport { CreateSceneClass } from \"../createScene\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader\";\nimport { CubeTexture } from \"@babylonjs/core/Materials/Textures/cubeTexture\";\nimport { EnvironmentHelper } from \"@babylonjs/core/Helpers/environmentHelper\";\n\n// required imports\nimport \"@babylonjs/core/Loading/loadingScreen\";\nimport \"@babylonjs/loaders/glTF\";\nimport \"@babylonjs/core/Materials/standardMaterial\";\nimport \"@babylonjs/core/Materials/Textures/Loaders/envTextureLoader\";\n\n\n// digital assets\nimport controllerModel from \"../../assets/glb/samsung-controller.glb\";\nimport roomEnvironment from \"../../assets/environment/room.env\"\n\nexport class LoadModelAndEnvScene implements CreateSceneClass {\n    createScene = async (\n        engine: Engine,\n        canvas: HTMLCanvasElement\n    ): Promise<Scene> => {\n        // This creates a basic Babylon Scene object (non-mesh)\n        const scene = new Scene(engine);\n\n        // This creates and positions a free camera (non-mesh)\n        const camera = new ArcRotateCamera(\n            \"my first camera\",\n            0,\n            Math.PI / 3,\n            10,\n            new Vector3(0, 0, 0),\n            scene\n        );\n\n        // This targets the camera to scene origin\n        camera.setTarget(Vector3.Zero());\n\n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, true);\n\n        camera.useFramingBehavior = true;\n\n        // load the environment file\n        scene.environmentTexture = new CubeTexture(roomEnvironment, scene);\n\n        // if not setting the envtext of the scene, we have to load the DDS module as well\n        new EnvironmentHelper( {\n            skyboxTexture: roomEnvironment,\n            createGround: false\n        }, scene)\n\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new HemisphericLight(\n            \"light\",\n            new Vector3(0, 1, 0),\n            scene\n        );\n\n        // Default intensity is 1. Let's dim the light a small amount\n        light.intensity = 0.7;\n\n        const importResult = await SceneLoader.ImportMeshAsync(\n            \"\",\n            \"\",\n            controllerModel,\n            scene,\n            undefined,\n            \".glb\"\n        );\n\n        // just scale it so we can see it better\n        importResult.meshes[0].scaling.scaleInPlace(10);\n\n        return scene;\n    };\n}\n\nexport default new LoadModelAndEnvScene();\n"],"names":["LoadModelAndEnvScene","createScene","async","engine","canvas","scene","camera","Math","PI","setTarget","attachControl","useFramingBehavior","environmentTexture","room","skyboxTexture","createGround","intensity","undefined","meshes","scaling","scaleInPlace"],"sourceRoot":""}