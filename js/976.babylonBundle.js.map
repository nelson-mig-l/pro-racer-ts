{"version":3,"file":"js/976.babylonBundle.js","mappings":"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","sources":["webpack://pro-racer/./src/scenes/car.ts"],"sourcesContent":["import { Mesh, StandardMaterial } from \"@babylonjs/core\";\nimport { FollowCamera } from \"@babylonjs/core/Cameras/followCamera\";\nimport { Color3, Quaternion, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { Scene } from \"@babylonjs/core/scene\";\n\nexport class Car {\n    ZERO_QUATERNION = new Quaternion(); \n\n    FRONT_LEFT = 0;\n    FRONT_RIGHT = 1;\n    BACK_LEFT = 2;\n    BACK_RIGHT = 3;\n\n    chassisWidth = 1.8;\n    chassisHeight = .6;\n    chassisLength = 4;\n    massVehicle = 200;\n\n\n    wheelAxisPositionBack = -1;\n    wheelRadiusBack = .4;\n    wheelWidthBack = .3;\n    wheelHalfTrackBack = 1;\n    wheelAxisHeightBack = 0.4;\n    \n    wheelAxisFrontPosition = 1.0;\n    wheelHalfTrackFront = 1;\n    wheelAxisHeightFront = 0.4;\n    wheelRadiusFront = .4;\n    wheelWidthFront = .3;\n\n    friction = 5;\n    suspension = {\n        stiffness: 10,\n        damping: 0.3,\n        compression: 4.4,\n        restLength: 0.6\n    }\n    rollInfluence = 0.0;\n\n    wheelDirectionCS0: number | undefined;\n    wheelAxleCS: number | undefined;\n\n    steeringIncrement = .01;\n    steeringClamp = 0.2;\n    maxEngineForce = 500;\n    maxBreakingForce = 10;\n    incEngine = 10.0;\n\n    vehicleSteering = 0;\n    engineForce = 0;  \n    breakingForce = 0;\n\n    private scene : Scene;\n\n    greenMaterial: StandardMaterial;\n    blackMaterial: StandardMaterial;\n\n    \n    tuning: any;\n    vehicle: any;\n    wheelMeshes: Mesh[] = [];\n    chassisMesh: Mesh;\n\n\n    vehicleReady = false;\n\n    constructor(pos: Vector3, scene: Scene, ammoModule: any) {\n        this.greenMaterial = new StandardMaterial(\"GreenMaterial\", scene);\n        this.greenMaterial.diffuseColor = new Color3(0.5,0.8,0.5);\n        this.greenMaterial.emissiveColor = new Color3(0.5,0.8,0.5);\n    \n        this.blackMaterial = new StandardMaterial(\"BlackMaterial\", scene);\n        this.blackMaterial.diffuseColor = new Color3(0.1,0.1,0.1);\n        this.blackMaterial.emissiveColor = new Color3(0.1,0.1,0.1);\n\n        this.scene = scene;\n        //Going Native\n        const physicsWorld = scene.getPhysicsEngine()?.getPhysicsPlugin().world;\n\n        this.wheelDirectionCS0 = new ammoModule.btVector3(0, -1, 0);\n        this.wheelAxleCS = new ammoModule.btVector3(-1, 0, 0);\n\n        const geometry = new ammoModule.btBoxShape(new ammoModule.btVector3(\n            this.chassisWidth * .5, \n            this.chassisHeight * .5, \n            this.chassisLength * .5));\n        const transform = new ammoModule.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new ammoModule.btVector3(0,5,0));\n        transform.setRotation(new ammoModule.btQuaternion(\n            this.ZERO_QUATERNION.x, \n            this.ZERO_QUATERNION.y, \n            this.ZERO_QUATERNION.z, \n            this.ZERO_QUATERNION.w));\n        const motionState = new ammoModule.btDefaultMotionState(transform);\n        const localInertia = new ammoModule.btVector3(0, 0, 0);\n        geometry.calculateLocalInertia(this.massVehicle, localInertia);\n\n\n        this.chassisMesh = this.createChassisMesh(this.chassisWidth, this.chassisHeight, this.chassisLength);\n\n\n        const massOffset = new ammoModule.btVector3( 0, 0.4, 0);\n        const transform2 = new ammoModule.btTransform();\n        transform2.setIdentity();\n        transform2.setOrigin(massOffset);\n        const compound = new ammoModule.btCompoundShape();\n        compound.addChildShape( transform2, geometry );\n\n        const body = new ammoModule.btRigidBody(new ammoModule.btRigidBodyConstructionInfo(this.massVehicle, motionState, compound, localInertia));\n        body.setActivationState(4);\n\t\t\n        physicsWorld.addRigidBody(body);\n\n\n        this.tuning = new ammoModule.btVehicleTuning();\n        const rayCaster = new ammoModule.btDefaultVehicleRaycaster(physicsWorld);\n        this.vehicle = new ammoModule.btRaycastVehicle(this.tuning, body, rayCaster);\n        this.vehicle.setCoordinateSystem(0, 1, 2);\n        physicsWorld.addAction(this.vehicle);\n\t\t\n        const trans = this.vehicle.getChassisWorldTransform();\n\n        this.addWheel(true, \n            new ammoModule.btVector3(this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition), \n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_LEFT);\n        this.addWheel(true, \n            new ammoModule.btVector3(-this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition), \n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_RIGHT);\n        this.addWheel(false, \n            new ammoModule.btVector3(-this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack), \n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_LEFT);\n        this.addWheel(false, \n            new ammoModule.btVector3(this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack), \n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_RIGHT);\n    \n        this.vehicleReady = true;\n    }\n\n    private createChassisMesh(w: number, l: number, h: number) : Mesh {\n        const mesh = MeshBuilder.CreateBox(\"box\", {width:w, depth:h, height:l}, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.greenMaterial;\n    \n        const camera = new FollowCamera(\"FollowCam\", new Vector3(0, 10, -10), this.scene);\n        camera.radius = 10;\n        camera.heightOffset = 4;\n        camera.rotationOffset = 0;\n        camera.cameraAcceleration = 0.05;\n        camera.maxCameraSpeed = 400;\n        camera.attachControl(true);//camera.attachControl(canvas, true);\n        camera.lockedTarget = mesh; //version 2.5 onwards\n        this.scene.activeCamera = camera;\n    \n        return mesh;\n    }\n\n    private addWheel(isFront: boolean, pos: Vector3, radius: number, width: number, index: number) {\n\t\t\t\n        const wheelInfo = this.vehicle.addWheel(\n            pos,\n            this.wheelDirectionCS0,\n            this.wheelAxleCS,\n            this.suspension.restLength,\n            radius,\n            this.tuning,\n            isFront);\n\n        wheelInfo.set_m_suspensionStiffness(this.suspension.stiffness);\n        wheelInfo.set_m_wheelsDampingRelaxation(this.suspension.damping);\n        wheelInfo.set_m_wheelsDampingCompression(this.suspension.compression);\n        wheelInfo.set_m_maxSuspensionForce(600000);\n        wheelInfo.set_m_frictionSlip(40);\n        wheelInfo.set_m_rollInfluence(this.rollInfluence);\n\n        this.wheelMeshes[index] = this.createWheelMesh(radius, width);\n    }\n\n    private createWheelMesh(radius: number, width: number) {\n        const mesh = MeshBuilder.CreateCylinder(\"Wheel\", {\n            diameter:radius*2, height:width, tessellation: 6\n        }, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.blackMaterial;\n        return mesh;\n    }\n}"],"names":["Car","constructor","pos","scene","ammoModule","ZERO_QUATERNION","FRONT_LEFT","FRONT_RIGHT","BACK_LEFT","BACK_RIGHT","chassisWidth","chassisHeight","chassisLength","massVehicle","wheelAxisPositionBack","wheelRadiusBack","wheelWidthBack","wheelHalfTrackBack","wheelAxisHeightBack","wheelAxisFrontPosition","wheelHalfTrackFront","wheelAxisHeightFront","wheelRadiusFront","wheelWidthFront","friction","suspension","stiffness","damping","compression","restLength","rollInfluence","steeringIncrement","steeringClamp","maxEngineForce","maxBreakingForce","incEngine","vehicleSteering","engineForce","breakingForce","wheelMeshes","vehicleReady","this","greenMaterial","StandardMaterial","diffuseColor","emissiveColor","blackMaterial","physicsWorld","getPhysicsEngine","getPhysicsPlugin","world","wheelDirectionCS0","btVector3","wheelAxleCS","geometry","btBoxShape","transform","btTransform","setIdentity","setOrigin","setRotation","btQuaternion","x","y","z","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","chassisMesh","createChassisMesh","massOffset","transform2","compound","btCompoundShape","addChildShape","body","btRigidBody","btRigidBodyConstructionInfo","setActivationState","addRigidBody","tuning","btVehicleTuning","rayCaster","btDefaultVehicleRaycaster","vehicle","btRaycastVehicle","setCoordinateSystem","addAction","getChassisWorldTransform","addWheel","l","h","mesh","width","depth","height","rotationQuaternion","material","camera","radius","heightOffset","rotationOffset","cameraAcceleration","maxCameraSpeed","attachControl","lockedTarget","activeCamera","isFront","index","wheelInfo","set_m_suspensionStiffness","set_m_wheelsDampingRelaxation","set_m_wheelsDampingCompression","set_m_maxSuspensionForce","set_m_frictionSlip","set_m_rollInfluence","createWheelMesh","diameter","tessellation"],"sourceRoot":""}