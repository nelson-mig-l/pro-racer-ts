{"version":3,"file":"js/976.babylonBundle.js","mappings":"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","sources":["webpack://pro-racer/./src/scenes/car.ts"],"sourcesContent":["import { Mesh, StandardMaterial } from \"@babylonjs/core\";\r\nimport { FollowCamera } from \"@babylonjs/core/Cameras/followCamera\";\r\nimport { Color3, Quaternion, Vector3 } from \"@babylonjs/core/Maths/math\";\r\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nexport class Car {\r\n    ZERO_QUATERNION = new Quaternion(); \r\n\r\n    FRONT_LEFT = 0;\r\n    FRONT_RIGHT = 1;\r\n    BACK_LEFT = 2;\r\n    BACK_RIGHT = 3;\r\n\r\n    chassisWidth = 1.8;\r\n    chassisHeight = .6;\r\n    chassisLength = 4;\r\n    massVehicle = 200;\r\n\r\n\r\n    wheelAxisPositionBack = -1;\r\n    wheelRadiusBack = .4;\r\n    wheelWidthBack = .3;\r\n    wheelHalfTrackBack = 1;\r\n    wheelAxisHeightBack = 0.4;\r\n    \r\n    wheelAxisFrontPosition = 1.0;\r\n    wheelHalfTrackFront = 1;\r\n    wheelAxisHeightFront = 0.4;\r\n    wheelRadiusFront = .4;\r\n    wheelWidthFront = .3;\r\n\r\n    friction = 5;\r\n    suspensionStiffness = 10;\r\n    suspensionDamping = 0.3;\r\n    suspensionCompression = 4.4;\r\n    suspensionRestLength = 0.6;\r\n    rollInfluence = 0.0;\r\n\r\n    wheelDirectionCS0: number | undefined;\r\n    wheelAxleCS: number | undefined;\r\n\r\n    steeringIncrement = .01;\r\n    steeringClamp = 0.2;\r\n    maxEngineForce = 500;\r\n    maxBreakingForce = 10;\r\n    incEngine = 10.0;\r\n\r\n    vehicleSteering = 0;\r\n    engineForce = 0;  \r\n    breakingForce = 0;\r\n\r\n    private scene : Scene;\r\n\r\n    greenMaterial: StandardMaterial;\r\n    blackMaterial: StandardMaterial;\r\n\r\n    \r\n    tuning: any;\r\n    vehicle: any;\r\n    wheelMeshes: Mesh[] = [];\r\n    chassisMesh: Mesh;\r\n\r\n\r\n    vehicleReady = false;\r\n\r\n    constructor(pos: Vector3, scene: Scene, ammoModule: any) {\r\n        this.greenMaterial = new StandardMaterial(\"GreenMaterial\", scene);\r\n        this.greenMaterial.diffuseColor = new Color3(0.5,0.8,0.5);\r\n        this.greenMaterial.emissiveColor = new Color3(0.5,0.8,0.5);\r\n    \r\n        this.blackMaterial = new StandardMaterial(\"BlackMaterial\", scene);\r\n        this.blackMaterial.diffuseColor = new Color3(0.1,0.1,0.1);\r\n        this.blackMaterial.emissiveColor = new Color3(0.1,0.1,0.1);\r\n\r\n        this.scene = scene;\r\n        //Going Native\r\n        const physicsWorld = scene.getPhysicsEngine()?.getPhysicsPlugin().world;\r\n\r\n        this.wheelDirectionCS0 = new ammoModule.btVector3(0, -1, 0);\r\n        this.wheelAxleCS = new ammoModule.btVector3(-1, 0, 0);\r\n\r\n        const geometry = new ammoModule.btBoxShape(new ammoModule.btVector3(\r\n            this.chassisWidth * .5, \r\n            this.chassisHeight * .5, \r\n            this.chassisLength * .5));\r\n        const transform = new ammoModule.btTransform();\r\n        transform.setIdentity();\r\n        transform.setOrigin(new ammoModule.btVector3(0,5,0));\r\n        transform.setRotation(new ammoModule.btQuaternion(\r\n            this.ZERO_QUATERNION.x, \r\n            this.ZERO_QUATERNION.y, \r\n            this.ZERO_QUATERNION.z, \r\n            this.ZERO_QUATERNION.w));\r\n        const motionState = new ammoModule.btDefaultMotionState(transform);\r\n        const localInertia = new ammoModule.btVector3(0, 0, 0);\r\n        geometry.calculateLocalInertia(this.massVehicle, localInertia);\r\n\r\n\r\n        this.chassisMesh = this.createChassisMesh(this.chassisWidth, this.chassisHeight, this.chassisLength);\r\n\r\n\r\n        const massOffset = new ammoModule.btVector3( 0, 0.4, 0);\r\n        const transform2 = new ammoModule.btTransform();\r\n        transform2.setIdentity();\r\n        transform2.setOrigin(massOffset);\r\n        const compound = new ammoModule.btCompoundShape();\r\n        compound.addChildShape( transform2, geometry );\r\n\r\n        const body = new ammoModule.btRigidBody(new ammoModule.btRigidBodyConstructionInfo(this.massVehicle, motionState, compound, localInertia));\r\n        body.setActivationState(4);\r\n\t\t\r\n        physicsWorld.addRigidBody(body);\r\n\r\n\r\n        this.tuning = new ammoModule.btVehicleTuning();\r\n        const rayCaster = new ammoModule.btDefaultVehicleRaycaster(physicsWorld);\r\n        this.vehicle = new ammoModule.btRaycastVehicle(this.tuning, body, rayCaster);\r\n        this.vehicle.setCoordinateSystem(0, 1, 2);\r\n        physicsWorld.addAction(this.vehicle);\r\n\t\t\r\n        const trans = this.vehicle.getChassisWorldTransform();\r\n\r\n        this.addWheel(true, \r\n            new ammoModule.btVector3(this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition), \r\n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_LEFT);\r\n        this.addWheel(true, \r\n            new ammoModule.btVector3(-this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition), \r\n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_RIGHT);\r\n        this.addWheel(false, \r\n            new ammoModule.btVector3(-this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack), \r\n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_LEFT);\r\n        this.addWheel(false, \r\n            new ammoModule.btVector3(this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack), \r\n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_RIGHT);\r\n    \r\n        this.vehicleReady = true;\r\n    }\r\n\r\n    private createChassisMesh(w: number, l: number, h: number) : Mesh {\r\n        const mesh = MeshBuilder.CreateBox(\"box\", {width:w, depth:h, height:l}, this.scene);\r\n        mesh.rotationQuaternion = new Quaternion();\r\n        mesh.material = this.greenMaterial;\r\n    \r\n        const camera = new FollowCamera(\"FollowCam\", new Vector3(0, 10, -10), this.scene);\r\n        camera.radius = 10;\r\n        camera.heightOffset = 4;\r\n        camera.rotationOffset = 0;\r\n        camera.cameraAcceleration = 0.05;\r\n        camera.maxCameraSpeed = 400;\r\n        camera.attachControl(true);//camera.attachControl(canvas, true);\r\n        camera.lockedTarget = mesh; //version 2.5 onwards\r\n        this.scene.activeCamera = camera;\r\n    \r\n        return mesh;\r\n    }\r\n\r\n    private addWheel(isFront: boolean, pos: Vector3, radius: number, width: number, index: number) {\r\n\t\t\t\r\n        const wheelInfo = this.vehicle.addWheel(\r\n            pos,\r\n            this.wheelDirectionCS0,\r\n            this.wheelAxleCS,\r\n            this.suspensionRestLength,\r\n            radius,\r\n            this.tuning,\r\n            isFront);\r\n\r\n        wheelInfo.set_m_suspensionStiffness(this.suspensionStiffness);\r\n        wheelInfo.set_m_wheelsDampingRelaxation(this.suspensionDamping);\r\n        wheelInfo.set_m_wheelsDampingCompression(this.suspensionCompression);\r\n        wheelInfo.set_m_maxSuspensionForce(600000);\r\n        wheelInfo.set_m_frictionSlip(40);\r\n        wheelInfo.set_m_rollInfluence(this.rollInfluence);\r\n\r\n        this.wheelMeshes[index] = this.createWheelMesh(radius, width);\r\n    }\r\n\r\n    private createWheelMesh(radius: number, width: number) {\r\n        //var mesh = new BABYLON.MeshBuilder.CreateBox(\"wheel\", {width:.82, height:.82, depth:.82}, scene);\r\n        const mesh = MeshBuilder.CreateCylinder(\"Wheel\", {diameter:1, height:0.5, tessellation: 6}, this.scene);\r\n        mesh.rotationQuaternion = new Quaternion();\r\n        mesh.material = this.blackMaterial;\r\n        return mesh;\r\n    }\r\n}"],"names":["Car","constructor","pos","scene","ammoModule","ZERO_QUATERNION","FRONT_LEFT","FRONT_RIGHT","BACK_LEFT","BACK_RIGHT","chassisWidth","chassisHeight","chassisLength","massVehicle","wheelAxisPositionBack","wheelRadiusBack","wheelWidthBack","wheelHalfTrackBack","wheelAxisHeightBack","wheelAxisFrontPosition","wheelHalfTrackFront","wheelAxisHeightFront","wheelRadiusFront","wheelWidthFront","friction","suspensionStiffness","suspensionDamping","suspensionCompression","suspensionRestLength","rollInfluence","steeringIncrement","steeringClamp","maxEngineForce","maxBreakingForce","incEngine","vehicleSteering","engineForce","breakingForce","wheelMeshes","vehicleReady","this","greenMaterial","StandardMaterial","diffuseColor","emissiveColor","blackMaterial","physicsWorld","getPhysicsEngine","getPhysicsPlugin","world","wheelDirectionCS0","btVector3","wheelAxleCS","geometry","btBoxShape","transform","btTransform","setIdentity","setOrigin","setRotation","btQuaternion","x","y","z","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","chassisMesh","createChassisMesh","massOffset","transform2","compound","btCompoundShape","addChildShape","body","btRigidBody","btRigidBodyConstructionInfo","setActivationState","addRigidBody","tuning","btVehicleTuning","rayCaster","btDefaultVehicleRaycaster","vehicle","btRaycastVehicle","setCoordinateSystem","addAction","getChassisWorldTransform","addWheel","l","h","mesh","width","depth","height","rotationQuaternion","material","camera","radius","heightOffset","rotationOffset","cameraAcceleration","maxCameraSpeed","attachControl","lockedTarget","activeCamera","isFront","index","wheelInfo","set_m_suspensionStiffness","set_m_wheelsDampingRelaxation","set_m_wheelsDampingCompression","set_m_maxSuspensionForce","set_m_frictionSlip","set_m_rollInfluence","createWheelMesh","diameter","tessellation"],"sourceRoot":""}