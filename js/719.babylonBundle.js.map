{"version":3,"file":"js/719.babylonBundle.js","mappings":"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","sources":["webpack://pro-racer/./src/externals/ammo.ts","webpack://pro-racer/./src/scenes/boxes.ts","webpack://pro-racer/./src/scenes/car.ts","webpack://pro-racer/./src/scenes/controls.ts","webpack://pro-racer/./src/scenes/proRacer.ts","webpack://pro-racer/./assets/grass.jpg"],"sourcesContent":["import * as Ammo from \"ammo.js\";\n\nexport let ammoModule: any;\nexport const ammoReadyPromise = new Promise((resolve) => {\n    new Ammo().then((res: unknown) => {\n        ammoModule = res;\n        resolve(res);\n    });\n});\n","import { Material } from \"@babylonjs/core/Materials/material\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { Color3, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { PhysicsImpostor } from \"@babylonjs/core/Physics/physicsImpostor\";\nimport { Scene } from \"@babylonjs/core/scene\";\n\nexport class Boxes {\n    redMaterial: StandardMaterial;\n    blueMaterial: StandardMaterial;\n    scene: Scene;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n\n        this.redMaterial = new StandardMaterial(\"RedMaterial\", scene);\n        this.redMaterial.diffuseColor = new Color3(0.8,0.4,0.5);\n        this.redMaterial.emissiveColor = new Color3(0.8,0.4,0.5);\n\n        this.blueMaterial = new StandardMaterial(\"BlueMaterial\", scene);\n        this.blueMaterial.diffuseColor = new Color3(0.5,0.4,0.8);\n        this.blueMaterial.emissiveColor = new Color3(0.5,0.4,0.8);  \n    }\n\n    public baseBoxes() : void {\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,25),new Vector3(-Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(25,0,0),new Vector3(-Math.PI/8,Math.PI/2,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(0,0,-25),new Vector3(Math.PI/8,0,0),0);\n        this.createBox(new Vector3(4,1,12),new Vector3(-25,0,0),new Vector3(Math.PI/8,Math.PI/2,0),0);\n    }\n\n    public randomBoxes() : void {\n        const s = new Vector3();\n        const p = new Vector3();\n        const r = new Vector3();\n        for(let i=0;i<20;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*10;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,0);\n        }\n    \n        for(let i=0;i<30;i++){\n            const m = Math.random()*300-150+5;\n            const m3 = Math.random()*300-150+5;\n            const m2 = Math.random()*3;\n            s.set(m2,m2,m2);\n            p.set(m3,0,m);\n            r.set(m,m,m);\n            this.createBox(s,p,r,5);\n        }\n    }\n\n    private createBox(size: Vector3, position: Vector3, rotation: Vector3, mass: number) : Mesh {\n        const box = MeshBuilder.CreateBox(\"box\", { width: size.x, depth: size.z, height: size.y }, this.scene);\n        box.position.set(position.x,position.y,position.z);\n        box.rotation.set(rotation.x,rotation.y,rotation.z);\n        if(!mass){\n            mass = 0;\n            box.material = this.redMaterial;\n        } else {\n            box.position.y += 5;\n            box.material = this.blueMaterial;\n    \n        }\n        box.physicsImpostor = new PhysicsImpostor(box, PhysicsImpostor.BoxImpostor, { mass: mass, friction: 0.5, restitution: 0.7 }, this.scene);\n        return box;\n    }\n}\n\n","import { Mesh, StandardMaterial } from \"@babylonjs/core\";\nimport { FollowCamera } from \"@babylonjs/core/Cameras/followCamera\";\nimport { Color3, Quaternion, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { Scene } from \"@babylonjs/core/scene\";\n\nexport class Car {\n    ZERO_QUATERNION = new Quaternion(); \n\n    FRONT_LEFT = 0;\n    FRONT_RIGHT = 1;\n    BACK_LEFT = 2;\n    BACK_RIGHT = 3;\n\n    chassisWidth = 1.8;\n    chassisHeight = .6;\n    chassisLength = 4;\n    massVehicle = 200;\n\n\n    wheelAxisPositionBack = -1;\n    wheelRadiusBack = .4;\n    wheelWidthBack = .3;\n    wheelHalfTrackBack = 1;\n    wheelAxisHeightBack = 0.4;\n    \n    wheelAxisFrontPosition = 1.0;\n    wheelHalfTrackFront = 1;\n    wheelAxisHeightFront = 0.4;\n    wheelRadiusFront = .4;\n    wheelWidthFront = .3;\n\n    friction = 5;\n    suspension = {\n        stiffness: 10,\n        damping: 0.3,\n        compression: 4.4,\n        restLength: 0.6\n    }\n    rollInfluence = 0.0;\n\n    wheelDirectionCS0: number | undefined;\n    wheelAxleCS: number | undefined;\n\n    steeringIncrement = .01;\n    steeringClamp = 0.2;\n    maxEngineForce = 500;\n    maxBreakingForce = 10;\n    incEngine = 10.0;\n\n    vehicleSteering = 0;\n    engineForce = 0;  \n    breakingForce = 0;\n\n    private scene : Scene;\n\n    greenMaterial: StandardMaterial;\n    blackMaterial: StandardMaterial;\n\n    \n    tuning: any;\n    vehicle: any;\n    wheelMeshes: Mesh[] = [];\n    chassisMesh: Mesh;\n\n\n    vehicleReady = false;\n\n    constructor(pos: Vector3, scene: Scene, ammoModule: any) {\n        this.greenMaterial = new StandardMaterial(\"GreenMaterial\", scene);\n        this.greenMaterial.diffuseColor = new Color3(0.5,0.8,0.5);\n        this.greenMaterial.emissiveColor = new Color3(0.5,0.8,0.5);\n    \n        this.blackMaterial = new StandardMaterial(\"BlackMaterial\", scene);\n        this.blackMaterial.diffuseColor = new Color3(0.1,0.1,0.1);\n        this.blackMaterial.emissiveColor = new Color3(0.1,0.1,0.1);\n\n        this.scene = scene;\n        //Going Native\n        const physicsWorld = scene.getPhysicsEngine()?.getPhysicsPlugin().world;\n\n        this.wheelDirectionCS0 = new ammoModule.btVector3(0, -1, 0);\n        this.wheelAxleCS = new ammoModule.btVector3(-1, 0, 0);\n\n        const geometry = new ammoModule.btBoxShape(new ammoModule.btVector3(\n            this.chassisWidth * .5, \n            this.chassisHeight * .5, \n            this.chassisLength * .5));\n        const transform = new ammoModule.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new ammoModule.btVector3(0,5,0));\n        transform.setRotation(new ammoModule.btQuaternion(\n            this.ZERO_QUATERNION.x, \n            this.ZERO_QUATERNION.y, \n            this.ZERO_QUATERNION.z, \n            this.ZERO_QUATERNION.w));\n        const motionState = new ammoModule.btDefaultMotionState(transform);\n        const localInertia = new ammoModule.btVector3(0, 0, 0);\n        geometry.calculateLocalInertia(this.massVehicle, localInertia);\n\n\n        this.chassisMesh = this.createChassisMesh(this.chassisWidth, this.chassisHeight, this.chassisLength);\n\n\n        const massOffset = new ammoModule.btVector3( 0, 0.4, 0);\n        const transform2 = new ammoModule.btTransform();\n        transform2.setIdentity();\n        transform2.setOrigin(massOffset);\n        const compound = new ammoModule.btCompoundShape();\n        compound.addChildShape( transform2, geometry );\n\n        const body = new ammoModule.btRigidBody(new ammoModule.btRigidBodyConstructionInfo(this.massVehicle, motionState, compound, localInertia));\n        body.setActivationState(4);\n\t\t\n        physicsWorld.addRigidBody(body);\n\n\n        this.tuning = new ammoModule.btVehicleTuning();\n        const rayCaster = new ammoModule.btDefaultVehicleRaycaster(physicsWorld);\n        this.vehicle = new ammoModule.btRaycastVehicle(this.tuning, body, rayCaster);\n        this.vehicle.setCoordinateSystem(0, 1, 2);\n        physicsWorld.addAction(this.vehicle);\n\t\t\n        const trans = this.vehicle.getChassisWorldTransform();\n\n        this.addWheel(true, \n            new ammoModule.btVector3(this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition), \n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_LEFT);\n        this.addWheel(true, \n            new ammoModule.btVector3(-this.wheelHalfTrackFront, this.wheelAxisHeightFront, this.wheelAxisFrontPosition), \n            this.wheelRadiusFront, this.wheelWidthFront, this.FRONT_RIGHT);\n        this.addWheel(false, \n            new ammoModule.btVector3(-this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack), \n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_LEFT);\n        this.addWheel(false, \n            new ammoModule.btVector3(this.wheelHalfTrackBack, this.wheelAxisHeightBack, this.wheelAxisPositionBack), \n            this.wheelRadiusBack, this.wheelWidthBack, this.BACK_RIGHT);\n    \n        this.vehicleReady = true;\n    }\n\n    private createChassisMesh(w: number, l: number, h: number) : Mesh {\n        const mesh = MeshBuilder.CreateBox(\"box\", {width:w, depth:h, height:l}, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.greenMaterial;\n    \n        const camera = new FollowCamera(\"FollowCam\", new Vector3(0, 10, -10), this.scene);\n        camera.radius = 10;\n        camera.heightOffset = 4;\n        camera.rotationOffset = 0;\n        camera.cameraAcceleration = 0.05;\n        camera.maxCameraSpeed = 400;\n        camera.attachControl(true);//camera.attachControl(canvas, true);\n        camera.lockedTarget = mesh; //version 2.5 onwards\n        this.scene.activeCamera = camera;\n    \n        return mesh;\n    }\n\n    private addWheel(isFront: boolean, pos: Vector3, radius: number, width: number, index: number) {\n\t\t\t\n        const wheelInfo = this.vehicle.addWheel(\n            pos,\n            this.wheelDirectionCS0,\n            this.wheelAxleCS,\n            this.suspension.restLength,\n            radius,\n            this.tuning,\n            isFront);\n\n        wheelInfo.set_m_suspensionStiffness(this.suspension.stiffness);\n        wheelInfo.set_m_wheelsDampingRelaxation(this.suspension.damping);\n        wheelInfo.set_m_wheelsDampingCompression(this.suspension.compression);\n        wheelInfo.set_m_maxSuspensionForce(600000);\n        wheelInfo.set_m_frictionSlip(40);\n        wheelInfo.set_m_rollInfluence(this.rollInfluence);\n\n        this.wheelMeshes[index] = this.createWheelMesh(radius, width);\n    }\n\n    private createWheelMesh(radius: number, width: number) {\n        const mesh = MeshBuilder.CreateCylinder(\"Wheel\", {\n            diameter:radius*2, height:width, tessellation: 6\n        }, this.scene);\n        mesh.rotationQuaternion = new Quaternion();\n        mesh.material = this.blackMaterial;\n        return mesh;\n    }\n}","import { Axis } from \"@babylonjs/core/Maths/math\";\nimport { Car } from \"./car\";\n\nconst actions = new Map<string, boolean>([\n    [\"acceleration\", false],\n    [\"braking\", false],\n    [\"right\", false],\n    [\"left\", false],\n    [\"reset\", false]\n]);\n\nconst keysActions = new Map<string, string>([\n    [\"KeyW\",'acceleration'],\n    [\"KeyS\",'braking'],\n    [\"KeyA\",'left'],\n    [\"KeyD\",'right'],\n    [\"KeyR\", 'reset']\n]);\n\nexport class Controls {\n\n    car: Car;\n\n    constructor(car: Car) {\n        this.car = car;\n        window.addEventListener( 'keydown', this.keydown);\n        window.addEventListener( 'keyup', this.keyup);\n    }\n\n    update() {\n        if(this.car.vehicleReady){\n                  \n            const speed = this.car.vehicle.getCurrentSpeedKmHour();\n            const maxSteerVal = 0.2;\n            this.car.breakingForce = 0;\n            this.car.engineForce = 0;\n\n            if (actions.get(\"reset\")) {\n                this.car.chassisMesh.position.set(0, 5, 0);\n                console.log(\"reset\");\n            }\n\n            \n            if(actions.get(\"acceleration\")){\n                if (speed < -1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = this.car.maxEngineForce;\n                }\n                    \n            } else if(actions.get(\"braking\")){\n                if (speed > 1){\n                    this.car.breakingForce = this.car.maxBreakingForce;\n                }else {\n                    this.car.engineForce = -this.car.maxEngineForce ;\n                }\n            } \n                    \n            if(actions.get(\"right\")){\n                if (this.car.vehicleSteering < this.car.steeringClamp){\n                    this.car.vehicleSteering += this.car.steeringIncrement;\n                }\n                    \n            } else if(actions.get(\"left\")){\n                if (this.car.vehicleSteering > -this.car.steeringClamp){\n                    this.car.vehicleSteering -= this.car.steeringIncrement;\n                }\n                    \n            } else {\n                this.car.vehicleSteering = 0;\n            }\n                    \n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_LEFT);\n            this.car.vehicle.applyEngineForce(this.car.engineForce, this.car.FRONT_RIGHT);\n                    \n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce / 2, this.car.FRONT_RIGHT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_LEFT);\n            this.car.vehicle.setBrake(this.car.breakingForce, this.car.BACK_RIGHT);\n                    \n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_LEFT);\n            this.car.vehicle.setSteeringValue(this.car.vehicleSteering, this.car.FRONT_RIGHT);\n                    \n                    \n            let tm, p, q, i;\n            const n = this.car.vehicle.getNumWheels();\n            for (i = 0; i < n; i++) {\n                this.car.vehicle.updateWheelTransform(i, true);\n                tm = this.car.vehicle.getWheelTransformWS(i);\n                p = tm.getOrigin();\n                q = tm.getRotation();\n                this.car.wheelMeshes[i].position.set(p.x(), p.y(), p.z());\n                this.car.wheelMeshes[i].rotationQuaternion?.set(q.x(), q.y(), q.z(), q.w());\n                this.car.wheelMeshes[i].rotate(Axis.Z, Math.PI/2);\n            }\n\n            tm = this.car.vehicle.getChassisWorldTransform();\n            p = tm.getOrigin();\n            q = tm.getRotation();\n            this.car.chassisMesh.position.set(p.x(), p.y(), p.z());\n            this.car.chassisMesh.rotationQuaternion?.set(q.x(), q.y(), q.z(), q.w());\n            this.car.chassisMesh.rotate(Axis.X, Math.PI);\n                 \n        }\n    }\n\n    private keyup(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", false);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n    private keydown(e: KeyboardEvent) {\n        if(keysActions.get(e.code)) {\n            actions.set(keysActions.get(e.code)??\"\", true);\n            //e.preventDefault();\n            //e.stopPropagation();\n\n            //return false;\n        }\n    }\n\n\n}\n","import { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { FreeCamera } from \"@babylonjs/core/Cameras/freeCamera\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\nimport { SphereBuilder } from \"@babylonjs/core/Meshes/Builders/sphereBuilder\";\nimport { AmmoJSPlugin } from \"@babylonjs/core/Physics/Plugins/ammoJSPlugin\";\nimport \"@babylonjs/core/Physics/physicsEngineComponent\";\n\n// If you don't need the standard material you will still need to import it since the scene requires it.\nimport \"@babylonjs/core/Materials/standardMaterial\";\nimport { PhysicsImpostor } from \"@babylonjs/core/Physics/physicsImpostor\";\nimport { ammoModule, ammoReadyPromise } from \"../externals/ammo\";\nimport { CreateSceneClass } from \"../createScene\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { Axis, Color3 } from \"@babylonjs/core/Maths/math\";\nimport * as GRID from \"@babylonjs/materials/grid\";\n\nimport {Boxes} from \"./boxes\"\nimport {Car} from \"./car\";\nimport { Controls } from \"./controls\";\n\nimport grassTextureUrl from \"../../assets/grass.jpg\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\n\nclass ProRacerScene implements CreateSceneClass {\n    preTasks = [ammoReadyPromise];\n\n    createScene = async (engine: Engine, canvas: HTMLCanvasElement): Promise<Scene> => {\n        // This creates a basic Babylon Scene object (non-mesh)\n        const scene = new Scene(engine);\n        const camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n        // This targets the camera to scene origin\n        camera.setTarget(Vector3.Zero());\n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, true);\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n        // Default intensity is 1. Let's dim the light a small amount\n        light.intensity = 0.7;\n\n        // Materials\n        const redMaterial = new StandardMaterial(\"RedMaterial\", scene);\n        redMaterial.diffuseColor = new Color3(0.8,0.4,0.5);\n        redMaterial.emissiveColor = new Color3(0.8,0.4,0.5);\n\n        scene.enablePhysics(new Vector3(0,-10,0), new AmmoJSPlugin(true, ammoModule));\n\n        // Our built-in 'ground' shape. \n        const ground = MeshBuilder.CreateGround(\"ground\", { \n            width: 460, \n            height: 460, \n            subdivisions: 2 \n        }, scene);\n        ground.physicsImpostor = new PhysicsImpostor(ground, PhysicsImpostor.BoxImpostor, { \n            mass: 0, \n            friction: 0.5, \n            restitution: 0.7\n        }, scene);\n        //ground.material = new GRID.GridMaterial(\"groundMaterial\", scene);\n        const groundMaterial = new StandardMaterial(\"ground material\", scene);\n        groundMaterial.diffuseTexture = new Texture(grassTextureUrl, scene);\n        ground.material = groundMaterial;\n\n        \n        const boxes = new Boxes(scene)\n        boxes.baseBoxes();\n        boxes.randomBoxes();\n\n\n        const car = new Car(new Vector3(0, 4, -20), scene, ammoModule);\n        const controls = new Controls(car);\n\n        scene.registerBeforeRender(function() {\n            const dt = engine.getDeltaTime()/*.toFixed()*//1000;\n            controls.update();\n        });\n    \n        return scene;\n    };\n    \n}\n\nexport default new ProRacerScene();\n","export default __webpack_public_path__ + \"9b31293ea96c8dfa518b45622da82a13.jpg\";"],"names":["ammoModule","ammoReadyPromise","Promise","resolve","then","res","Boxes","constructor","scene","this","redMaterial","diffuseColor","emissiveColor","blueMaterial","baseBoxes","createBox","Math","PI","randomBoxes","s","p","r","i","m","random","m3","m2","set","size","position","rotation","mass","box","width","x","depth","z","height","y","material","physicsImpostor","friction","restitution","Car","pos","ZERO_QUATERNION","FRONT_LEFT","FRONT_RIGHT","BACK_LEFT","BACK_RIGHT","chassisWidth","chassisHeight","chassisLength","massVehicle","wheelAxisPositionBack","wheelRadiusBack","wheelWidthBack","wheelHalfTrackBack","wheelAxisHeightBack","wheelAxisFrontPosition","wheelHalfTrackFront","wheelAxisHeightFront","wheelRadiusFront","wheelWidthFront","suspension","stiffness","damping","compression","restLength","rollInfluence","steeringIncrement","steeringClamp","maxEngineForce","maxBreakingForce","incEngine","vehicleSteering","engineForce","breakingForce","wheelMeshes","vehicleReady","greenMaterial","StandardMaterial","blackMaterial","physicsWorld","getPhysicsEngine","getPhysicsPlugin","world","wheelDirectionCS0","btVector3","wheelAxleCS","geometry","btBoxShape","transform","btTransform","setIdentity","setOrigin","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","chassisMesh","createChassisMesh","massOffset","transform2","compound","btCompoundShape","addChildShape","body","btRigidBody","btRigidBodyConstructionInfo","setActivationState","addRigidBody","tuning","btVehicleTuning","rayCaster","btDefaultVehicleRaycaster","vehicle","btRaycastVehicle","setCoordinateSystem","addAction","getChassisWorldTransform","addWheel","l","h","mesh","rotationQuaternion","camera","radius","heightOffset","rotationOffset","cameraAcceleration","maxCameraSpeed","attachControl","lockedTarget","activeCamera","isFront","index","wheelInfo","set_m_suspensionStiffness","set_m_wheelsDampingRelaxation","set_m_wheelsDampingCompression","set_m_maxSuspensionForce","set_m_frictionSlip","set_m_rollInfluence","createWheelMesh","diameter","tessellation","actions","Map","keysActions","Controls","car","window","addEventListener","keydown","keyup","update","speed","getCurrentSpeedKmHour","tm","q","get","console","log","applyEngineForce","setBrake","setSteeringValue","n","getNumWheels","updateWheelTransform","getWheelTransformWS","getOrigin","getRotation","rotate","e","code","preTasks","createScene","async","engine","canvas","setTarget","intensity","enablePhysics","ground","subdivisions","groundMaterial","diffuseTexture","boxes","controls","registerBeforeRender","getDeltaTime"],"sourceRoot":""}