{"version":3,"file":"js/723.babylonBundle.js","mappings":"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","sources":["webpack://pro-racer/../lts/core/generated/Lights/Shadows/cascadedShadowGenerator.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/shadowMapFragmentSoftTransparentShadow.ts","webpack://pro-racer/../lts/core/generated/Lights/Shadows/shadowGenerator.ts","webpack://pro-racer/../lts/core/generated/Lights/Shadows/shadowGeneratorSceneComponent.ts","webpack://pro-racer/../lts/core/generated/Misc/depthReducer.ts","webpack://pro-racer/../lts/core/generated/Misc/minMaxReducer.ts","webpack://pro-racer/../lts/core/generated/Shaders/depth.fragment.ts","webpack://pro-racer/../lts/core/generated/Rendering/depthRenderer.ts","webpack://pro-racer/../lts/core/generated/Shaders/depth.vertex.ts","webpack://pro-racer/../lts/core/generated/Shaders/shadowMap.fragment.ts","webpack://pro-racer/../lts/core/generated/Shaders/ShadersInclude/shadowMapVertexDeclaration.ts","webpack://pro-racer/../lts/core/generated/Shaders/shadowMap.vertex.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\n\r\nimport type { IShadowLight } from \"../../Lights/shadowLight\";\r\nimport type { Effect } from \"../../Materials/effect\";\r\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\n\r\nimport { Constants } from \"../../Engines/constants\";\r\n\r\nimport \"../../Shaders/shadowMap.fragment\";\r\nimport \"../../Shaders/shadowMap.vertex\";\r\nimport \"../../Shaders/depthBoxBlur.fragment\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { _WarnImport } from \"../../Misc/devTools\";\r\nimport { ShadowGenerator } from \"./shadowGenerator\";\r\nimport type { DirectionalLight } from \"../directionalLight\";\r\n\r\nimport { BoundingInfo } from \"../../Culling/boundingInfo\";\r\nimport type { DepthRenderer } from \"../../Rendering/depthRenderer\";\r\nimport { DepthReducer } from \"../../Misc/depthReducer\";\r\n\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\n\r\ninterface ICascade {\r\n    prevBreakDistance: number;\r\n    breakDistance: number;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst UpDir = Vector3.Up();\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst ZeroVec = Vector3.Zero();\r\n\r\nconst tmpv1 = new Vector3(),\r\n    tmpv2 = new Vector3(),\r\n    tmpMatrix = new Matrix();\r\n\r\n/**\r\n * A CSM implementation allowing casting shadows on large scenes.\r\n * Documentation : https://doc.babylonjs.com/babylon101/cascadedShadows\r\n * Based on: https://github.com/TheRealMJP/Shadows and https://johanmedestrom.wordpress.com/2016/03/18/opengl-cascaded-shadow-maps/\r\n */\r\nexport class CascadedShadowGenerator extends ShadowGenerator {\r\n    private static readonly _FrustumCornersNDCSpace = [\r\n        new Vector3(-1.0, +1.0, -1.0),\r\n        new Vector3(+1.0, +1.0, -1.0),\r\n        new Vector3(+1.0, -1.0, -1.0),\r\n        new Vector3(-1.0, -1.0, -1.0),\r\n        new Vector3(-1.0, +1.0, +1.0),\r\n        new Vector3(+1.0, +1.0, +1.0),\r\n        new Vector3(+1.0, -1.0, +1.0),\r\n        new Vector3(-1.0, -1.0, +1.0),\r\n    ];\r\n\r\n    /**\r\n     * Name of the CSM class\r\n     */\r\n    public static CLASSNAME = \"CascadedShadowGenerator\";\r\n\r\n    /**\r\n     * Defines the default number of cascades used by the CSM.\r\n     */\r\n    public static readonly DEFAULT_CASCADES_COUNT = 4;\r\n    /**\r\n     * Defines the minimum number of cascades used by the CSM.\r\n     */\r\n    public static readonly MIN_CASCADES_COUNT = 2;\r\n    /**\r\n     * Defines the maximum number of cascades used by the CSM.\r\n     */\r\n    public static readonly MAX_CASCADES_COUNT = 4;\r\n\r\n    protected _validateFilter(filter: number): number {\r\n        if (filter === ShadowGenerator.FILTER_NONE || filter === ShadowGenerator.FILTER_PCF || filter === ShadowGenerator.FILTER_PCSS) {\r\n            return filter;\r\n        }\r\n\r\n        console.error('Unsupported filter \"' + filter + '\"!');\r\n\r\n        return ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the actual darkness of the soft shadows while using PCSS filtering (value between 0. and 1.)\r\n     */\r\n    public penumbraDarkness: number;\r\n\r\n    private _numCascades: number;\r\n\r\n    /**\r\n     * Gets or set the number of cascades used by the CSM.\r\n     */\r\n    public get numCascades(): number {\r\n        return this._numCascades;\r\n    }\r\n\r\n    public set numCascades(value: number) {\r\n        value = Math.min(Math.max(value, CascadedShadowGenerator.MIN_CASCADES_COUNT), CascadedShadowGenerator.MAX_CASCADES_COUNT);\r\n        if (value === this._numCascades) {\r\n            return;\r\n        }\r\n\r\n        this._numCascades = value;\r\n        this.recreateShadowMap();\r\n        this._recreateSceneUBOs();\r\n    }\r\n\r\n    /**\r\n     * Sets this to true if you want that the edges of the shadows don't \"swimm\" / \"shimmer\" when rotating the camera.\r\n     * The trade off is that you lose some precision in the shadow rendering when enabling this setting.\r\n     */\r\n    public stabilizeCascades: boolean;\r\n\r\n    private _freezeShadowCastersBoundingInfo: boolean;\r\n    private _freezeShadowCastersBoundingInfoObservable: Nullable<Observer<Scene>>;\r\n\r\n    /**\r\n     * Enables or disables the shadow casters bounding info computation.\r\n     * If your shadow casters don't move, you can disable this feature.\r\n     * If it is enabled, the bounding box computation is done every frame.\r\n     */\r\n    public get freezeShadowCastersBoundingInfo(): boolean {\r\n        return this._freezeShadowCastersBoundingInfo;\r\n    }\r\n\r\n    public set freezeShadowCastersBoundingInfo(freeze: boolean) {\r\n        if (this._freezeShadowCastersBoundingInfoObservable && freeze) {\r\n            this._scene.onBeforeRenderObservable.remove(this._freezeShadowCastersBoundingInfoObservable);\r\n            this._freezeShadowCastersBoundingInfoObservable = null;\r\n        }\r\n\r\n        if (!this._freezeShadowCastersBoundingInfoObservable && !freeze) {\r\n            this._freezeShadowCastersBoundingInfoObservable = this._scene.onBeforeRenderObservable.add(this._computeShadowCastersBoundingInfo.bind(this));\r\n        }\r\n\r\n        this._freezeShadowCastersBoundingInfo = freeze;\r\n\r\n        if (freeze) {\r\n            this._computeShadowCastersBoundingInfo();\r\n        }\r\n    }\r\n\r\n    private _scbiMin: Vector3;\r\n    private _scbiMax: Vector3;\r\n\r\n    protected _computeShadowCastersBoundingInfo(): void {\r\n        this._scbiMin.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._scbiMax.copyFromFloats(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);\r\n\r\n        if (this._shadowMap && this._shadowMap.renderList) {\r\n            const renderList = this._shadowMap.renderList;\r\n            for (let meshIndex = 0; meshIndex < renderList.length; meshIndex++) {\r\n                const mesh = renderList[meshIndex];\r\n\r\n                if (!mesh) {\r\n                    continue;\r\n                }\r\n\r\n                const boundingInfo = mesh.getBoundingInfo(),\r\n                    boundingBox = boundingInfo.boundingBox;\r\n\r\n                this._scbiMin.minimizeInPlace(boundingBox.minimumWorld);\r\n                this._scbiMax.maximizeInPlace(boundingBox.maximumWorld);\r\n            }\r\n\r\n            const meshes = this._scene.meshes;\r\n            for (let meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\r\n                const mesh = meshes[meshIndex];\r\n\r\n                if (!mesh || !mesh.isVisible || !mesh.isEnabled || !mesh.receiveShadows) {\r\n                    continue;\r\n                }\r\n\r\n                const boundingInfo = mesh.getBoundingInfo(),\r\n                    boundingBox = boundingInfo.boundingBox;\r\n\r\n                this._scbiMin.minimizeInPlace(boundingBox.minimumWorld);\r\n                this._scbiMax.maximizeInPlace(boundingBox.maximumWorld);\r\n            }\r\n        }\r\n\r\n        this._shadowCastersBoundingInfo.reConstruct(this._scbiMin, this._scbiMax);\r\n    }\r\n\r\n    protected _shadowCastersBoundingInfo: BoundingInfo;\r\n\r\n    /**\r\n     * Gets or sets the shadow casters bounding info.\r\n     * If you provide your own shadow casters bounding info, first enable freezeShadowCastersBoundingInfo\r\n     * so that the system won't overwrite the bounds you provide\r\n     */\r\n    public get shadowCastersBoundingInfo(): BoundingInfo {\r\n        return this._shadowCastersBoundingInfo;\r\n    }\r\n\r\n    public set shadowCastersBoundingInfo(boundingInfo: BoundingInfo) {\r\n        this._shadowCastersBoundingInfo = boundingInfo;\r\n    }\r\n\r\n    protected _breaksAreDirty: boolean;\r\n\r\n    protected _minDistance: number;\r\n    protected _maxDistance: number;\r\n\r\n    /**\r\n     * Sets the minimal and maximal distances to use when computing the cascade breaks.\r\n     *\r\n     * The values of min / max are typically the depth zmin and zmax values of your scene, for a given frame.\r\n     * If you don't know these values, simply leave them to their defaults and don't call this function.\r\n     * @param min minimal distance for the breaks (default to 0.)\r\n     * @param max maximal distance for the breaks (default to 1.)\r\n     */\r\n    public setMinMaxDistance(min: number, max: number): void {\r\n        if (this._minDistance === min && this._maxDistance === max) {\r\n            return;\r\n        }\r\n\r\n        if (min > max) {\r\n            min = 0;\r\n            max = 1;\r\n        }\r\n\r\n        if (min < 0) {\r\n            min = 0;\r\n        }\r\n\r\n        if (max > 1) {\r\n            max = 1;\r\n        }\r\n\r\n        this._minDistance = min;\r\n        this._maxDistance = max;\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    /** Gets the minimal distance used in the cascade break computation */\r\n    public get minDistance(): number {\r\n        return this._minDistance;\r\n    }\r\n\r\n    /** Gets the maximal distance used in the cascade break computation */\r\n    public get maxDistance(): number {\r\n        return this._maxDistance;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of that object\r\n     * @returns \"CascadedShadowGenerator\"\r\n     */\r\n    public getClassName(): string {\r\n        return CascadedShadowGenerator.CLASSNAME;\r\n    }\r\n\r\n    private _cascadeMinExtents: Array<Vector3>;\r\n    private _cascadeMaxExtents: Array<Vector3>;\r\n\r\n    /**\r\n     * Gets a cascade minimum extents\r\n     * @param cascadeIndex index of the cascade\r\n     * @returns the minimum cascade extents\r\n     */\r\n    public getCascadeMinExtents(cascadeIndex: number): Nullable<Vector3> {\r\n        return cascadeIndex >= 0 && cascadeIndex < this._numCascades ? this._cascadeMinExtents[cascadeIndex] : null;\r\n    }\r\n\r\n    /**\r\n     * Gets a cascade maximum extents\r\n     * @param cascadeIndex index of the cascade\r\n     * @returns the maximum cascade extents\r\n     */\r\n    public getCascadeMaxExtents(cascadeIndex: number): Nullable<Vector3> {\r\n        return cascadeIndex >= 0 && cascadeIndex < this._numCascades ? this._cascadeMaxExtents[cascadeIndex] : null;\r\n    }\r\n\r\n    private _cascades: Array<ICascade>;\r\n    private _currentLayer: number;\r\n    private _viewSpaceFrustumsZ: Array<number>;\r\n    private _viewMatrices: Array<Matrix>;\r\n    private _projectionMatrices: Array<Matrix>;\r\n    private _transformMatrices: Array<Matrix>;\r\n    private _transformMatricesAsArray: Float32Array;\r\n    private _frustumLengths: Array<number>;\r\n    private _lightSizeUVCorrection: Array<number>;\r\n    private _depthCorrection: Array<number>;\r\n    private _frustumCornersWorldSpace: Array<Array<Vector3>>;\r\n    private _frustumCenter: Array<Vector3>;\r\n    private _shadowCameraPos: Array<Vector3>;\r\n\r\n    private _shadowMaxZ: number;\r\n    /**\r\n     * Gets the shadow max z distance. It's the limit beyond which shadows are not displayed.\r\n     * It defaults to camera.maxZ\r\n     */\r\n    public get shadowMaxZ(): number {\r\n        if (!this._scene || !this._scene.activeCamera) {\r\n            return 0;\r\n        }\r\n        return this._shadowMaxZ;\r\n    }\r\n    /**\r\n     * Sets the shadow max z distance.\r\n     */\r\n    public set shadowMaxZ(value: number) {\r\n        if (!this._scene || !this._scene.activeCamera) {\r\n            this._shadowMaxZ = value;\r\n            return;\r\n        }\r\n        if (this._shadowMaxZ === value || value < this._scene.activeCamera.minZ || value > this._scene.activeCamera.maxZ) {\r\n            return;\r\n        }\r\n        this._shadowMaxZ = value;\r\n        this._light._markMeshesAsLightDirty();\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    protected _debug: boolean;\r\n\r\n    /**\r\n     * Gets or sets the debug flag.\r\n     * When enabled, the cascades are materialized by different colors on the screen.\r\n     */\r\n    public get debug(): boolean {\r\n        return this._debug;\r\n    }\r\n\r\n    public set debug(dbg: boolean) {\r\n        this._debug = dbg;\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    private _depthClamp: boolean;\r\n\r\n    /**\r\n     * Gets or sets the depth clamping value.\r\n     *\r\n     * When enabled, it improves the shadow quality because the near z plane of the light frustum don't need to be adjusted\r\n     * to account for the shadow casters far away.\r\n     *\r\n     * Note that this property is incompatible with PCSS filtering, so it won't be used in that case.\r\n     */\r\n    public get depthClamp(): boolean {\r\n        return this._depthClamp;\r\n    }\r\n\r\n    public set depthClamp(value: boolean) {\r\n        this._depthClamp = value;\r\n    }\r\n\r\n    private _cascadeBlendPercentage: number;\r\n\r\n    /**\r\n     * Gets or sets the percentage of blending between two cascades (value between 0. and 1.).\r\n     * It defaults to 0.1 (10% blending).\r\n     */\r\n    public get cascadeBlendPercentage(): number {\r\n        return this._cascadeBlendPercentage;\r\n    }\r\n\r\n    public set cascadeBlendPercentage(value: number) {\r\n        this._cascadeBlendPercentage = value;\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    private _lambda: number;\r\n\r\n    /**\r\n     * Gets or set the lambda parameter.\r\n     * This parameter is used to split the camera frustum and create the cascades.\r\n     * It's a value between 0. and 1.: If 0, the split is a uniform split of the frustum, if 1 it is a logarithmic split.\r\n     * For all values in-between, it's a linear combination of the uniform and logarithm split algorithm.\r\n     */\r\n    public get lambda(): number {\r\n        return this._lambda;\r\n    }\r\n\r\n    public set lambda(value: number) {\r\n        const lambda = Math.min(Math.max(value, 0), 1);\r\n        if (this._lambda == lambda) {\r\n            return;\r\n        }\r\n        this._lambda = lambda;\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the view matrix corresponding to a given cascade\r\n     * @param cascadeNum cascade to retrieve the view matrix from\r\n     * @returns the cascade view matrix\r\n     */\r\n    public getCascadeViewMatrix(cascadeNum: number): Nullable<Matrix> {\r\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._viewMatrices[cascadeNum] : null;\r\n    }\r\n\r\n    /**\r\n     * Gets the projection matrix corresponding to a given cascade\r\n     * @param cascadeNum cascade to retrieve the projection matrix from\r\n     * @returns the cascade projection matrix\r\n     */\r\n    public getCascadeProjectionMatrix(cascadeNum: number): Nullable<Matrix> {\r\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._projectionMatrices[cascadeNum] : null;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix corresponding to a given cascade\r\n     * @param cascadeNum cascade to retrieve the transformation matrix from\r\n     * @returns the cascade transformation matrix\r\n     */\r\n    public getCascadeTransformMatrix(cascadeNum: number): Nullable<Matrix> {\r\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._transformMatrices[cascadeNum] : null;\r\n    }\r\n\r\n    private _depthRenderer: Nullable<DepthRenderer>;\r\n    /**\r\n     * Sets the depth renderer to use when autoCalcDepthBounds is enabled.\r\n     *\r\n     * Note that if no depth renderer is set, a new one will be automatically created internally when necessary.\r\n     *\r\n     * You should call this function if you already have a depth renderer enabled in your scene, to avoid\r\n     * doing multiple depth rendering each frame. If you provide your own depth renderer, make sure it stores linear depth!\r\n     * @param depthRenderer The depth renderer to use when autoCalcDepthBounds is enabled. If you pass null or don't call this function at all, a depth renderer will be automatically created\r\n     */\r\n    public setDepthRenderer(depthRenderer: Nullable<DepthRenderer>): void {\r\n        this._depthRenderer = depthRenderer;\r\n\r\n        if (this._depthReducer) {\r\n            this._depthReducer.setDepthRenderer(this._depthRenderer);\r\n        }\r\n    }\r\n\r\n    private _depthReducer: Nullable<DepthReducer>;\r\n    private _autoCalcDepthBounds: boolean;\r\n\r\n    /**\r\n     * Gets or sets the autoCalcDepthBounds property.\r\n     *\r\n     * When enabled, a depth rendering pass is first performed (with an internally created depth renderer or with the one\r\n     * you provide by calling setDepthRenderer). Then, a min/max reducing is applied on the depth map to compute the\r\n     * minimal and maximal depth of the map and those values are used as inputs for the setMinMaxDistance() function.\r\n     * It can greatly enhance the shadow quality, at the expense of more GPU works.\r\n     * When using this option, you should increase the value of the lambda parameter, and even set it to 1 for best results.\r\n     */\r\n    public get autoCalcDepthBounds(): boolean {\r\n        return this._autoCalcDepthBounds;\r\n    }\r\n\r\n    public set autoCalcDepthBounds(value: boolean) {\r\n        const camera = this._scene.activeCamera;\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        this._autoCalcDepthBounds = value;\r\n\r\n        if (!value) {\r\n            if (this._depthReducer) {\r\n                this._depthReducer.deactivate();\r\n            }\r\n            this.setMinMaxDistance(0, 1);\r\n            return;\r\n        }\r\n\r\n        if (!this._depthReducer) {\r\n            this._depthReducer = new DepthReducer(camera);\r\n            this._depthReducer.onAfterReductionPerformed.add((minmax: { min: number; max: number }) => {\r\n                let min = minmax.min,\r\n                    max = minmax.max;\r\n                if (min >= max) {\r\n                    min = 0;\r\n                    max = 1;\r\n                }\r\n                if (min != this._minDistance || max != this._maxDistance) {\r\n                    this.setMinMaxDistance(min, max);\r\n                }\r\n            });\r\n            this._depthReducer.setDepthRenderer(this._depthRenderer);\r\n        }\r\n\r\n        this._depthReducer.activate();\r\n    }\r\n\r\n    /**\r\n     * Defines the refresh rate of the min/max computation used when autoCalcDepthBounds is set to true\r\n     * Use 0 to compute just once, 1 to compute on every frame, 2 to compute every two frames and so on...\r\n     * Note that if you provided your own depth renderer through a call to setDepthRenderer, you are responsible\r\n     * for setting the refresh rate on the renderer yourself!\r\n     */\r\n    public get autoCalcDepthBoundsRefreshRate(): number {\r\n        return this._depthReducer?.depthRenderer?.getDepthMap().refreshRate ?? -1;\r\n    }\r\n\r\n    public set autoCalcDepthBoundsRefreshRate(value: number) {\r\n        if (this._depthReducer?.depthRenderer) {\r\n            this._depthReducer.depthRenderer.getDepthMap().refreshRate = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the cascade breaks according to the lambda, shadowMaxZ and min/max distance properties, as well as the camera near and far planes.\r\n     * This function is automatically called when updating lambda, shadowMaxZ and min/max distances, however you should call it yourself if\r\n     * you change the camera near/far planes!\r\n     */\r\n    public splitFrustum(): void {\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    private _splitFrustum(): void {\r\n        const camera = this._scene.activeCamera;\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const near = camera.minZ,\r\n            far = camera.maxZ,\r\n            cameraRange = far - near,\r\n            minDistance = this._minDistance,\r\n            maxDistance = this._shadowMaxZ < far && this._shadowMaxZ >= near ? Math.min((this._shadowMaxZ - near) / (far - near), this._maxDistance) : this._maxDistance;\r\n\r\n        const minZ = near + minDistance * cameraRange,\r\n            maxZ = near + maxDistance * cameraRange;\r\n\r\n        const range = maxZ - minZ,\r\n            ratio = maxZ / minZ;\r\n\r\n        for (let cascadeIndex = 0; cascadeIndex < this._cascades.length; ++cascadeIndex) {\r\n            const p = (cascadeIndex + 1) / this._numCascades,\r\n                log = minZ * ratio ** p,\r\n                uniform = minZ + range * p;\r\n\r\n            const d = this._lambda * (log - uniform) + uniform;\r\n\r\n            this._cascades[cascadeIndex].prevBreakDistance = cascadeIndex === 0 ? minDistance : this._cascades[cascadeIndex - 1].breakDistance;\r\n            this._cascades[cascadeIndex].breakDistance = (d - near) / cameraRange;\r\n\r\n            this._viewSpaceFrustumsZ[cascadeIndex] = d;\r\n            this._frustumLengths[cascadeIndex] = (this._cascades[cascadeIndex].breakDistance - this._cascades[cascadeIndex].prevBreakDistance) * cameraRange;\r\n        }\r\n\r\n        this._breaksAreDirty = false;\r\n    }\r\n\r\n    private _computeMatrices(): void {\r\n        const scene = this._scene;\r\n\r\n        const camera = scene.activeCamera;\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        Vector3.NormalizeToRef(this._light.getShadowDirection(0), this._lightDirection);\r\n        if (Math.abs(Vector3.Dot(this._lightDirection, Vector3.Up())) === 1.0) {\r\n            this._lightDirection.z = 0.0000000000001; // Required to avoid perfectly perpendicular light\r\n        }\r\n\r\n        this._cachedDirection.copyFrom(this._lightDirection);\r\n\r\n        const useReverseDepthBuffer = scene.getEngine().useReverseDepthBuffer;\r\n\r\n        for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\r\n            this._computeFrustumInWorldSpace(cascadeIndex);\r\n            this._computeCascadeFrustum(cascadeIndex);\r\n\r\n            this._cascadeMaxExtents[cascadeIndex].subtractToRef(this._cascadeMinExtents[cascadeIndex], tmpv1); // tmpv1 = cascadeExtents\r\n\r\n            // Get position of the shadow camera\r\n            this._frustumCenter[cascadeIndex].addToRef(this._lightDirection.scale(this._cascadeMinExtents[cascadeIndex].z), this._shadowCameraPos[cascadeIndex]);\r\n\r\n            // Come up with a new orthographic camera for the shadow caster\r\n            Matrix.LookAtLHToRef(this._shadowCameraPos[cascadeIndex], this._frustumCenter[cascadeIndex], UpDir, this._viewMatrices[cascadeIndex]);\r\n\r\n            let minZ = 0,\r\n                maxZ = tmpv1.z;\r\n\r\n            // Try to tighten minZ and maxZ based on the bounding box of the shadow casters\r\n            const boundingInfo = this._shadowCastersBoundingInfo;\r\n\r\n            boundingInfo.update(this._viewMatrices[cascadeIndex]);\r\n\r\n            maxZ = Math.min(maxZ, boundingInfo.boundingBox.maximumWorld.z);\r\n\r\n            if (!this._depthClamp || this.filter === ShadowGenerator.FILTER_PCSS) {\r\n                // If we don't use depth clamping, we must set minZ so that all shadow casters are in the light frustum\r\n                minZ = Math.min(minZ, boundingInfo.boundingBox.minimumWorld.z);\r\n            } else {\r\n                // If using depth clamping, we can adjust minZ to reduce the [minZ, maxZ] range (and get some additional precision in the shadow map)\r\n                minZ = Math.max(minZ, boundingInfo.boundingBox.minimumWorld.z);\r\n            }\r\n\r\n            Matrix.OrthoOffCenterLHToRef(\r\n                this._cascadeMinExtents[cascadeIndex].x,\r\n                this._cascadeMaxExtents[cascadeIndex].x,\r\n                this._cascadeMinExtents[cascadeIndex].y,\r\n                this._cascadeMaxExtents[cascadeIndex].y,\r\n                useReverseDepthBuffer ? maxZ : minZ,\r\n                useReverseDepthBuffer ? minZ : maxZ,\r\n                this._projectionMatrices[cascadeIndex],\r\n                scene.getEngine().isNDCHalfZRange\r\n            );\r\n\r\n            this._cascadeMinExtents[cascadeIndex].z = minZ;\r\n            this._cascadeMaxExtents[cascadeIndex].z = maxZ;\r\n\r\n            this._viewMatrices[cascadeIndex].multiplyToRef(this._projectionMatrices[cascadeIndex], this._transformMatrices[cascadeIndex]);\r\n\r\n            // Create the rounding matrix, by projecting the world-space origin and determining\r\n            // the fractional offset in texel space\r\n            Vector3.TransformCoordinatesToRef(ZeroVec, this._transformMatrices[cascadeIndex], tmpv1); // tmpv1 = shadowOrigin\r\n            tmpv1.scaleInPlace(this._mapSize / 2);\r\n\r\n            tmpv2.copyFromFloats(Math.round(tmpv1.x), Math.round(tmpv1.y), Math.round(tmpv1.z)); // tmpv2 = roundedOrigin\r\n            tmpv2.subtractInPlace(tmpv1).scaleInPlace(2 / this._mapSize); // tmpv2 = roundOffset\r\n\r\n            Matrix.TranslationToRef(tmpv2.x, tmpv2.y, 0.0, tmpMatrix);\r\n\r\n            this._projectionMatrices[cascadeIndex].multiplyToRef(tmpMatrix, this._projectionMatrices[cascadeIndex]);\r\n            this._viewMatrices[cascadeIndex].multiplyToRef(this._projectionMatrices[cascadeIndex], this._transformMatrices[cascadeIndex]);\r\n\r\n            this._transformMatrices[cascadeIndex].copyToArray(this._transformMatricesAsArray, cascadeIndex * 16);\r\n        }\r\n    }\r\n\r\n    // Get the 8 points of the view frustum in world space\r\n    private _computeFrustumInWorldSpace(cascadeIndex: number): void {\r\n        if (!this._scene.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        const prevSplitDist = this._cascades[cascadeIndex].prevBreakDistance,\r\n            splitDist = this._cascades[cascadeIndex].breakDistance;\r\n\r\n        const isNDCHalfZRange = this._scene.getEngine().isNDCHalfZRange;\r\n\r\n        this._scene.activeCamera.getViewMatrix(); // make sure the transformation matrix we get when calling 'getTransformationMatrix()' is calculated with an up to date view matrix\r\n\r\n        const invViewProj = Matrix.Invert(this._scene.activeCamera.getTransformationMatrix());\r\n        const cornerIndexOffset = this._scene.getEngine().useReverseDepthBuffer ? 4 : 0;\r\n        for (let cornerIndex = 0; cornerIndex < CascadedShadowGenerator._FrustumCornersNDCSpace.length; ++cornerIndex) {\r\n            tmpv1.copyFrom(CascadedShadowGenerator._FrustumCornersNDCSpace[(cornerIndex + cornerIndexOffset) % CascadedShadowGenerator._FrustumCornersNDCSpace.length]);\r\n            if (isNDCHalfZRange && tmpv1.z === -1) {\r\n                tmpv1.z = 0;\r\n            }\r\n            Vector3.TransformCoordinatesToRef(tmpv1, invViewProj, this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n        }\r\n\r\n        // Get the corners of the current cascade slice of the view frustum\r\n        for (let cornerIndex = 0; cornerIndex < CascadedShadowGenerator._FrustumCornersNDCSpace.length / 2; ++cornerIndex) {\r\n            tmpv1.copyFrom(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex + 4]).subtractInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n            tmpv2.copyFrom(tmpv1).scaleInPlace(prevSplitDist); // near corner ray\r\n            tmpv1.scaleInPlace(splitDist); // far corner ray\r\n\r\n            tmpv1.addInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n\r\n            this._frustumCornersWorldSpace[cascadeIndex][cornerIndex + 4].copyFrom(tmpv1);\r\n            this._frustumCornersWorldSpace[cascadeIndex][cornerIndex].addInPlace(tmpv2);\r\n        }\r\n    }\r\n\r\n    private _computeCascadeFrustum(cascadeIndex: number): void {\r\n        this._cascadeMinExtents[cascadeIndex].copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cascadeMaxExtents[cascadeIndex].copyFromFloats(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);\r\n        this._frustumCenter[cascadeIndex].copyFromFloats(0, 0, 0);\r\n\r\n        const camera = this._scene.activeCamera;\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        // Calculate the centroid of the view frustum slice\r\n        for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\r\n            this._frustumCenter[cascadeIndex].addInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n        }\r\n\r\n        this._frustumCenter[cascadeIndex].scaleInPlace(1 / this._frustumCornersWorldSpace[cascadeIndex].length);\r\n\r\n        if (this.stabilizeCascades) {\r\n            // Calculate the radius of a bounding sphere surrounding the frustum corners\r\n            let sphereRadius = 0;\r\n            for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\r\n                const dist = this._frustumCornersWorldSpace[cascadeIndex][cornerIndex].subtractToRef(this._frustumCenter[cascadeIndex], tmpv1).length();\r\n                sphereRadius = Math.max(sphereRadius, dist);\r\n            }\r\n\r\n            sphereRadius = Math.ceil(sphereRadius * 16) / 16;\r\n\r\n            this._cascadeMaxExtents[cascadeIndex].copyFromFloats(sphereRadius, sphereRadius, sphereRadius);\r\n            this._cascadeMinExtents[cascadeIndex].copyFromFloats(-sphereRadius, -sphereRadius, -sphereRadius);\r\n        } else {\r\n            // Create a temporary view matrix for the light\r\n            const lightCameraPos = this._frustumCenter[cascadeIndex];\r\n\r\n            this._frustumCenter[cascadeIndex].addToRef(this._lightDirection, tmpv1); // tmpv1 = look at\r\n\r\n            Matrix.LookAtLHToRef(lightCameraPos, tmpv1, UpDir, tmpMatrix); // matrix = lightView\r\n\r\n            // Calculate an AABB around the frustum corners\r\n            for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\r\n                Vector3.TransformCoordinatesToRef(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex], tmpMatrix, tmpv1);\r\n\r\n                this._cascadeMinExtents[cascadeIndex].minimizeInPlace(tmpv1);\r\n                this._cascadeMaxExtents[cascadeIndex].maximizeInPlace(tmpv1);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _recreateSceneUBOs(): void {\r\n        this._disposeSceneUBOs();\r\n        if (this._sceneUBOs) {\r\n            for (let i = 0; i < this._numCascades; ++i) {\r\n                this._sceneUBOs.push(this._scene.createSceneUniformBuffer(`Scene for CSM Shadow Generator (light \"${this._light.name}\" cascade #${i})`));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Support test.\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n        return engine._features.supportCSM;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"ShadowGeneratorSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Creates a Cascaded Shadow Generator object.\r\n     * A ShadowGenerator is the required tool to use the shadows.\r\n     * Each directional light casting shadows needs to use its own ShadowGenerator.\r\n     * Documentation : https://doc.babylonjs.com/babylon101/cascadedShadows\r\n     * @param mapSize The size of the texture what stores the shadows. Example : 1024.\r\n     * @param light The directional light object generating the shadows.\r\n     * @param usefulFloatFirst By default the generator will try to use half float textures but if you need precision (for self shadowing for instance), you can use this option to enforce full float texture.\r\n     */\r\n    constructor(mapSize: number, light: DirectionalLight, usefulFloatFirst?: boolean) {\r\n        if (!CascadedShadowGenerator.IsSupported) {\r\n            Logger.Error(\"CascadedShadowMap is not supported by the current engine.\");\r\n            return;\r\n        }\r\n\r\n        super(mapSize, light, usefulFloatFirst);\r\n\r\n        this.usePercentageCloserFiltering = true;\r\n    }\r\n\r\n    protected _initializeGenerator(): void {\r\n        this.penumbraDarkness = this.penumbraDarkness ?? 1.0;\r\n        this._numCascades = this._numCascades ?? CascadedShadowGenerator.DEFAULT_CASCADES_COUNT;\r\n        this.stabilizeCascades = this.stabilizeCascades ?? false;\r\n        this._freezeShadowCastersBoundingInfoObservable = this._freezeShadowCastersBoundingInfoObservable ?? null;\r\n        this.freezeShadowCastersBoundingInfo = this.freezeShadowCastersBoundingInfo ?? false;\r\n        this._scbiMin = this._scbiMin ?? new Vector3(0, 0, 0);\r\n        this._scbiMax = this._scbiMax ?? new Vector3(0, 0, 0);\r\n        this._shadowCastersBoundingInfo = this._shadowCastersBoundingInfo ?? new BoundingInfo(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\r\n        this._breaksAreDirty = this._breaksAreDirty ?? true;\r\n        this._minDistance = this._minDistance ?? 0;\r\n        this._maxDistance = this._maxDistance ?? 1;\r\n        this._currentLayer = this._currentLayer ?? 0;\r\n        this._shadowMaxZ = this._shadowMaxZ ?? this._scene.activeCamera?.maxZ ?? 10000;\r\n        this._debug = this._debug ?? false;\r\n        this._depthClamp = this._depthClamp ?? true;\r\n        this._cascadeBlendPercentage = this._cascadeBlendPercentage ?? 0.1;\r\n        this._lambda = this._lambda ?? 0.5;\r\n        this._autoCalcDepthBounds = this._autoCalcDepthBounds ?? false;\r\n\r\n        this._recreateSceneUBOs();\r\n\r\n        super._initializeGenerator();\r\n    }\r\n\r\n    protected _createTargetRenderTexture(): void {\r\n        const engine = this._scene.getEngine();\r\n        const size = { width: this._mapSize, height: this._mapSize, layers: this.numCascades };\r\n        this._shadowMap = new RenderTargetTexture(\r\n            this._light.name + \"_CSMShadowMap\",\r\n            size,\r\n            this._scene,\r\n            false,\r\n            true,\r\n            this._textureType,\r\n            false,\r\n            undefined,\r\n            false,\r\n            false,\r\n            undefined /*, Constants.TEXTUREFORMAT_RED*/\r\n        );\r\n        this._shadowMap.createDepthStencilTexture(engine.useReverseDepthBuffer ? Constants.GREATER : Constants.LESS, true);\r\n    }\r\n\r\n    protected _initializeShadowMap(): void {\r\n        super._initializeShadowMap();\r\n\r\n        if (this._shadowMap === null) {\r\n            return;\r\n        }\r\n\r\n        this._transformMatricesAsArray = new Float32Array(this._numCascades * 16);\r\n        this._viewSpaceFrustumsZ = new Array(this._numCascades);\r\n        this._frustumLengths = new Array(this._numCascades);\r\n        this._lightSizeUVCorrection = new Array(this._numCascades * 2);\r\n        this._depthCorrection = new Array(this._numCascades);\r\n\r\n        this._cascades = [];\r\n        this._viewMatrices = [];\r\n        this._projectionMatrices = [];\r\n        this._transformMatrices = [];\r\n        this._cascadeMinExtents = [];\r\n        this._cascadeMaxExtents = [];\r\n        this._frustumCenter = [];\r\n        this._shadowCameraPos = [];\r\n        this._frustumCornersWorldSpace = [];\r\n\r\n        for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\r\n            this._cascades[cascadeIndex] = {\r\n                prevBreakDistance: 0,\r\n                breakDistance: 0,\r\n            };\r\n\r\n            this._viewMatrices[cascadeIndex] = Matrix.Zero();\r\n            this._projectionMatrices[cascadeIndex] = Matrix.Zero();\r\n            this._transformMatrices[cascadeIndex] = Matrix.Zero();\r\n            this._cascadeMinExtents[cascadeIndex] = new Vector3();\r\n            this._cascadeMaxExtents[cascadeIndex] = new Vector3();\r\n            this._frustumCenter[cascadeIndex] = new Vector3();\r\n            this._shadowCameraPos[cascadeIndex] = new Vector3();\r\n            this._frustumCornersWorldSpace[cascadeIndex] = new Array(CascadedShadowGenerator._FrustumCornersNDCSpace.length);\r\n\r\n            for (let i = 0; i < CascadedShadowGenerator._FrustumCornersNDCSpace.length; ++i) {\r\n                this._frustumCornersWorldSpace[cascadeIndex][i] = new Vector3();\r\n            }\r\n        }\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._shadowMap.onBeforeBindObservable.clear();\r\n        this._shadowMap.onBeforeRenderObservable.clear();\r\n\r\n        this._shadowMap.onBeforeRenderObservable.add((layer: number) => {\r\n            if (this._sceneUBOs) {\r\n                this._scene.setSceneUniformBuffer(this._sceneUBOs[layer]);\r\n            }\r\n            this._currentLayer = layer;\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.setColorWrite(false);\r\n            }\r\n            this._scene.setTransformMatrix(this.getCascadeViewMatrix(layer)!, this.getCascadeProjectionMatrix(layer)!);\r\n            if (this._useUBO) {\r\n                this._scene.getSceneUniformBuffer().unbindEffect();\r\n                this._scene.finalizeSceneUbo();\r\n            }\r\n        });\r\n\r\n        this._shadowMap.onBeforeBindObservable.add(() => {\r\n            this._currentSceneUBO = this._scene.getSceneUniformBuffer();\r\n            engine._debugPushGroup?.(`cascaded shadow map generation for pass id ${engine.currentRenderPassId}`, 1);\r\n            if (this._breaksAreDirty) {\r\n                this._splitFrustum();\r\n            }\r\n            this._computeMatrices();\r\n        });\r\n\r\n        this._splitFrustum();\r\n    }\r\n\r\n    protected _bindCustomEffectForRenderSubMeshForShadowMap(subMesh: SubMesh, effect: Effect): void {\r\n        effect.setMatrix(\"viewProjection\", this.getCascadeTransformMatrix(this._currentLayer)!);\r\n    }\r\n\r\n    protected _isReadyCustomDefines(defines: any): void {\r\n        defines.push(\"#define SM_DEPTHCLAMP \" + (this._depthClamp && this._filter !== ShadowGenerator.FILTER_PCSS ? \"1\" : \"0\"));\r\n    }\r\n\r\n    /**\r\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\r\n     * @param defines Defines of the material we want to update\r\n     * @param lightIndex Index of the light in the enabled light list of the material\r\n     */\r\n    public prepareDefines(defines: any, lightIndex: number): void {\r\n        super.prepareDefines(defines, lightIndex);\r\n\r\n        const scene = this._scene;\r\n        const light = this._light;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        defines[\"SHADOWCSM\" + lightIndex] = true;\r\n        defines[\"SHADOWCSMDEBUG\" + lightIndex] = this.debug;\r\n        defines[\"SHADOWCSMNUM_CASCADES\" + lightIndex] = this.numCascades;\r\n        defines[\"SHADOWCSM_RIGHTHANDED\" + lightIndex] = scene.useRightHandedSystem;\r\n\r\n        const camera = scene.activeCamera;\r\n\r\n        if (camera && this._shadowMaxZ < camera.maxZ) {\r\n            defines[\"SHADOWCSMUSESHADOWMAXZ\" + lightIndex] = true;\r\n        }\r\n\r\n        if (this.cascadeBlendPercentage === 0) {\r\n            defines[\"SHADOWCSMNOBLEND\" + lightIndex] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\r\n     * defined in the generator but impacting the effect).\r\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\r\n     * @param effect The effect we are binfing the information for\r\n     */\r\n    public bindShadowLight(lightIndex: string, effect: Effect): void {\r\n        const light = this._light;\r\n        const scene = this._scene;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        const camera = scene.activeCamera;\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const shadowMap = this.getShadowMap();\r\n        if (!shadowMap) {\r\n            return;\r\n        }\r\n\r\n        const width = shadowMap.getSize().width;\r\n\r\n        effect.setMatrices(\"lightMatrix\" + lightIndex, this._transformMatricesAsArray);\r\n        effect.setArray(\"viewFrustumZ\" + lightIndex, this._viewSpaceFrustumsZ);\r\n        effect.setFloat(\"cascadeBlendFactor\" + lightIndex, this.cascadeBlendPercentage === 0 ? 10000 : 1 / this.cascadeBlendPercentage);\r\n        effect.setArray(\"frustumLengths\" + lightIndex, this._frustumLengths);\r\n\r\n        // Only PCF uses depth stencil texture.\r\n        if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, shadowMap);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), width, 1 / width, this.frustumEdgeFalloff, lightIndex);\r\n        } else if (this._filter === ShadowGenerator.FILTER_PCSS) {\r\n            for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\r\n                this._lightSizeUVCorrection[cascadeIndex * 2 + 0] =\r\n                    cascadeIndex === 0\r\n                        ? 1\r\n                        : (this._cascadeMaxExtents[0].x - this._cascadeMinExtents[0].x) / (this._cascadeMaxExtents[cascadeIndex].x - this._cascadeMinExtents[cascadeIndex].x); // x correction\r\n                this._lightSizeUVCorrection[cascadeIndex * 2 + 1] =\r\n                    cascadeIndex === 0\r\n                        ? 1\r\n                        : (this._cascadeMaxExtents[0].y - this._cascadeMinExtents[0].y) / (this._cascadeMaxExtents[cascadeIndex].y - this._cascadeMinExtents[cascadeIndex].y); // y correction\r\n                this._depthCorrection[cascadeIndex] =\r\n                    cascadeIndex === 0\r\n                        ? 1\r\n                        : (this._cascadeMaxExtents[cascadeIndex].z - this._cascadeMinExtents[cascadeIndex].z) / (this._cascadeMaxExtents[0].z - this._cascadeMinExtents[0].z);\r\n            }\r\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, shadowMap);\r\n            effect.setTexture(\"depthSampler\" + lightIndex, shadowMap);\r\n            effect.setArray2(\"lightSizeUVCorrection\" + lightIndex, this._lightSizeUVCorrection);\r\n            effect.setArray(\"depthCorrection\" + lightIndex, this._depthCorrection);\r\n            effect.setFloat(\"penumbraDarkness\" + lightIndex, this.penumbraDarkness);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), 1 / width, this._contactHardeningLightSizeUVRatio * width, this.frustumEdgeFalloff, lightIndex);\r\n        } else {\r\n            effect.setTexture(\"shadowSampler\" + lightIndex, shadowMap);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), width, 1 / width, this.frustumEdgeFalloff, lightIndex);\r\n        }\r\n\r\n        light._uniformBuffer.updateFloat2(\r\n            \"depthValues\",\r\n            this.getLight().getDepthMinZ(camera),\r\n            this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera),\r\n            lightIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix of the first cascade used to project the meshes into the map from the light point of view.\r\n     * (eq to view projection * shadow projection matrices)\r\n     * @returns The transform matrix used to create the shadow map\r\n     */\r\n    public getTransformMatrix(): Matrix {\r\n        return this.getCascadeTransformMatrix(0)!;\r\n    }\r\n\r\n    /**\r\n     * Disposes the ShadowGenerator.\r\n     * Returns nothing.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        if (this._freezeShadowCastersBoundingInfoObservable) {\r\n            this._scene.onBeforeRenderObservable.remove(this._freezeShadowCastersBoundingInfoObservable);\r\n            this._freezeShadowCastersBoundingInfoObservable = null;\r\n        }\r\n\r\n        if (this._depthReducer) {\r\n            this._depthReducer.dispose();\r\n            this._depthReducer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the shadow generator setup to a json object.\r\n     * @returns The serialized JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = super.serialize();\r\n        const shadowMap = this.getShadowMap();\r\n\r\n        if (!shadowMap) {\r\n            return serializationObject;\r\n        }\r\n\r\n        serializationObject.numCascades = this._numCascades;\r\n        serializationObject.debug = this._debug;\r\n        serializationObject.stabilizeCascades = this.stabilizeCascades;\r\n        serializationObject.lambda = this._lambda;\r\n        serializationObject.cascadeBlendPercentage = this.cascadeBlendPercentage;\r\n        serializationObject.depthClamp = this._depthClamp;\r\n        serializationObject.autoCalcDepthBounds = this.autoCalcDepthBounds;\r\n        serializationObject.shadowMaxZ = this._shadowMaxZ;\r\n        serializationObject.penumbraDarkness = this.penumbraDarkness;\r\n\r\n        serializationObject.freezeShadowCastersBoundingInfo = this._freezeShadowCastersBoundingInfo;\r\n        serializationObject.minDistance = this.minDistance;\r\n        serializationObject.maxDistance = this.maxDistance;\r\n\r\n        serializationObject.renderList = [];\r\n        if (shadowMap.renderList) {\r\n            for (let meshIndex = 0; meshIndex < shadowMap.renderList.length; meshIndex++) {\r\n                const mesh = shadowMap.renderList[meshIndex];\r\n\r\n                serializationObject.renderList.push(mesh.id);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized ShadowGenerator and returns a new ShadowGenerator.\r\n     * @param parsedShadowGenerator The JSON object to parse\r\n     * @param scene The scene to create the shadow map for\r\n     * @returns The parsed shadow generator\r\n     */\r\n    public static Parse(parsedShadowGenerator: any, scene: Scene): ShadowGenerator {\r\n        const shadowGenerator = ShadowGenerator.Parse(\r\n            parsedShadowGenerator,\r\n            scene,\r\n            (mapSize: number, light: IShadowLight) => new CascadedShadowGenerator(mapSize, <DirectionalLight>light)\r\n        ) as CascadedShadowGenerator;\r\n\r\n        if (parsedShadowGenerator.numCascades !== undefined) {\r\n            shadowGenerator.numCascades = parsedShadowGenerator.numCascades;\r\n        }\r\n\r\n        if (parsedShadowGenerator.debug !== undefined) {\r\n            shadowGenerator.debug = parsedShadowGenerator.debug;\r\n        }\r\n\r\n        if (parsedShadowGenerator.stabilizeCascades !== undefined) {\r\n            shadowGenerator.stabilizeCascades = parsedShadowGenerator.stabilizeCascades;\r\n        }\r\n\r\n        if (parsedShadowGenerator.lambda !== undefined) {\r\n            shadowGenerator.lambda = parsedShadowGenerator.lambda;\r\n        }\r\n\r\n        if (parsedShadowGenerator.cascadeBlendPercentage !== undefined) {\r\n            shadowGenerator.cascadeBlendPercentage = parsedShadowGenerator.cascadeBlendPercentage;\r\n        }\r\n\r\n        if (parsedShadowGenerator.depthClamp !== undefined) {\r\n            shadowGenerator.depthClamp = parsedShadowGenerator.depthClamp;\r\n        }\r\n\r\n        if (parsedShadowGenerator.autoCalcDepthBounds !== undefined) {\r\n            shadowGenerator.autoCalcDepthBounds = parsedShadowGenerator.autoCalcDepthBounds;\r\n        }\r\n\r\n        if (parsedShadowGenerator.shadowMaxZ !== undefined) {\r\n            shadowGenerator.shadowMaxZ = parsedShadowGenerator.shadowMaxZ;\r\n        }\r\n\r\n        if (parsedShadowGenerator.penumbraDarkness !== undefined) {\r\n            shadowGenerator.penumbraDarkness = parsedShadowGenerator.penumbraDarkness;\r\n        }\r\n\r\n        if (parsedShadowGenerator.freezeShadowCastersBoundingInfo !== undefined) {\r\n            shadowGenerator.freezeShadowCastersBoundingInfo = parsedShadowGenerator.freezeShadowCastersBoundingInfo;\r\n        }\r\n\r\n        if (parsedShadowGenerator.minDistance !== undefined && parsedShadowGenerator.maxDistance !== undefined) {\r\n            shadowGenerator.setMinMaxDistance(parsedShadowGenerator.minDistance, parsedShadowGenerator.maxDistance);\r\n        }\r\n\r\n        return shadowGenerator;\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"shadowMapFragmentSoftTransparentShadow\";\nconst shader = `#if SM_SOFTTRANSPARENTSHADOW==1\nif ((bayerDither8(floor(mod(gl_FragCoord.xy,8.0))))/64.0>=softTransparentShadowSM*alpha) discard;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapFragmentSoftTransparentShadow = { name, shader };\n","import type { SmartArray } from \"../../Misc/smartArray\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\n\r\nimport type { IShadowLight } from \"../../Lights/shadowLight\";\r\nimport { Light } from \"../../Lights/light\";\r\nimport type { MaterialDefines } from \"../../Materials/materialDefines\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\nimport type { Effect, IEffectCreationOptions } from \"../../Materials/effect\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\n\r\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\r\nimport { BlurPostProcess } from \"../../PostProcesses/blurPostProcess\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { _WarnImport } from \"../../Misc/devTools\";\r\nimport { EffectFallbacks } from \"../../Materials/effectFallbacks\";\r\nimport { RenderingManager } from \"../../Rendering/renderingManager\";\r\nimport { DrawWrapper } from \"../../Materials/drawWrapper\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\n\r\nimport \"../../Shaders/shadowMap.fragment\";\r\nimport \"../../Shaders/shadowMap.vertex\";\r\nimport \"../../Shaders/depthBoxBlur.fragment\";\r\nimport \"../../Shaders/ShadersInclude/shadowMapFragmentSoftTransparentShadow\";\r\n\r\n/**\r\n * Defines the options associated with the creation of a custom shader for a shadow generator.\r\n */\r\nexport interface ICustomShaderOptions {\r\n    /**\r\n     * Gets or sets the custom shader name to use\r\n     */\r\n    shaderName: string;\r\n\r\n    /**\r\n     * The list of attribute names used in the shader\r\n     */\r\n    attributes?: string[];\r\n\r\n    /**\r\n     * The list of uniform names used in the shader\r\n     */\r\n    uniforms?: string[];\r\n\r\n    /**\r\n     * The list of sampler names used in the shader\r\n     */\r\n    samplers?: string[];\r\n\r\n    /**\r\n     * The list of defines used in the shader\r\n     */\r\n    defines?: string[];\r\n}\r\n\r\n/**\r\n * Interface to implement to create a shadow generator compatible with BJS.\r\n */\r\nexport interface IShadowGenerator {\r\n    /** Gets or set the id of the shadow generator. It will be the one from the light if not defined */\r\n    id: string;\r\n    /**\r\n     * Gets the main RTT containing the shadow map (usually storing depth from the light point of view).\r\n     * @returns The render target texture if present otherwise, null\r\n     */\r\n    getShadowMap(): Nullable<RenderTargetTexture>;\r\n\r\n    /**\r\n     * Determine whether the shadow generator is ready or not (mainly all effects and related post processes needs to be ready).\r\n     * @param subMesh The submesh we want to render in the shadow map\r\n     * @param useInstances Defines whether will draw in the map using instances\r\n     * @param isTransparent Indicates that isReady is called for a transparent subMesh\r\n     * @returns true if ready otherwise, false\r\n     */\r\n    isReady(subMesh: SubMesh, useInstances: boolean, isTransparent: boolean): boolean;\r\n\r\n    /**\r\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\r\n     * @param defines Defines of the material we want to update\r\n     * @param lightIndex Index of the light in the enabled light list of the material\r\n     */\r\n    prepareDefines(defines: MaterialDefines, lightIndex: number): void;\r\n    /**\r\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\r\n     * defined in the generator but impacting the effect).\r\n     * It implies the uniforms available on the materials are the standard BJS ones.\r\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\r\n     * @param effect The effect we are binding the information for\r\n     */\r\n    bindShadowLight(lightIndex: string, effect: Effect): void;\r\n    /**\r\n     * Gets the transformation matrix used to project the meshes into the map from the light point of view.\r\n     * (eq to shadow projection matrix * light transform matrix)\r\n     * @returns The transform matrix used to create the shadow map\r\n     */\r\n    getTransformMatrix(): Matrix;\r\n\r\n    /**\r\n     * Recreates the shadow map dependencies like RTT and post processes. This can be used during the switch between\r\n     * Cube and 2D textures for instance.\r\n     */\r\n    recreateShadowMap(): void;\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param onCompiled Callback triggered at the and of the effects compilation\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     */\r\n    forceCompilation(onCompiled?: (generator: IShadowGenerator) => void, options?: Partial<{ useInstances: boolean }>): void;\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     * @returns A promise that resolves when the compilation completes\r\n     */\r\n    forceCompilationAsync(options?: Partial<{ useInstances: boolean }>): Promise<void>;\r\n\r\n    /**\r\n     * Serializes the shadow generator setup to a json object.\r\n     * @returns The serialized JSON object\r\n     */\r\n    serialize(): any;\r\n\r\n    /**\r\n     * Disposes the Shadow map and related Textures and effects.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\n/**\r\n * Default implementation IShadowGenerator.\r\n * This is the main object responsible of generating shadows in the framework.\r\n * Documentation: https://doc.babylonjs.com/babylon101/shadows\r\n */\r\nexport class ShadowGenerator implements IShadowGenerator {\r\n    /**\r\n     * Name of the shadow generator class\r\n     */\r\n    public static CLASSNAME = \"ShadowGenerator\";\r\n\r\n    /**\r\n     * Shadow generator mode None: no filtering applied.\r\n     */\r\n    public static readonly FILTER_NONE = 0;\r\n    /**\r\n     * Shadow generator mode ESM: Exponential Shadow Mapping.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_EXPONENTIALSHADOWMAP = 1;\r\n    /**\r\n     * Shadow generator mode Poisson Sampling: Percentage Closer Filtering.\r\n     * (Multiple Tap around evenly distributed around the pixel are used to evaluate the shadow strength)\r\n     */\r\n    public static readonly FILTER_POISSONSAMPLING = 2;\r\n    /**\r\n     * Shadow generator mode ESM: Blurred Exponential Shadow Mapping.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_BLUREXPONENTIALSHADOWMAP = 3;\r\n    /**\r\n     * Shadow generator mode ESM: Exponential Shadow Mapping using the inverse of the exponential preventing\r\n     * edge artifacts on steep falloff.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_CLOSEEXPONENTIALSHADOWMAP = 4;\r\n    /**\r\n     * Shadow generator mode ESM: Blurred Exponential Shadow Mapping using the inverse of the exponential preventing\r\n     * edge artifacts on steep falloff.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_BLURCLOSEEXPONENTIALSHADOWMAP = 5;\r\n    /**\r\n     * Shadow generator mode PCF: Percentage Closer Filtering\r\n     * benefits from Webgl 2 shadow samplers. Fallback to Poisson Sampling in Webgl 1\r\n     * (https://developer.nvidia.com/gpugems/GPUGems/gpugems_ch11.html)\r\n     */\r\n    public static readonly FILTER_PCF = 6;\r\n    /**\r\n     * Shadow generator mode PCSS: Percentage Closering Soft Shadow.\r\n     * benefits from Webgl 2 shadow samplers. Fallback to Poisson Sampling in Webgl 1\r\n     * Contact Hardening\r\n     */\r\n    public static readonly FILTER_PCSS = 7;\r\n\r\n    /**\r\n     * Reserved for PCF and PCSS\r\n     * Highest Quality.\r\n     *\r\n     * Execute PCF on a 5*5 kernel improving a lot the shadow aliasing artifacts.\r\n     *\r\n     * Execute PCSS with 32 taps blocker search and 64 taps PCF.\r\n     */\r\n    public static readonly QUALITY_HIGH = 0;\r\n    /**\r\n     * Reserved for PCF and PCSS\r\n     * Good tradeoff for quality/perf cross devices\r\n     *\r\n     * Execute PCF on a 3*3 kernel.\r\n     *\r\n     * Execute PCSS with 16 taps blocker search and 32 taps PCF.\r\n     */\r\n    public static readonly QUALITY_MEDIUM = 1;\r\n    /**\r\n     * Reserved for PCF and PCSS\r\n     * The lowest quality but the fastest.\r\n     *\r\n     * Execute PCF on a 1*1 kernel.\r\n     *\r\n     * Execute PCSS with 16 taps blocker search and 16 taps PCF.\r\n     */\r\n    public static readonly QUALITY_LOW = 2;\r\n\r\n    /**\r\n     * Defines the default alpha cutoff value used for transparent alpha tested materials.\r\n     */\r\n    public static DEFAULT_ALPHA_CUTOFF = 0.5;\r\n\r\n    /** Gets or set the id of the shadow generator. It will be the one from the light if not defined */\r\n    public id: string;\r\n\r\n    /** Gets or sets the custom shader name to use */\r\n    public customShaderOptions: ICustomShaderOptions;\r\n\r\n    /** Gets or sets a custom function to allow/disallow rendering a sub mesh in the shadow map */\r\n    public customAllowRendering: (subMesh: SubMesh) => boolean;\r\n\r\n    /**\r\n     * Observable triggered before the shadow is rendered. Can be used to update internal effect state\r\n     */\r\n    public onBeforeShadowMapRenderObservable = new Observable<Effect>();\r\n\r\n    /**\r\n     * Observable triggered after the shadow is rendered. Can be used to restore internal effect state\r\n     */\r\n    public onAfterShadowMapRenderObservable = new Observable<Effect>();\r\n\r\n    /**\r\n     * Observable triggered before a mesh is rendered in the shadow map.\r\n     * Can be used to update internal effect state (that you can get from the onBeforeShadowMapRenderObservable)\r\n     */\r\n    public onBeforeShadowMapRenderMeshObservable = new Observable<Mesh>();\r\n\r\n    /**\r\n     * Observable triggered after a mesh is rendered in the shadow map.\r\n     * Can be used to update internal effect state (that you can get from the onAfterShadowMapRenderObservable)\r\n     */\r\n    public onAfterShadowMapRenderMeshObservable = new Observable<Mesh>();\r\n\r\n    protected _bias = 0.00005;\r\n    /**\r\n     * Gets the bias: offset applied on the depth preventing acnea (in light direction).\r\n     */\r\n    public get bias(): number {\r\n        return this._bias;\r\n    }\r\n    /**\r\n     * Sets the bias: offset applied on the depth preventing acnea (in light direction).\r\n     */\r\n    public set bias(bias: number) {\r\n        this._bias = bias;\r\n    }\r\n\r\n    protected _normalBias = 0;\r\n    /**\r\n     * Gets the normalBias: offset applied on the depth preventing acnea (along side the normal direction and proportional to the light/normal angle).\r\n     */\r\n    public get normalBias(): number {\r\n        return this._normalBias;\r\n    }\r\n    /**\r\n     * Sets the normalBias: offset applied on the depth preventing acnea (along side the normal direction and proportional to the light/normal angle).\r\n     */\r\n    public set normalBias(normalBias: number) {\r\n        this._normalBias = normalBias;\r\n    }\r\n\r\n    protected _blurBoxOffset = 1;\r\n    /**\r\n     * Gets the blur box offset: offset applied during the blur pass.\r\n     * Only useful if useKernelBlur = false\r\n     */\r\n    public get blurBoxOffset(): number {\r\n        return this._blurBoxOffset;\r\n    }\r\n    /**\r\n     * Sets the blur box offset: offset applied during the blur pass.\r\n     * Only useful if useKernelBlur = false\r\n     */\r\n    public set blurBoxOffset(value: number) {\r\n        if (this._blurBoxOffset === value) {\r\n            return;\r\n        }\r\n\r\n        this._blurBoxOffset = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _blurScale = 2;\r\n    /**\r\n     * Gets the blur scale: scale of the blurred texture compared to the main shadow map.\r\n     * 2 means half of the size.\r\n     */\r\n    public get blurScale(): number {\r\n        return this._blurScale;\r\n    }\r\n    /**\r\n     * Sets the blur scale: scale of the blurred texture compared to the main shadow map.\r\n     * 2 means half of the size.\r\n     */\r\n    public set blurScale(value: number) {\r\n        if (this._blurScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._blurScale = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _blurKernel = 1;\r\n    /**\r\n     * Gets the blur kernel: kernel size of the blur pass.\r\n     * Only useful if useKernelBlur = true\r\n     */\r\n    public get blurKernel(): number {\r\n        return this._blurKernel;\r\n    }\r\n    /**\r\n     * Sets the blur kernel: kernel size of the blur pass.\r\n     * Only useful if useKernelBlur = true\r\n     */\r\n    public set blurKernel(value: number) {\r\n        if (this._blurKernel === value) {\r\n            return;\r\n        }\r\n\r\n        this._blurKernel = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _useKernelBlur = false;\r\n    /**\r\n     * Gets whether the blur pass is a kernel blur (if true) or box blur.\r\n     * Only useful in filtered mode (useBlurExponentialShadowMap...)\r\n     */\r\n    public get useKernelBlur(): boolean {\r\n        return this._useKernelBlur;\r\n    }\r\n    /**\r\n     * Sets whether the blur pass is a kernel blur (if true) or box blur.\r\n     * Only useful in filtered mode (useBlurExponentialShadowMap...)\r\n     */\r\n    public set useKernelBlur(value: boolean) {\r\n        if (this._useKernelBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._useKernelBlur = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _depthScale: number;\r\n    /**\r\n     * Gets the depth scale used in ESM mode.\r\n     */\r\n    public get depthScale(): number {\r\n        return this._depthScale !== undefined ? this._depthScale : this._light.getDepthScale();\r\n    }\r\n    /**\r\n     * Sets the depth scale used in ESM mode.\r\n     * This can override the scale stored on the light.\r\n     */\r\n    public set depthScale(value: number) {\r\n        this._depthScale = value;\r\n    }\r\n\r\n    protected _validateFilter(filter: number): number {\r\n        return filter;\r\n    }\r\n\r\n    protected _filter = ShadowGenerator.FILTER_NONE;\r\n    /**\r\n     * Gets the current mode of the shadow generator (normal, PCF, ESM...).\r\n     * The returned value is a number equal to one of the available mode defined in ShadowMap.FILTER_x like _FILTER_NONE\r\n     */\r\n    public get filter(): number {\r\n        return this._filter;\r\n    }\r\n    /**\r\n     * Sets the current mode of the shadow generator (normal, PCF, ESM...).\r\n     * The returned value is a number equal to one of the available mode defined in ShadowMap.FILTER_x like _FILTER_NONE\r\n     */\r\n    public set filter(value: number) {\r\n        value = this._validateFilter(value);\r\n\r\n        // Blurring the cubemap is going to be too expensive. Reverting to unblurred version\r\n        if (this._light.needCube()) {\r\n            if (value === ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP) {\r\n                this.useExponentialShadowMap = true;\r\n                return;\r\n            } else if (value === ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP) {\r\n                this.useCloseExponentialShadowMap = true;\r\n                return;\r\n            }\r\n            // PCF on cubemap would also be expensive\r\n            else if (value === ShadowGenerator.FILTER_PCF || value === ShadowGenerator.FILTER_PCSS) {\r\n                this.usePoissonSampling = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Weblg1 fallback for PCF.\r\n        if (value === ShadowGenerator.FILTER_PCF || value === ShadowGenerator.FILTER_PCSS) {\r\n            if (!this._scene.getEngine()._features.supportShadowSamplers) {\r\n                this.usePoissonSampling = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._filter === value) {\r\n            return;\r\n        }\r\n\r\n        this._filter = value;\r\n        this._disposeBlurPostProcesses();\r\n        this._applyFilterValues();\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to Poisson Sampling.\r\n     */\r\n    public get usePoissonSampling(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_POISSONSAMPLING;\r\n    }\r\n    /**\r\n     * Sets the current filter to Poisson Sampling.\r\n     */\r\n    public set usePoissonSampling(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_POISSONSAMPLING);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_POISSONSAMPLING) {\r\n            return;\r\n        }\r\n\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to ESM.\r\n     */\r\n    public get useExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Sets the current filter is to ESM.\r\n     */\r\n    public set useExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to filtered ESM.\r\n     */\r\n    public get useBlurExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Gets if the current filter is set to filtered  ESM.\r\n     */\r\n    public set useBlurExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public get useCloseExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Sets the current filter to \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public set useCloseExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to filtered \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public get useBlurCloseExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Sets the current filter to filtered \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public set useBlurCloseExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to \"PCF\" (percentage closer filtering).\r\n     */\r\n    public get usePercentageCloserFiltering(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_PCF;\r\n    }\r\n    /**\r\n     * Sets the current filter to \"PCF\" (percentage closer filtering).\r\n     */\r\n    public set usePercentageCloserFiltering(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_PCF);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_PCF) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    protected _filteringQuality = ShadowGenerator.QUALITY_HIGH;\r\n    /**\r\n     * Gets the PCF or PCSS Quality.\r\n     * Only valid if usePercentageCloserFiltering or usePercentageCloserFiltering is true.\r\n     */\r\n    public get filteringQuality(): number {\r\n        return this._filteringQuality;\r\n    }\r\n    /**\r\n     * Sets the PCF or PCSS Quality.\r\n     * Only valid if usePercentageCloserFiltering or usePercentageCloserFiltering is true.\r\n     */\r\n    public set filteringQuality(filteringQuality: number) {\r\n        if (this._filteringQuality === filteringQuality) {\r\n            return;\r\n        }\r\n\r\n        this._filteringQuality = filteringQuality;\r\n\r\n        this._disposeBlurPostProcesses();\r\n        this._applyFilterValues();\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to \"PCSS\" (contact hardening).\r\n     */\r\n    public get useContactHardeningShadow(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_PCSS;\r\n    }\r\n    /**\r\n     * Sets the current filter to \"PCSS\" (contact hardening).\r\n     */\r\n    public set useContactHardeningShadow(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_PCSS);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_PCSS) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    protected _contactHardeningLightSizeUVRatio = 0.1;\r\n    /**\r\n     * Gets the Light Size (in shadow map uv unit) used in PCSS to determine the blocker search area and the penumbra size.\r\n     * Using a ratio helps keeping shape stability independently of the map size.\r\n     *\r\n     * It does not account for the light projection as it was having too much\r\n     * instability during the light setup or during light position changes.\r\n     *\r\n     * Only valid if useContactHardeningShadow is true.\r\n     */\r\n    public get contactHardeningLightSizeUVRatio(): number {\r\n        return this._contactHardeningLightSizeUVRatio;\r\n    }\r\n    /**\r\n     * Sets the Light Size (in shadow map uv unit) used in PCSS to determine the blocker search area and the penumbra size.\r\n     * Using a ratio helps keeping shape stability independently of the map size.\r\n     *\r\n     * It does not account for the light projection as it was having too much\r\n     * instability during the light setup or during light position changes.\r\n     *\r\n     * Only valid if useContactHardeningShadow is true.\r\n     */\r\n    public set contactHardeningLightSizeUVRatio(contactHardeningLightSizeUVRatio: number) {\r\n        this._contactHardeningLightSizeUVRatio = contactHardeningLightSizeUVRatio;\r\n    }\r\n\r\n    protected _darkness = 0;\r\n\r\n    /** Gets or sets the actual darkness of a shadow */\r\n    public get darkness() {\r\n        return this._darkness;\r\n    }\r\n\r\n    public set darkness(value: number) {\r\n        this.setDarkness(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the darkness value (float). This can only decrease the actual darkness of a shadow.\r\n     * 0 means strongest and 1 would means no shadow.\r\n     * @returns the darkness.\r\n     */\r\n    public getDarkness(): number {\r\n        return this._darkness;\r\n    }\r\n    /**\r\n     * Sets the darkness value (float). This can only decrease the actual darkness of a shadow.\r\n     * @param darkness The darkness value 0 means strongest and 1 would means no shadow.\r\n     * @returns the shadow generator allowing fluent coding.\r\n     */\r\n    public setDarkness(darkness: number): ShadowGenerator {\r\n        if (darkness >= 1.0) {\r\n            this._darkness = 1.0;\r\n        } else if (darkness <= 0.0) {\r\n            this._darkness = 0.0;\r\n        } else {\r\n            this._darkness = darkness;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected _transparencyShadow = false;\r\n\r\n    /** Gets or sets the ability to have transparent shadow  */\r\n    public get transparencyShadow() {\r\n        return this._transparencyShadow;\r\n    }\r\n\r\n    public set transparencyShadow(value: boolean) {\r\n        this.setTransparencyShadow(value);\r\n    }\r\n\r\n    /**\r\n     * Sets the ability to have transparent shadow (boolean).\r\n     * @param transparent True if transparent else False\r\n     * @returns the shadow generator allowing fluent coding\r\n     */\r\n    public setTransparencyShadow(transparent: boolean): ShadowGenerator {\r\n        this._transparencyShadow = transparent;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Enables or disables shadows with varying strength based on the transparency\r\n     * When it is enabled, the strength of the shadow is taken equal to mesh.visibility\r\n     * If you enabled an alpha texture on your material, the alpha value red from the texture is also combined to compute the strength:\r\n     *          mesh.visibility * alphaTexture.a\r\n     * The texture used is the diffuse by default, but it can be set to the opacity by setting useOpacityTextureForTransparentShadow\r\n     * Note that by definition transparencyShadow must be set to true for enableSoftTransparentShadow to work!\r\n     */\r\n    public enableSoftTransparentShadow: boolean = false;\r\n\r\n    /**\r\n     * If this is true, use the opacity texture's alpha channel for transparent shadows instead of the diffuse one\r\n     */\r\n    public useOpacityTextureForTransparentShadow: boolean = false;\r\n\r\n    protected _shadowMap: Nullable<RenderTargetTexture>;\r\n    protected _shadowMap2: Nullable<RenderTargetTexture>;\r\n\r\n    /**\r\n     * Gets the main RTT containing the shadow map (usually storing depth from the light point of view).\r\n     * @returns The render target texture if present otherwise, null\r\n     */\r\n    public getShadowMap(): Nullable<RenderTargetTexture> {\r\n        return this._shadowMap;\r\n    }\r\n\r\n    /**\r\n     * Gets the RTT used during rendering (can be a blurred version of the shadow map or the shadow map itself).\r\n     * @returns The render target texture if the shadow map is present otherwise, null\r\n     */\r\n    public getShadowMapForRendering(): Nullable<RenderTargetTexture> {\r\n        if (this._shadowMap2) {\r\n            return this._shadowMap2;\r\n        }\r\n\r\n        return this._shadowMap;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of that object\r\n     * @returns \"ShadowGenerator\"\r\n     */\r\n    public getClassName(): string {\r\n        return ShadowGenerator.CLASSNAME;\r\n    }\r\n\r\n    /**\r\n     * Helper function to add a mesh and its descendants to the list of shadow casters.\r\n     * @param mesh Mesh to add\r\n     * @param includeDescendants boolean indicating if the descendants should be added. Default to true\r\n     * @returns the Shadow Generator itself\r\n     */\r\n    public addShadowCaster(mesh: AbstractMesh, includeDescendants = true): ShadowGenerator {\r\n        if (!this._shadowMap) {\r\n            return this;\r\n        }\r\n\r\n        if (!this._shadowMap.renderList) {\r\n            this._shadowMap.renderList = [];\r\n        }\r\n\r\n        if (this._shadowMap.renderList.indexOf(mesh) === -1) {\r\n            this._shadowMap.renderList.push(mesh);\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (const childMesh of mesh.getChildMeshes()) {\r\n                if (this._shadowMap.renderList.indexOf(childMesh) === -1) {\r\n                    this._shadowMap.renderList.push(childMesh);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Helper function to remove a mesh and its descendants from the list of shadow casters\r\n     * @param mesh Mesh to remove\r\n     * @param includeDescendants boolean indicating if the descendants should be removed. Default to true\r\n     * @returns the Shadow Generator itself\r\n     */\r\n    public removeShadowCaster(mesh: AbstractMesh, includeDescendants = true): ShadowGenerator {\r\n        if (!this._shadowMap || !this._shadowMap.renderList) {\r\n            return this;\r\n        }\r\n\r\n        const index = this._shadowMap.renderList.indexOf(mesh);\r\n\r\n        if (index !== -1) {\r\n            this._shadowMap.renderList.splice(index, 1);\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (const child of mesh.getChildren()) {\r\n                this.removeShadowCaster(<any>child);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Controls the extent to which the shadows fade out at the edge of the frustum\r\n     */\r\n    public frustumEdgeFalloff = 0;\r\n\r\n    protected _light: IShadowLight;\r\n    /**\r\n     * Returns the associated light object.\r\n     * @returns the light generating the shadow\r\n     */\r\n    public getLight(): IShadowLight {\r\n        return this._light;\r\n    }\r\n\r\n    /**\r\n     * If true the shadow map is generated by rendering the back face of the mesh instead of the front face.\r\n     * This can help with self-shadowing as the geometry making up the back of objects is slightly offset.\r\n     * It might on the other hand introduce peter panning.\r\n     */\r\n    public forceBackFacesOnly = false;\r\n\r\n    protected _scene: Scene;\r\n    protected _lightDirection = Vector3.Zero();\r\n\r\n    protected _viewMatrix = Matrix.Zero();\r\n    protected _projectionMatrix = Matrix.Zero();\r\n    protected _transformMatrix = Matrix.Zero();\r\n    protected _cachedPosition: Vector3 = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    protected _cachedDirection: Vector3 = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    protected _cachedDefines: string;\r\n    protected _currentRenderId: number;\r\n    protected _boxBlurPostprocess: Nullable<PostProcess>;\r\n    protected _kernelBlurXPostprocess: Nullable<PostProcess>;\r\n    protected _kernelBlurYPostprocess: Nullable<PostProcess>;\r\n    protected _blurPostProcesses: PostProcess[];\r\n    protected _mapSize: number;\r\n    protected _currentFaceIndex = 0;\r\n    protected _currentFaceIndexCache = 0;\r\n    protected _textureType: number;\r\n    protected _defaultTextureMatrix = Matrix.Identity();\r\n    protected _storedUniqueId: Nullable<number>;\r\n    protected _useUBO: boolean;\r\n    protected _sceneUBOs: UniformBuffer[];\r\n    protected _currentSceneUBO: UniformBuffer;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"ShadowGeneratorSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Gets or sets the size of the texture what stores the shadows\r\n     */\r\n    public get mapSize(): number {\r\n        return this._mapSize;\r\n    }\r\n\r\n    public set mapSize(size: number) {\r\n        this._mapSize = size;\r\n        this._light._markMeshesAsLightDirty();\r\n        this.recreateShadowMap();\r\n    }\r\n\r\n    /**\r\n     * Creates a ShadowGenerator object.\r\n     * A ShadowGenerator is the required tool to use the shadows.\r\n     * Each light casting shadows needs to use its own ShadowGenerator.\r\n     * Documentation : https://doc.babylonjs.com/babylon101/shadows\r\n     * @param mapSize The size of the texture what stores the shadows. Example : 1024.\r\n     * @param light The light object generating the shadows.\r\n     * @param usefullFloatFirst By default the generator will try to use half float textures but if you need precision (for self shadowing for instance), you can use this option to enforce full float texture.\r\n     */\r\n    constructor(mapSize: number, light: IShadowLight, usefullFloatFirst?: boolean) {\r\n        this._mapSize = mapSize;\r\n        this._light = light;\r\n        this._scene = light.getScene();\r\n        light._shadowGenerator = this;\r\n        this.id = light.id;\r\n        this._useUBO = this._scene.getEngine().supportsUniformBuffers;\r\n\r\n        if (this._useUBO) {\r\n            this._sceneUBOs = [];\r\n            this._sceneUBOs.push(this._scene.createSceneUniformBuffer(`Scene for Shadow Generator (light \"${this._light.name}\")`));\r\n        }\r\n\r\n        ShadowGenerator._SceneComponentInitialization(this._scene);\r\n\r\n        // Texture type fallback from float to int if not supported.\r\n        const caps = this._scene.getEngine().getCaps();\r\n\r\n        if (!usefullFloatFirst) {\r\n            if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n            } else if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_FLOAT;\r\n            } else {\r\n                this._textureType = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n            }\r\n        } else {\r\n            if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_FLOAT;\r\n            } else if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n            } else {\r\n                this._textureType = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n            }\r\n        }\r\n\r\n        this._initializeGenerator();\r\n        this._applyFilterValues();\r\n    }\r\n\r\n    protected _initializeGenerator(): void {\r\n        this._light._markMeshesAsLightDirty();\r\n        this._initializeShadowMap();\r\n    }\r\n\r\n    protected _createTargetRenderTexture(): void {\r\n        const engine = this._scene.getEngine();\r\n        if (engine._features.supportDepthStencilTexture) {\r\n            this._shadowMap = new RenderTargetTexture(\r\n                this._light.name + \"_shadowMap\",\r\n                this._mapSize,\r\n                this._scene,\r\n                false,\r\n                true,\r\n                this._textureType,\r\n                this._light.needCube(),\r\n                undefined,\r\n                false,\r\n                false\r\n            );\r\n            this._shadowMap.createDepthStencilTexture(engine.useReverseDepthBuffer ? Constants.GREATER : Constants.LESS, true);\r\n        } else {\r\n            this._shadowMap = new RenderTargetTexture(this._light.name + \"_shadowMap\", this._mapSize, this._scene, false, true, this._textureType, this._light.needCube());\r\n        }\r\n    }\r\n\r\n    protected _initializeShadowMap(): void {\r\n        this._createTargetRenderTexture();\r\n\r\n        if (this._shadowMap === null) {\r\n            return;\r\n        }\r\n\r\n        this._shadowMap.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._shadowMap.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._shadowMap.anisotropicFilteringLevel = 1;\r\n        this._shadowMap.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\r\n        this._shadowMap.renderParticles = false;\r\n        this._shadowMap.ignoreCameraViewport = true;\r\n        if (this._storedUniqueId) {\r\n            this._shadowMap.uniqueId = this._storedUniqueId;\r\n        }\r\n\r\n        // Custom render function.\r\n        this._shadowMap.customRenderFunction = this._renderForShadowMap.bind(this);\r\n\r\n        // Force the mesh is ready function to true as we are double checking it\r\n        // in the custom render function. Also it prevents side effects and useless\r\n        // shader variations in DEPTHPREPASS mode.\r\n        this._shadowMap.customIsReadyFunction = () => {\r\n            return true;\r\n        };\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._shadowMap.onBeforeBindObservable.add(() => {\r\n            this._currentSceneUBO = this._scene.getSceneUniformBuffer();\r\n            engine._debugPushGroup?.(`shadow map generation for pass id ${engine.currentRenderPassId}`, 1);\r\n        });\r\n\r\n        // Record Face Index before render.\r\n        this._shadowMap.onBeforeRenderObservable.add((faceIndex: number) => {\r\n            if (this._sceneUBOs) {\r\n                this._scene.setSceneUniformBuffer(this._sceneUBOs[0]);\r\n            }\r\n            this._currentFaceIndex = faceIndex;\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.setColorWrite(false);\r\n            }\r\n            this.getTransformMatrix(); // generate the view/projection matrix\r\n            this._scene.setTransformMatrix(this._viewMatrix, this._projectionMatrix);\r\n            if (this._useUBO) {\r\n                this._scene.getSceneUniformBuffer().unbindEffect();\r\n                this._scene.finalizeSceneUbo();\r\n            }\r\n        });\r\n\r\n        // Blur if required after render.\r\n        this._shadowMap.onAfterUnbindObservable.add(() => {\r\n            if (this._sceneUBOs) {\r\n                this._scene.setSceneUniformBuffer(this._currentSceneUBO);\r\n            }\r\n            this._scene.updateTransformMatrix(); // restore the view/projection matrices of the active camera\r\n\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.setColorWrite(true);\r\n            }\r\n            if (!this.useBlurExponentialShadowMap && !this.useBlurCloseExponentialShadowMap) {\r\n                engine._debugPopGroup?.(1);\r\n                return;\r\n            }\r\n            const shadowMap = this.getShadowMapForRendering();\r\n\r\n            if (shadowMap) {\r\n                this._scene.postProcessManager.directRender(this._blurPostProcesses, shadowMap.renderTarget, true);\r\n                engine.unBindFramebuffer(shadowMap.renderTarget!, true);\r\n                engine._debugPopGroup?.(1);\r\n            }\r\n        });\r\n\r\n        // Clear according to the chosen filter.\r\n        const clearZero = new Color4(0, 0, 0, 0);\r\n        const clearOne = new Color4(1.0, 1.0, 1.0, 1.0);\r\n        this._shadowMap.onClearObservable.add((engine) => {\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.clear(clearOne, false, true, false);\r\n            } else if (this.useExponentialShadowMap || this.useBlurExponentialShadowMap) {\r\n                engine.clear(clearZero, true, true, false);\r\n            } else {\r\n                engine.clear(clearOne, true, true, false);\r\n            }\r\n        });\r\n\r\n        // Recreate on resize.\r\n        this._shadowMap.onResizeObservable.add((rtt) => {\r\n            this._storedUniqueId = this._shadowMap!.uniqueId;\r\n            this._mapSize = rtt.getRenderSize();\r\n            this._light._markMeshesAsLightDirty();\r\n            this.recreateShadowMap();\r\n        });\r\n\r\n        // Ensures rendering groupids do not erase the depth buffer\r\n        // or we would lose the shadows information.\r\n        for (let i = RenderingManager.MIN_RENDERINGGROUPS; i < RenderingManager.MAX_RENDERINGGROUPS; i++) {\r\n            this._shadowMap.setRenderingAutoClearDepthStencil(i, false);\r\n        }\r\n    }\r\n\r\n    protected _initializeBlurRTTAndPostProcesses(): void {\r\n        const engine = this._scene.getEngine();\r\n        const targetSize = this._mapSize / this.blurScale;\r\n\r\n        if (!this.useKernelBlur || this.blurScale !== 1.0) {\r\n            this._shadowMap2 = new RenderTargetTexture(this._light.name + \"_shadowMap2\", targetSize, this._scene, false, true, this._textureType, undefined, undefined, false);\r\n            this._shadowMap2.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n            this._shadowMap2.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n            this._shadowMap2.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\r\n        }\r\n\r\n        if (this.useKernelBlur) {\r\n            this._kernelBlurXPostprocess = new BlurPostProcess(\r\n                this._light.name + \"KernelBlurX\",\r\n                new Vector2(1, 0),\r\n                this.blurKernel,\r\n                1.0,\r\n                null,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                engine,\r\n                false,\r\n                this._textureType\r\n            );\r\n            this._kernelBlurXPostprocess.width = targetSize;\r\n            this._kernelBlurXPostprocess.height = targetSize;\r\n            this._kernelBlurXPostprocess.externalTextureSamplerBinding = true;\r\n            this._kernelBlurXPostprocess.onApplyObservable.add((effect) => {\r\n                effect.setTexture(\"textureSampler\", this._shadowMap);\r\n            });\r\n\r\n            this._kernelBlurYPostprocess = new BlurPostProcess(\r\n                this._light.name + \"KernelBlurY\",\r\n                new Vector2(0, 1),\r\n                this.blurKernel,\r\n                1.0,\r\n                null,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                engine,\r\n                false,\r\n                this._textureType\r\n            );\r\n\r\n            this._kernelBlurXPostprocess.autoClear = false;\r\n            this._kernelBlurYPostprocess.autoClear = false;\r\n\r\n            if (this._textureType === Constants.TEXTURETYPE_UNSIGNED_INT) {\r\n                (<BlurPostProcess>this._kernelBlurXPostprocess).packedFloat = true;\r\n                (<BlurPostProcess>this._kernelBlurYPostprocess).packedFloat = true;\r\n            }\r\n\r\n            this._blurPostProcesses = [this._kernelBlurXPostprocess, this._kernelBlurYPostprocess];\r\n        } else {\r\n            this._boxBlurPostprocess = new PostProcess(\r\n                this._light.name + \"DepthBoxBlur\",\r\n                \"depthBoxBlur\",\r\n                [\"screenSize\", \"boxOffset\"],\r\n                [],\r\n                1.0,\r\n                null,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                engine,\r\n                false,\r\n                \"#define OFFSET \" + this._blurBoxOffset,\r\n                this._textureType\r\n            );\r\n            this._boxBlurPostprocess.externalTextureSamplerBinding = true;\r\n            this._boxBlurPostprocess.onApplyObservable.add((effect) => {\r\n                effect.setFloat2(\"screenSize\", targetSize, targetSize);\r\n                effect.setTexture(\"textureSampler\", this._shadowMap);\r\n            });\r\n\r\n            this._boxBlurPostprocess.autoClear = false;\r\n\r\n            this._blurPostProcesses = [this._boxBlurPostprocess];\r\n        }\r\n    }\r\n\r\n    protected _renderForShadowMap(\r\n        opaqueSubMeshes: SmartArray<SubMesh>,\r\n        alphaTestSubMeshes: SmartArray<SubMesh>,\r\n        transparentSubMeshes: SmartArray<SubMesh>,\r\n        depthOnlySubMeshes: SmartArray<SubMesh>\r\n    ): void {\r\n        let index: number;\r\n\r\n        if (depthOnlySubMeshes.length) {\r\n            for (index = 0; index < depthOnlySubMeshes.length; index++) {\r\n                this._renderSubMeshForShadowMap(depthOnlySubMeshes.data[index]);\r\n            }\r\n        }\r\n\r\n        for (index = 0; index < opaqueSubMeshes.length; index++) {\r\n            this._renderSubMeshForShadowMap(opaqueSubMeshes.data[index]);\r\n        }\r\n\r\n        for (index = 0; index < alphaTestSubMeshes.length; index++) {\r\n            this._renderSubMeshForShadowMap(alphaTestSubMeshes.data[index]);\r\n        }\r\n\r\n        if (this._transparencyShadow) {\r\n            for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                this._renderSubMeshForShadowMap(transparentSubMeshes.data[index], true);\r\n            }\r\n        } else {\r\n            for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                transparentSubMeshes.data[index].getEffectiveMesh()._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _bindCustomEffectForRenderSubMeshForShadowMap(subMesh: SubMesh, effect: Effect, mesh: AbstractMesh): void {\r\n        effect.setMatrix(\"viewProjection\", this.getTransformMatrix());\r\n    }\r\n\r\n    protected _renderSubMeshForShadowMap(subMesh: SubMesh, isTransparent: boolean = false): void {\r\n        const renderingMesh = subMesh.getRenderingMesh();\r\n        const effectiveMesh = subMesh.getEffectiveMesh();\r\n        const scene = this._scene;\r\n        const engine = scene.getEngine();\r\n        const material = subMesh.getMaterial();\r\n\r\n        effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n\r\n        if (!material || subMesh.verticesCount === 0 || subMesh._renderId === scene.getRenderId()) {\r\n            return;\r\n        }\r\n\r\n        // Culling\r\n        const detNeg = effectiveMesh._getWorldMatrixDeterminant() < 0;\r\n        let sideOrientation = renderingMesh.overrideMaterialSideOrientation ?? material.sideOrientation;\r\n        if (detNeg) {\r\n            sideOrientation =\r\n                sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation ? Constants.MATERIAL_CounterClockWiseSideOrientation : Constants.MATERIAL_ClockWiseSideOrientation;\r\n        }\r\n        const reverseSideOrientation = sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation;\r\n\r\n        engine.setState(material.backFaceCulling, undefined, undefined, reverseSideOrientation, material.cullBackFaces);\r\n\r\n        // Managing instances\r\n        const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n        if (batch.mustReturn) {\r\n            return;\r\n        }\r\n\r\n        const hardwareInstancedRendering =\r\n            engine.getCaps().instancedArrays &&\r\n            ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\r\n\r\n        if (this.customAllowRendering && !this.customAllowRendering(subMesh)) {\r\n            return;\r\n        }\r\n\r\n        if (this.isReady(subMesh, hardwareInstancedRendering, isTransparent)) {\r\n            subMesh._renderId = scene.getRenderId();\r\n\r\n            const shadowDepthWrapper = material.shadowDepthWrapper;\r\n\r\n            const drawWrapper = shadowDepthWrapper?.getEffect(subMesh, this, engine.currentRenderPassId) ?? subMesh._getDrawWrapper()!;\r\n            const effect = DrawWrapper.GetEffect(drawWrapper)!;\r\n\r\n            engine.enableEffect(drawWrapper);\r\n\r\n            if (!hardwareInstancedRendering) {\r\n                renderingMesh._bind(subMesh, effect, material.fillMode);\r\n            }\r\n\r\n            this.getTransformMatrix(); // make sure _cachedDirection et _cachedPosition are up to date\r\n\r\n            effect.setFloat3(\"biasAndScaleSM\", this.bias, this.normalBias, this.depthScale);\r\n\r\n            if (this.getLight().getTypeID() === Light.LIGHTTYPEID_DIRECTIONALLIGHT) {\r\n                effect.setVector3(\"lightDataSM\", this._cachedDirection);\r\n            } else {\r\n                effect.setVector3(\"lightDataSM\", this._cachedPosition);\r\n            }\r\n\r\n            if (scene.activeCamera) {\r\n                effect.setFloat2(\r\n                    \"depthValuesSM\",\r\n                    this.getLight().getDepthMinZ(scene.activeCamera),\r\n                    this.getLight().getDepthMinZ(scene.activeCamera) + this.getLight().getDepthMaxZ(scene.activeCamera)\r\n                );\r\n            }\r\n\r\n            if (isTransparent && this.enableSoftTransparentShadow) {\r\n                effect.setFloat(\"softTransparentShadowSM\", effectiveMesh.visibility * material.alpha);\r\n            }\r\n\r\n            if (shadowDepthWrapper) {\r\n                subMesh._setMainDrawWrapperOverride(drawWrapper);\r\n                if (shadowDepthWrapper.standalone) {\r\n                    shadowDepthWrapper.baseMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), renderingMesh, subMesh);\r\n                } else {\r\n                    material.bindForSubMesh(effectiveMesh.getWorldMatrix(), renderingMesh, subMesh);\r\n                }\r\n                subMesh._setMainDrawWrapperOverride(null);\r\n            } else {\r\n                // Alpha test\r\n                if (material && this.useOpacityTextureForTransparentShadow) {\r\n                    const opacityTexture = (material as any).opacityTexture;\r\n                    if (opacityTexture) {\r\n                        effect.setTexture(\"diffuseSampler\", opacityTexture);\r\n                        effect.setMatrix(\"diffuseMatrix\", opacityTexture.getTextureMatrix() || this._defaultTextureMatrix);\r\n                    }\r\n                } else if (material && material.needAlphaTesting()) {\r\n                    const alphaTexture = material.getAlphaTestTexture();\r\n                    if (alphaTexture) {\r\n                        effect.setTexture(\"diffuseSampler\", alphaTexture);\r\n                        effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix() || this._defaultTextureMatrix);\r\n                    }\r\n                }\r\n\r\n                // Bones\r\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\r\n                    const skeleton = renderingMesh.skeleton;\r\n\r\n                    if (skeleton.isUsingTextureForMatrices) {\r\n                        const boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\r\n\r\n                        if (!boneTexture) {\r\n                            return;\r\n                        }\r\n\r\n                        effect.setTexture(\"boneSampler\", boneTexture);\r\n                        effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\r\n                    } else {\r\n                        effect.setMatrices(\"mBones\", skeleton.getTransformMatrices(renderingMesh));\r\n                    }\r\n                }\r\n\r\n                // Morph targets\r\n                MaterialHelper.BindMorphTargetParameters(renderingMesh, effect);\r\n\r\n                if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\r\n                    renderingMesh.morphTargetManager._bind(effect);\r\n                }\r\n\r\n                // Clip planes\r\n                MaterialHelper.BindClipPlane(effect, scene);\r\n            }\r\n\r\n            if (!this._useUBO && !shadowDepthWrapper) {\r\n                this._bindCustomEffectForRenderSubMeshForShadowMap(subMesh, effect, effectiveMesh);\r\n            }\r\n\r\n            MaterialHelper.BindSceneUniformBuffer(effect, this._scene.getSceneUniformBuffer());\r\n            this._scene.getSceneUniformBuffer().bindUniformBuffer();\r\n\r\n            const world = effectiveMesh.getWorldMatrix();\r\n\r\n            // In the non hardware instanced mode, the Mesh ubo update is done by the callback passed to renderingMesh._processRendering (see below)\r\n            if (hardwareInstancedRendering) {\r\n                effectiveMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                effectiveMesh.transferToEffect(world);\r\n            }\r\n\r\n            if (this.forceBackFacesOnly) {\r\n                engine.setState(true, 0, false, true, material.cullBackFaces);\r\n            }\r\n\r\n            // Observables\r\n            this.onBeforeShadowMapRenderMeshObservable.notifyObservers(renderingMesh);\r\n            this.onBeforeShadowMapRenderObservable.notifyObservers(effect);\r\n\r\n            // Draw\r\n            renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, worldOverride) => {\r\n                if (effectiveMesh !== renderingMesh && !isInstance) {\r\n                    renderingMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                    renderingMesh.transferToEffect(worldOverride);\r\n                } else {\r\n                    effectiveMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                    effectiveMesh.transferToEffect(isInstance ? worldOverride : world);\r\n                }\r\n            });\r\n\r\n            if (this.forceBackFacesOnly) {\r\n                engine.setState(true, 0, false, false, material.cullBackFaces);\r\n            }\r\n\r\n            // Observables\r\n            this.onAfterShadowMapRenderObservable.notifyObservers(effect);\r\n            this.onAfterShadowMapRenderMeshObservable.notifyObservers(renderingMesh);\r\n        } else {\r\n            // Need to reset refresh rate of the shadowMap\r\n            if (this._shadowMap) {\r\n                this._shadowMap.resetRefreshCounter();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _applyFilterValues(): void {\r\n        if (!this._shadowMap) {\r\n            return;\r\n        }\r\n\r\n        if (this.filter === ShadowGenerator.FILTER_NONE || this.filter === ShadowGenerator.FILTER_PCSS) {\r\n            this._shadowMap.updateSamplingMode(Texture.NEAREST_SAMPLINGMODE);\r\n        } else {\r\n            this._shadowMap.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param onCompiled Callback triggered at the and of the effects compilation\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     */\r\n    public forceCompilation(onCompiled?: (generator: IShadowGenerator) => void, options?: Partial<{ useInstances: boolean }>): void {\r\n        const localOptions = {\r\n            useInstances: false,\r\n            ...options,\r\n        };\r\n\r\n        const shadowMap = this.getShadowMap();\r\n        if (!shadowMap) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const renderList = shadowMap.renderList;\r\n        if (!renderList) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const subMeshes = new Array<SubMesh>();\r\n        for (const mesh of renderList) {\r\n            subMeshes.push(...mesh.subMeshes);\r\n        }\r\n        if (subMeshes.length === 0) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n            return;\r\n        }\r\n\r\n        let currentIndex = 0;\r\n\r\n        const checkReady = () => {\r\n            if (!this._scene || !this._scene.getEngine()) {\r\n                return;\r\n            }\r\n\r\n            while (\r\n                this.isReady(\r\n                    subMeshes[currentIndex],\r\n                    localOptions.useInstances,\r\n                    subMeshes[currentIndex].getMaterial()?.needAlphaBlendingForMesh(subMeshes[currentIndex].getMesh()) ?? false\r\n                )\r\n            ) {\r\n                currentIndex++;\r\n                if (currentIndex >= subMeshes.length) {\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            setTimeout(checkReady, 16);\r\n        };\r\n\r\n        checkReady();\r\n    }\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     * @returns A promise that resolves when the compilation completes\r\n     */\r\n    public forceCompilationAsync(options?: Partial<{ useInstances: boolean }>): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.forceCompilation(() => {\r\n                resolve();\r\n            }, options);\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _isReadyCustomDefines(defines: any, subMesh: SubMesh, useInstances: boolean): void {}\r\n\r\n    private _prepareShadowDefines(subMesh: SubMesh, useInstances: boolean, defines: string[], isTransparent: boolean): string[] {\r\n        defines.push(\"#define SM_FLOAT \" + (this._textureType !== Constants.TEXTURETYPE_UNSIGNED_INT ? \"1\" : \"0\"));\r\n\r\n        defines.push(\"#define SM_ESM \" + (this.useExponentialShadowMap || this.useBlurExponentialShadowMap ? \"1\" : \"0\"));\r\n\r\n        defines.push(\"#define SM_DEPTHTEXTURE \" + (this.usePercentageCloserFiltering || this.useContactHardeningShadow ? \"1\" : \"0\"));\r\n\r\n        const mesh = subMesh.getMesh();\r\n\r\n        // Normal bias.\r\n        defines.push(\"#define SM_NORMALBIAS \" + (this.normalBias && mesh.isVerticesDataPresent(VertexBuffer.NormalKind) ? \"1\" : \"0\"));\r\n        defines.push(\"#define SM_DIRECTIONINLIGHTDATA \" + (this.getLight().getTypeID() === Light.LIGHTTYPEID_DIRECTIONALLIGHT ? \"1\" : \"0\"));\r\n\r\n        // Point light\r\n        defines.push(\"#define SM_USEDISTANCE \" + (this._light.needCube() ? \"1\" : \"0\"));\r\n\r\n        // Soft transparent shadows\r\n        defines.push(\"#define SM_SOFTTRANSPARENTSHADOW \" + (this.enableSoftTransparentShadow && isTransparent ? \"1\" : \"0\"));\r\n\r\n        this._isReadyCustomDefines(defines, subMesh, useInstances);\r\n\r\n        return defines;\r\n    }\r\n\r\n    /**\r\n     * Determine whether the shadow generator is ready or not (mainly all effects and related post processes needs to be ready).\r\n     * @param subMesh The submesh we want to render in the shadow map\r\n     * @param useInstances Defines whether will draw in the map using instances\r\n     * @param isTransparent Indicates that isReady is called for a transparent subMesh\r\n     * @returns true if ready otherwise, false\r\n     */\r\n    public isReady(subMesh: SubMesh, useInstances: boolean, isTransparent: boolean): boolean {\r\n        const material = subMesh.getMaterial(),\r\n            shadowDepthWrapper = material?.shadowDepthWrapper;\r\n\r\n        const defines: string[] = [];\r\n\r\n        this._prepareShadowDefines(subMesh, useInstances, defines, isTransparent);\r\n\r\n        if (shadowDepthWrapper) {\r\n            if (!shadowDepthWrapper.isReadyForSubMesh(subMesh, defines, this, useInstances, this._scene.getEngine().currentRenderPassId)) {\r\n                return false;\r\n            }\r\n        } else {\r\n            const subMeshEffect = subMesh._getDrawWrapper(undefined, true)!;\r\n\r\n            let effect = subMeshEffect.effect!;\r\n            let cachedDefines = subMeshEffect.defines;\r\n\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            const mesh = subMesh.getMesh();\r\n\r\n            // Normal bias.\r\n            if (this.normalBias && mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n                defines.push(\"#define NORMAL\");\r\n                if (mesh.nonUniformScaling) {\r\n                    defines.push(\"#define NONUNIFORMSCALING\");\r\n                }\r\n            }\r\n\r\n            // Alpha test\r\n            if (material && material.needAlphaTesting()) {\r\n                let alphaTexture = null;\r\n                if (this.useOpacityTextureForTransparentShadow) {\r\n                    alphaTexture = (material as any).opacityTexture;\r\n                } else {\r\n                    alphaTexture = material.getAlphaTestTexture();\r\n                }\r\n                if (alphaTexture) {\r\n                    if (!alphaTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n\r\n                    const alphaCutOff = (material as any).alphaCutOff ?? ShadowGenerator.DEFAULT_ALPHA_CUTOFF;\r\n\r\n                    defines.push(\"#define ALPHATEST\");\r\n                    defines.push(`#define ALPHATESTVALUE ${alphaCutOff}${alphaCutOff % 1 === 0 ? \".\" : \"\"}`);\r\n                    if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n                        attribs.push(VertexBuffer.UVKind);\r\n                        defines.push(\"#define UV1\");\r\n                    }\r\n                    if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n                        if (alphaTexture.coordinatesIndex === 1) {\r\n                            attribs.push(VertexBuffer.UV2Kind);\r\n                            defines.push(\"#define UV2\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Bones\r\n            const fallbacks = new EffectFallbacks();\r\n            if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n                attribs.push(VertexBuffer.MatricesIndicesKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsKind);\r\n                if (mesh.numBoneInfluencers > 4) {\r\n                    attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                    attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n                }\r\n                const skeleton = mesh.skeleton;\r\n                defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n                if (mesh.numBoneInfluencers > 0) {\r\n                    fallbacks.addCPUSkinningFallback(0, mesh);\r\n                }\r\n\r\n                if (skeleton.isUsingTextureForMatrices) {\r\n                    defines.push(\"#define BONETEXTURE\");\r\n                } else {\r\n                    defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\r\n                }\r\n            } else {\r\n                defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n            }\r\n\r\n            // Morph targets\r\n            const manager = (<Mesh>mesh).morphTargetManager;\r\n            let morphInfluencers = 0;\r\n            if (manager) {\r\n                if (manager.numInfluencers > 0) {\r\n                    defines.push(\"#define MORPHTARGETS\");\r\n                    morphInfluencers = manager.numInfluencers;\r\n                    defines.push(\"#define NUM_MORPH_INFLUENCERS \" + morphInfluencers);\r\n                    if (manager.isUsingTextureForTargets) {\r\n                        defines.push(\"#define MORPHTARGETS_TEXTURE\");\r\n                    }\r\n                    MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, morphInfluencers);\r\n                }\r\n            }\r\n\r\n            // ClipPlanes\r\n            const scene = this._scene;\r\n            if (scene.clipPlane) {\r\n                defines.push(\"#define CLIPPLANE\");\r\n            }\r\n            if (scene.clipPlane2) {\r\n                defines.push(\"#define CLIPPLANE2\");\r\n            }\r\n            if (scene.clipPlane3) {\r\n                defines.push(\"#define CLIPPLANE3\");\r\n            }\r\n            if (scene.clipPlane4) {\r\n                defines.push(\"#define CLIPPLANE4\");\r\n            }\r\n            if (scene.clipPlane5) {\r\n                defines.push(\"#define CLIPPLANE5\");\r\n            }\r\n            if (scene.clipPlane6) {\r\n                defines.push(\"#define CLIPPLANE6\");\r\n            }\r\n\r\n            // Instances\r\n            if (useInstances) {\r\n                defines.push(\"#define INSTANCES\");\r\n                MaterialHelper.PushAttributesForInstances(attribs);\r\n                if (subMesh.getRenderingMesh().hasThinInstances) {\r\n                    defines.push(\"#define THIN_INSTANCES\");\r\n                }\r\n            }\r\n\r\n            if (this.customShaderOptions) {\r\n                if (this.customShaderOptions.defines) {\r\n                    for (const define of this.customShaderOptions.defines) {\r\n                        if (defines.indexOf(define) === -1) {\r\n                            defines.push(define);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Get correct effect\r\n            const join = defines.join(\"\\n\");\r\n            if (cachedDefines !== join) {\r\n                cachedDefines = join;\r\n\r\n                let shaderName = \"shadowMap\";\r\n                const uniforms = [\r\n                    \"world\",\r\n                    \"mBones\",\r\n                    \"viewProjection\",\r\n                    \"diffuseMatrix\",\r\n                    \"lightDataSM\",\r\n                    \"depthValuesSM\",\r\n                    \"biasAndScaleSM\",\r\n                    \"morphTargetInfluences\",\r\n                    \"boneTextureWidth\",\r\n                    \"vClipPlane\",\r\n                    \"vClipPlane2\",\r\n                    \"vClipPlane3\",\r\n                    \"vClipPlane4\",\r\n                    \"vClipPlane5\",\r\n                    \"vClipPlane6\",\r\n                    \"softTransparentShadowSM\",\r\n                    \"morphTargetTextureInfo\",\r\n                    \"morphTargetTextureIndices\",\r\n                ];\r\n                const samplers = [\"diffuseSampler\", \"boneSampler\", \"morphTargets\"];\r\n                const uniformBuffers = [\"Scene\", \"Mesh\"];\r\n\r\n                // Custom shader?\r\n                if (this.customShaderOptions) {\r\n                    shaderName = this.customShaderOptions.shaderName;\r\n\r\n                    if (this.customShaderOptions.attributes) {\r\n                        for (const attrib of this.customShaderOptions.attributes) {\r\n                            if (attribs.indexOf(attrib) === -1) {\r\n                                attribs.push(attrib);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.customShaderOptions.uniforms) {\r\n                        for (const uniform of this.customShaderOptions.uniforms) {\r\n                            if (uniforms.indexOf(uniform) === -1) {\r\n                                uniforms.push(uniform);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.customShaderOptions.samplers) {\r\n                        for (const sampler of this.customShaderOptions.samplers) {\r\n                            if (samplers.indexOf(sampler) === -1) {\r\n                                samplers.push(sampler);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const engine = this._scene.getEngine();\r\n\r\n                effect = engine.createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: null,\r\n                        onError: null,\r\n                        indexParameters: { maxSimultaneousMorphTargets: morphInfluencers },\r\n                    },\r\n                    engine\r\n                );\r\n\r\n                subMeshEffect.setEffect(effect, cachedDefines);\r\n            }\r\n\r\n            if (!effect.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.useBlurExponentialShadowMap || this.useBlurCloseExponentialShadowMap) {\r\n            if (!this._blurPostProcesses || !this._blurPostProcesses.length) {\r\n                this._initializeBlurRTTAndPostProcesses();\r\n            }\r\n        }\r\n\r\n        if (this._kernelBlurXPostprocess && !this._kernelBlurXPostprocess.isReady()) {\r\n            return false;\r\n        }\r\n        if (this._kernelBlurYPostprocess && !this._kernelBlurYPostprocess.isReady()) {\r\n            return false;\r\n        }\r\n        if (this._boxBlurPostprocess && !this._boxBlurPostprocess.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\r\n     * @param defines Defines of the material we want to update\r\n     * @param lightIndex Index of the light in the enabled light list of the material\r\n     */\r\n    public prepareDefines(defines: any, lightIndex: number): void {\r\n        const scene = this._scene;\r\n        const light = this._light;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        defines[\"SHADOW\" + lightIndex] = true;\r\n\r\n        if (this.useContactHardeningShadow) {\r\n            defines[\"SHADOWPCSS\" + lightIndex] = true;\r\n            if (this._filteringQuality === ShadowGenerator.QUALITY_LOW) {\r\n                defines[\"SHADOWLOWQUALITY\" + lightIndex] = true;\r\n            } else if (this._filteringQuality === ShadowGenerator.QUALITY_MEDIUM) {\r\n                defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = true;\r\n            }\r\n            // else default to high.\r\n        } else if (this.usePercentageCloserFiltering) {\r\n            defines[\"SHADOWPCF\" + lightIndex] = true;\r\n            if (this._filteringQuality === ShadowGenerator.QUALITY_LOW) {\r\n                defines[\"SHADOWLOWQUALITY\" + lightIndex] = true;\r\n            } else if (this._filteringQuality === ShadowGenerator.QUALITY_MEDIUM) {\r\n                defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = true;\r\n            }\r\n            // else default to high.\r\n        } else if (this.usePoissonSampling) {\r\n            defines[\"SHADOWPOISSON\" + lightIndex] = true;\r\n        } else if (this.useExponentialShadowMap || this.useBlurExponentialShadowMap) {\r\n            defines[\"SHADOWESM\" + lightIndex] = true;\r\n        } else if (this.useCloseExponentialShadowMap || this.useBlurCloseExponentialShadowMap) {\r\n            defines[\"SHADOWCLOSEESM\" + lightIndex] = true;\r\n        }\r\n\r\n        if (light.needCube()) {\r\n            defines[\"SHADOWCUBE\" + lightIndex] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\r\n     * defined in the generator but impacting the effect).\r\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\r\n     * @param effect The effect we are binding the information for\r\n     */\r\n    public bindShadowLight(lightIndex: string, effect: Effect): void {\r\n        const light = this._light;\r\n        const scene = this._scene;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        const camera = scene.activeCamera;\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const shadowMap = this.getShadowMap();\r\n\r\n        if (!shadowMap) {\r\n            return;\r\n        }\r\n\r\n        if (!light.needCube()) {\r\n            effect.setMatrix(\"lightMatrix\" + lightIndex, this.getTransformMatrix());\r\n        }\r\n\r\n        // Only PCF uses depth stencil texture.\r\n        if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, this.getShadowMapForRendering());\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), shadowMap.getSize().width, 1 / shadowMap.getSize().width, this.frustumEdgeFalloff, lightIndex);\r\n        } else if (this._filter === ShadowGenerator.FILTER_PCSS) {\r\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, this.getShadowMapForRendering());\r\n            effect.setTexture(\"depthSampler\" + lightIndex, this.getShadowMapForRendering());\r\n            light._uniformBuffer.updateFloat4(\r\n                \"shadowsInfo\",\r\n                this.getDarkness(),\r\n                1 / shadowMap.getSize().width,\r\n                this._contactHardeningLightSizeUVRatio * shadowMap.getSize().width,\r\n                this.frustumEdgeFalloff,\r\n                lightIndex\r\n            );\r\n        } else {\r\n            effect.setTexture(\"shadowSampler\" + lightIndex, this.getShadowMapForRendering());\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), this.blurScale / shadowMap.getSize().width, this.depthScale, this.frustumEdgeFalloff, lightIndex);\r\n        }\r\n\r\n        light._uniformBuffer.updateFloat2(\r\n            \"depthValues\",\r\n            this.getLight().getDepthMinZ(camera),\r\n            this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera),\r\n            lightIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix used to project the meshes into the map from the light point of view.\r\n     * (eq to shadow projection matrix * light transform matrix)\r\n     * @returns The transform matrix used to create the shadow map\r\n     */\r\n    public getTransformMatrix(): Matrix {\r\n        const scene = this._scene;\r\n        if (this._currentRenderId === scene.getRenderId() && this._currentFaceIndexCache === this._currentFaceIndex) {\r\n            return this._transformMatrix;\r\n        }\r\n\r\n        this._currentRenderId = scene.getRenderId();\r\n        this._currentFaceIndexCache = this._currentFaceIndex;\r\n\r\n        let lightPosition = this._light.position;\r\n        if (this._light.computeTransformedInformation()) {\r\n            lightPosition = this._light.transformedPosition;\r\n        }\r\n\r\n        Vector3.NormalizeToRef(this._light.getShadowDirection(this._currentFaceIndex), this._lightDirection);\r\n        if (Math.abs(Vector3.Dot(this._lightDirection, Vector3.Up())) === 1.0) {\r\n            this._lightDirection.z = 0.0000000000001; // Required to avoid perfectly perpendicular light\r\n        }\r\n\r\n        if (\r\n            this._light.needProjectionMatrixCompute() ||\r\n            !this._cachedPosition ||\r\n            !this._cachedDirection ||\r\n            !lightPosition.equals(this._cachedPosition) ||\r\n            !this._lightDirection.equals(this._cachedDirection)\r\n        ) {\r\n            this._cachedPosition.copyFrom(lightPosition);\r\n            this._cachedDirection.copyFrom(this._lightDirection);\r\n\r\n            Matrix.LookAtLHToRef(lightPosition, lightPosition.add(this._lightDirection), Vector3.Up(), this._viewMatrix);\r\n\r\n            const shadowMap = this.getShadowMap();\r\n\r\n            if (shadowMap) {\r\n                const renderList = shadowMap.renderList;\r\n\r\n                if (renderList) {\r\n                    this._light.setShadowProjectionMatrix(this._projectionMatrix, this._viewMatrix, renderList);\r\n                }\r\n            }\r\n\r\n            this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\r\n        }\r\n\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    /**\r\n     * Recreates the shadow map dependencies like RTT and post processes. This can be used during the switch between\r\n     * Cube and 2D textures for instance.\r\n     */\r\n    public recreateShadowMap(): void {\r\n        const shadowMap = this._shadowMap;\r\n        if (!shadowMap) {\r\n            return;\r\n        }\r\n\r\n        // Track render list.\r\n        const renderList = shadowMap.renderList;\r\n        // Clean up existing data.\r\n        this._disposeRTTandPostProcesses();\r\n        // Reinitializes.\r\n        this._initializeGenerator();\r\n        // Reaffect the filter to ensure a correct fallback if necessary.\r\n        this.filter = this._filter;\r\n        // Reaffect the filter.\r\n        this._applyFilterValues();\r\n        // Reaffect Render List.\r\n        if (renderList) {\r\n            // Note: don't do this._shadowMap!.renderList = renderList;\r\n            // The renderList hooked array is accessing the old RenderTargetTexture (see RenderTargetTexture._hookArray), which is disposed at this point (by the call to _disposeRTTandPostProcesses)\r\n            if (!this._shadowMap!.renderList) {\r\n                this._shadowMap!.renderList = [];\r\n            }\r\n            for (const mesh of renderList) {\r\n                this._shadowMap!.renderList.push(mesh);\r\n            }\r\n        } else {\r\n            this._shadowMap!.renderList = null;\r\n        }\r\n    }\r\n\r\n    protected _disposeBlurPostProcesses(): void {\r\n        if (this._shadowMap2) {\r\n            this._shadowMap2.dispose();\r\n            this._shadowMap2 = null;\r\n        }\r\n\r\n        if (this._boxBlurPostprocess) {\r\n            this._boxBlurPostprocess.dispose();\r\n            this._boxBlurPostprocess = null;\r\n        }\r\n\r\n        if (this._kernelBlurXPostprocess) {\r\n            this._kernelBlurXPostprocess.dispose();\r\n            this._kernelBlurXPostprocess = null;\r\n        }\r\n\r\n        if (this._kernelBlurYPostprocess) {\r\n            this._kernelBlurYPostprocess.dispose();\r\n            this._kernelBlurYPostprocess = null;\r\n        }\r\n\r\n        this._blurPostProcesses = [];\r\n    }\r\n\r\n    protected _disposeRTTandPostProcesses(): void {\r\n        if (this._shadowMap) {\r\n            this._shadowMap.dispose();\r\n            this._shadowMap = null;\r\n        }\r\n\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _disposeSceneUBOs(): void {\r\n        if (this._sceneUBOs) {\r\n            for (const ubo of this._sceneUBOs) {\r\n                ubo.dispose();\r\n            }\r\n            this._sceneUBOs = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the ShadowGenerator.\r\n     * Returns nothing.\r\n     */\r\n    public dispose(): void {\r\n        this._disposeRTTandPostProcesses();\r\n\r\n        this._disposeSceneUBOs();\r\n\r\n        if (this._light) {\r\n            this._light._shadowGenerator = null;\r\n            this._light._markMeshesAsLightDirty();\r\n        }\r\n\r\n        this.onBeforeShadowMapRenderMeshObservable.clear();\r\n        this.onBeforeShadowMapRenderObservable.clear();\r\n        this.onAfterShadowMapRenderMeshObservable.clear();\r\n        this.onAfterShadowMapRenderObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Serializes the shadow generator setup to a json object.\r\n     * @returns The serialized JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n        const shadowMap = this.getShadowMap();\r\n\r\n        if (!shadowMap) {\r\n            return serializationObject;\r\n        }\r\n\r\n        serializationObject.className = this.getClassName();\r\n        serializationObject.lightId = this._light.id;\r\n        serializationObject.id = this.id;\r\n        serializationObject.mapSize = shadowMap.getRenderSize();\r\n        serializationObject.forceBackFacesOnly = this.forceBackFacesOnly;\r\n        serializationObject.darkness = this.getDarkness();\r\n        serializationObject.transparencyShadow = this._transparencyShadow;\r\n        serializationObject.frustumEdgeFalloff = this.frustumEdgeFalloff;\r\n        serializationObject.bias = this.bias;\r\n        serializationObject.normalBias = this.normalBias;\r\n        serializationObject.usePercentageCloserFiltering = this.usePercentageCloserFiltering;\r\n        serializationObject.useContactHardeningShadow = this.useContactHardeningShadow;\r\n        serializationObject.contactHardeningLightSizeUVRatio = this.contactHardeningLightSizeUVRatio;\r\n        serializationObject.filteringQuality = this.filteringQuality;\r\n        serializationObject.useExponentialShadowMap = this.useExponentialShadowMap;\r\n        serializationObject.useBlurExponentialShadowMap = this.useBlurExponentialShadowMap;\r\n        serializationObject.useCloseExponentialShadowMap = this.useBlurExponentialShadowMap;\r\n        serializationObject.useBlurCloseExponentialShadowMap = this.useBlurExponentialShadowMap;\r\n        serializationObject.usePoissonSampling = this.usePoissonSampling;\r\n        serializationObject.depthScale = this.depthScale;\r\n        serializationObject.blurBoxOffset = this.blurBoxOffset;\r\n        serializationObject.blurKernel = this.blurKernel;\r\n        serializationObject.blurScale = this.blurScale;\r\n        serializationObject.useKernelBlur = this.useKernelBlur;\r\n\r\n        serializationObject.renderList = [];\r\n        if (shadowMap.renderList) {\r\n            for (let meshIndex = 0; meshIndex < shadowMap.renderList.length; meshIndex++) {\r\n                const mesh = shadowMap.renderList[meshIndex];\r\n\r\n                serializationObject.renderList.push(mesh.id);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized ShadowGenerator and returns a new ShadowGenerator.\r\n     * @param parsedShadowGenerator The JSON object to parse\r\n     * @param scene The scene to create the shadow map for\r\n     * @param constr A function that builds a shadow generator or undefined to create an instance of the default shadow generator\r\n     * @returns The parsed shadow generator\r\n     */\r\n    public static Parse(parsedShadowGenerator: any, scene: Scene, constr?: (mapSize: number, light: IShadowLight) => ShadowGenerator): ShadowGenerator {\r\n        const light = <IShadowLight>scene.getLightById(parsedShadowGenerator.lightId);\r\n        const shadowGenerator = constr ? constr(parsedShadowGenerator.mapSize, light) : new ShadowGenerator(parsedShadowGenerator.mapSize, light);\r\n        const shadowMap = shadowGenerator.getShadowMap();\r\n\r\n        for (let meshIndex = 0; meshIndex < parsedShadowGenerator.renderList.length; meshIndex++) {\r\n            const meshes = scene.getMeshesById(parsedShadowGenerator.renderList[meshIndex]);\r\n            meshes.forEach(function (mesh) {\r\n                if (!shadowMap) {\r\n                    return;\r\n                }\r\n                if (!shadowMap.renderList) {\r\n                    shadowMap.renderList = [];\r\n                }\r\n                shadowMap.renderList.push(mesh);\r\n            });\r\n        }\r\n\r\n        if (parsedShadowGenerator.id !== undefined) {\r\n            shadowGenerator.id = parsedShadowGenerator.id;\r\n        }\r\n\r\n        shadowGenerator.forceBackFacesOnly = !!parsedShadowGenerator.forceBackFacesOnly;\r\n\r\n        if (parsedShadowGenerator.darkness !== undefined) {\r\n            shadowGenerator.setDarkness(parsedShadowGenerator.darkness);\r\n        }\r\n\r\n        if (parsedShadowGenerator.transparencyShadow) {\r\n            shadowGenerator.setTransparencyShadow(true);\r\n        }\r\n\r\n        if (parsedShadowGenerator.frustumEdgeFalloff !== undefined) {\r\n            shadowGenerator.frustumEdgeFalloff = parsedShadowGenerator.frustumEdgeFalloff;\r\n        }\r\n\r\n        if (parsedShadowGenerator.bias !== undefined) {\r\n            shadowGenerator.bias = parsedShadowGenerator.bias;\r\n        }\r\n\r\n        if (parsedShadowGenerator.normalBias !== undefined) {\r\n            shadowGenerator.normalBias = parsedShadowGenerator.normalBias;\r\n        }\r\n\r\n        if (parsedShadowGenerator.usePercentageCloserFiltering) {\r\n            shadowGenerator.usePercentageCloserFiltering = true;\r\n        } else if (parsedShadowGenerator.useContactHardeningShadow) {\r\n            shadowGenerator.useContactHardeningShadow = true;\r\n        } else if (parsedShadowGenerator.usePoissonSampling) {\r\n            shadowGenerator.usePoissonSampling = true;\r\n        } else if (parsedShadowGenerator.useExponentialShadowMap) {\r\n            shadowGenerator.useExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useBlurExponentialShadowMap) {\r\n            shadowGenerator.useBlurExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useCloseExponentialShadowMap) {\r\n            shadowGenerator.useCloseExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useBlurCloseExponentialShadowMap) {\r\n            shadowGenerator.useBlurCloseExponentialShadowMap = true;\r\n        }\r\n        // Backward compat\r\n        else if (parsedShadowGenerator.useVarianceShadowMap) {\r\n            shadowGenerator.useExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useBlurVarianceShadowMap) {\r\n            shadowGenerator.useBlurExponentialShadowMap = true;\r\n        }\r\n\r\n        if (parsedShadowGenerator.contactHardeningLightSizeUVRatio !== undefined) {\r\n            shadowGenerator.contactHardeningLightSizeUVRatio = parsedShadowGenerator.contactHardeningLightSizeUVRatio;\r\n        }\r\n\r\n        if (parsedShadowGenerator.filteringQuality !== undefined) {\r\n            shadowGenerator.filteringQuality = parsedShadowGenerator.filteringQuality;\r\n        }\r\n\r\n        if (parsedShadowGenerator.depthScale) {\r\n            shadowGenerator.depthScale = parsedShadowGenerator.depthScale;\r\n        }\r\n\r\n        if (parsedShadowGenerator.blurScale) {\r\n            shadowGenerator.blurScale = parsedShadowGenerator.blurScale;\r\n        }\r\n\r\n        if (parsedShadowGenerator.blurBoxOffset) {\r\n            shadowGenerator.blurBoxOffset = parsedShadowGenerator.blurBoxOffset;\r\n        }\r\n\r\n        if (parsedShadowGenerator.useKernelBlur) {\r\n            shadowGenerator.useKernelBlur = parsedShadowGenerator.useKernelBlur;\r\n        }\r\n\r\n        if (parsedShadowGenerator.blurKernel) {\r\n            shadowGenerator.blurKernel = parsedShadowGenerator.blurKernel;\r\n        }\r\n\r\n        return shadowGenerator;\r\n    }\r\n}\r\n","import type { SmartArrayNoDuplicate } from \"../../Misc/smartArray\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport { ShadowGenerator } from \"./shadowGenerator\";\r\nimport { CascadedShadowGenerator } from \"./cascadedShadowGenerator\";\r\nimport type { ISceneSerializableComponent } from \"../../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../../sceneComponent\";\r\nimport { AbstractScene } from \"../../abstractScene\";\r\n// Adds the parser to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_SHADOWGENERATOR, (parsedData: any, scene: Scene) => {\r\n    // Shadows\r\n    if (parsedData.shadowGenerators !== undefined && parsedData.shadowGenerators !== null) {\r\n        for (let index = 0, cache = parsedData.shadowGenerators.length; index < cache; index++) {\r\n            const parsedShadowGenerator = parsedData.shadowGenerators[index];\r\n            if (parsedShadowGenerator.className === CascadedShadowGenerator.CLASSNAME) {\r\n                CascadedShadowGenerator.Parse(parsedShadowGenerator, scene);\r\n            } else {\r\n                ShadowGenerator.Parse(parsedShadowGenerator, scene);\r\n            }\r\n            // SG would be available on their associated lights\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Defines the shadow generator component responsible to manage any shadow generators\r\n * in a given scene.\r\n */\r\nexport class ShadowGeneratorSceneComponent implements ISceneSerializableComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_SHADOWGENERATOR;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_SHADOWGENERATOR, this, this._gatherRenderTargets);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing To Do Here.\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        // Shadows\r\n        serializationObject.shadowGenerators = [];\r\n        const lights = this.scene.lights;\r\n        for (const light of lights) {\r\n            const shadowGenerator = light.getShadowGenerator();\r\n            if (shadowGenerator) {\r\n                serializationObject.shadowGenerators.push(shadowGenerator.serialize());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addFromContainer(container: AbstractScene): void {\r\n        // Nothing To Do Here. (directly attached to a light)\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public removeFromContainer(container: AbstractScene, dispose?: boolean): void {\r\n        // Nothing To Do Here. (directly attached to a light)\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public dispose(): void {\r\n        // Nothing To Do Here.\r\n    }\r\n\r\n    private _gatherRenderTargets(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        // Shadows\r\n        const scene = this.scene;\r\n        if (this.scene.shadowsEnabled) {\r\n            for (let lightIndex = 0; lightIndex < scene.lights.length; lightIndex++) {\r\n                const light = scene.lights[lightIndex];\r\n                const shadowGenerator = light.getShadowGenerator();\r\n\r\n                if (light.isEnabled() && light.shadowEnabled && shadowGenerator) {\r\n                    const shadowMap = <RenderTargetTexture>shadowGenerator.getShadowMap();\r\n                    if (scene.textures.indexOf(shadowMap) !== -1) {\r\n                        renderTargets.push(shadowMap);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nShadowGenerator._SceneComponentInitialization = (scene: Scene) => {\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_SHADOWGENERATOR);\r\n    if (!component) {\r\n        component = new ShadowGeneratorSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n","import type { Nullable } from \"../types\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { DepthRenderer } from \"../Rendering/depthRenderer\";\r\n\r\nimport { MinMaxReducer } from \"./minMaxReducer\";\r\n\r\n/**\r\n * This class is a small wrapper around the MinMaxReducer class to compute the min/max values of a depth texture\r\n */\r\nexport class DepthReducer extends MinMaxReducer {\r\n    private _depthRenderer: Nullable<DepthRenderer>;\r\n    private _depthRendererId: string;\r\n\r\n    /**\r\n     * Gets the depth renderer used for the computation.\r\n     * Note that the result is null if you provide your own renderer when calling setDepthRenderer.\r\n     */\r\n    public get depthRenderer(): Nullable<DepthRenderer> {\r\n        return this._depthRenderer;\r\n    }\r\n\r\n    /**\r\n     * Creates a depth reducer\r\n     * @param camera The camera used to render the depth texture\r\n     */\r\n    constructor(camera: Camera) {\r\n        super(camera);\r\n    }\r\n\r\n    /**\r\n     * Sets the depth renderer to use to generate the depth map\r\n     * @param depthRenderer The depth renderer to use. If not provided, a new one will be created automatically\r\n     * @param type The texture type of the depth map (default: TEXTURETYPE_HALF_FLOAT)\r\n     * @param forceFullscreenViewport Forces the post processes used for the reduction to be applied without taking into account viewport (defaults to true)\r\n     */\r\n    public setDepthRenderer(depthRenderer: Nullable<DepthRenderer> = null, type: number = Constants.TEXTURETYPE_HALF_FLOAT, forceFullscreenViewport = true): void {\r\n        const scene = this._camera.getScene();\r\n\r\n        if (this._depthRenderer) {\r\n            delete scene._depthRenderer[this._depthRendererId];\r\n\r\n            this._depthRenderer.dispose();\r\n            this._depthRenderer = null;\r\n        }\r\n\r\n        if (depthRenderer === null) {\r\n            if (!scene._depthRenderer) {\r\n                scene._depthRenderer = {};\r\n            }\r\n\r\n            depthRenderer = this._depthRenderer = new DepthRenderer(scene, type, this._camera, false, Constants.TEXTURE_NEAREST_SAMPLINGMODE);\r\n            depthRenderer.enabled = false;\r\n\r\n            this._depthRendererId = \"minmax\" + this._camera.id;\r\n            scene._depthRenderer[this._depthRendererId] = depthRenderer;\r\n        }\r\n\r\n        super.setSourceTexture(depthRenderer.getDepthMap(), true, type, forceFullscreenViewport);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setSourceTexture(sourceTexture: RenderTargetTexture, depthRedux: boolean, type: number = Constants.TEXTURETYPE_HALF_FLOAT, forceFullscreenViewport = true): void {\r\n        super.setSourceTexture(sourceTexture, depthRedux, type, forceFullscreenViewport);\r\n    }\r\n\r\n    /**\r\n     * Activates the reduction computation.\r\n     * When activated, the observers registered in onAfterReductionPerformed are\r\n     * called after the computation is performed\r\n     */\r\n    public activate(): void {\r\n        if (this._depthRenderer) {\r\n            this._depthRenderer.enabled = true;\r\n        }\r\n\r\n        super.activate();\r\n    }\r\n\r\n    /**\r\n     * Deactivates the reduction computation.\r\n     */\r\n    public deactivate(): void {\r\n        super.deactivate();\r\n\r\n        if (this._depthRenderer) {\r\n            this._depthRenderer.enabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the depth reducer\r\n     * @param disposeAll true to dispose all the resources. You should always call this function with true as the parameter (or without any parameter as it is the default one). This flag is meant to be used internally.\r\n     */\r\n    public dispose(disposeAll = true): void {\r\n        super.dispose(disposeAll);\r\n\r\n        if (this._depthRenderer && disposeAll) {\r\n            const scene = this._depthRenderer.getDepthMap().getScene();\r\n            if (scene) {\r\n                delete scene._depthRenderer[this._depthRendererId];\r\n            }\r\n\r\n            this._depthRenderer.dispose();\r\n            this._depthRenderer = null;\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"../types\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Observer } from \"./observable\";\r\nimport { Observable } from \"./observable\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport { PostProcessManager } from \"../PostProcesses/postProcessManager\";\r\n\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\n\r\nimport \"../Shaders/minmaxRedux.fragment\";\r\n\r\n/**\r\n * This class computes a min/max reduction from a texture: it means it computes the minimum\r\n * and maximum values from all values of the texture.\r\n * It is performed on the GPU for better performances, thanks to a succession of post processes.\r\n * The source values are read from the red channel of the texture.\r\n */\r\nexport class MinMaxReducer {\r\n    /**\r\n     * Observable triggered when the computation has been performed\r\n     */\r\n    public onAfterReductionPerformed = new Observable<{ min: number; max: number }>();\r\n\r\n    protected _camera: Camera;\r\n    protected _sourceTexture: Nullable<RenderTargetTexture>;\r\n    protected _reductionSteps: Nullable<Array<PostProcess>>;\r\n    protected _postProcessManager: PostProcessManager;\r\n    protected _onAfterUnbindObserver: Nullable<Observer<RenderTargetTexture>>;\r\n    protected _forceFullscreenViewport = true;\r\n    protected _onContextRestoredObserver: Nullable<Observer<ThinEngine>>;\r\n\r\n    /**\r\n     * Creates a min/max reducer\r\n     * @param camera The camera to use for the post processes\r\n     */\r\n    constructor(camera: Camera) {\r\n        this._camera = camera;\r\n        this._postProcessManager = new PostProcessManager(camera.getScene());\r\n\r\n        this._onContextRestoredObserver = camera.getEngine().onContextRestoredObservable.add(() => {\r\n            this._postProcessManager._rebuild();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used to read the values from.\r\n     */\r\n    public get sourceTexture(): Nullable<RenderTargetTexture> {\r\n        return this._sourceTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the source texture to read the values from.\r\n     * One must indicate if the texture is a depth texture or not through the depthRedux parameter\r\n     * because in such textures '1' value must not be taken into account to compute the maximum\r\n     * as this value is used to clear the texture.\r\n     * Note that the computation is not activated by calling this function, you must call activate() for that!\r\n     * @param sourceTexture The texture to read the values from. The values should be in the red channel.\r\n     * @param depthRedux Indicates if the texture is a depth texture or not\r\n     * @param type The type of the textures created for the reduction (defaults to TEXTURETYPE_HALF_FLOAT)\r\n     * @param forceFullscreenViewport Forces the post processes used for the reduction to be applied without taking into account viewport (defaults to true)\r\n     */\r\n    public setSourceTexture(sourceTexture: RenderTargetTexture, depthRedux: boolean, type: number = Constants.TEXTURETYPE_HALF_FLOAT, forceFullscreenViewport = true): void {\r\n        if (sourceTexture === this._sourceTexture) {\r\n            return;\r\n        }\r\n\r\n        this.dispose(false);\r\n\r\n        this._sourceTexture = sourceTexture;\r\n        this._reductionSteps = [];\r\n        this._forceFullscreenViewport = forceFullscreenViewport;\r\n\r\n        const scene = this._camera.getScene();\r\n\r\n        // create the first step\r\n        const reductionInitial = new PostProcess(\r\n            \"Initial reduction phase\",\r\n            \"minmaxRedux\", // shader\r\n            [\"texSize\"],\r\n            [\"sourceTexture\"], // textures\r\n            1.0, // options\r\n            null, // camera\r\n            Constants.TEXTURE_NEAREST_NEAREST, // sampling\r\n            scene.getEngine(), // engine\r\n            false, // reusable\r\n            \"#define INITIAL\" + (depthRedux ? \"\\n#define DEPTH_REDUX\" : \"\"), // defines\r\n            type,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            Constants.TEXTUREFORMAT_RG\r\n        );\r\n\r\n        reductionInitial.autoClear = false;\r\n        reductionInitial.forceFullscreenViewport = forceFullscreenViewport;\r\n\r\n        let w = this._sourceTexture.getRenderWidth(),\r\n            h = this._sourceTexture.getRenderHeight();\r\n\r\n        reductionInitial.onApply = ((w: number, h: number) => {\r\n            return (effect: Effect) => {\r\n                effect.setTexture(\"sourceTexture\", this._sourceTexture);\r\n                effect.setFloat2(\"texSize\", w, h);\r\n            };\r\n        })(w, h);\r\n\r\n        this._reductionSteps.push(reductionInitial);\r\n\r\n        let index = 1;\r\n\r\n        // create the additional steps\r\n        while (w > 1 || h > 1) {\r\n            w = Math.max(Math.round(w / 2), 1);\r\n            h = Math.max(Math.round(h / 2), 1);\r\n\r\n            const reduction = new PostProcess(\r\n                \"Reduction phase \" + index,\r\n                \"minmaxRedux\", // shader\r\n                [\"texSize\"],\r\n                null,\r\n                { width: w, height: h }, // options\r\n                null, // camera\r\n                Constants.TEXTURE_NEAREST_NEAREST, // sampling\r\n                scene.getEngine(), // engine\r\n                false, // reusable\r\n                \"#define \" + (w == 1 && h == 1 ? \"LAST\" : w == 1 || h == 1 ? \"ONEBEFORELAST\" : \"MAIN\"), // defines\r\n                type,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                Constants.TEXTUREFORMAT_RG\r\n            );\r\n\r\n            reduction.autoClear = false;\r\n            reduction.forceFullscreenViewport = forceFullscreenViewport;\r\n\r\n            reduction.onApply = ((w: number, h: number) => {\r\n                return (effect: Effect) => {\r\n                    if (w == 1 || h == 1) {\r\n                        effect.setInt2(\"texSize\", w, h);\r\n                    } else {\r\n                        effect.setFloat2(\"texSize\", w, h);\r\n                    }\r\n                };\r\n            })(w, h);\r\n\r\n            this._reductionSteps.push(reduction);\r\n\r\n            index++;\r\n\r\n            if (w == 1 && h == 1) {\r\n                const func = (w: number, h: number, reduction: PostProcess) => {\r\n                    const buffer = new Float32Array(4 * w * h),\r\n                        minmax = { min: 0, max: 0 };\r\n                    return () => {\r\n                        scene.getEngine()._readTexturePixels(reduction.inputTexture.texture!, w, h, -1, 0, buffer, false);\r\n                        minmax.min = buffer[0];\r\n                        minmax.max = buffer[1];\r\n                        this.onAfterReductionPerformed.notifyObservers(minmax);\r\n                    };\r\n                };\r\n                reduction.onAfterRenderObservable.add(func(w, h, reduction));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines the refresh rate of the computation.\r\n     * Use 0 to compute just once, 1 to compute on every frame, 2 to compute every two frames and so on...\r\n     */\r\n    public get refreshRate(): number {\r\n        return this._sourceTexture ? this._sourceTexture.refreshRate : -1;\r\n    }\r\n\r\n    public set refreshRate(value: number) {\r\n        if (this._sourceTexture) {\r\n            this._sourceTexture.refreshRate = value;\r\n        }\r\n    }\r\n\r\n    protected _activated = false;\r\n\r\n    /**\r\n     * Gets the activation status of the reducer\r\n     */\r\n    public get activated(): boolean {\r\n        return this._activated;\r\n    }\r\n\r\n    /**\r\n     * Activates the reduction computation.\r\n     * When activated, the observers registered in onAfterReductionPerformed are\r\n     * called after the computation is performed\r\n     */\r\n    public activate(): void {\r\n        if (this._onAfterUnbindObserver || !this._sourceTexture) {\r\n            return;\r\n        }\r\n\r\n        this._onAfterUnbindObserver = this._sourceTexture.onAfterUnbindObservable.add(() => {\r\n            const engine = this._camera.getScene().getEngine();\r\n            engine._debugPushGroup?.(`min max reduction`, 1);\r\n            this._reductionSteps![0].activate(this._camera);\r\n            this._postProcessManager.directRender(this._reductionSteps!, this._reductionSteps![0].inputTexture, this._forceFullscreenViewport);\r\n            engine.unBindFramebuffer(this._reductionSteps![0].inputTexture, false);\r\n            engine._debugPopGroup?.(1);\r\n        });\r\n\r\n        this._activated = true;\r\n    }\r\n\r\n    /**\r\n     * Deactivates the reduction computation.\r\n     */\r\n    public deactivate(): void {\r\n        if (!this._onAfterUnbindObserver || !this._sourceTexture) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTexture.onAfterUnbindObservable.remove(this._onAfterUnbindObserver);\r\n        this._onAfterUnbindObserver = null;\r\n        this._activated = false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the min/max reducer\r\n     * @param disposeAll true to dispose all the resources. You should always call this function with true as the parameter (or without any parameter as it is the default one). This flag is meant to be used internally.\r\n     */\r\n    public dispose(disposeAll = true): void {\r\n        if (disposeAll) {\r\n            this.onAfterReductionPerformed.clear();\r\n\r\n            if (this._onContextRestoredObserver) {\r\n                this._camera.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n                this._onContextRestoredObserver = null;\r\n            }\r\n        }\r\n\r\n        this.deactivate();\r\n\r\n        if (this._reductionSteps) {\r\n            for (let i = 0; i < this._reductionSteps.length; ++i) {\r\n                this._reductionSteps[i].dispose();\r\n            }\r\n            this._reductionSteps = null;\r\n        }\r\n\r\n        if (this._postProcessManager && disposeAll) {\r\n            this._postProcessManager.dispose();\r\n        }\r\n\r\n        this._sourceTexture = null;\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"./ShadersInclude/packingFunctions\";\nimport \"./ShadersInclude/clipPlaneFragment\";\n\nconst name = \"depthPixelShader\";\nconst shader = `#ifdef ALPHATEST\nvarying vec2 vUV;\runiform sampler2D diffuseSampler;\r#endif\n#include<clipPlaneFragmentDeclaration>\nvarying float vDepthMetric;\r#ifdef PACKED\n#include<packingFunctions>\n#endif\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\r#include<clipPlaneFragment>\n#ifdef ALPHATEST\nif (texture2D(diffuseSampler,vUV).a<0.4)\rdiscard;\r#endif\n#ifdef NONLINEARDEPTH\n#ifdef PACKED\ngl_FragColor=pack(gl_FragCoord.z);\r#else\ngl_FragColor=vec4(gl_FragCoord.z,0.0,0.0,0.0);\r#endif\n#else\n#ifdef PACKED\ngl_FragColor=pack(vDepthMetric);\r#else\ngl_FragColor=vec4(vDepthMetric,0.0,0.0,1.0);\r#endif\n#endif\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const depthPixelShader = { name, shader };\n","import type { Nullable } from \"../types\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { MaterialHelper } from \"../Materials/materialHelper\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/depth.fragment\";\r\nimport \"../Shaders/depth.vertex\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\n\r\ndeclare type Material = import(\"../Materials/material\").Material;\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\n\r\n/**\r\n * This represents a depth renderer in Babylon.\r\n * A depth renderer will render to it's depth map every frame which can be displayed or used in post processing\r\n */\r\nexport class DepthRenderer {\r\n    private _scene: Scene;\r\n    private _depthMap: RenderTargetTexture;\r\n    private readonly _storeNonLinearDepth: boolean;\r\n    private readonly _clearColor: Color4;\r\n\r\n    /** Get if the depth renderer is using packed depth or not */\r\n    public readonly isPacked: boolean;\r\n\r\n    private _camera: Nullable<Camera>;\r\n\r\n    /** Enable or disable the depth renderer. When disabled, the depth texture is not updated */\r\n    public enabled = true;\r\n\r\n    /** Force writing the transparent objects into the depth map */\r\n    public forceDepthWriteTransparentMeshes = false;\r\n\r\n    /**\r\n     * Specifies that the depth renderer will only be used within\r\n     * the camera it is created for.\r\n     * This can help forcing its rendering during the camera processing.\r\n     */\r\n    public useOnlyInActiveCamera: boolean = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"DepthRendererSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Sets a specific material to be used to render a mesh/a list of meshes by the depth renderer\r\n     * @param mesh mesh or array of meshes\r\n     * @param material material to use by the depth render when rendering the mesh(es). If undefined is passed, the specific material created by the depth renderer will be used.\r\n     */\r\n    public setMaterialForRendering(mesh: AbstractMesh | AbstractMesh[], material?: Material): void {\r\n        this._depthMap.setMaterialForRendering(mesh, material);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a depth renderer\r\n     * @param scene The scene the renderer belongs to\r\n     * @param type The texture type of the depth map (default: Engine.TEXTURETYPE_FLOAT)\r\n     * @param camera The camera to be used to render the depth map (default: scene's active camera)\r\n     * @param storeNonLinearDepth Defines whether the depth is stored linearly like in Babylon Shadows or directly like glFragCoord.z\r\n     * @param samplingMode The sampling mode to be used with the render target (Linear, Nearest...)\r\n     */\r\n    constructor(\r\n        scene: Scene,\r\n        type: number = Constants.TEXTURETYPE_FLOAT,\r\n        camera: Nullable<Camera> = null,\r\n        storeNonLinearDepth = false,\r\n        samplingMode = Texture.TRILINEAR_SAMPLINGMODE\r\n    ) {\r\n        this._scene = scene;\r\n        this._storeNonLinearDepth = storeNonLinearDepth;\r\n        this.isPacked = type === Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        if (this.isPacked) {\r\n            this._clearColor = new Color4(1.0, 1.0, 1.0, 1.0);\r\n        } else {\r\n            this._clearColor = new Color4(1.0, 0.0, 0.0, 1.0);\r\n        }\r\n\r\n        DepthRenderer._SceneComponentInitialization(this._scene);\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        this._camera = camera;\r\n\r\n        if (samplingMode !== Texture.NEAREST_SAMPLINGMODE) {\r\n            if (type === Constants.TEXTURETYPE_FLOAT && !engine._caps.textureFloatLinearFiltering) {\r\n                samplingMode = Texture.NEAREST_SAMPLINGMODE;\r\n            }\r\n            if (type === Constants.TEXTURETYPE_HALF_FLOAT && !engine._caps.textureHalfFloatLinearFiltering) {\r\n                samplingMode = Texture.NEAREST_SAMPLINGMODE;\r\n            }\r\n        }\r\n\r\n        // Render target\r\n        const format = this.isPacked || !engine._features.supportExtendedTextureFormats ? Constants.TEXTUREFORMAT_RGBA : Constants.TEXTUREFORMAT_R;\r\n        this._depthMap = new RenderTargetTexture(\r\n            \"DepthRenderer\",\r\n            { width: engine.getRenderWidth(), height: engine.getRenderHeight() },\r\n            this._scene,\r\n            false,\r\n            true,\r\n            type,\r\n            false,\r\n            samplingMode,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            format\r\n        );\r\n        this._depthMap.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._depthMap.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._depthMap.refreshRate = 1;\r\n        this._depthMap.renderParticles = false;\r\n        this._depthMap.renderList = null;\r\n\r\n        // Camera to get depth map from to support multiple concurrent cameras\r\n        this._depthMap.activeCamera = this._camera;\r\n        this._depthMap.ignoreCameraViewport = true;\r\n        this._depthMap.useCameraPostProcesses = false;\r\n\r\n        // set default depth value to 1.0 (far away)\r\n        this._depthMap.onClearObservable.add((engine) => {\r\n            engine.clear(this._clearColor, true, true, true);\r\n        });\r\n\r\n        this._depthMap.onBeforeBindObservable.add(() => {\r\n            engine._debugPushGroup?.(\"depth renderer\", 1);\r\n        });\r\n\r\n        this._depthMap.onAfterUnbindObservable.add(() => {\r\n            engine._debugPopGroup?.(1);\r\n        });\r\n\r\n        this._depthMap.customIsReadyFunction = (mesh: AbstractMesh, refreshRate: number, preWarm?: boolean) => {\r\n            if ((preWarm || refreshRate === 0) && mesh.subMeshes) {\r\n                for (let i = 0; i < mesh.subMeshes.length; ++i) {\r\n                    const subMesh = mesh.subMeshes[i];\r\n                    const renderingMesh = subMesh.getRenderingMesh();\r\n\r\n                    const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n                    const hardwareInstancedRendering =\r\n                        engine.getCaps().instancedArrays &&\r\n                        ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\r\n\r\n                    if (!this.isReady(subMesh, hardwareInstancedRendering)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        // Custom render function\r\n        const renderSubMesh = (subMesh: SubMesh): void => {\r\n            const renderingMesh = subMesh.getRenderingMesh();\r\n            const effectiveMesh = subMesh.getEffectiveMesh();\r\n            const scene = this._scene;\r\n            const engine = scene.getEngine();\r\n            const material = subMesh.getMaterial();\r\n\r\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n\r\n            if (!material || effectiveMesh.infiniteDistance || material.disableDepthWrite || subMesh.verticesCount === 0 || subMesh._renderId === scene.getRenderId()) {\r\n                return;\r\n            }\r\n\r\n            // Culling\r\n            const detNeg = effectiveMesh._getWorldMatrixDeterminant() < 0;\r\n            let sideOrientation = renderingMesh.overrideMaterialSideOrientation ?? material.sideOrientation;\r\n            if (detNeg) {\r\n                sideOrientation =\r\n                    sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation\r\n                        ? Constants.MATERIAL_CounterClockWiseSideOrientation\r\n                        : Constants.MATERIAL_ClockWiseSideOrientation;\r\n            }\r\n            const reverseSideOrientation = sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation;\r\n\r\n            engine.setState(material.backFaceCulling, 0, false, reverseSideOrientation, material.cullBackFaces);\r\n\r\n            // Managing instances\r\n            const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n\r\n            if (batch.mustReturn) {\r\n                return;\r\n            }\r\n\r\n            const hardwareInstancedRendering =\r\n                engine.getCaps().instancedArrays &&\r\n                ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\r\n\r\n            const camera = this._camera || scene.activeCamera;\r\n            if (this.isReady(subMesh, hardwareInstancedRendering) && camera) {\r\n                subMesh._renderId = scene.getRenderId();\r\n\r\n                const renderingMaterial = effectiveMesh._internalAbstractMeshDataInfo._materialForRenderPass?.[engine.currentRenderPassId];\r\n\r\n                let drawWrapper = subMesh._getDrawWrapper();\r\n                if (!drawWrapper && renderingMaterial) {\r\n                    drawWrapper = renderingMaterial._getDrawWrapper();\r\n                }\r\n                const cameraIsOrtho = camera.mode === Camera.ORTHOGRAPHIC_CAMERA;\r\n\r\n                if (!drawWrapper) {\r\n                    return;\r\n                }\r\n\r\n                const effect = drawWrapper.effect!;\r\n\r\n                engine.enableEffect(drawWrapper);\r\n\r\n                if (!hardwareInstancedRendering) {\r\n                    renderingMesh._bind(subMesh, effect, material.fillMode);\r\n                }\r\n\r\n                if (!renderingMaterial) {\r\n                    effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n                    effect.setMatrix(\"world\", effectiveMesh.getWorldMatrix());\r\n                } else {\r\n                    renderingMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), effectiveMesh as Mesh, subMesh);\r\n                }\r\n\r\n                let minZ: number, maxZ: number;\r\n\r\n                if (cameraIsOrtho) {\r\n                    minZ = !engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n                    maxZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n                } else {\r\n                    minZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? camera.minZ : engine.isNDCHalfZRange ? 0 : camera.minZ;\r\n                    maxZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : camera.maxZ;\r\n                }\r\n\r\n                effect.setFloat2(\"depthValues\", minZ, minZ + maxZ);\r\n\r\n                if (!renderingMaterial) {\r\n                    // Alpha test\r\n                    if (material && material.needAlphaTesting()) {\r\n                        const alphaTexture = material.getAlphaTestTexture();\r\n\r\n                        if (alphaTexture) {\r\n                            effect.setTexture(\"diffuseSampler\", alphaTexture);\r\n                            effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\r\n                        }\r\n                    }\r\n\r\n                    // Bones\r\n                    if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\r\n                        const skeleton = renderingMesh.skeleton;\r\n\r\n                        if (skeleton.isUsingTextureForMatrices) {\r\n                            const boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\r\n                            if (!boneTexture) {\r\n                                return;\r\n                            }\r\n\r\n                            effect.setTexture(\"boneSampler\", boneTexture);\r\n                            effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\r\n                        } else {\r\n                            effect.setMatrices(\"mBones\", skeleton.getTransformMatrices(renderingMesh));\r\n                        }\r\n                    }\r\n\r\n                    // Clip planes\r\n                    MaterialHelper.BindClipPlane(effect, scene);\r\n\r\n                    // Morph targets\r\n                    MaterialHelper.BindMorphTargetParameters(renderingMesh, effect);\r\n                    if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\r\n                        renderingMesh.morphTargetManager._bind(effect);\r\n                    }\r\n                }\r\n\r\n                // Draw\r\n                renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, world) =>\r\n                    effect.setMatrix(\"world\", world)\r\n                );\r\n            }\r\n        };\r\n\r\n        this._depthMap.customRenderFunction = (\r\n            opaqueSubMeshes: SmartArray<SubMesh>,\r\n            alphaTestSubMeshes: SmartArray<SubMesh>,\r\n            transparentSubMeshes: SmartArray<SubMesh>,\r\n            depthOnlySubMeshes: SmartArray<SubMesh>\r\n        ): void => {\r\n            let index;\r\n\r\n            if (depthOnlySubMeshes.length) {\r\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\r\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\r\n                }\r\n            }\r\n\r\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\r\n                renderSubMesh(opaqueSubMeshes.data[index]);\r\n            }\r\n\r\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\r\n                renderSubMesh(alphaTestSubMeshes.data[index]);\r\n            }\r\n\r\n            if (this.forceDepthWriteTransparentMeshes) {\r\n                for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                    renderSubMesh(transparentSubMeshes.data[index]);\r\n                }\r\n            } else {\r\n                for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                    transparentSubMeshes.data[index].getEffectiveMesh()._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates the depth rendering effect and checks if the effect is ready.\r\n     * @param subMesh The submesh to be used to render the depth map of\r\n     * @param useInstances If multiple world instances should be used\r\n     * @returns if the depth renderer is ready to render the depth map\r\n     */\r\n    public isReady(subMesh: SubMesh, useInstances: boolean): boolean {\r\n        const engine = this._scene.getEngine();\r\n        const mesh = subMesh.getMesh();\r\n        const scene = mesh.getScene();\r\n\r\n        const renderingMaterial = mesh._internalAbstractMeshDataInfo._materialForRenderPass?.[engine.currentRenderPassId];\r\n\r\n        if (renderingMaterial) {\r\n            return renderingMaterial.isReadyForSubMesh(mesh, subMesh, useInstances);\r\n        }\r\n\r\n        const material = subMesh.getMaterial();\r\n        if (!material || material.disableDepthWrite) {\r\n            return false;\r\n        }\r\n\r\n        const defines = [];\r\n\r\n        const attribs = [VertexBuffer.PositionKind];\r\n\r\n        // Alpha test\r\n        if (material && material.needAlphaTesting() && material.getAlphaTestTexture()) {\r\n            defines.push(\"#define ALPHATEST\");\r\n            if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n                defines.push(\"#define UV1\");\r\n            }\r\n            if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n                defines.push(\"#define UV2\");\r\n            }\r\n        }\r\n\r\n        // Bones\r\n        if (mesh.useBones && mesh.computeBonesUsingShaders) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            defines.push(\"#define BonesPerMesh \" + (mesh.skeleton ? mesh.skeleton.bones.length + 1 : 0));\r\n\r\n            const skeleton = subMesh.getRenderingMesh().skeleton;\r\n\r\n            if (skeleton?.isUsingTextureForMatrices) {\r\n                defines.push(\"#define BONETEXTURE\");\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph targets\r\n        const morphTargetManager = (mesh as Mesh).morphTargetManager;\r\n        let numMorphInfluencers = 0;\r\n        if (morphTargetManager) {\r\n            if (morphTargetManager.numInfluencers > 0) {\r\n                numMorphInfluencers = morphTargetManager.numInfluencers;\r\n\r\n                defines.push(\"#define MORPHTARGETS\");\r\n                defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numMorphInfluencers);\r\n\r\n                if (morphTargetManager.isUsingTextureForTargets) {\r\n                    defines.push(\"#define MORPHTARGETS_TEXTURE\");\r\n                }\r\n\r\n                MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, numMorphInfluencers);\r\n            }\r\n        }\r\n\r\n        // Instances\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            MaterialHelper.PushAttributesForInstances(attribs);\r\n            if (subMesh.getRenderingMesh().hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n            }\r\n        }\r\n\r\n        // None linear depth\r\n        if (this._storeNonLinearDepth) {\r\n            defines.push(\"#define NONLINEARDEPTH\");\r\n        }\r\n\r\n        // Float Mode\r\n        if (this.isPacked) {\r\n            defines.push(\"#define PACKED\");\r\n        }\r\n\r\n        // Clip planes\r\n        if (scene.clipPlane) {\r\n            defines.push(\"#define CLIPPLANE\");\r\n        }\r\n\r\n        if (scene.clipPlane2) {\r\n            defines.push(\"#define CLIPPLANE2\");\r\n        }\r\n\r\n        if (scene.clipPlane3) {\r\n            defines.push(\"#define CLIPPLANE3\");\r\n        }\r\n\r\n        if (scene.clipPlane4) {\r\n            defines.push(\"#define CLIPPLANE4\");\r\n        }\r\n\r\n        if (scene.clipPlane5) {\r\n            defines.push(\"#define CLIPPLANE5\");\r\n        }\r\n\r\n        if (scene.clipPlane6) {\r\n            defines.push(\"#define CLIPPLANE6\");\r\n        }\r\n\r\n        // Get correct effect\r\n        const drawWrapper = subMesh._getDrawWrapper(undefined, true)!;\r\n        const cachedDefines = drawWrapper.defines;\r\n        const join = defines.join(\"\\n\");\r\n        if (cachedDefines !== join) {\r\n            drawWrapper.setEffect(\r\n                engine.createEffect(\r\n                    \"depth\",\r\n                    attribs,\r\n                    [\r\n                        \"world\",\r\n                        \"mBones\",\r\n                        \"boneTextureWidth\",\r\n                        \"viewProjection\",\r\n                        \"diffuseMatrix\",\r\n                        \"depthValues\",\r\n                        \"morphTargetInfluences\",\r\n                        \"morphTargetTextureInfo\",\r\n                        \"morphTargetTextureIndices\",\r\n                        \"vClipPlane\",\r\n                        \"vClipPlane2\",\r\n                        \"vClipPlane3\",\r\n                        \"vClipPlane4\",\r\n                        \"vClipPlane5\",\r\n                        \"vClipPlane6\",\r\n                    ],\r\n                    [\"diffuseSampler\", \"morphTargets\", \"boneSampler\"],\r\n                    join,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    { maxSimultaneousMorphTargets: numMorphInfluencers }\r\n                ),\r\n                join\r\n            );\r\n        }\r\n\r\n        return drawWrapper.effect!.isReady();\r\n    }\r\n\r\n    /**\r\n     * Gets the texture which the depth map will be written to.\r\n     * @returns The depth map texture\r\n     */\r\n    public getDepthMap(): RenderTargetTexture {\r\n        return this._depthMap;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the depth renderer.\r\n     */\r\n    public dispose(): void {\r\n        const keysToDelete = [];\r\n        for (const key in this._scene._depthRenderer) {\r\n            const depthRenderer = this._scene._depthRenderer[key];\r\n            if (depthRenderer === this) {\r\n                keysToDelete.push(key);\r\n            }\r\n        }\r\n\r\n        if (keysToDelete.length > 0) {\r\n            this._depthMap.dispose();\r\n\r\n            for (const key of keysToDelete) {\r\n                delete this._scene._depthRenderer[key];\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/bonesDeclaration\";\nimport \"./ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"./ShadersInclude/instancesDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobal\";\nimport \"./ShadersInclude/morphTargetsVertex\";\nimport \"./ShadersInclude/instancesVertex\";\nimport \"./ShadersInclude/bonesVertex\";\nimport \"./ShadersInclude/bakedVertexAnimation\";\nimport \"./ShadersInclude/clipPlaneVertex\";\n\nconst name = \"depthVertexShader\";\nconst shader = `attribute vec3 position;\r#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#include<clipPlaneVertexDeclaration>\n#include<instancesDeclaration>\nuniform mat4 viewProjection;\runiform vec2 depthValues;\r#if defined(ALPHATEST) || defined(NEED_UV)\nvarying vec2 vUV;\runiform mat4 diffuseMatrix;\r#ifdef UV1\nattribute vec2 uv;\r#endif\n#ifdef UV2\nattribute vec2 uv2;\r#endif\n#endif\nvarying float vDepthMetric;\r#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\r{\rvec3 positionUpdated=position;\r#ifdef UV1\nvec2 uvUpdated=uv;\r#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(positionUpdated,1.0);\r#include<clipPlaneVertex>\ngl_Position=viewProjection*worldPos;\r#ifdef USE_REVERSE_DEPTHBUFFER\nvDepthMetric=((-gl_Position.z+depthValues.x)/(depthValues.y));\r#else\nvDepthMetric=((gl_Position.z+depthValues.x)/(depthValues.y));\r#endif\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\n#ifdef UV1\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\r#endif\n#ifdef UV2\nvUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\r#endif\n#endif\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const depthVertexShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/shadowMapFragmentExtraDeclaration\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"./ShadersInclude/clipPlaneFragment\";\nimport \"./ShadersInclude/shadowMapFragment\";\n\nconst name = \"shadowMapPixelShader\";\nconst shader = `#include<shadowMapFragmentExtraDeclaration>\n#ifdef ALPHATEST\nvarying vec2 vUV;\runiform sampler2D diffuseSampler;\r#endif\n#include<clipPlaneFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\r#include<clipPlaneFragment>\n#ifdef ALPHATEST\nfloat alphaFromAlphaTexture=texture2D(diffuseSampler,vUV).a;\rif (alphaFromAlphaTexture<ALPHATESTVALUE)\rdiscard;\r#endif\n#if SM_SOFTTRANSPARENTSHADOW==1\n#ifdef ALPHATEST\nif ((bayerDither8(floor(mod(gl_FragCoord.xy,8.0))))/64.0>=softTransparentShadowSM*alphaFromAlphaTexture) discard;\r#else\nif ((bayerDither8(floor(mod(gl_FragCoord.xy,8.0))))/64.0>=softTransparentShadowSM) discard;\r#endif\n#endif\n#include<shadowMapFragment>\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nimport \"./sceneVertexDeclaration\";\nimport \"./meshVertexDeclaration\";\n\nconst name = \"shadowMapVertexDeclaration\";\nconst shader = `#include<sceneVertexDeclaration>\n#include<meshVertexDeclaration>\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapVertexDeclaration = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/bonesDeclaration\";\nimport \"./ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/shadowMapVertexDeclaration\";\nimport \"./ShadersInclude/shadowMapUboDeclaration\";\nimport \"./ShadersInclude/shadowMapVertexExtraDeclaration\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobal\";\nimport \"./ShadersInclude/morphTargetsVertex\";\nimport \"./ShadersInclude/instancesVertex\";\nimport \"./ShadersInclude/bonesVertex\";\nimport \"./ShadersInclude/bakedVertexAnimation\";\nimport \"./ShadersInclude/shadowMapVertexNormalBias\";\nimport \"./ShadersInclude/shadowMapVertexMetric\";\nimport \"./ShadersInclude/clipPlaneVertex\";\n\nconst name = \"shadowMapVertexShader\";\nconst shader = `attribute vec3 position;\r#ifdef NORMAL\nattribute vec3 normal;\r#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#ifdef INSTANCES\nattribute vec4 world0;\rattribute vec4 world1;\rattribute vec4 world2;\rattribute vec4 world3;\r#endif\n#include<helperFunctions>\n#include<__decl__shadowMapVertex>\n#ifdef ALPHATEST\nvarying vec2 vUV;\runiform mat4 diffuseMatrix;\r#ifdef UV1\nattribute vec2 uv;\r#endif\n#ifdef UV2\nattribute vec2 uv2;\r#endif\n#endif\n#include<shadowMapVertexExtraDeclaration>\n#include<clipPlaneVertexDeclaration>\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\r{\rvec3 positionUpdated=position;\r#ifdef UV1\nvec2 uvUpdated=uv;\r#endif\n#ifdef NORMAL\nvec3 normalUpdated=normal;\r#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(positionUpdated,1.0);\r#ifdef NORMAL\nmat3 normWorldSM=mat3(finalWorld);\r#if defined(INSTANCES) && defined(THIN_INSTANCES)\nvec3 vNormalW=normalUpdated/vec3(dot(normWorldSM[0],normWorldSM[0]),dot(normWorldSM[1],normWorldSM[1]),dot(normWorldSM[2],normWorldSM[2]));\rvNormalW=normalize(normWorldSM*vNormalW);\r#else\n#ifdef NONUNIFORMSCALING\nnormWorldSM=transposeMat3(inverseMat3(normWorldSM));\r#endif\nvec3 vNormalW=normalize(normWorldSM*normalUpdated);\r#endif\n#endif\n#include<shadowMapVertexNormalBias>\ngl_Position=viewProjection*worldPos;\r#include<shadowMapVertexMetric>\n#ifdef ALPHATEST\n#ifdef UV1\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\r#endif\n#ifdef UV2\nvUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\r#endif\n#endif\n#include<clipPlaneVertex>\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapVertexShader = { name, shader };\n"],"names":["UpDir","ZeroVec","tmpv1","tmpv2","tmpMatrix","CascadedShadowGenerator","constructor","mapSize","light","usefulFloatFirst","IsSupported","super","this","usePercentageCloserFiltering","_validateFilter","filter","console","error","numCascades","_numCascades","value","Math","min","max","MIN_CASCADES_COUNT","MAX_CASCADES_COUNT","recreateShadowMap","_recreateSceneUBOs","freezeShadowCastersBoundingInfo","_freezeShadowCastersBoundingInfo","freeze","_freezeShadowCastersBoundingInfoObservable","_scene","onBeforeRenderObservable","remove","add","_computeShadowCastersBoundingInfo","bind","_scbiMin","copyFromFloats","Number","MAX_VALUE","_scbiMax","MIN_VALUE","_shadowMap","renderList","meshIndex","length","mesh","boundingBox","getBoundingInfo","minimizeInPlace","minimumWorld","maximizeInPlace","maximumWorld","meshes","isVisible","isEnabled","receiveShadows","_shadowCastersBoundingInfo","reConstruct","shadowCastersBoundingInfo","boundingInfo","setMinMaxDistance","_minDistance","_maxDistance","_breaksAreDirty","minDistance","maxDistance","getClassName","CLASSNAME","getCascadeMinExtents","cascadeIndex","_cascadeMinExtents","getCascadeMaxExtents","_cascadeMaxExtents","shadowMaxZ","activeCamera","_shadowMaxZ","minZ","maxZ","_light","_markMeshesAsLightDirty","debug","_debug","dbg","depthClamp","_depthClamp","cascadeBlendPercentage","_cascadeBlendPercentage","lambda","_lambda","getCascadeViewMatrix","cascadeNum","_viewMatrices","getCascadeProjectionMatrix","_projectionMatrices","getCascadeTransformMatrix","_transformMatrices","setDepthRenderer","depthRenderer","_depthRenderer","_depthReducer","autoCalcDepthBounds","_autoCalcDepthBounds","camera","deactivate","onAfterReductionPerformed","minmax","activate","autoCalcDepthBoundsRefreshRate","getDepthMap","refreshRate","splitFrustum","_splitFrustum","near","far","cameraRange","range","ratio","_cascades","p","log","uniform","d","prevBreakDistance","breakDistance","_viewSpaceFrustumsZ","_frustumLengths","_computeMatrices","scene","getShadowDirection","_lightDirection","abs","z","_cachedDirection","copyFrom","useReverseDepthBuffer","getEngine","_computeFrustumInWorldSpace","_computeCascadeFrustum","subtractToRef","_frustumCenter","addToRef","scale","_shadowCameraPos","update","x","y","isNDCHalfZRange","multiplyToRef","scaleInPlace","_mapSize","round","subtractInPlace","copyToArray","_transformMatricesAsArray","prevSplitDist","splitDist","getViewMatrix","invViewProj","getTransformationMatrix","cornerIndexOffset","cornerIndex","_FrustumCornersNDCSpace","_frustumCornersWorldSpace","addInPlace","stabilizeCascades","sphereRadius","dist","ceil","lightCameraPos","_disposeSceneUBOs","_sceneUBOs","i","push","createSceneUniformBuffer","name","engine","_features","supportCSM","_initializeGenerator","penumbraDarkness","DEFAULT_CASCADES_COUNT","_currentLayer","_createTargetRenderTexture","size","width","height","layers","_textureType","undefined","createDepthStencilTexture","_initializeShadowMap","Float32Array","Array","_lightSizeUVCorrection","_depthCorrection","onBeforeBindObservable","clear","layer","setSceneUniformBuffer","_filter","setColorWrite","setTransformMatrix","_useUBO","getSceneUniformBuffer","unbindEffect","finalizeSceneUbo","_currentSceneUBO","_debugPushGroup","currentRenderPassId","_bindCustomEffectForRenderSubMeshForShadowMap","subMesh","effect","setMatrix","_isReadyCustomDefines","defines","prepareDefines","lightIndex","shadowsEnabled","shadowEnabled","useRightHandedSystem","bindShadowLight","shadowMap","getShadowMap","getSize","setMatrices","setArray","setFloat","setDepthStencilTexture","_uniformBuffer","updateFloat4","getDarkness","frustumEdgeFalloff","setTexture","setArray2","_contactHardeningLightSizeUVRatio","updateFloat2","getLight","getDepthMinZ","getDepthMaxZ","getTransformMatrix","dispose","serialize","serializationObject","id","static","parsedShadowGenerator","shadowGenerator","_SceneComponentInitialization","_","_currentFaceIndex","_shadowMap2","_kernelBlurXPostprocess","autoClear","packedFloat","_boxBlurPostprocess","shadowDepthWrapper","renderingMesh","morphTargetManager","effectiveMesh","onCompiled","attribs","cachedDefines","uniforms","samplers","_kernelBlurYPostprocess"],"sourceRoot":""}